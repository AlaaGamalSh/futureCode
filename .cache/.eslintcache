[{"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\index.js":"1","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\App.js":"2","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\reportWebVitals.js":"3","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\i18n.js":"4","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\store.js":"5","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\JwtContext.js":"6","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\index.js":"7","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scroll-to-top\\index.js":"8","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\config.js":"9","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\rootReducer.js":"10","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\utils.js":"11","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\index.js":"12","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\axios.js":"13","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\langs\\ar.js":"14","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\langs\\en.js":"15","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\routes\\index.js":"16","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\index.js":"17","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\chart\\index.js":"18","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeSettings.js":"19","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\SettingsContext.js":"20","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scroll-to-top\\ScrollToTop.js":"21","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\useLocales.js":"22","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\toastMessage.js":"23","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\authentication.js":"24","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employeeBranches.js":"25","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\adminHelp.js":"26","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employeeFacility.js":"27","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\adminProfile.js":"28","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employeeOrders.js":"29","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\routes\\paths.js":"30","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\ThemeLocalization.js":"31","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\resturants.js":"32","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\market.js":"33","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\branches.js":"34","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\orders.js":"35","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\performance.js":"36","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\rank.js":"37","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\withdrawMeeting.js":"38","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employees.js":"39","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\branchMarket.js":"40","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\finance.js":"41","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\control.js":"42","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\users.js":"43","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\countries.js":"44","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\customShadows.js":"45","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\routes\\elements.js":"46","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\typography.js":"47","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\AuthAdminGuard.js":"48","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\shadows.js":"49","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\AuthEmployeeGuard.js":"50","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\palette.js":"51","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\menuRestaurant.js":"52","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\globalStyles.js":"53","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\chart\\styles.js":"54","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeColorPresets.js":"55","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\chart\\useChart.js":"56","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeRtlLayout.js":"57","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\config.js":"58","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\presets.js":"59","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeContrast.js":"60","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useLocalStorage.js":"61","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\EmployeeDashboardLayout.js":"62","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\DashboardLayout.js":"63","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\index.js":"64","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\auth_service.js":"65","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_help_service.js":"66","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\employee_pending_orders_service.js":"67","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\employee_facility_service.js":"68","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_profile_service.js":"69","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_lowest_rated_branch_service.js":"70","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_restaurant_chain_review_service.js":"71","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\rank_service.js":"72","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\restaurant_service.js":"73","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\markets_service.js":"74","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\get_resturant_admins_service.js":"75","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\add_withdraw_meeting_service.js":"76","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\performance_service.js":"77","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\branch_market_service.js":"78","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\orders_service.js":"79","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\users_service.js":"80","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\countries_service.js":"81","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\finance_service.js":"82","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\useAuthContext.js":"83","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\VerificationPasswordCode.js":"84","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditMealPage.js":"85","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddComboMeal.js":"86","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditSingleMealPage.js":"87","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\NewPasswordLoginPage.js":"88","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddNewMealPage.js":"89","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\MealDetailsPage.js":"90","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditComboOfferPage.js":"91","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\ConfirmationCodePage.js":"92","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\ResetPasswordPage.js":"93","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\PaymentFormPage.js":"94","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddNewCategoryPage.js":"95","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddNewDiscountOffer.js":"96","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\MenuFirstPage.js":"97","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditCategoryPage.js":"98","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\users\\AddNewEmployee.js":"99","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\users\\EdiEmployeeInfoPage.js":"100","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\PreviewMarketProductPage.js":"101","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\AddMarketSubCategoryPage.js":"102","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\users\\EmployeePage.js":"103","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\AddMarketProductPage.js":"104","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\EditMarketSubCategoryPage.js":"105","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\AddMarketCategoryPage.js":"106","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\MarketMenuPage.js":"107","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\opportunityPages\\PromoteNowPage.js":"108","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\opportunityPages\\OpportunityCenterPage.js":"109","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\VerifyEmailPage.js":"110","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ChangePhonePage.js":"111","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ChangeEmailPage.js":"112","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\helpPages\\HelpCPage.js":"113","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\EditMarketProduct.js":"114","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ChangePasswordPage.js":"115","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\contactUsPages\\ContactUsCPage.js":"116","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ProfileCPage.js":"117","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\EditProfileInfoPage.js":"118","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\userPages\\UsersCPage.js":"119","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\userPages\\EditUserInfoCPage.js":"120","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\userPages\\AddNewUserCPage.js":"121","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\TransFerCashPage.js":"122","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\WithdrawCashPage.js":"123","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\FinanceInvoicesPage.js":"124","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\performance\\PerformancePage.js":"125","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-dashboard\\NewBranchStatusPage.js":"126","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\order\\OrderPage.js":"127","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-dashboard\\BranchDashboardPage.js":"128","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-info\\EditBranchInfoPage.js":"129","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-info\\BranchInformationPage.js":"130","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\EmployeeFinancePage.js":"131","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\rank\\RankPage.js":"132","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\finance\\WithdrawCashPage.js":"133","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\finance\\TransferCashPage.js":"134","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\profile\\EditEmployeeProfile.js":"135","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\finance\\FinancePage.js":"136","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\performance\\MostSellingCitiesPage.js":"137","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\cssStyles.js":"138","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\RestaurantFormPage.js":"139","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\AddWorkingDaysPage.js":"140","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\performance\\HighestIcomeBranchesPage.js":"141","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\performance\\PerformancePage.js":"142","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\BranchInformationForAdminPage.js":"143","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\overview\\OverViewPageTwo.js":"144","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\AddNewBranchPage.js":"145","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\EditBranchPage.js":"146","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\BranchesListPage.js":"147","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\overview\\OverViewPage.js":"148","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\overview\\OverView.js":"149","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\profile\\EditAdminProfile.js":"150","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\LoginPage.js":"151","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\RegisterPage.js":"152","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\menu_restaurant_service.js":"153","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loading-screen\\index.js":"154","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useResponsive.js":"155","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\Main.js":"156","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\Main.js":"157","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\NavVertical.js":"158","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\NavHorizontal.js":"159","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\NavMini.js":"160","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Tabs.js":"161","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Accordion.js":"162","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Chip.js":"163","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Table.js":"164","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Input.js":"165","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Badge.js":"166","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Drawer.js":"167","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Avatar.js":"168","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Dialog.js":"169","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Radio.js":"170","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Button.js":"171","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Switch.js":"172","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Slider.js":"173","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Rating.js":"174","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Tooltip.js":"175","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\SvgIcon.js":"176","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Select.js":"177","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Popover.js":"178","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\urls.js":"179","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\NavVertical.js":"180","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\NavHorizontal.js":"181","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\NavMini.js":"182","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Skeleton.js":"183","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Stepper.js":"184","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Backdrop.js":"185","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Checkbox.js":"186","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Breadcrumbs.js":"187","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\DatePicker.js":"188","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Typography.js":"189","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\ButtonGroup.js":"190","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\ToggleButton.js":"191","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\LoadingButton.js":"192","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\index.js":"193","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\index.js":"194","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\auth\\ImageSection.js":"195","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\FormProvider.js":"196","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\breadCrumbs\\BreadCrumbs.js":"197","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\index.js":"198","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\image\\Image.js":"199","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\index.js":"200","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\Iconify.js":"201","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-datepicker\\CustomDatePicker.js":"202","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-stepper\\index.js":"203","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingCards.js":"204","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFMuiOtpInput.js":"205","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\auth\\details\\ChangeLanguageBox.js":"206","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\auth\\Modal\\RequestSendedSuccessfully.js":"207","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\branch-info\\HighestMealCard.js":"208","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\branch-info\\HighestSellingMeal.js":"209","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\details\\DeleteItemPopUp.js":"210","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\details\\ConfirmAddMealModal.js":"211","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\users\\detailes\\UserAddSuccessfully.js":"212","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\CategoriesList.js":"213","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\MenuList.js":"214","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\market\\HighestItemCard.js":"215","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\OffersList.js":"216","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\details\\DiscardDialog.js":"217","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\users\\detailes\\AddUserModal.js":"218","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\opportunity\\PlanCard.js":"219","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketCategoryList.js":"220","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketSubCategoryList.js":"221","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\opportunityPages\\PromoteDetailsSection.js":"222","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\EmployeeList.js":"223","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\Faqs.js":"224","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\UserList.js":"225","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketProductList.js":"226","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\MyMeeting.js":"227","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\MyQuestions.js":"228","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\PrivacyPolicy.js":"229","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\TermsConditions.js":"230","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\LegalUpdates.js":"231","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\details\\HelpHeader.js":"232","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\InboxSection.js":"233","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\SendInquiry.js":"234","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\EditConfirmDialog.js":"235","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\ConfirmDialog.js":"236","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\profilePages\\ProtectionSection.js":"237","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\spinner\\Spinner.js":"238","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\profilePages\\ProfileInformationSection.js":"239","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\HighestIncomBranch.js":"240","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\LocationModal.js":"241","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\finance\\NetBalanceCard.js":"242","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\profile\\ProfileCard.js":"243","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceListInvoices.js":"244","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\finance\\RatedFinanceCard.js":"245","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\performance\\PerformanceChartsSection.js":"246","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\BranchLineChartSection.js":"247","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\AdminCard.js":"248","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loading-screen\\LoadingScreen.js":"249","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\MealsAndReviewsSection.js":"250","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\PendingOrdersList.js":"251","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\DountChartCard\\DountChartCard2.js":"252","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\OrderDetailTable.js":"253","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceList.js":"254","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\OrdersListSection.js":"255","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\OrdersChartsSection.js":"256","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\BranchInfoSection.js":"257","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\ChartFinance.js":"258","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\BranchReviewsSection.js":"259","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\BranchAnalysisSection.js":"260","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\finance\\ChartFinance.js":"261","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\finance\\FinanceList.js":"262","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\rank\\RatedBranchCard.js":"263","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\rank\\RankingBranchesList.js":"264","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\BestSellingBranchesSection.js":"265","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\ContactUsHeader.js":"266","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\HighestIcomeChart.js":"267","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\PerformanceChartsSection.js":"268","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\NewBranchesSection.js":"269","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchesSection.js":"270","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\details\\BranchInfoHeader.js":"271","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\rank\\details\\LowestRate.js":"272","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\details\\BranchIcomIngCard2.js":"273","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\ChartsRow.js":"274","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\list\\pending\\AllBranchesSection.js":"275","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\list\\pending\\NewBranchwsSection.js":"276","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\config.js":"277","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\CustomIcons.js":"278","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scrollbar\\index.js":"279","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\logo\\index.js":"280","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\index.js":"281","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\config.js":"282","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\config.js":"283","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\Header.js":"284","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\Header.js":"285","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFSwitch.js":"286","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFCheckbox.js":"287","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFCodes.js":"288","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\image\\getRatio.js":"289","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFTextField.js":"290","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFAutocomplete.js":"291","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\CustomAlert.js":"292","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFRadioGroup.js":"293","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFSlider.js":"294","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\Calender.js":"295","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFSelect.js":"296","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-stepper\\CustomStepper.js":"297","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\CustomConfirmDialog.js":"298","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingTableRows.js":"299","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\MenuRestaurentPagination.js":"300","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OffersRestaurentsPgination.js":"301","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TablePaginationCustomized.js":"302","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\details\\Header.js":"303","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\index.js":"304","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\MarketSubCategoryPagination.js":"305","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\MenuTableRow.js":"306","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\CategoryTableRow.js":"307","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\OfferTableRow.js":"308","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketCategoryTableRow.js":"309","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\details\\Header.js":"310","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketSubCategoryTableRow.js":"311","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\index.js":"312","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableTopSection.js":"313","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\EmployeePagination.js":"314","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\UsersPagination.js":"315","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingAccordion.js":"316","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\ProductPagination.js":"317","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\index.js":"318","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\EmployeeTableRow.js":"319","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\UserTableRow.js":"320","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketProductTableRow.js":"321","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\details\\MeetingInfo.js":"322","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\SearchBar.js":"323","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\BoxColumn.js":"324","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\LocationSearch.js":"325","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\CustomCalender.js":"326","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceTableRowInvoice.js":"327","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingCharts.js":"328","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\RecentReviewsPagination.js":"329","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OrdersPendingPagination.js":"330","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\MostSellingPagination.js":"331","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingVertical.js":"332","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\FinancePagination.js":"333","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\index.js":"334","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OrdersPagination.js":"335","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableHeadCustom2.js":"336","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\EmployeeFinancePagination.js":"337","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\RankPagination.js":"338","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OverViewPendingBranches.js":"339","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-datepicker\\SpecialDatePicker.js":"340","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OverViewAllBranchesPagination.js":"341","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\progress-bar\\index.js":"342","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceTableRow.js":"343","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\BranchLineChart2.js":"344","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\DountChartCard\\DountChartCard.js":"345","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\finance\\FinanceTableRow.js":"346","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\profilePages\\details\\PaymentCard.js":"347","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchDetails.js":"348","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\details\\PendingOrdersTableRow.js":"349","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\details\\SellingMealsCard.js":"350","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\details\\OrdersTableRow.js":"351","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\details\\OrderDetailTableRow.js":"352","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\details\\EditWorkingDaysModal.js":"353","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\rank\\details\\RankTableRow.js":"354","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\details\\BranchIncomingCard.js":"355","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\TableTopSection2.js":"356","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\NewBranchTableRow.js":"357","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\NewBranchTableRow2.js":"358","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\details\\NewBranchTableRow.js":"359","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\details\\BranchTableRow.js":"360","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\logo\\Logo.js":"361","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scrollbar\\Scrollbar.js":"362","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useOffSetTop.js":"363","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\NotificationsPopover.js":"364","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\Searchbar.js":"365","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\image\\index.js":"366","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\svg-color\\index.js":"367","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\index.js":"368","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\NotificationsPopover.js":"369","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\Searchbar.js":"370","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\index.js":"371","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\index.js":"372","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\vertical\\index.js":"373","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useEventListener.js":"374","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\TextAnimate.js":"375","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\FabButtonAnimate.js":"376","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\DialogAnimate.js":"377","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\IconButtonAnimate.js":"378","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\MotionLazyContainer.js":"379","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\MotionContainer.js":"380","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\MotionViewport.js":"381","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\utils.js":"382","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\useTable.js":"383","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableNoData.js":"384","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableEmptyRows.js":"385","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableSkeleton.js":"386","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableHeadCustom.js":"387","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableSelectedAction.js":"388","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TablePaginationCustom.js":"389","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_user.js":"390","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_app.js":"391","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_files.js":"392","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_plans.js":"393","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_invoice.js":"394","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_others.js":"395","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_banking.js":"396","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_booking.js":"397","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_ecommerce.js":"398","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_branches.js":"399","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_opportunities.js":"400","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_analytics.js":"401","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_operations.js":"402","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\UserInfoDialog.js":"403","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\index.js":"404","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\BoxItem.js":"405","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\details\\BookMeeting.js":"406","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\formatTime.js":"407","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\progress-bar\\ProgressBar.js":"408","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\progress-bar\\styles.js":"409","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scrollbar\\styles.js":"410","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchReview.js":"411","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchAnalysis.js":"412","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchInfo.js":"413","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\svg-color\\SvgColor.js":"414","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\MenuPopover.js":"415","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\NavSectionHorizontal.js":"416","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\vertical\\NavSectionVertical.js":"417","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\NavSectionMini.js":"418","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\features.js":"419","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\_mock.js":"420","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\utils.js":"421","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\CustomAlert2.js":"422","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\empty-content\\index.js":"423","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\path.js":"424","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\fade.js":"425","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\zoom.js":"426","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\slide.js":"427","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\flip.js":"428","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\scale.js":"429","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\rotate.js":"430","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\container.js":"431","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\bounce.js":"432","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\actions.js":"433","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\background.js":"434","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\transition.js":"435","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\datePicker\\Calender.js":"436","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\details\\BranchLineChart.js":"437","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\getPosition.js":"438","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\styles.js":"439","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\NavList.js":"440","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\vertical\\styles.js":"441","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\NavList.js":"442","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\status.js":"443","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\index.js":"444","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\empty-content\\EmptyContent.js":"445","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useActiveLink.js":"446","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\styles.js":"447","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\NavItem.js":"448","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\styles.js":"449","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\NavItem.js":"450","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\name.js":"451","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\text.js":"452","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\role.js":"453","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\number.js":"454","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\email.js":"455","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\address.js":"456","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\boolean.js":"457","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\company.js":"458","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\phoneNumber.js":"459","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\brancheName.js":"460","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\statusValue.js":"461"},{"size":2266,"mtime":1684393791560,"results":"462","hashOfConfig":"463"},{"size":540,"mtime":1693722660344,"results":"464","hashOfConfig":"463"},{"size":362,"mtime":1677661233790,"results":"465","hashOfConfig":"463"},{"size":877,"mtime":1673096397756,"results":"466","hashOfConfig":"463"},{"size":825,"mtime":1674586151481,"results":"467","hashOfConfig":"463"},{"size":5875,"mtime":1693722660349,"results":"468","hashOfConfig":"463"},{"size":138,"mtime":1673096397731,"results":"469","hashOfConfig":"463"},{"size":42,"mtime":1673096397696,"results":"470","hashOfConfig":"463"},{"size":542,"mtime":1677719123315,"results":"471","hashOfConfig":"463"},{"size":3778,"mtime":1693722660496,"results":"472","hashOfConfig":"463"},{"size":1944,"mtime":1693722660350,"results":"473","hashOfConfig":"463"},{"size":134,"mtime":1673096397757,"results":"474","hashOfConfig":"463"},{"size":2003,"mtime":1693722660696,"results":"475","hashOfConfig":"463"},{"size":53011,"mtime":1693722660410,"results":"476","hashOfConfig":"463"},{"size":41609,"mtime":1693802577278,"results":"477","hashOfConfig":"463"},{"size":11120,"mtime":1693722660546,"results":"478","hashOfConfig":"463"},{"size":1492,"mtime":1674283816742,"results":"479","hashOfConfig":"463"},{"size":248,"mtime":1673096397677,"results":"480","hashOfConfig":"463"},{"size":658,"mtime":1673096397706,"results":"481","hashOfConfig":"463"},{"size":5200,"mtime":1673096397699,"results":"482","hashOfConfig":"463"},{"size":335,"mtime":1673096397694,"results":"483","hashOfConfig":"463"},{"size":895,"mtime":1673096397762,"results":"484","hashOfConfig":"463"},{"size":1067,"mtime":1693722660697,"results":"485","hashOfConfig":"463"},{"size":9310,"mtime":1693722660518,"results":"486","hashOfConfig":"463"},{"size":912,"mtime":1684393792070,"results":"487","hashOfConfig":"463"},{"size":1819,"mtime":1693722660516,"results":"488","hashOfConfig":"463"},{"size":8286,"mtime":1693722660524,"results":"489","hashOfConfig":"463"},{"size":5226,"mtime":1693722660516,"results":"490","hashOfConfig":"463"},{"size":1080,"mtime":1684393792072,"results":"491","hashOfConfig":"463"},{"size":1676,"mtime":1687076898912,"results":"492","hashOfConfig":"463"},{"size":594,"mtime":1673096397753,"results":"493","hashOfConfig":"463"},{"size":4075,"mtime":1693722660541,"results":"494","hashOfConfig":"463"},{"size":13048,"mtime":1693722660527,"results":"495","hashOfConfig":"463"},{"size":13438,"mtime":1693722660521,"results":"496","hashOfConfig":"463"},{"size":11276,"mtime":1693722660528,"results":"497","hashOfConfig":"463"},{"size":9130,"mtime":1693722660530,"results":"498","hashOfConfig":"463"},{"size":3889,"mtime":1693722660540,"results":"499","hashOfConfig":"463"},{"size":1685,"mtime":1693722660543,"results":"500","hashOfConfig":"463"},{"size":3044,"mtime":1693722660525,"results":"501","hashOfConfig":"463"},{"size":4121,"mtime":1693722660519,"results":"502","hashOfConfig":"463"},{"size":2440,"mtime":1693722660525,"results":"503","hashOfConfig":"463"},{"size":2685,"mtime":1693722660522,"results":"504","hashOfConfig":"463"},{"size":1249,"mtime":1693722660542,"results":"505","hashOfConfig":"463"},{"size":2706,"mtime":1693722660522,"results":"506","hashOfConfig":"463"},{"size":1541,"mtime":1673096397813,"results":"507","hashOfConfig":"463"},{"size":9596,"mtime":1693722660544,"results":"508","hashOfConfig":"463"},{"size":4472,"mtime":1677741322156,"results":"509","hashOfConfig":"463"},{"size":1655,"mtime":1693722660347,"results":"510","hashOfConfig":"463"},{"size":3226,"mtime":1673096397852,"results":"511","hashOfConfig":"463"},{"size":1787,"mtime":1693722660348,"results":"512","hashOfConfig":"463"},{"size":2570,"mtime":1673941111505,"results":"513","hashOfConfig":"463"},{"size":12513,"mtime":1693722660527,"results":"514","hashOfConfig":"463"},{"size":1306,"mtime":1673096397813,"results":"515","hashOfConfig":"463"},{"size":2070,"mtime":1673096397678,"results":"516","hashOfConfig":"463"},{"size":936,"mtime":1673096397700,"results":"517","hashOfConfig":"463"},{"size":4252,"mtime":1673096397681,"results":"518","hashOfConfig":"463"},{"size":886,"mtime":1673096397704,"results":"519","hashOfConfig":"463"},{"size":338,"mtime":1673096397707,"results":"520","hashOfConfig":"463"},{"size":1798,"mtime":1673096397733,"results":"521","hashOfConfig":"463"},{"size":1501,"mtime":1673096397702,"results":"522","hashOfConfig":"463"},{"size":1059,"mtime":1673096397746,"results":"523","hashOfConfig":"463"},{"size":2021,"mtime":1681632739659,"results":"524","hashOfConfig":"463"},{"size":1918,"mtime":1674147169871,"results":"525","hashOfConfig":"463"},{"size":1734,"mtime":1674837436425,"results":"526","hashOfConfig":"463"},{"size":2971,"mtime":1693722660502,"results":"527","hashOfConfig":"463"},{"size":1378,"mtime":1684393792058,"results":"528","hashOfConfig":"463"},{"size":1229,"mtime":1693722660505,"results":"529","hashOfConfig":"463"},{"size":7202,"mtime":1693722660504,"results":"530","hashOfConfig":"463"},{"size":4365,"mtime":1693722660499,"results":"531","hashOfConfig":"463"},{"size":781,"mtime":1684393792060,"results":"532","hashOfConfig":"463"},{"size":858,"mtime":1693722660500,"results":"533","hashOfConfig":"463"},{"size":3192,"mtime":1693722660513,"results":"534","hashOfConfig":"463"},{"size":17155,"mtime":1693722660514,"results":"535","hashOfConfig":"463"},{"size":12446,"mtime":1693722660508,"results":"536","hashOfConfig":"463"},{"size":2405,"mtime":1693722660507,"results":"537","hashOfConfig":"463"},{"size":1250,"mtime":1693722660498,"results":"538","hashOfConfig":"463"},{"size":7918,"mtime":1693722660512,"results":"539","hashOfConfig":"463"},{"size":3783,"mtime":1693722660503,"results":"540","hashOfConfig":"463"},{"size":11429,"mtime":1693722660511,"results":"541","hashOfConfig":"463"},{"size":1523,"mtime":1693722660515,"results":"542","hashOfConfig":"463"},{"size":2246,"mtime":1693722660503,"results":"543","hashOfConfig":"463"},{"size":2317,"mtime":1693722660506,"results":"544","hashOfConfig":"463"},{"size":479,"mtime":1684393791535,"results":"545","hashOfConfig":"463"},{"size":8200,"mtime":1693722660479,"results":"546","hashOfConfig":"463"},{"size":25686,"mtime":1693722660457,"results":"547","hashOfConfig":"463"},{"size":32433,"mtime":1693722660448,"results":"548","hashOfConfig":"463"},{"size":35073,"mtime":1693722660457,"results":"549","hashOfConfig":"463"},{"size":8881,"mtime":1693722660471,"results":"550","hashOfConfig":"463"},{"size":36570,"mtime":1693722660451,"results":"551","hashOfConfig":"463"},{"size":17338,"mtime":1693722660458,"results":"552","hashOfConfig":"463"},{"size":35349,"mtime":1693722660454,"results":"553","hashOfConfig":"463"},{"size":8159,"mtime":1693722660467,"results":"554","hashOfConfig":"463"},{"size":7622,"mtime":1693722660476,"results":"555","hashOfConfig":"463"},{"size":12858,"mtime":1693722660472,"results":"556","hashOfConfig":"463"},{"size":8463,"mtime":1693722660449,"results":"557","hashOfConfig":"463"},{"size":12480,"mtime":1693722660449,"results":"558","hashOfConfig":"463"},{"size":10111,"mtime":1693722660459,"results":"559","hashOfConfig":"463"},{"size":8489,"mtime":1693722660453,"results":"560","hashOfConfig":"463"},{"size":24327,"mtime":1693722660464,"results":"561","hashOfConfig":"463"},{"size":24681,"mtime":1693722660465,"results":"562","hashOfConfig":"463"},{"size":8661,"mtime":1693722660447,"results":"563","hashOfConfig":"463"},{"size":9391,"mtime":1693722660444,"results":"564","hashOfConfig":"463"},{"size":3292,"mtime":1693722660466,"results":"565","hashOfConfig":"463"},{"size":18927,"mtime":1693722660443,"results":"566","hashOfConfig":"463"},{"size":9456,"mtime":1693722660446,"results":"567","hashOfConfig":"463"},{"size":7829,"mtime":1693722660443,"results":"568","hashOfConfig":"463"},{"size":7259,"mtime":1693722660446,"results":"569","hashOfConfig":"463"},{"size":5436,"mtime":1693722660483,"results":"570","hashOfConfig":"463"},{"size":8359,"mtime":1693722660482,"results":"571","hashOfConfig":"463"},{"size":7063,"mtime":1693722660489,"results":"572","hashOfConfig":"463"},{"size":9780,"mtime":1693722660487,"results":"573","hashOfConfig":"463"},{"size":9040,"mtime":1693722660485,"results":"574","hashOfConfig":"463"},{"size":2415,"mtime":1693722660481,"results":"575","hashOfConfig":"463"},{"size":18968,"mtime":1693722660445,"results":"576","hashOfConfig":"463"},{"size":12228,"mtime":1693722660486,"results":"577","hashOfConfig":"463"},{"size":2133,"mtime":1693722660480,"results":"578","hashOfConfig":"463"},{"size":10763,"mtime":1693722660489,"results":"579","hashOfConfig":"463"},{"size":14659,"mtime":1693722660488,"results":"580","hashOfConfig":"463"},{"size":3004,"mtime":1693722660494,"results":"581","hashOfConfig":"463"},{"size":29262,"mtime":1693722660492,"results":"582","hashOfConfig":"463"},{"size":27745,"mtime":1693722660491,"results":"583","hashOfConfig":"463"},{"size":19187,"mtime":1693722660440,"results":"584","hashOfConfig":"463"},{"size":14509,"mtime":1693722660441,"results":"585","hashOfConfig":"463"},{"size":2461,"mtime":1693722660439,"results":"586","hashOfConfig":"463"},{"size":2754,"mtime":1693722660461,"results":"587","hashOfConfig":"463"},{"size":4396,"mtime":1693722660434,"results":"588","hashOfConfig":"463"},{"size":7114,"mtime":1693722660460,"results":"589","hashOfConfig":"463"},{"size":8291,"mtime":1693722660433,"results":"590","hashOfConfig":"463"},{"size":29147,"mtime":1693722660437,"results":"591","hashOfConfig":"463"},{"size":3724,"mtime":1693722660436,"results":"592","hashOfConfig":"463"},{"size":2676,"mtime":1693722660438,"results":"593","hashOfConfig":"463"},{"size":4526,"mtime":1693722660432,"results":"594","hashOfConfig":"463"},{"size":17364,"mtime":1693722660424,"results":"595","hashOfConfig":"463"},{"size":19831,"mtime":1693722660423,"results":"596","hashOfConfig":"463"},{"size":19119,"mtime":1693722660463,"results":"597","hashOfConfig":"463"},{"size":2839,"mtime":1693722660421,"results":"598","hashOfConfig":"463"},{"size":9794,"mtime":1693722660428,"results":"599","hashOfConfig":"463"},{"size":2593,"mtime":1673096397857,"results":"600","hashOfConfig":"463"},{"size":24916,"mtime":1693722660477,"results":"601","hashOfConfig":"463"},{"size":14806,"mtime":1693722660415,"results":"602","hashOfConfig":"463"},{"size":7223,"mtime":1693722660427,"results":"603","hashOfConfig":"463"},{"size":4086,"mtime":1693722660429,"results":"604","hashOfConfig":"463"},{"size":3645,"mtime":1693722660416,"results":"605","hashOfConfig":"463"},{"size":3859,"mtime":1693722660426,"results":"606","hashOfConfig":"463"},{"size":28628,"mtime":1693722660414,"results":"607","hashOfConfig":"463"},{"size":26096,"mtime":1693722660419,"results":"608","hashOfConfig":"463"},{"size":3265,"mtime":1693722660417,"results":"609","hashOfConfig":"463"},{"size":18893,"mtime":1684393791582,"results":"610","hashOfConfig":"463"},{"size":17365,"mtime":1684393791581,"results":"611","hashOfConfig":"463"},{"size":12568,"mtime":1693722660431,"results":"612","hashOfConfig":"463"},{"size":9180,"mtime":1693722660470,"results":"613","hashOfConfig":"463"},{"size":22837,"mtime":1693722660474,"results":"614","hashOfConfig":"463"},{"size":11231,"mtime":1693722660510,"results":"615","hashOfConfig":"463"},{"size":44,"mtime":1673096397685,"results":"616","hashOfConfig":"463"},{"size":1221,"mtime":1673096397748,"results":"617","hashOfConfig":"463"},{"size":1678,"mtime":1681632739660,"results":"618","hashOfConfig":"463"},{"size":1608,"mtime":1677740946219,"results":"619","hashOfConfig":"463"},{"size":2479,"mtime":1681632739665,"results":"620","hashOfConfig":"463"},{"size":1546,"mtime":1681632739664,"results":"621","hashOfConfig":"463"},{"size":1008,"mtime":1681632739665,"results":"622","hashOfConfig":"463"},{"size":1243,"mtime":1673765497521,"results":"623","hashOfConfig":"463"},{"size":1133,"mtime":1684393792319,"results":"624","hashOfConfig":"463"},{"size":2666,"mtime":1673096397824,"results":"625","hashOfConfig":"463"},{"size":2005,"mtime":1673096397844,"results":"626","hashOfConfig":"463"},{"size":2337,"mtime":1673096397830,"results":"627","hashOfConfig":"463"},{"size":325,"mtime":1673096397818,"results":"628","hashOfConfig":"463"},{"size":656,"mtime":1673096397829,"results":"629","hashOfConfig":"463"},{"size":976,"mtime":1673326821723,"results":"630","hashOfConfig":"463"},{"size":1540,"mtime":1673096397828,"results":"631","hashOfConfig":"463"},{"size":689,"mtime":1673096397834,"results":"632","hashOfConfig":"463"},{"size":3252,"mtime":1673772469904,"results":"633","hashOfConfig":"463"},{"size":1525,"mtime":1673096397842,"results":"634","hashOfConfig":"463"},{"size":728,"mtime":1673096397839,"results":"635","hashOfConfig":"463"},{"size":822,"mtime":1673096397836,"results":"636","hashOfConfig":"463"},{"size":445,"mtime":1673096397848,"results":"637","hashOfConfig":"463"},{"size":312,"mtime":1673415626661,"results":"638","hashOfConfig":"463"},{"size":315,"mtime":1693722660692,"results":"639","hashOfConfig":"463"},{"size":349,"mtime":1673096397833,"results":"640","hashOfConfig":"463"},{"size":17594,"mtime":1693722660694,"results":"641","hashOfConfig":"463"},{"size":2374,"mtime":1677741534455,"results":"642","hashOfConfig":"463"},{"size":1476,"mtime":1673250532898,"results":"643","hashOfConfig":"463"},{"size":967,"mtime":1674143316349,"results":"644","hashOfConfig":"463"},{"size":356,"mtime":1673096397838,"results":"645","hashOfConfig":"463"},{"size":284,"mtime":1673096397840,"results":"646","hashOfConfig":"463"},{"size":419,"mtime":1673096397817,"results":"647","hashOfConfig":"463"},{"size":800,"mtime":1673419242725,"results":"648","hashOfConfig":"463"},{"size":508,"mtime":1673096397819,"results":"649","hashOfConfig":"463"},{"size":237,"mtime":1673096397827,"results":"650","hashOfConfig":"463"},{"size":365,"mtime":1673096397848,"results":"651","hashOfConfig":"463"},{"size":2597,"mtime":1673096397822,"results":"652","hashOfConfig":"463"},{"size":1873,"mtime":1673096397846,"results":"653","hashOfConfig":"463"},{"size":842,"mtime":1673096397832,"results":"654","hashOfConfig":"463"},{"size":36,"mtime":1667807249000,"results":"655","hashOfConfig":"463"},{"size":37,"mtime":1681632739663,"results":"656","hashOfConfig":"463"},{"size":4535,"mtime":1684393792318,"results":"657","hashOfConfig":"463"},{"size":468,"mtime":1667807249000,"results":"658","hashOfConfig":"463"},{"size":1556,"mtime":1684393791537,"results":"659","hashOfConfig":"463"},{"size":463,"mtime":1673159768290,"results":"660","hashOfConfig":"463"},{"size":1864,"mtime":1667807249000,"results":"661","hashOfConfig":"463"},{"size":38,"mtime":1673258651531,"results":"662","hashOfConfig":"463"},{"size":647,"mtime":1673168279972,"results":"663","hashOfConfig":"463"},{"size":6372,"mtime":1693722660365,"results":"664","hashOfConfig":"463"},{"size":42,"mtime":1675334415676,"results":"665","hashOfConfig":"463"},{"size":868,"mtime":1693722660371,"results":"666","hashOfConfig":"463"},{"size":1272,"mtime":1684393791551,"results":"667","hashOfConfig":"463"},{"size":2480,"mtime":1679863441925,"results":"668","hashOfConfig":"463"},{"size":2812,"mtime":1693722660667,"results":"669","hashOfConfig":"463"},{"size":3301,"mtime":1693722660355,"results":"670","hashOfConfig":"463"},{"size":2590,"mtime":1693722660356,"results":"671","hashOfConfig":"463"},{"size":2890,"mtime":1693722660647,"results":"672","hashOfConfig":"463"},{"size":7782,"mtime":1693722660647,"results":"673","hashOfConfig":"463"},{"size":3566,"mtime":1693722660599,"results":"674","hashOfConfig":"463"},{"size":13559,"mtime":1693722660649,"results":"675","hashOfConfig":"463"},{"size":13232,"mtime":1693722660651,"results":"676","hashOfConfig":"463"},{"size":2929,"mtime":1693722660360,"results":"677","hashOfConfig":"463"},{"size":13283,"mtime":1693722660654,"results":"678","hashOfConfig":"463"},{"size":3333,"mtime":1693722660639,"results":"679","hashOfConfig":"463"},{"size":17029,"mtime":1684393792170,"results":"680","hashOfConfig":"463"},{"size":3613,"mtime":1684393791544,"results":"681","hashOfConfig":"463"},{"size":11300,"mtime":1693722660641,"results":"682","hashOfConfig":"463"},{"size":13064,"mtime":1693722660644,"results":"683","hashOfConfig":"463"},{"size":3236,"mtime":1693722660683,"results":"684","hashOfConfig":"463"},{"size":11945,"mtime":1693722660688,"results":"685","hashOfConfig":"463"},{"size":3814,"mtime":1693722660674,"results":"686","hashOfConfig":"463"},{"size":12419,"mtime":1693722660690,"results":"687","hashOfConfig":"463"},{"size":13149,"mtime":1693722660643,"results":"688","hashOfConfig":"463"},{"size":1733,"mtime":1693722660676,"results":"689","hashOfConfig":"463"},{"size":5402,"mtime":1693722660677,"results":"690","hashOfConfig":"463"},{"size":2487,"mtime":1693722660678,"results":"691","hashOfConfig":"463"},{"size":2908,"mtime":1693722660679,"results":"692","hashOfConfig":"463"},{"size":2496,"mtime":1693722660675,"results":"693","hashOfConfig":"463"},{"size":4432,"mtime":1693722660681,"results":"694","hashOfConfig":"463"},{"size":10573,"mtime":1693722660668,"results":"695","hashOfConfig":"463"},{"size":10846,"mtime":1693722660669,"results":"696","hashOfConfig":"463"},{"size":1238,"mtime":1684393791547,"results":"697","hashOfConfig":"463"},{"size":1076,"mtime":1693722660364,"results":"698","hashOfConfig":"463"},{"size":2759,"mtime":1693722660685,"results":"699","hashOfConfig":"463"},{"size":230,"mtime":1693722660395,"results":"700","hashOfConfig":"463"},{"size":8473,"mtime":1693722660685,"results":"701","hashOfConfig":"463"},{"size":4153,"mtime":1693722660379,"results":"702","hashOfConfig":"463"},{"size":7320,"mtime":1693722660468,"results":"703","hashOfConfig":"463"},{"size":3344,"mtime":1693722660357,"results":"704","hashOfConfig":"463"},{"size":3973,"mtime":1693722660361,"results":"705","hashOfConfig":"463"},{"size":16871,"mtime":1693722660570,"results":"706","hashOfConfig":"463"},{"size":2675,"mtime":1693722660358,"results":"707","hashOfConfig":"463"},{"size":15460,"mtime":1693722660661,"results":"708","hashOfConfig":"463"},{"size":14007,"mtime":1693722660612,"results":"709","hashOfConfig":"463"},{"size":3302,"mtime":1681632739698,"results":"710","hashOfConfig":"463"},{"size":2365,"mtime":1673096397683,"results":"711","hashOfConfig":"463"},{"size":7766,"mtime":1693722660613,"results":"712","hashOfConfig":"463"},{"size":9279,"mtime":1693722660614,"results":"713","hashOfConfig":"463"},{"size":6293,"mtime":1693735869800,"results":"714","hashOfConfig":"463"},{"size":11291,"mtime":1693722660655,"results":"715","hashOfConfig":"463"},{"size":20607,"mtime":1693722660569,"results":"716","hashOfConfig":"463"},{"size":9565,"mtime":1693722660658,"results":"717","hashOfConfig":"463"},{"size":13719,"mtime":1693722660656,"results":"718","hashOfConfig":"463"},{"size":13378,"mtime":1693722660606,"results":"719","hashOfConfig":"463"},{"size":12915,"mtime":1693722660568,"results":"720","hashOfConfig":"463"},{"size":7927,"mtime":1693722660607,"results":"721","hashOfConfig":"463"},{"size":17063,"mtime":1693722660604,"results":"722","hashOfConfig":"463"},{"size":17393,"mtime":1693722660621,"results":"723","hashOfConfig":"463"},{"size":19559,"mtime":1693722660623,"results":"724","hashOfConfig":"463"},{"size":4400,"mtime":1693722660363,"results":"725","hashOfConfig":"463"},{"size":20325,"mtime":1693722660596,"results":"726","hashOfConfig":"463"},{"size":12768,"mtime":1693722660589,"results":"727","hashOfConfig":"463"},{"size":5559,"mtime":1693722660672,"results":"728","hashOfConfig":"463"},{"size":10432,"mtime":1693722660590,"results":"729","hashOfConfig":"463"},{"size":16030,"mtime":1693722660592,"results":"730","hashOfConfig":"463"},{"size":25887,"mtime":1693722660556,"results":"731","hashOfConfig":"463"},{"size":13231,"mtime":1693722660554,"results":"732","hashOfConfig":"463"},{"size":8291,"mtime":1693722660610,"results":"733","hashOfConfig":"463"},{"size":4685,"mtime":1684393792166,"results":"734","hashOfConfig":"463"},{"size":4359,"mtime":1693722660593,"results":"735","hashOfConfig":"463"},{"size":1759,"mtime":1693722660583,"results":"736","hashOfConfig":"463"},{"size":11016,"mtime":1693722660586,"results":"737","hashOfConfig":"463"},{"size":22118,"mtime":1693722660587,"results":"738","hashOfConfig":"463"},{"size":1404,"mtime":1677740595558,"results":"739","hashOfConfig":"463"},{"size":10625,"mtime":1673419102135,"results":"740","hashOfConfig":"463"},{"size":39,"mtime":1667807249000,"results":"741","hashOfConfig":"463"},{"size":35,"mtime":1673096397689,"results":"742","hashOfConfig":"463"},{"size":176,"mtime":1667807249000,"results":"743","hashOfConfig":"463"},{"size":2453,"mtime":1693722660407,"results":"744","hashOfConfig":"463"},{"size":2127,"mtime":1693722660404,"results":"745","hashOfConfig":"463"},{"size":6332,"mtime":1693722660405,"results":"746","hashOfConfig":"463"},{"size":6700,"mtime":1693722660403,"results":"747","hashOfConfig":"463"},{"size":633,"mtime":1679864942221,"results":"748","hashOfConfig":"463"},{"size":1671,"mtime":1667807249000,"results":"749","hashOfConfig":"463"},{"size":2469,"mtime":1667807249000,"results":"750","hashOfConfig":"463"},{"size":441,"mtime":1667807249000,"results":"751","hashOfConfig":"463"},{"size":834,"mtime":1673943460670,"results":"752","hashOfConfig":"463"},{"size":519,"mtime":1667807249000,"results":"753","hashOfConfig":"463"},{"size":906,"mtime":1684393791536,"results":"754","hashOfConfig":"463"},{"size":1194,"mtime":1679863441887,"results":"755","hashOfConfig":"463"},{"size":552,"mtime":1667807249000,"results":"756","hashOfConfig":"463"},{"size":1492,"mtime":1679863441887,"results":"757","hashOfConfig":"463"},{"size":859,"mtime":1684393791552,"results":"758","hashOfConfig":"463"},{"size":3746,"mtime":1693733744276,"results":"759","hashOfConfig":"463"},{"size":2086,"mtime":1684393791547,"results":"760","hashOfConfig":"463"},{"size":2013,"mtime":1693722660372,"results":"761","hashOfConfig":"463"},{"size":4363,"mtime":1693722660383,"results":"762","hashOfConfig":"463"},{"size":4444,"mtime":1693722660385,"results":"763","hashOfConfig":"463"},{"size":6188,"mtime":1693722660397,"results":"764","hashOfConfig":"463"},{"size":1743,"mtime":1693722660649,"results":"765","hashOfConfig":"463"},{"size":555,"mtime":1667807249000,"results":"766","hashOfConfig":"463"},{"size":4415,"mtime":1693722660380,"results":"767","hashOfConfig":"463"},{"size":12387,"mtime":1693722660652,"results":"768","hashOfConfig":"463"},{"size":10303,"mtime":1693722660650,"results":"769","hashOfConfig":"463"},{"size":9788,"mtime":1693722660653,"results":"770","hashOfConfig":"463"},{"size":8124,"mtime":1693722660642,"results":"771","hashOfConfig":"463"},{"size":1916,"mtime":1693722660640,"results":"772","hashOfConfig":"463"},{"size":10919,"mtime":1693722660645,"results":"773","hashOfConfig":"463"},{"size":467,"mtime":1667807249000,"results":"774","hashOfConfig":"463"},{"size":2953,"mtime":1693722660401,"results":"775","hashOfConfig":"463"},{"size":5120,"mtime":1693722660377,"results":"776","hashOfConfig":"463"},{"size":4845,"mtime":1693722660393,"results":"777","hashOfConfig":"463"},{"size":1055,"mtime":1693722660370,"results":"778","hashOfConfig":"463"},{"size":4356,"mtime":1693722660390,"results":"779","hashOfConfig":"463"},{"size":381,"mtime":1678612064579,"results":"780","hashOfConfig":"463"},{"size":10450,"mtime":1693722660689,"results":"781","hashOfConfig":"463"},{"size":10525,"mtime":1693722660692,"results":"782","hashOfConfig":"463"},{"size":9333,"mtime":1693722660644,"results":"783","hashOfConfig":"463"},{"size":8934,"mtime":1693722660683,"results":"784","hashOfConfig":"463"},{"size":3615,"mtime":1693722660673,"results":"785","hashOfConfig":"463"},{"size":1034,"mtime":1693722660670,"results":"786","hashOfConfig":"463"},{"size":2841,"mtime":1693722660469,"results":"787","hashOfConfig":"463"},{"size":444,"mtime":1684393791553,"results":"788","hashOfConfig":"463"},{"size":7181,"mtime":1684393792108,"results":"789","hashOfConfig":"463"},{"size":417,"mtime":1693722660372,"results":"790","hashOfConfig":"463"},{"size":4248,"mtime":1693722660392,"results":"791","hashOfConfig":"463"},{"size":4827,"mtime":1693722660386,"results":"792","hashOfConfig":"463"},{"size":4671,"mtime":1693722660384,"results":"793","hashOfConfig":"463"},{"size":979,"mtime":1693722660373,"results":"794","hashOfConfig":"463"},{"size":4243,"mtime":1693722660378,"results":"795","hashOfConfig":"463"},{"size":43,"mtime":1667807249000,"results":"796","hashOfConfig":"463"},{"size":4953,"mtime":1693722660386,"results":"797","hashOfConfig":"463"},{"size":2757,"mtime":1684393791556,"results":"798","hashOfConfig":"463"},{"size":4441,"mtime":1693722660377,"results":"799","hashOfConfig":"463"},{"size":4518,"mtime":1693722660391,"results":"800","hashOfConfig":"463"},{"size":4780,"mtime":1693722660389,"results":"801","hashOfConfig":"463"},{"size":5432,"mtime":1693722660366,"results":"802","hashOfConfig":"463"},{"size":4624,"mtime":1693722660388,"results":"803","hashOfConfig":"463"},{"size":100,"mtime":1673096397691,"results":"804","hashOfConfig":"463"},{"size":8045,"mtime":1693722660571,"results":"805","hashOfConfig":"463"},{"size":2572,"mtime":1693722660567,"results":"806","hashOfConfig":"463"},{"size":6183,"mtime":1693735913915,"results":"807","hashOfConfig":"463"},{"size":6793,"mtime":1693722660625,"results":"808","hashOfConfig":"463"},{"size":2236,"mtime":1693722660687,"results":"809","hashOfConfig":"463"},{"size":10313,"mtime":1684393792081,"results":"810","hashOfConfig":"463"},{"size":9289,"mtime":1693722660615,"results":"811","hashOfConfig":"463"},{"size":3185,"mtime":1693722660616,"results":"812","hashOfConfig":"463"},{"size":6659,"mtime":1693722660660,"results":"813","hashOfConfig":"463"},{"size":10519,"mtime":1693722660658,"results":"814","hashOfConfig":"463"},{"size":14474,"mtime":1693722660611,"results":"815","hashOfConfig":"463"},{"size":6411,"mtime":1693722660597,"results":"816","hashOfConfig":"463"},{"size":3394,"mtime":1693722660594,"results":"817","hashOfConfig":"463"},{"size":3400,"mtime":1678612064622,"results":"818","hashOfConfig":"463"},{"size":8019,"mtime":1693722660585,"results":"819","hashOfConfig":"463"},{"size":8978,"mtime":1684393792124,"results":"820","hashOfConfig":"463"},{"size":7634,"mtime":1693722660563,"results":"821","hashOfConfig":"463"},{"size":10750,"mtime":1693722660560,"results":"822","hashOfConfig":"463"},{"size":1385,"mtime":1673096397687,"results":"823","hashOfConfig":"463"},{"size":929,"mtime":1667807249000,"results":"824","hashOfConfig":"463"},{"size":697,"mtime":1673096397747,"results":"825","hashOfConfig":"463"},{"size":7019,"mtime":1684393791563,"results":"826","hashOfConfig":"463"},{"size":3085,"mtime":1684393791564,"results":"827","hashOfConfig":"463"},{"size":35,"mtime":1667807249000,"results":"828","hashOfConfig":"463"},{"size":38,"mtime":1667807249000,"results":"829","hashOfConfig":"463"},{"size":41,"mtime":1667807249000,"results":"830","hashOfConfig":"463"},{"size":7019,"mtime":1684393791561,"results":"831","hashOfConfig":"463"},{"size":3085,"mtime":1684393791562,"results":"832","hashOfConfig":"463"},{"size":44,"mtime":1667807249000,"results":"833","hashOfConfig":"463"},{"size":50,"mtime":1667807249000,"results":"834","hashOfConfig":"463"},{"size":48,"mtime":1667807249000,"results":"835","hashOfConfig":"463"},{"size":1160,"mtime":1673096397744,"results":"836","hashOfConfig":"463"},{"size":797,"mtime":1667807249000,"results":"837","hashOfConfig":"463"},{"size":1634,"mtime":1667807249000,"results":"838","hashOfConfig":"463"},{"size":1570,"mtime":1667807249000,"results":"839","hashOfConfig":"463"},{"size":1515,"mtime":1667807249000,"results":"840","hashOfConfig":"463"},{"size":556,"mtime":1667807249000,"results":"841","hashOfConfig":"463"},{"size":845,"mtime":1667807249000,"results":"842","hashOfConfig":"463"},{"size":872,"mtime":1667807249000,"results":"843","hashOfConfig":"463"},{"size":562,"mtime":1667807249000,"results":"844","hashOfConfig":"463"},{"size":2396,"mtime":1683365695961,"results":"845","hashOfConfig":"463"},{"size":2083,"mtime":1693722660396,"results":"846","hashOfConfig":"463"},{"size":552,"mtime":1667807249000,"results":"847","hashOfConfig":"463"},{"size":818,"mtime":1667807249000,"results":"848","hashOfConfig":"463"},{"size":2776,"mtime":1684393791555,"results":"849","hashOfConfig":"463"},{"size":1628,"mtime":1693722660398,"results":"850","hashOfConfig":"463"},{"size":1250,"mtime":1674393108184,"results":"851","hashOfConfig":"463"},{"size":4004,"mtime":1673459716047,"results":"852","hashOfConfig":"463"},{"size":2321,"mtime":1667807249000,"results":"853","hashOfConfig":"463"},{"size":4431,"mtime":1667807249000,"results":"854","hashOfConfig":"463"},{"size":1900,"mtime":1667807249000,"results":"855","hashOfConfig":"463"},{"size":2155,"mtime":1667807249000,"results":"856","hashOfConfig":"463"},{"size":8582,"mtime":1693722660345,"results":"857","hashOfConfig":"463"},{"size":2114,"mtime":1667807249000,"results":"858","hashOfConfig":"463"},{"size":1415,"mtime":1667807249000,"results":"859","hashOfConfig":"463"},{"size":1809,"mtime":1667807249000,"results":"860","hashOfConfig":"463"},{"size":1647,"mtime":1678612064576,"results":"861","hashOfConfig":"463"},{"size":555,"mtime":1674658521937,"results":"862","hashOfConfig":"463"},{"size":1018,"mtime":1667807249000,"results":"863","hashOfConfig":"463"},{"size":1179,"mtime":1675768850865,"results":"864","hashOfConfig":"463"},{"size":1685,"mtime":1684393791548,"results":"865","hashOfConfig":"463"},{"size":314,"mtime":1667807249000,"results":"866","hashOfConfig":"463"},{"size":2031,"mtime":1693722660672,"results":"867","hashOfConfig":"463"},{"size":19504,"mtime":1693722660681,"results":"868","hashOfConfig":"463"},{"size":663,"mtime":1673096397861,"results":"869","hashOfConfig":"463"},{"size":456,"mtime":1673096397690,"results":"870","hashOfConfig":"463"},{"size":1149,"mtime":1673096397693,"results":"871","hashOfConfig":"463"},{"size":779,"mtime":1667807249000,"results":"872","hashOfConfig":"463"},{"size":6334,"mtime":1693722660551,"results":"873","hashOfConfig":"463"},{"size":16759,"mtime":1693722660547,"results":"874","hashOfConfig":"463"},{"size":11201,"mtime":1693735090035,"results":"875","hashOfConfig":"463"},{"size":691,"mtime":1677672564436,"results":"876","hashOfConfig":"463"},{"size":1464,"mtime":1673356652687,"results":"877","hashOfConfig":"463"},{"size":1234,"mtime":1673251145300,"results":"878","hashOfConfig":"463"},{"size":2986,"mtime":1693722660376,"results":"879","hashOfConfig":"463"},{"size":1079,"mtime":1667807249000,"results":"880","hashOfConfig":"463"},{"size":64,"mtime":1667807249000,"results":"881","hashOfConfig":"463"},{"size":2010,"mtime":1681632739648,"results":"882","hashOfConfig":"463"},{"size":374,"mtime":1667807249000,"results":"883","hashOfConfig":"463"},{"size":1358,"mtime":1679211179059,"results":"884","hashOfConfig":"463"},{"size":42,"mtime":1673354032404,"results":"885","hashOfConfig":"463"},{"size":287,"mtime":1667807249000,"results":"886","hashOfConfig":"463"},{"size":2705,"mtime":1667807249000,"results":"887","hashOfConfig":"463"},{"size":3174,"mtime":1667807249000,"results":"888","hashOfConfig":"463"},{"size":2051,"mtime":1667807249000,"results":"889","hashOfConfig":"463"},{"size":1176,"mtime":1667807249000,"results":"890","hashOfConfig":"463"},{"size":1151,"mtime":1667807249000,"results":"891","hashOfConfig":"463"},{"size":765,"mtime":1667807249000,"results":"892","hashOfConfig":"463"},{"size":507,"mtime":1667807249000,"results":"893","hashOfConfig":"463"},{"size":2752,"mtime":1667807249000,"results":"894","hashOfConfig":"463"},{"size":158,"mtime":1667807249000,"results":"895","hashOfConfig":"463"},{"size":2696,"mtime":1667807249000,"results":"896","hashOfConfig":"463"},{"size":608,"mtime":1667807249000,"results":"897","hashOfConfig":"463"},{"size":6718,"mtime":1681632739654,"results":"898","hashOfConfig":"463"},{"size":3628,"mtime":1684393792091,"results":"899","hashOfConfig":"463"},{"size":3015,"mtime":1667807249000,"results":"900","hashOfConfig":"463"},{"size":2316,"mtime":1693722660374,"results":"901","hashOfConfig":"463"},{"size":2483,"mtime":1673249946231,"results":"902","hashOfConfig":"463"},{"size":1437,"mtime":1677671569387,"results":"903","hashOfConfig":"463"},{"size":2216,"mtime":1667807249000,"results":"904","hashOfConfig":"463"},{"size":135,"mtime":1673509936299,"results":"905","hashOfConfig":"463"},{"size":334,"mtime":1678612064581,"results":"906","hashOfConfig":"463"},{"size":1153,"mtime":1687766070231,"results":"907","hashOfConfig":"463"},{"size":521,"mtime":1673096397738,"results":"908","hashOfConfig":"463"},{"size":2618,"mtime":1677663839622,"results":"909","hashOfConfig":"463"},{"size":2404,"mtime":1673251083219,"results":"910","hashOfConfig":"463"},{"size":2508,"mtime":1667807249000,"results":"911","hashOfConfig":"463"},{"size":2658,"mtime":1673177364476,"results":"912","hashOfConfig":"463"},{"size":1901,"mtime":1667807249000,"results":"913","hashOfConfig":"463"},{"size":12011,"mtime":1667807249000,"results":"914","hashOfConfig":"463"},{"size":912,"mtime":1667807249000,"results":"915","hashOfConfig":"463"},{"size":1103,"mtime":1674282248025,"results":"916","hashOfConfig":"463"},{"size":1279,"mtime":1667807249000,"results":"917","hashOfConfig":"463"},{"size":3036,"mtime":1667807249000,"results":"918","hashOfConfig":"463"},{"size":443,"mtime":1667807249000,"results":"919","hashOfConfig":"463"},{"size":1052,"mtime":1673509325627,"results":"920","hashOfConfig":"463"},{"size":827,"mtime":1667807249000,"results":"921","hashOfConfig":"463"},{"size":334,"mtime":1678612064580,"results":"922","hashOfConfig":"463"},{"size":61,"mtime":1678612064582,"results":"923","hashOfConfig":"463"},{"filePath":"924","messages":"925","suppressedMessages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},"12inr0k",{"filePath":"928","messages":"929","suppressedMessages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"931","messages":"932","suppressedMessages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"934","messages":"935","suppressedMessages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"937","messages":"938","suppressedMessages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"940","messages":"941","suppressedMessages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"943","messages":"944","suppressedMessages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"946","messages":"947","suppressedMessages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"949","messages":"950","suppressedMessages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"952","messages":"953","suppressedMessages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"955","messages":"956","suppressedMessages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"958","messages":"959","suppressedMessages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"961","messages":"962","suppressedMessages":"963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"964","messages":"965","suppressedMessages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"967","usedDeprecatedRules":"927"},{"filePath":"968","messages":"969","suppressedMessages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":60,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971"},{"filePath":"972","messages":"973","suppressedMessages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"975","usedDeprecatedRules":"927"},{"filePath":"976","messages":"977","suppressedMessages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"979","messages":"980","suppressedMessages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"982","messages":"983","suppressedMessages":"984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"985","messages":"986","suppressedMessages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"988","messages":"989","suppressedMessages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"991","messages":"992","suppressedMessages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"994","messages":"995","suppressedMessages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997","usedDeprecatedRules":"927"},{"filePath":"998","messages":"999","suppressedMessages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"927"},{"filePath":"1002","messages":"1003","suppressedMessages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1005","messages":"1006","suppressedMessages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1008","messages":"1009","suppressedMessages":"1010","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1011","usedDeprecatedRules":"927"},{"filePath":"1012","messages":"1013","suppressedMessages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1015","messages":"1016","suppressedMessages":"1017","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1018","messages":"1019","suppressedMessages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021","usedDeprecatedRules":"927"},{"filePath":"1022","messages":"1023","suppressedMessages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1025","messages":"1026","suppressedMessages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1028","usedDeprecatedRules":"927"},{"filePath":"1029","messages":"1030","suppressedMessages":"1031","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1032","usedDeprecatedRules":"927"},{"filePath":"1033","messages":"1034","suppressedMessages":"1035","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036","usedDeprecatedRules":"927"},{"filePath":"1037","messages":"1038","suppressedMessages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1040","messages":"1041","suppressedMessages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043","usedDeprecatedRules":"927"},{"filePath":"1044","messages":"1045","suppressedMessages":"1046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1047","messages":"1048","suppressedMessages":"1049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1050","messages":"1051","suppressedMessages":"1052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1053","messages":"1054","suppressedMessages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1056","usedDeprecatedRules":"927"},{"filePath":"1057","messages":"1058","suppressedMessages":"1059","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1060","messages":"1061","suppressedMessages":"1062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1063","messages":"1064","suppressedMessages":"1065","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1066","messages":"1067","suppressedMessages":"1068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1069","messages":"1070","suppressedMessages":"1071","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1072","messages":"1073","suppressedMessages":"1074","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1075","messages":"1076","suppressedMessages":"1077","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1078","messages":"1079","suppressedMessages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1081","usedDeprecatedRules":"927"},{"filePath":"1082","messages":"1083","suppressedMessages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1085","messages":"1086","suppressedMessages":"1087","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1088","usedDeprecatedRules":"927"},{"filePath":"1089","messages":"1090","suppressedMessages":"1091","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1092","messages":"1093","suppressedMessages":"1094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1095","messages":"1096","suppressedMessages":"1097","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1098","messages":"1099","suppressedMessages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1101","messages":"1102","suppressedMessages":"1103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1104","messages":"1105","suppressedMessages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1107","messages":"1108","suppressedMessages":"1109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1110","messages":"1111","suppressedMessages":"1112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1113","messages":"1114","suppressedMessages":"1115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1116","messages":"1117","suppressedMessages":"1118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1119","messages":"1120","suppressedMessages":"1121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1122","messages":"1123","suppressedMessages":"1124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1125","messages":"1126","suppressedMessages":"1127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1128","messages":"1129","suppressedMessages":"1130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1131","messages":"1132","suppressedMessages":"1133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1134","usedDeprecatedRules":"927"},{"filePath":"1135","messages":"1136","suppressedMessages":"1137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1138","messages":"1139","suppressedMessages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1141","messages":"1142","suppressedMessages":"1143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1144","messages":"1145","suppressedMessages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1147","messages":"1148","suppressedMessages":"1149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1150","messages":"1151","suppressedMessages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1153","messages":"1154","suppressedMessages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1156","messages":"1157","suppressedMessages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1159","messages":"1160","suppressedMessages":"1161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1162","messages":"1163","suppressedMessages":"1164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1165","messages":"1166","suppressedMessages":"1167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1168","messages":"1169","suppressedMessages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1171","messages":"1172","suppressedMessages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1174","messages":"1175","suppressedMessages":"1176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1177","messages":"1178","suppressedMessages":"1179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1180","messages":"1181","suppressedMessages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1183","messages":"1184","suppressedMessages":"1185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1186","messages":"1187","suppressedMessages":"1188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1189","messages":"1190","suppressedMessages":"1191","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1192","usedDeprecatedRules":"927"},{"filePath":"1193","messages":"1194","suppressedMessages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1196","usedDeprecatedRules":"927"},{"filePath":"1197","messages":"1198","suppressedMessages":"1199","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1200","usedDeprecatedRules":"927"},{"filePath":"1201","messages":"1202","suppressedMessages":"1203","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1204","usedDeprecatedRules":"927"},{"filePath":"1205","messages":"1206","suppressedMessages":"1207","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1208","usedDeprecatedRules":"927"},{"filePath":"1209","messages":"1210","suppressedMessages":"1211","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1212","usedDeprecatedRules":"927"},{"filePath":"1213","messages":"1214","suppressedMessages":"1215","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1216","usedDeprecatedRules":"927"},{"filePath":"1217","messages":"1218","suppressedMessages":"1219","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1220","usedDeprecatedRules":"927"},{"filePath":"1221","messages":"1222","suppressedMessages":"1223","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1224","usedDeprecatedRules":"927"},{"filePath":"1225","messages":"1226","suppressedMessages":"1227","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1228","usedDeprecatedRules":"927"},{"filePath":"1229","messages":"1230","suppressedMessages":"1231","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1232","usedDeprecatedRules":"927"},{"filePath":"1233","messages":"1234","suppressedMessages":"1235","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1236","usedDeprecatedRules":"927"},{"filePath":"1237","messages":"1238","suppressedMessages":"1239","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1240","usedDeprecatedRules":"927"},{"filePath":"1241","messages":"1242","suppressedMessages":"1243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1244","usedDeprecatedRules":"927"},{"filePath":"1245","messages":"1246","suppressedMessages":"1247","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1248","usedDeprecatedRules":"927"},{"filePath":"1249","messages":"1250","suppressedMessages":"1251","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1252","usedDeprecatedRules":"927"},{"filePath":"1253","messages":"1254","suppressedMessages":"1255","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1256","usedDeprecatedRules":"927"},{"filePath":"1257","messages":"1258","suppressedMessages":"1259","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1260","usedDeprecatedRules":"927"},{"filePath":"1261","messages":"1262","suppressedMessages":"1263","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1264","usedDeprecatedRules":"927"},{"filePath":"1265","messages":"1266","suppressedMessages":"1267","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1268","usedDeprecatedRules":"927"},{"filePath":"1269","messages":"1270","suppressedMessages":"1271","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1272","usedDeprecatedRules":"927"},{"filePath":"1273","messages":"1274","suppressedMessages":"1275","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1276","usedDeprecatedRules":"927"},{"filePath":"1277","messages":"1278","suppressedMessages":"1279","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1280","usedDeprecatedRules":"927"},{"filePath":"1281","messages":"1282","suppressedMessages":"1283","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1284","usedDeprecatedRules":"927"},{"filePath":"1285","messages":"1286","suppressedMessages":"1287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1288","messages":"1289","suppressedMessages":"1290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1291","messages":"1292","suppressedMessages":"1293","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1294","usedDeprecatedRules":"927"},{"filePath":"1295","messages":"1296","suppressedMessages":"1297","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1298","usedDeprecatedRules":"927"},{"filePath":"1299","messages":"1300","suppressedMessages":"1301","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1302","usedDeprecatedRules":"927"},{"filePath":"1303","messages":"1304","suppressedMessages":"1305","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1306","usedDeprecatedRules":"927"},{"filePath":"1307","messages":"1308","suppressedMessages":"1309","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1310","usedDeprecatedRules":"927"},{"filePath":"1311","messages":"1312","suppressedMessages":"1313","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1314","usedDeprecatedRules":"927"},{"filePath":"1315","messages":"1316","suppressedMessages":"1317","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1318","usedDeprecatedRules":"927"},{"filePath":"1319","messages":"1320","suppressedMessages":"1321","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1322","usedDeprecatedRules":"927"},{"filePath":"1323","messages":"1324","suppressedMessages":"1325","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1326","usedDeprecatedRules":"927"},{"filePath":"1327","messages":"1328","suppressedMessages":"1329","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1330","usedDeprecatedRules":"927"},{"filePath":"1331","messages":"1332","suppressedMessages":"1333","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1334","usedDeprecatedRules":"927"},{"filePath":"1335","messages":"1336","suppressedMessages":"1337","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1338","usedDeprecatedRules":"927"},{"filePath":"1339","messages":"1340","suppressedMessages":"1341","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1342","usedDeprecatedRules":"927"},{"filePath":"1343","messages":"1344","suppressedMessages":"1345","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1346","usedDeprecatedRules":"927"},{"filePath":"1347","messages":"1348","suppressedMessages":"1349","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1350","usedDeprecatedRules":"927"},{"filePath":"1351","messages":"1352","suppressedMessages":"1353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1354","usedDeprecatedRules":"927"},{"filePath":"1355","messages":"1356","suppressedMessages":"1357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1358","messages":"1359","suppressedMessages":"1360","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1361","usedDeprecatedRules":"927"},{"filePath":"1362","messages":"1363","suppressedMessages":"1364","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1365","usedDeprecatedRules":"927"},{"filePath":"1366","messages":"1367","suppressedMessages":"1368","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1369","usedDeprecatedRules":"927"},{"filePath":"1370","messages":"1371","suppressedMessages":"1372","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1373","usedDeprecatedRules":"927"},{"filePath":"1374","messages":"1375","suppressedMessages":"1376","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1377","usedDeprecatedRules":"927"},{"filePath":"1378","messages":"1379","suppressedMessages":"1380","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1381","usedDeprecatedRules":"927"},{"filePath":"1382","messages":"1383","suppressedMessages":"1384","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1385","usedDeprecatedRules":"927"},{"filePath":"1386","messages":"1387","suppressedMessages":"1388","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1389","usedDeprecatedRules":"927"},{"filePath":"1390","messages":"1391","suppressedMessages":"1392","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1393","usedDeprecatedRules":"927"},{"filePath":"1394","messages":"1395","suppressedMessages":"1396","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1397","usedDeprecatedRules":"927"},{"filePath":"1398","messages":"1399","suppressedMessages":"1400","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1401","usedDeprecatedRules":"927"},{"filePath":"1402","messages":"1403","suppressedMessages":"1404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1405","messages":"1406","suppressedMessages":"1407","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1408","usedDeprecatedRules":"927"},{"filePath":"1409","messages":"1410","suppressedMessages":"1411","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1412","usedDeprecatedRules":"927"},{"filePath":"1413","messages":"1414","suppressedMessages":"1415","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1416","usedDeprecatedRules":"927"},{"filePath":"1417","messages":"1418","suppressedMessages":"1419","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1420","usedDeprecatedRules":"927"},{"filePath":"1421","messages":"1422","suppressedMessages":"1423","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1424","usedDeprecatedRules":"927"},{"filePath":"1425","messages":"1426","suppressedMessages":"1427","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1428","usedDeprecatedRules":"927"},{"filePath":"1429","messages":"1430","suppressedMessages":"1431","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1432","usedDeprecatedRules":"927"},{"filePath":"1433","messages":"1434","suppressedMessages":"1435","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1436","usedDeprecatedRules":"927"},{"filePath":"1437","messages":"1438","suppressedMessages":"1439","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1440","usedDeprecatedRules":"927"},{"filePath":"1441","messages":"1442","suppressedMessages":"1443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1444","messages":"1445","suppressedMessages":"1446","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1447","usedDeprecatedRules":"927"},{"filePath":"1448","messages":"1449","suppressedMessages":"1450","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1451","usedDeprecatedRules":"927"},{"filePath":"1452","messages":"1453","suppressedMessages":"1454","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1455","usedDeprecatedRules":"927"},{"filePath":"1456","messages":"1457","suppressedMessages":"1458","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1459","usedDeprecatedRules":"927"},{"filePath":"1460","messages":"1461","suppressedMessages":"1462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1463","messages":"1464","suppressedMessages":"1465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1466","messages":"1467","suppressedMessages":"1468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1469","messages":"1470","suppressedMessages":"1471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1472","messages":"1473","suppressedMessages":"1474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1475","messages":"1476","suppressedMessages":"1477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1478","messages":"1479","suppressedMessages":"1480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1481","messages":"1482","suppressedMessages":"1483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1484","messages":"1485","suppressedMessages":"1486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1487","messages":"1488","suppressedMessages":"1489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1490","messages":"1491","suppressedMessages":"1492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1493","messages":"1494","suppressedMessages":"1495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1496","messages":"1497","suppressedMessages":"1498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1499","messages":"1500","suppressedMessages":"1501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1502","messages":"1503","suppressedMessages":"1504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1505","messages":"1506","suppressedMessages":"1507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1508","messages":"1509","suppressedMessages":"1510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1511","messages":"1512","suppressedMessages":"1513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1514","messages":"1515","suppressedMessages":"1516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1517","messages":"1518","suppressedMessages":"1519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1520","messages":"1521","suppressedMessages":"1522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1523","messages":"1524","suppressedMessages":"1525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1526","messages":"1527","suppressedMessages":"1528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1529","messages":"1530","suppressedMessages":"1531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1532","messages":"1533","suppressedMessages":"1534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1535","messages":"1536","suppressedMessages":"1537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1538","messages":"1539","suppressedMessages":"1540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1541","messages":"1542","suppressedMessages":"1543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1544","messages":"1545","suppressedMessages":"1546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1547","messages":"1548","suppressedMessages":"1549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1550","messages":"1551","suppressedMessages":"1552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1553","messages":"1554","suppressedMessages":"1555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1556","messages":"1557","suppressedMessages":"1558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1559","messages":"1560","suppressedMessages":"1561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1562","messages":"1563","suppressedMessages":"1564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1565","messages":"1566","suppressedMessages":"1567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1568","messages":"1569","suppressedMessages":"1570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1571","messages":"1572","suppressedMessages":"1573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1574","messages":"1575","suppressedMessages":"1576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1577","messages":"1578","suppressedMessages":"1579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1580","messages":"1581","suppressedMessages":"1582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1583","messages":"1584","suppressedMessages":"1585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1586","messages":"1587","suppressedMessages":"1588","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1589","usedDeprecatedRules":"927"},{"filePath":"1590","messages":"1591","suppressedMessages":"1592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1593","messages":"1594","suppressedMessages":"1595","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1596","usedDeprecatedRules":"927"},{"filePath":"1597","messages":"1598","suppressedMessages":"1599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1600","messages":"1601","suppressedMessages":"1602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1603","messages":"1604","suppressedMessages":"1605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1606","messages":"1607","suppressedMessages":"1608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1609","messages":"1610","suppressedMessages":"1611","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1612","usedDeprecatedRules":"927"},{"filePath":"1613","messages":"1614","suppressedMessages":"1615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1616","messages":"1617","suppressedMessages":"1618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1619","messages":"1620","suppressedMessages":"1621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1622","messages":"1623","suppressedMessages":"1624","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1625","usedDeprecatedRules":"927"},{"filePath":"1626","messages":"1627","suppressedMessages":"1628","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1629","usedDeprecatedRules":"927"},{"filePath":"1630","messages":"1631","suppressedMessages":"1632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1633","messages":"1634","suppressedMessages":"1635","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1636","usedDeprecatedRules":"927"},{"filePath":"1637","messages":"1638","suppressedMessages":"1639","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1640","usedDeprecatedRules":"927"},{"filePath":"1641","messages":"1642","suppressedMessages":"1643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1644","messages":"1645","suppressedMessages":"1646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1647","messages":"1648","suppressedMessages":"1649","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1650","usedDeprecatedRules":"927"},{"filePath":"1651","messages":"1652","suppressedMessages":"1653","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1654","usedDeprecatedRules":"927"},{"filePath":"1655","messages":"1656","suppressedMessages":"1657","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1658","usedDeprecatedRules":"927"},{"filePath":"1659","messages":"1660","suppressedMessages":"1661","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1662","usedDeprecatedRules":"927"},{"filePath":"1663","messages":"1664","suppressedMessages":"1665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1666","messages":"1667","suppressedMessages":"1668","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1669","usedDeprecatedRules":"927"},{"filePath":"1670","messages":"1671","suppressedMessages":"1672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1673","messages":"1674","suppressedMessages":"1675","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1676","usedDeprecatedRules":"927"},{"filePath":"1677","messages":"1678","suppressedMessages":"1679","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1680","usedDeprecatedRules":"927"},{"filePath":"1681","messages":"1682","suppressedMessages":"1683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1684","messages":"1685","suppressedMessages":"1686","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1687","usedDeprecatedRules":"927"},{"filePath":"1688","messages":"1689","suppressedMessages":"1690","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1691","usedDeprecatedRules":"927"},{"filePath":"1692","messages":"1693","suppressedMessages":"1694","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1695","usedDeprecatedRules":"927"},{"filePath":"1696","messages":"1697","suppressedMessages":"1698","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1699","usedDeprecatedRules":"927"},{"filePath":"1700","messages":"1701","suppressedMessages":"1702","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1703","usedDeprecatedRules":"927"},{"filePath":"1704","messages":"1705","suppressedMessages":"1706","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1707","usedDeprecatedRules":"927"},{"filePath":"1708","messages":"1709","suppressedMessages":"1710","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1711","usedDeprecatedRules":"927"},{"filePath":"1712","messages":"1713","suppressedMessages":"1714","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1715","usedDeprecatedRules":"927"},{"filePath":"1716","messages":"1717","suppressedMessages":"1718","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1719","usedDeprecatedRules":"927"},{"filePath":"1720","messages":"1721","suppressedMessages":"1722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1723","messages":"1724","suppressedMessages":"1725","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1726","usedDeprecatedRules":"927"},{"filePath":"1727","messages":"1728","suppressedMessages":"1729","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1730","usedDeprecatedRules":"927"},{"filePath":"1731","messages":"1732","suppressedMessages":"1733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1734","messages":"1735","suppressedMessages":"1736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1737","messages":"1738","suppressedMessages":"1739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1740","messages":"1741","suppressedMessages":"1742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1743","messages":"1744","suppressedMessages":"1745","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1746","usedDeprecatedRules":"927"},{"filePath":"1747","messages":"1748","suppressedMessages":"1749","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1750","usedDeprecatedRules":"927"},{"filePath":"1751","messages":"1752","suppressedMessages":"1753","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1754","usedDeprecatedRules":"927"},{"filePath":"1755","messages":"1756","suppressedMessages":"1757","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1758","usedDeprecatedRules":"927"},{"filePath":"1759","messages":"1760","suppressedMessages":"1761","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1762","usedDeprecatedRules":"927"},{"filePath":"1763","messages":"1764","suppressedMessages":"1765","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1766","usedDeprecatedRules":"927"},{"filePath":"1767","messages":"1768","suppressedMessages":"1769","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1770","usedDeprecatedRules":"927"},{"filePath":"1771","messages":"1772","suppressedMessages":"1773","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1774","usedDeprecatedRules":"927"},{"filePath":"1775","messages":"1776","suppressedMessages":"1777","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1778","usedDeprecatedRules":"927"},{"filePath":"1779","messages":"1780","suppressedMessages":"1781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1782","messages":"1783","suppressedMessages":"1784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1785","messages":"1786","suppressedMessages":"1787","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1788","usedDeprecatedRules":"927"},{"filePath":"1789","messages":"1790","suppressedMessages":"1791","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1792","usedDeprecatedRules":"927"},{"filePath":"1793","messages":"1794","suppressedMessages":"1795","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1796"},{"filePath":"1797","messages":"1798","suppressedMessages":"1799","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1800","usedDeprecatedRules":"927"},{"filePath":"1801","messages":"1802","suppressedMessages":"1803","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1804","usedDeprecatedRules":"927"},{"filePath":"1805","messages":"1806","suppressedMessages":"1807","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1808","usedDeprecatedRules":"927"},{"filePath":"1809","messages":"1810","suppressedMessages":"1811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1812","messages":"1813","suppressedMessages":"1814","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1815","usedDeprecatedRules":"927"},{"filePath":"1816","messages":"1817","suppressedMessages":"1818","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1819","usedDeprecatedRules":"927"},{"filePath":"1820","messages":"1821","suppressedMessages":"1822","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1823","usedDeprecatedRules":"927"},{"filePath":"1824","messages":"1825","suppressedMessages":"1826","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1827","usedDeprecatedRules":"927"},{"filePath":"1828","messages":"1829","suppressedMessages":"1830","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1831","usedDeprecatedRules":"927"},{"filePath":"1832","messages":"1833","suppressedMessages":"1834","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1835","usedDeprecatedRules":"927"},{"filePath":"1836","messages":"1837","suppressedMessages":"1838","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1839","usedDeprecatedRules":"927"},{"filePath":"1840","messages":"1841","suppressedMessages":"1842","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1843","usedDeprecatedRules":"927"},{"filePath":"1844","messages":"1845","suppressedMessages":"1846","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1847","usedDeprecatedRules":"927"},{"filePath":"1848","messages":"1849","suppressedMessages":"1850","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1851","usedDeprecatedRules":"927"},{"filePath":"1852","messages":"1853","suppressedMessages":"1854","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1855","usedDeprecatedRules":"927"},{"filePath":"1856","messages":"1857","suppressedMessages":"1858","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1859","usedDeprecatedRules":"927"},{"filePath":"1860","messages":"1861","suppressedMessages":"1862","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1863","usedDeprecatedRules":"927"},{"filePath":"1864","messages":"1865","suppressedMessages":"1866","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1867","usedDeprecatedRules":"927"},{"filePath":"1868","messages":"1869","suppressedMessages":"1870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1871","messages":"1872","suppressedMessages":"1873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1874","messages":"1875","suppressedMessages":"1876","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1877","usedDeprecatedRules":"927"},{"filePath":"1878","messages":"1879","suppressedMessages":"1880","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1881","usedDeprecatedRules":"927"},{"filePath":"1882","messages":"1883","suppressedMessages":"1884","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1885","usedDeprecatedRules":"927"},{"filePath":"1886","messages":"1887","suppressedMessages":"1888","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1889","usedDeprecatedRules":"927"},{"filePath":"1890","messages":"1891","suppressedMessages":"1892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1893","messages":"1894","suppressedMessages":"1895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1896","messages":"1897","suppressedMessages":"1898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1899","messages":"1900","suppressedMessages":"1901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1902","messages":"1903","suppressedMessages":"1904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1905","messages":"1906","suppressedMessages":"1907","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1908","usedDeprecatedRules":"927"},{"filePath":"1909","messages":"1910","suppressedMessages":"1911","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1912","usedDeprecatedRules":"927"},{"filePath":"1913","messages":"1914","suppressedMessages":"1915","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1916","usedDeprecatedRules":"927"},{"filePath":"1917","messages":"1918","suppressedMessages":"1919","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1920","usedDeprecatedRules":"927"},{"filePath":"1921","messages":"1922","suppressedMessages":"1923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1924","messages":"1925","suppressedMessages":"1926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1927","messages":"1928","suppressedMessages":"1929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1930","messages":"1931","suppressedMessages":"1932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1933","messages":"1934","suppressedMessages":"1935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1936","messages":"1937","suppressedMessages":"1938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1939","messages":"1940","suppressedMessages":"1941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1942","messages":"1943","suppressedMessages":"1944","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1945","messages":"1946","suppressedMessages":"1947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1948","messages":"1949","suppressedMessages":"1950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1951","messages":"1952","suppressedMessages":"1953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1954","messages":"1955","suppressedMessages":"1956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1957","messages":"1958","suppressedMessages":"1959","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1960","usedDeprecatedRules":"927"},{"filePath":"1961","messages":"1962","suppressedMessages":"1963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1964","messages":"1965","suppressedMessages":"1966","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1967","messages":"1968","suppressedMessages":"1969","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1970","usedDeprecatedRules":"927"},{"filePath":"1971","messages":"1972","suppressedMessages":"1973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1974","messages":"1975","suppressedMessages":"1976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1977","messages":"1978","suppressedMessages":"1979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1980","messages":"1981","suppressedMessages":"1982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"1983","messages":"1984","suppressedMessages":"1985","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1986","usedDeprecatedRules":"927"},{"filePath":"1987","messages":"1988","suppressedMessages":"1989","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1990","usedDeprecatedRules":"927"},{"filePath":"1991","messages":"1992","suppressedMessages":"1993","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1994","usedDeprecatedRules":"927"},{"filePath":"1995","messages":"1996","suppressedMessages":"1997","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1998","usedDeprecatedRules":"927"},{"filePath":"1999","messages":"2000","suppressedMessages":"2001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2002","messages":"2003","suppressedMessages":"2004","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2005","usedDeprecatedRules":"927"},{"filePath":"2006","messages":"2007","suppressedMessages":"2008","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2009","messages":"2010","suppressedMessages":"2011","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2012","usedDeprecatedRules":"927"},{"filePath":"2013","messages":"2014","suppressedMessages":"2015","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2016","usedDeprecatedRules":"927"},{"filePath":"2017","messages":"2018","suppressedMessages":"2019","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2020","messages":"2021","suppressedMessages":"2022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2023","messages":"2024","suppressedMessages":"2025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2026","messages":"2027","suppressedMessages":"2028","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2029","messages":"2030","suppressedMessages":"2031","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2032","usedDeprecatedRules":"927"},{"filePath":"2033","messages":"2034","suppressedMessages":"2035","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2036","usedDeprecatedRules":"927"},{"filePath":"2037","messages":"2038","suppressedMessages":"2039","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2040","usedDeprecatedRules":"927"},{"filePath":"2041","messages":"2042","suppressedMessages":"2043","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2044","messages":"2045","suppressedMessages":"2046","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2047","usedDeprecatedRules":"927"},{"filePath":"2048","messages":"2049","suppressedMessages":"2050","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2051","usedDeprecatedRules":"927"},{"filePath":"2052","messages":"2053","suppressedMessages":"2054","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2055","usedDeprecatedRules":"927"},{"filePath":"2056","messages":"2057","suppressedMessages":"2058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2059","messages":"2060","suppressedMessages":"2061","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2062","usedDeprecatedRules":"927"},{"filePath":"2063","messages":"2064","suppressedMessages":"2065","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2066","messages":"2067","suppressedMessages":"2068","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2069","usedDeprecatedRules":"927"},{"filePath":"2070","messages":"2071","suppressedMessages":"2072","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2073","usedDeprecatedRules":"927"},{"filePath":"2074","messages":"2075","suppressedMessages":"2076","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2077","usedDeprecatedRules":"927"},{"filePath":"2078","messages":"2079","suppressedMessages":"2080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2081","messages":"2082","suppressedMessages":"2083","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2084","messages":"2085","suppressedMessages":"2086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2087","messages":"2088","suppressedMessages":"2089","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2090","messages":"2091","suppressedMessages":"2092","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2093","usedDeprecatedRules":"927"},{"filePath":"2094","messages":"2095","suppressedMessages":"2096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2097","messages":"2098","suppressedMessages":"2099","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2100","messages":"2101","suppressedMessages":"2102","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2103","usedDeprecatedRules":"927"},{"filePath":"2104","messages":"2105","suppressedMessages":"2106","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2107","usedDeprecatedRules":"927"},{"filePath":"2108","messages":"2109","suppressedMessages":"2110","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2111","usedDeprecatedRules":"927"},{"filePath":"2112","messages":"2113","suppressedMessages":"2114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2115","messages":"2116","suppressedMessages":"2117","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2118","usedDeprecatedRules":"927"},{"filePath":"2119","messages":"2120","suppressedMessages":"2121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2122","usedDeprecatedRules":"927"},{"filePath":"2123","messages":"2124","suppressedMessages":"2125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2126","messages":"2127","suppressedMessages":"2128","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2129","usedDeprecatedRules":"927"},{"filePath":"2130","messages":"2131","suppressedMessages":"2132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2133","messages":"2134","suppressedMessages":"2135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2136","messages":"2137","suppressedMessages":"2138","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2139","usedDeprecatedRules":"927"},{"filePath":"2140","messages":"2141","suppressedMessages":"2142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2143","messages":"2144","suppressedMessages":"2145","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2146","usedDeprecatedRules":"927"},{"filePath":"2147","messages":"2148","suppressedMessages":"2149","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2150","usedDeprecatedRules":"927"},{"filePath":"2151","messages":"2152","suppressedMessages":"2153","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2154","usedDeprecatedRules":"927"},{"filePath":"2155","messages":"2156","suppressedMessages":"2157","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2158","usedDeprecatedRules":"927"},{"filePath":"2159","messages":"2160","suppressedMessages":"2161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2162","usedDeprecatedRules":"927"},{"filePath":"2163","messages":"2164","suppressedMessages":"2165","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2166","usedDeprecatedRules":"927"},{"filePath":"2167","messages":"2168","suppressedMessages":"2169","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2170","usedDeprecatedRules":"927"},{"filePath":"2171","messages":"2172","suppressedMessages":"2173","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2174","usedDeprecatedRules":"927"},{"filePath":"2175","messages":"2176","suppressedMessages":"2177","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2178","usedDeprecatedRules":"927"},{"filePath":"2179","messages":"2180","suppressedMessages":"2181","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2182","usedDeprecatedRules":"927"},{"filePath":"2183","messages":"2184","suppressedMessages":"2185","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2186","usedDeprecatedRules":"927"},{"filePath":"2187","messages":"2188","suppressedMessages":"2189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2190","messages":"2191","suppressedMessages":"2192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2193","messages":"2194","suppressedMessages":"2195","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2196","usedDeprecatedRules":"927"},{"filePath":"2197","messages":"2198","suppressedMessages":"2199","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2200","usedDeprecatedRules":"927"},{"filePath":"2201","messages":"2202","suppressedMessages":"2203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2204","messages":"2205","suppressedMessages":"2206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2207","messages":"2208","suppressedMessages":"2209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2210","messages":"2211","suppressedMessages":"2212","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2213","usedDeprecatedRules":"927"},{"filePath":"2214","messages":"2215","suppressedMessages":"2216","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2200","usedDeprecatedRules":"927"},{"filePath":"2217","messages":"2218","suppressedMessages":"2219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2220","messages":"2221","suppressedMessages":"2222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2223","messages":"2224","suppressedMessages":"2225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2226","messages":"2227","suppressedMessages":"2228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2229","messages":"2230","suppressedMessages":"2231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2232","messages":"2233","suppressedMessages":"2234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2235","messages":"2236","suppressedMessages":"2237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2238","messages":"2239","suppressedMessages":"2240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2241","messages":"2242","suppressedMessages":"2243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2244","messages":"2245","suppressedMessages":"2246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2247","messages":"2248","suppressedMessages":"2249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2250","messages":"2251","suppressedMessages":"2252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2253","messages":"2254","suppressedMessages":"2255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2256","messages":"2257","suppressedMessages":"2258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2259","usedDeprecatedRules":"927"},{"filePath":"2260","messages":"2261","suppressedMessages":"2262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2263","messages":"2264","suppressedMessages":"2265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2266","messages":"2267","suppressedMessages":"2268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2269","usedDeprecatedRules":"927"},{"filePath":"2270","messages":"2271","suppressedMessages":"2272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2273","messages":"2274","suppressedMessages":"2275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2276","messages":"2277","suppressedMessages":"2278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2279","messages":"2280","suppressedMessages":"2281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2282","messages":"2283","suppressedMessages":"2284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2285","messages":"2286","suppressedMessages":"2287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2288","messages":"2289","suppressedMessages":"2290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2291","messages":"2292","suppressedMessages":"2293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2294","messages":"2295","suppressedMessages":"2296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2297","messages":"2298","suppressedMessages":"2299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2300","messages":"2301","suppressedMessages":"2302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2303","messages":"2304","suppressedMessages":"2305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2306","messages":"2307","suppressedMessages":"2308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2309","messages":"2310","suppressedMessages":"2311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2312","messages":"2313","suppressedMessages":"2314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2315","messages":"2316","suppressedMessages":"2317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2318","messages":"2319","suppressedMessages":"2320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2321","messages":"2322","suppressedMessages":"2323","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2324","usedDeprecatedRules":"927"},{"filePath":"2325","messages":"2326","suppressedMessages":"2327","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2328","usedDeprecatedRules":"927"},{"filePath":"2329","messages":"2330","suppressedMessages":"2331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2332","messages":"2333","suppressedMessages":"2334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2335","messages":"2336","suppressedMessages":"2337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2338","messages":"2339","suppressedMessages":"2340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2341","messages":"2342","suppressedMessages":"2343","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2344","usedDeprecatedRules":"927"},{"filePath":"2345","messages":"2346","suppressedMessages":"2347","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2348","usedDeprecatedRules":"927"},{"filePath":"2349","messages":"2350","suppressedMessages":"2351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2352","usedDeprecatedRules":"927"},{"filePath":"2353","messages":"2354","suppressedMessages":"2355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2356","messages":"2357","suppressedMessages":"2358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2359","messages":"2360","suppressedMessages":"2361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2362","messages":"2363","suppressedMessages":"2364","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2365","usedDeprecatedRules":"927"},{"filePath":"2366","messages":"2367","suppressedMessages":"2368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2369","messages":"2370","suppressedMessages":"2371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2372","messages":"2373","suppressedMessages":"2374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2375","messages":"2376","suppressedMessages":"2377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2378","messages":"2379","suppressedMessages":"2380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2381","messages":"2382","suppressedMessages":"2383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2384","messages":"2385","suppressedMessages":"2386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2387","messages":"2388","suppressedMessages":"2389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2390","messages":"2391","suppressedMessages":"2392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2393","messages":"2394","suppressedMessages":"2395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2396","messages":"2397","suppressedMessages":"2398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2399","messages":"2400","suppressedMessages":"2401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2402","messages":"2403","suppressedMessages":"2404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2405","messages":"2406","suppressedMessages":"2407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2408","messages":"2409","suppressedMessages":"2410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2411","messages":"2412","suppressedMessages":"2413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2414","messages":"2415","suppressedMessages":"2416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2417","messages":"2418","suppressedMessages":"2419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2420","messages":"2421","suppressedMessages":"2422","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2423","usedDeprecatedRules":"927"},{"filePath":"2424","messages":"2425","suppressedMessages":"2426","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2427","usedDeprecatedRules":"927"},{"filePath":"2428","messages":"2429","suppressedMessages":"2430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2431","messages":"2432","suppressedMessages":"2433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2434","messages":"2435","suppressedMessages":"2436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2437","messages":"2438","suppressedMessages":"2439","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2440","usedDeprecatedRules":"927"},{"filePath":"2441","messages":"2442","suppressedMessages":"2443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2444","messages":"2445","suppressedMessages":"2446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2447","messages":"2448","suppressedMessages":"2449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2450","messages":"2451","suppressedMessages":"2452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2453","messages":"2454","suppressedMessages":"2455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2456","messages":"2457","suppressedMessages":"2458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2459","messages":"2460","suppressedMessages":"2461","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2462","usedDeprecatedRules":"927"},{"filePath":"2463","messages":"2464","suppressedMessages":"2465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2466","messages":"2467","suppressedMessages":"2468","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2469","usedDeprecatedRules":"927"},{"filePath":"2470","messages":"2471","suppressedMessages":"2472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2473","messages":"2474","suppressedMessages":"2475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2476","messages":"2477","suppressedMessages":"2478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2479","messages":"2480","suppressedMessages":"2481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2482","messages":"2483","suppressedMessages":"2484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2485","messages":"2486","suppressedMessages":"2487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2488","messages":"2489","suppressedMessages":"2490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2491","messages":"2492","suppressedMessages":"2493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2494","messages":"2495","suppressedMessages":"2496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2497","messages":"2498","suppressedMessages":"2499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},{"filePath":"2500","messages":"2501","suppressedMessages":"2502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"927"},"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\index.js",[],[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\App.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\reportWebVitals.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\i18n.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\store.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\JwtContext.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scroll-to-top\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\config.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\rootReducer.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\utils.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\axios.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\langs\\ar.js",["2503","2504","2505","2506","2507","2508","2509","2510","2511","2512","2513","2514","2515","2516","2517","2518","2519","2520","2521","2522","2523","2524","2525","2526","2527","2528","2529","2530","2531","2532","2533","2534","2535","2536","2537","2538","2539","2540","2541","2542","2543","2544","2545","2546","2547","2548"],[],"// ----------------------------------------------------------------------\r\n\r\nconst ar = {\r\n  title: `Arabic`,\r\n  hi: `أهلا`,\r\n  email: `البريد الإلكتروني`,\r\n  password: `كلمة المرور`,\r\n  sign_in: `تسجيل الدخول`,\r\n  email_is_required: ` مطلوب إدخال البريد الإلكتروني`,\r\n  password_is_required: `مطلوب إدخال كلمة المرور `,\r\n  user_id: `ID المستخدم`,\r\n  type_question: `اكتب سؤالك ...`,\r\n  search: `ابحث ...`,\r\n  // ---------------------------Menu-------------------------------------\r\n  dashboard: `الرئيسية`,\r\n  overview: `نظرة عامة`,\r\n  users: `المستخدمون`,\r\n  performance: `الأداء`,\r\n  finance: `الوضع المالي`,\r\n  rank: `التصنيف`,\r\n  opportunity_center: `مركز الفرص`,\r\n  account_settings: `إعدادات الحساب`,\r\n  help: `المساعدة`,\r\n  log_out: `تسجيل الخروج`,\r\n  // ---------------------------general-------------------------------------\r\n  print: `طباعة`,\r\n  export: `تصدير `,\r\n  sort_by: `الترتيب بحسب `,\r\n  total_users: `إجمالي المستخدمين`,\r\n\r\n  // ==================================== @@@@ ADMIN @@@@ ======================================\r\n\r\n  // ------------------------ ADMIN Auth ----------------------------\r\n  //******  LOGIN\r\n  welcome_to: `مرحباً بكم في`,\r\n  enter_your_data_to_log_in: `أدخل الكود لتسجيل الدخول`,\r\n  Email: `البريد الإلكتروني`,\r\n  forget_password: `نسيت كلمة المرور ؟`,\r\n  login: `تسجيل الدخول`,\r\n  you_donot_have_an_account: ` انت لاتمتلك حساب ؟`,\r\n  create_an_account_for_your_restaurant_now_to: `قم بإنشاء حساب مطعمك `,\r\n  start_your_journey_with_DNNDON: `لتبدأ رحلتك مع دندون`,\r\n  email_must_be_a_valid_email_address: `البريد الإلكتروني يجب أن يكون صالح`,\r\n\r\n  //****** REGISTER\r\n  first_name_is_required: `مطلوب إدخال الاسم الأول`,\r\n  last_name_is_required: `مطلوب إدخال الاسم الأخير `,\r\n  required: `حقل مطلوب`,\r\n  address: `الموقع`,\r\n  address_name: `العنوان`,\r\n  phone_number_is_required: `مطلوب إدخال رقم الموبايل`,\r\n  address_is_required: `مطلوب إدخال العنوان`,\r\n  address_name_is_required: `مطلوب إدخال اسم العنوان`,\r\n  building_is_required: `مطلوب إدخال رقم المبني`,\r\n  floor_is_required: `مطلوب إدخال رقم الطابق`,\r\n  apartment_is_required: `مطلوب إدخال رقم الشقة`,\r\n  confirm_password_is_requierd: `مطلوب تأكيد كلمة المرور`,\r\n  passwords_do_not_match: `غير مطابق لكلمة المرور`,\r\n  create_account: `إنشاء حساب`,\r\n  enter_your_data_to_create_your_account: `أدخل بياناتك لإنشاء حساب `,\r\n  first_name: `الاسم الأول`,\r\n  last_name: `الاسم الأخير`,\r\n  admin_email: `ايميل الادمن `,\r\n  admin_phone: ` موبايل الادمن`,\r\n  admin_password: `كلمة مرور الادمن `,\r\n  country_code: `رمز الدولة`,\r\n  phone_number: `رقم الموبايل`,\r\n  enter_your_address: `أدخل عنوانك`,\r\n  building: `المبنى`,\r\n  floor: `الطابق`,\r\n  apartment: `الشقة`,\r\n  confirm_password: `تأكيد كلمة المرور`,\r\n  you_have_an_account_already: ` أنت تمتلك حساب بالفعل ؟`,\r\n  next: `التالي`,\r\n  address_phone_number: `رقم تليفون العنوان`,\r\n  address_phone_number_is_required: `مطلوب إدخال رقم تليفون المنزل`,\r\n  password_must_have_one_uppercase_one_special_charcteres_one_number_minimum_length_9_digit:\r\n    \"كلمة المرور يجب أن تحتوي علي  واحد حرف كبير ورقم ورمز ولا تقل عن 9 أحرف ,\",\r\n  pick_your_location: `اختر موقعك الحالي`,\r\n  pick_up_location: `اختر موقعا`,\r\n  coverPhoto_is_required: `صورة الغلاف مطلوبة`,\r\n  commercialregister_is_required: `السجل التجاري مطلوب`,\r\n  website_is_required: `مطلوب الموقع`,\r\n  //****** RESTAURANT FORM\r\n  store_type_is_required: `مطلوب إختيار نوع المتجر`,\r\n  category_is_required: `مطلوب إختيار الفئة`,\r\n  en_istore_name_is_required: `اسم المتجر باللغة الإنجليزية مطلوب `,\r\n  ar_store_name_is_required: `اسم المتجر باللغة العربية مطلوب `,\r\n  en_service_desc_is_required: `نوع الخدمة باللغة الإنجليزية مطلوب`,\r\n  ar_service_desc_is_required: `نوع الخدمة باللغة العربية مطلوب`,\r\n  country_id_is_required: `البلد  مطلوب`,\r\n  city_id_is_required: `المدينة  مطلوب`,\r\n  nationality_id_is_required: `الجنسية مطلوبة`,\r\n  admin_photo_is_required: `صورة الأدمن مطلوبة    `,\r\n  PhoneNo1_is_required: `رقم الموبايل  مطلوب`,\r\n  minimum_order_price_is_required: ` الحد الأدنى للطلب مطلوب`,\r\n  tax_is_required: `الضريبة مطلوبة`,\r\n  store_name_is_required: ` إدخال إسم المتجر`,\r\n  store_location_is_requierd: `  عنوان المتجر مطلوب`,\r\n  store_licenses_is_required: `  ترخيص المتجر مطلوب `,\r\n  store_logo_is_required: `  شعار المتجر مطلوب `,\r\n  enter_your_restaurant_information_to_create_your_account: `قم بإدخال بيانات مطعمك لإنشاء حساب\r\n  `,\r\n  store_type: `توع المتجر`,\r\n  restaurant: `مطعم`,\r\n  market: `ماركت`,\r\n  select_category: `اختر الفئة`,\r\n  store_name: `اسم المتجر باللغة الإنجليزية`,\r\n  arabic_store_name: `اسم المتجر باللغة العربية`,\r\n  country: `البلد`,\r\n  city: `المدينة`,\r\n  service_desc: `وصف الخدمة باللغة الإنجليزية`,\r\n  service_desc_ar: `وصف الخدمة باللغة العربية`,\r\n  minimum_order_price: `الحد الأدنى للطلب `,\r\n  tax_card: `الضريبة `,\r\n  first_phone_number: `رقم الهاتف الأول`,\r\n  second_phone_number: `رقم الهاتف الثاني`,\r\n  enter_store_location: `أدخل عنوان المتجر`,\r\n  store_website_optional: ` الموقع الإلكتروني للمتجر (إختياري)`,\r\n  store_licenses: `ترخيص المتجر`,\r\n  store_logo: `شعار البراند`,\r\n  logo: `اللوغو`,\r\n  cover_img: `صورة الغلاف `,\r\n  license_img: `صورة الترخيص `,\r\n\r\n  //****** PAYMENT FORM\r\n  name_on_card_is_required: `مطلوب إدخال الاسم الموجود بالكارت`,\r\n  card_number_is_required: `مطلوب إدخال رقم الكارت`,\r\n  expire_date_is_required: `مطلوب إخال تاريخ إنتهاء الصلاحية `,\r\n  enter_name_on_card: `أدخل الاسم الموجود بالكارت `,\r\n  enter_card_number: `أدخل رقم الكارت`,\r\n  cvv_is_requierd: `مطلوب إدخال رمز CVV`,\r\n  enter_your_payment_information: `أدخل بيانات عملية الدفع`,\r\n  mm_yy: `شهر / سنة`,\r\n  cvv: `CVV`,\r\n  you_can_skip_this_process: `تخطي هذة الخطوة`,\r\n  submit_your_request: `أرسل طلبك`,\r\n  sign_up: `إنشاء حساب`,\r\n  add_accont_number: `إضافة رقم حساب`,\r\n  add_new_account: `إضافة حساب جديد`,\r\n  admin_photo: `صورة الأدمن `,\r\n  search_place: `ابحث عن مكان`,\r\n  resend_code: `إعادة إرسال الرمز `,\r\n\r\n  //****** RESET FORM and verivication and login with newpassword\r\n  confirm_email: `تأكيد الإيميل`,\r\n  we_sent_an_email_for_reset_your_password_you_need_to_enter_code_within_1_min: `\r\n  أدخل رمز التحقق الخاص بك للتحقق من بريدك الإلكتروني.\r\n  `,\r\n  please_enter_your_email_to_reset_your_password: `الرجاء إدخال بريدك الإلكتروني لإعادة تعيين كلمة المرور الخاصة بك`,\r\n  verification_code: `رمز التحقق`,\r\n  verification_code_is_required: `مطلوب إدخال رمز التحقق`,\r\n  reset_password: `إعادة تعيين كلمة المرور`,\r\n\r\n  // ------------------------ ADMIN Overveiw Page ----------------------------\r\n  welcome_to_ddndon: `أهلا بك في دندون`,\r\n  adam_smith: `آدم`,\r\n  admin: `آدمن`,\r\n  show_profile: `عرض الصفحة الشخصية`,\r\n  all_branches_overview: `نظرة عامة على جميع الفروع`,\r\n  the_highest_income_branches: `الفروع الاعلى دخلاً`,\r\n  view_all: `عرض الكل`,\r\n  manager: `المدير`,\r\n  most_selling_cities: `المدن الاكثر مبيعاً`,\r\n  total_number_of_customers: `العدد الكلي للزبائن`,\r\n  active: `نشط`,\r\n  inactive: `غير نشط`,\r\n  completed: ` طلبات مكتملة  `,\r\n  incomplete: ` طلبات غير مكتملة`,\r\n  total_number_of_orders: `إجمالي عدد الطلبات`,\r\n  congratulations: `تهانينا`,\r\n  p: `تمت الموافقة على فروعك الجديدة بعد مراجعتها من قبل دندون ..يرجى اكمال باقي البيانات المفقودة حتى تتمكن من اضافتها للتطبيق`,\r\n  complete_now: `الاكمال الان`,\r\n  cancel: `اغلاق`,\r\n  delete: `حذف`,\r\n  are_you_sure_you_want_to_delete_this_branch: `ظد هل نريد بالتأكيد حذف هذا الفرع ؟`,\r\n  delete_item: `حذف عنصر `,\r\n  over_view: `نظرة عامة`,\r\n  to: `الى`,\r\n  new_branches: `الفروع الجديدة`,\r\n\r\n  // ------------------------ ADMIN Help Page ----------------------------\r\n  acceptance_of_terms: `قبول الشروط`,\r\n  p1: `من خلال التسجيل في الخدمة و / أو استخدامها بأي طريقة ، بما في ذلك على سبيل المثال لا الحصر زيارة الموقع أو تصفحه ، فإنك توافق على جميع البنود والشروط الواردة هنا (\"شروط الاستخدام\") ، والتي تتضمن أيضًا سياسة الخصوصية وجميع قواعد التشغيل والسياسات والإجراءات الأخرى التي قد يتم نشرها من وقت لآخر على الموقع بواسطة Elmenus ، كل منها مدمج بالإشارة ويمكن تحديث كل منها بواسطة Elmenus من وقت لآخر دون إشعار لك. بالإضافة إلى ذلك ، قد تخضع بعض الخدمات المقدمة من خلال الخدمة لشروط وأحكام إضافية تحددها Elmenus من وقت لآخر ؛ يخضع استخدامك لهذه الخدمات لتلك الشروط والأحكام الإضافية ، والتي تم تضمينها في شروط الاستخدام هذه من خلال هذا المرجع. تنطبق شروط الاستخدام هذه على جميع مستخدمي الخدمة ، بما في ذلك ، على سبيل المثال لا الحصر ، المستخدمين المساهمين بالمحتوى والمعلومات والمواد أو الخدمات الأخرى على الموقع والمستخدمين الفرديين للخدمة والمطاعم التي لديها صفحة على الخدمة.\r\n    وصول.`,\r\n  p2: `وفقًا لشروط الاستخدام هذه ، قد تعرض Elmenus تقديم الخدمات ، كما هو موضح بشكل أكثر تفصيلاً على الموقع ، والتي يتم اختيارها من قبلك ، فقط لاستخدامك الخاص ، وليس لاستخدام أو منفعة أي طرف ثالث. تشمل الخدمات ، على سبيل المثال لا الحصر ، أي خدمات تقدمها Elmenus لك ، وأي تطبيقات تقدمها Elmenus تقوم بتنزيلها من الموقع أو ، وفقًا للشروط المنصوص عليها في قسم \"مواقع وخدمات الطرف الثالث\" أدناه ، من جهة خارجية. مخازن تطبيقات الطرف (على سبيل المثال ، iTunes® store أو Blackberry App World ™ أو Google Apps Marketplace) المصرح بها من قبل Elmenus ، بالإضافة إلى عرض أي مواد معروضة أو يتم إجراؤها على الخدمات أو من خلالها (بما في ذلك المحتوى (كما هو موضح أدناه)).\r\n    التسجيل والأهلية.`,\r\n  p3: `يمكنك تصفح الموقع وعرض المحتوى دون تسجيل ، ولكن كشرط لاستخدام جوانب معينة من الخدمة ، يتعين عليك التسجيل في Elmenus والإقرار والتعهد بأنك تزود Elmenus بمعلومات تسجيل دقيقة وكاملة (بما في ذلك ، ولكن لا يقتصر على اسم المستخدم (\"اسم المستخدم\") وعنوان البريد الإلكتروني وكلمة المرور التي ستستخدمها للوصول إلى الخدمة) وللحفاظ على دقة معلومات التسجيل الخاصة بك وتحديثها. يشكل عدم القيام بذلك خرقًا لشروط الاستخدام هذه ، مما قد يؤدي إلى الإنهاء الفوري لحساب Elmenus الخاص بك. نوصي باستخدام اسمك كاسم مستخدم خاص بك حتى يتمكن أصدقاؤك من التعرف عليك بسهولة أكبر ، ولكن لا نطلب ذلك.\r\n    لا يجب عليك:`,\r\n  p4: `-إنشاء أي حساب لأي شخص آخر غيرك دون إذن هذا الشخص ؛`,\r\n  h1: `. استخدام اسم مستخدم هو اسم شخص آخر بقصد انتحال شخصية هذا الشخص ؛`,\r\n  h2: `. استخدام اسم مستخدم أو حساب Elmenus يخضع لأي حقوق لشخص آخر غيرك دون إذن مناسب ؛ أو`,\r\n  h3: `. استخدام اسم مستخدم يكون ، بخلاف ذلك ، مسيئًا أو بذيئًا أو فاحشًا أو غير قانوني بأي شكل آخر.`,\r\n  p5: `تحتفظ Elmenus بالحق في رفض تسجيل أو إلغاء اسم المستخدم وفقًا لتقديرها الخاص. أنت وحدك المسؤول والمسؤول عن النشاط الذي يحدث على حسابك وستكون مسؤولاً عن الحفاظ على سرية كلمة مرور Elmenus الخاصة بك. لا يجوز لك أبدًا استخدام حساب مستخدم آخر دون إذن صريح مسبق من هذا المستخدم الآخر. ستقوم على الفور بإخطار Elmenus كتابيًا بأي استخدام غير مصرح به لحسابك ، أو أي خرق أمني آخر متعلق بالحساب تكون على علم به.\r\n    أنت تقر وتضمن أنه إذا كنت فردًا ، فأنت في السن القانوني لإبرام عقد ملزم ، أو أنك إذا كنت تقوم بالتسجيل نيابة عن كيان ، فأنت مخول للدخول في هذه الشروط وإلزام الكيان بها. الاستخدام والتسجيل في الخدمة. الخدمة غير متاحة للأفراد الذين تقل أعمارهم عن 13 عامًا. يجوز لشركة Elmenus ، وفقًا لتقديرها الخاص ، رفض تقديم الخدمة لأي شخص أو كيان وتغيير معايير الأهلية الخاصة بها في أي وقت. أنت وحدك المسؤول عن ضمان امتثال شروط الاستخدام هذه لجميع القوانين والقواعد واللوائح السارية عليك والحق في الوصول`,\r\n  privacy_policy: `سياسة الخصوصية`,\r\n  legal_updates: `تحديثات قانونية`,\r\n  terms_conditions: `الإحكام والشروط`,\r\n  book_meeting: `إحجز اجتماع `,\r\n  meeting_title: `موضوع الإجتماع`,\r\n  type_your_question_here: `اكتب سؤالك هنا`,\r\n  meeting_details: `تفاصيل الإجتماع`,\r\n  available_time_slots: `الفترات الزمنية المتاحة`,\r\n  help: `مساعدة ودعم`,\r\n  faqs: `الأسئلة`,\r\n  booking_meeting: `حجز إجتماع`,\r\n  // ------------------------ ADMIN Branches Page ----------------------------\r\n  //****** BRANCHLIST PAGE\r\n  branches: `الفروع`,\r\n  add_new_branch: `إضافة فرع جديد`,\r\n  branche_name: `اسم الفرع`,\r\n  branch_status: `حالة الفرع`,\r\n  location: `الموقع`,\r\n  total_orders: `إجمالي الطلبات`,\r\n  completed_orders: `الطلبات المكتملة`,\r\n  reviews: `المراجعات`,\r\n  action: `الإجراءات`,\r\n  rows_per_page: `صف لكل صفحة`,\r\n  branch_id: `رقم تعريفي للفرع`,\r\n  status: `الحالة`,\r\n  data_completeness: ` نسبة إكتمال البيانات`,\r\n  available: `متاح`,\r\n  not_available: `غير متاح`,\r\n  busy: `مشغول`,\r\n  pending: `قيد الإنتظار`,\r\n  rejected: `مروفوض`,\r\n\r\n  //****** ADD and EDIT NEW BRANCH\r\n  branch_name_is_required: `مطلوب إدخال اسم الفرع`,\r\n  branch_location_is_required: `مطلوب إدخال موقع الفرع `,\r\n  branch_licenses_is_requierd: `مطلوب إدخال تراخيص الفرع`,\r\n  branch_manager_name_is_requierd: `مطلوب إدخال إسم مدير الفرع`,\r\n  branch_manager_email_is_requierd: `مطلوب إدخال البريد الإلكتروني لمدير الفرع`,\r\n  branch_logo_is_required: `مطلوب إدخال صورة شعار المطعم`,\r\n  branch_cover_is_required: `مطلوب إدخال صورة غلاف للفرع`,\r\n  branch_location: `موقع الفرع`,\r\n  branch_licenses: `تراخيص الفرع`,\r\n  branch_logo: `صورة شعار الفرع`,\r\n  branch_cover: `صورة غلاف الفرع`,\r\n  social_media_page_optional: `صفحة التواصل الإجتماعي للفرع (إختياري)`,\r\n  add_social_contact: `إضافة جهة اتصال اجتماعية`,\r\n  add_social_media: `إضافة موقع تواصل  اجتماعي`,\r\n  user_name_url: `اسم المستخدم / رابط`,\r\n  add_branch_maneger: `إضافة مدير الفرع`,\r\n  branch_manager_name: `اسم مدير الفرع`,\r\n  branch_manager_email: `البريد الإلكتروني لمدير الفرع`,\r\n  edit_branch_info: `تعديل معلومات الفرع`,\r\n  edit_branch: `تعديل الفرع`,\r\n  branch_manager: `مدير الفرع`,\r\n  description_en: \"\",\r\n  description_ar: \"\",\r\n  branch_type: `نوع الفرع`,\r\n  description_en: `الوصف باللغة الانكليزية`,\r\n  description_ar: `الوصف باللغة العربية`,\r\n  PhoneNo1: `رقم الهاتف الاول`,\r\n  PhoneNo2: `رقم الهاتف  الثاني`,\r\n  branch_tax_card: `البطاقة الضريبية للفرع`,\r\n  description_en: \"\",\r\n  description_ar: \"\",\r\n  //\r\n  add_new_branch_manager: `إضافة مدير للفرع الجديد`,\r\n  second_name: `الاسم الثاني`,\r\n  branch_manager_address: `عنوان مدير الفرع`,\r\n  manager_phone: `رقم موبايل المدير`,\r\n  add_phone: `إضافة رقم`,\r\n  second_name_is_required: `مطلوب إدخال الاسم الثاني`,\r\n  manager_email_is_required: `مطلوب إدخال البريد الإلكتروني `,\r\n  manager_address_is_required: `مطلوب إدخال عنوان `,\r\n  manager_phone_is_required: `مطلوب إدخال رقم موبايل `,\r\n  confirm_password_is_required: `مطلوب تأكيد كلمة المرور`,\r\n  description_en: \"الوصف (إنجليزي)\",\r\n  description_ar: \"الوصف (عربي)\",\r\n  branch_license: \"رخصة الفرع\",\r\n  branch_tax_card: \"السجل الضريبي للفرع\",\r\n  selected: \"محدد\",\r\n  phoneNo1: \"رقم الهاتف الأول\",\r\n  phoneNo2: \"رقم الهاتف الثاني\",\r\n  branch_description_en_is_required: \"مطلوب إدخال وصف الفرع باللغة الإنجليزية\",\r\n  branch_description_ar_is_required: \"مطلوب إدخال وصف الفرع باللغة العربية\",\r\n  branch_tax_card_is_required: \"مطلوب إدخال السجل الضريبي للفرع\",\r\n  phone_number1_is_required: \"مطلوب إدخال رقم الهاتف الأول\",\r\n  phone_number2_is_required: \"مطلوب إدخال رقم الهاتف الثاني\",\r\n  // add-working day page\r\n  add_working_days: `إضافة أيام العمل`,\r\n  minimum_order_is_required: ` مطلوب إدخال الحد الأدني للطلب`,\r\n  minimum_order: `الحد الأدني للطلب`,\r\n  branch_categories_en_is_required: `مطلوب إدخال أصناف الفرع (en)`,\r\n  branch_categories_ar_is_required: `مطلوب إدخال أصناف الفرع (ar)`,\r\n  branch_categories_ar: ` أصناف الفرع (ar)`,\r\n  branch_categories_en: ` أصناف الفرع (en)`,\r\n  if_you_press_back_the_changes_you_have_made_will_be: `إذا ضغطت على رجوع ، فستكون التغييرات التي أجريتها`,\r\n  canceled_are_you_sure: `ألغيت. هل أنت متأكد`,\r\n  about_this_step: ` من هذه الخطوة؟`,\r\n  continue_editing: `إكمال التعديل`,\r\n  must_be_this_format_08_00_22_00: \"يجب ان يكون بالتنسيق (22:00-08:00) \",\r\n  //****** BRANCH ADDED SUCCESSFULLY POPUP\r\n  branch_summited_successfully: `تم إرسال بينات الفرع بنجاح`,\r\n  respond_as_soon_as_possible: `الرد في أسرع وقت ممكن`,\r\n  all_details_of_this_branch_will_be_reviewed_and_we_will: ` سيتم مراجعة  بيانات الفرع وسيكون `,\r\n  add_branch: `إضافة فرع`,\r\n  back_to_dashboard: ` العودة إلي لوحة التحكم `,\r\n  go_to_verifiaction_email: `انقر لتأكيد الايميل `,\r\n\r\n  //****** BRANCH DETAILS POP UP\r\n  branch_open: `الفرع مفتوح`,\r\n  branch_close: `الفرع مغلق`,\r\n  analysis: `التحليلات `,\r\n  info: `المعلومات`,\r\n  //analysis\r\n  total_number_of_customer: `إجمالي عدد العملاء`,\r\n  incompleted: `طلبات غير مكتملة `,\r\n  good: `المراجعات الجيدة`,\r\n  bad: `المراجاعات السيئة`,\r\n  earning: `الأرباح`,\r\n  month: `شهر`,\r\n  this_month: `الشهر الحالي`,\r\n  from_previous_month: `من الشهر الماضي`,\r\n  last_month: `الشهر الماضي`,\r\n  view_details: `عرض التفاصيل`,\r\n  branch_manger: `مدير الفرع `,\r\n  contact_info: `معلومات التواصل`,\r\n  categories: `الفئات`,\r\n  fried_chicken: `دجاج مقلي`,\r\n  sandwiches: `ساندوتش`,\r\n  fast_food: `وجبات سريعة`,\r\n  chicken: `دجاج`,\r\n  rating: `التقييم`,\r\n  delivery_time: `وقت التوصيل`,\r\n  mins: `دقيقة`,\r\n  minimum_order_amount: `الحد الأدني للطلب`,\r\n  delivery_free: `توصيل مجاني`,\r\n  payment: `الدفع`,\r\n  pre_order: `طلب مسبق`,\r\n  yes: `نعم`,\r\n  open_now: `مفتوح الأن`,\r\n  working_days: `أيام العمل`,\r\n  saturday: `السبت`,\r\n  sunday: `الأحد`,\r\n  monday: `الأثنين`,\r\n  tuesday: `الثلاثاء`,\r\n  wednesday: `الأربعاء`,\r\n  thursday: `الخميس`,\r\n  friday: `الجمعة`,\r\n  recent_reviews: `المراجعات الأخيرة`,\r\n  edit: `تعديل`,\r\n  // ------------------------ ADMIN Contact us Page ----------------------------\r\n  contact_us: `تواصل معنا`,\r\n  send_us_your_question_now_and_we_will_get_back_to: `ارسل لنا سؤالك الآن وسنعاود الاتصال`,\r\n  you_as_soon_as_possible: `بك في اقرب وقت ممكن`,\r\n  your_question: `سؤالك`,\r\n  send: `ارسال`,\r\n  add_inquiry: `إضافة إستفسار`,\r\n  send_us_your_question_now_and_we_will_get_back_to_you_as_soon_as_possible: `أرسل لنا سؤالك الآن وسنعاود الاتصال بك في أقرب وقت ممكن`,\r\n  subject: `الموضوع`,\r\n  details: `تفاصيل`,\r\n  send_inquiry: `إرسال استفسار`,\r\n  inbox: `صندوق الوارد`,\r\n  contact_information: `معلومات الاتصال`,\r\n  enter_message: `ادخل رسالة`,\r\n  enter_question_title: `أدخل الموضوع `,\r\n  subject_is_required: `مطلوب إدخال الموضوع`,\r\n  details_is_required: `مطلوب إدخال التفاصيل`,\r\n\r\n  // ------------------------ ADMIN User Page ----------------------------\r\n  show_password: `عرض كلمة السر`,\r\n  user_name: `اسم المستخدم`,\r\n  add_new_user: `اضافة مستخدم جديد`,\r\n  add_user: `اضافة مستخدم`,\r\n  select_user_position: `اختر موقع المستخدم`,\r\n  select_branch: `اختر الفرع`,\r\n  user_address: `عنوان المستخدم `,\r\n  user_summited_successfully: `تمت اضافة المستخدم بنجاح`,\r\n  request_has_been_sended_success: `تم إرسال طلبك بنجاح`,\r\n  hint_send: `سوف تتلقى رسالة تأكيد بالبريد الإلكتروني في غضون 48 ساعة`,\r\n  user_data: `بيانات المستخدم`,\r\n  position: `الوظيفة`,\r\n  user_position: `المسمي الوظيفي`,\r\n  branch: \"الفرع\",\r\n  employee: \"موظف\",\r\n  regional_manager: \"مدير منطقة\",\r\n  owner: \"المالك\",\r\n  branch_manager: \"مدير فرع\",\r\n  chasher: \"كاشير\",\r\n  employee_address: \"عنوان الموظف\",\r\n  position_is_required: \"مطلوب إدخال الوظيفة\",\r\n  employee_position: \"الوظيفة\",\r\n  employee_branch: \"فرع الموظف\",\r\n  add_employee: \"إضافة الموظف\",\r\n  branch_is_required: \"مطلوب إدخال الفرع\",\r\n  employee_phone: \"رقم موبايل الموظف\",\r\n  delete_employee_information: \"حذف معلومات الموظف\",\r\n  edit_employee_information: \"تعديل معلومات الموظف\",\r\n  confirm_edit: \"حفظ التعديل\",\r\n  branch: \"الفرع\",\r\n  employee: \"موظف\",\r\n  regional_manager: \"مدير منطقة\",\r\n  owner: \"المالك\",\r\n  branch_manager: \"مدير فرع\",\r\n  chasher: \"كاشير\",\r\n  employee_address: \"عنوان الموظف\",\r\n  position_is_required: \"مطلوب إدخال الوظيفة\",\r\n  employee_position: \"الوظيفة\",\r\n  employee_branch: \"فرع الموظف\",\r\n  add_employee: \"إضافة الموظف\",\r\n  branch_is_required: \"مطلوب إدخال الفرع\",\r\n  employee_phone: \"رقم موبايل الموظف\",\r\n  delete_employee_information: \"حذف معلومات الموظف\",\r\n  edit_employee_information: \"تعديل معلومات الموظف\",\r\n  confirm_edit: \"حفظ التعديل\",\r\n  user_phone: \"موبايل المستخدم\",\r\n  edit_employee_info: \"تعديل معلومات الموظف\",\r\n\r\n  profile_picture_is_required: \"مطلوب إدخال الصورة الشخصية\",\r\n  profile_picture: \"الصورة الشخصية\",\r\n  // ------------------------ ADMIN Finance Page ----------------------------\r\n  financial: `الماليات`,\r\n  total_balance: `إجمالي الرصيد`,\r\n  net_balance: `الرصيد الصافي`,\r\n  with_value_added_tax: `مع ضريبة القيمة المضافة`,\r\n  from_previous_period: `من الفترة السابقة`,\r\n  invoice_id: `رقم تعريفي للفاتورة`,\r\n  branch_name: `اسم الفرع`,\r\n  request_date: `تاريخ الطلب`,\r\n  withdraw_date: `تاريخ السحب`,\r\n  invoice_value: `قيمة الفاتورة`,\r\n  invoice_status: `حالة الفاتورة`,\r\n  succeed: `ناجح`,\r\n  failed: `فشل`,\r\n  invoices: `الفواتير`,\r\n  total_invoices: `إجمالي الفواتير`,\r\n  we_will_contact_you_soon_to_set_a_date: `سنقوم بالتواصل معك قريبا لتحديد موعد `,\r\n  to_receive_your_money: `لتحصي أموالك`,\r\n  transfer_cash: `تحويل إلي الحساب`,\r\n  withdraw_by_cash: `السحب النقدي`,\r\n  amount_is_required: ` مطلوب إدخال المبلغ `,\r\n  Financial: `المالية`,\r\n  select_card: `أختر كارت`,\r\n  card_is_required: `مطلوب إختيار كارت إلكتروني`,\r\n  expiry_date_is_required: `مطلوب إدخال تاريخ إنتهاء الصلاحية`,\r\n  delete_invoice: `حذف الفاتورة`,\r\n  are_you_sure_you_want_to_delete_this_invoice: `هل أنت متأكد أنك تريد حذف هذه الفاتورة ؟`,\r\n  // ------------------------ ADMIN Performance Page ----------------------------\r\n  most_selling_income: `الأكثر مبيعاً`,\r\n  highest_income: `الأعلى دخلا`,\r\n  total_income: `إجمالي الدخل`,\r\n  order: \"طلب\",\r\n  // ------------------------ ADMIN Rank Page ----------------------------\r\n  the_highest_rated_branch: `الفرع الأعلى تقييماً`,\r\n  the_lowest_rated_branch: `الفرع الأقل تقييماً`,\r\n  view_branch_details: `عرض تفاصيل الفرع`,\r\n  rate: `التقييم`,\r\n  total_reviews: `إجمالي عدد المراجعات`,\r\n  good_reviews: `مراجعات جيدة`,\r\n  bad_reviews: `مراجعات سيئة`,\r\n  branch_manager: `مدير الفرع`,\r\n  total_branches: `إجمالي الفروع`,\r\n  the_highest_income_branch: \"الفرع الأعلى دخلاً\",\r\n  branch_rank: `تقييم الفروع`,\r\n  total_ranked_branches: `إجمالي الفروع المقيمة`,\r\n  delete_branch: `حذف الفرع`,\r\n\r\n  // ------------------------ ADMIN Opportunity Page ----------------------------\r\n  menu: `القائمة`,\r\n  page_views: `مشاهدات الصفحة`,\r\n  reduce_workloads: `تقليل أعباء العمل`,\r\n  meals: `الوجبات`,\r\n  question1: `1السؤال`,\r\n  question2: `السؤال2`,\r\n  promote_your_business: `روّج لعملك!`,\r\n  Promote_your_business: `روّج لعملك`,\r\n  promote_now: `روّج الأن`,\r\n\r\n  // ------------------------ ADMIN Profile Page ----------------------------\r\n  my_profile: `الصفحة الشخصية`,\r\n  logout: `تسجيل الخروج`,\r\n  profile_information: `معلومات الصفحة الشخصية`,\r\n  full_name: `الاسم بالكامل`,\r\n  mobile1: `موبايل`,\r\n  date_of_birth: `تاريخ الميلاد`,\r\n  gender: `النوع`,\r\n  male: `ذكر`,\r\n  change_email: `تغيير البريد الإلكتروني`,\r\n  change_phone_number: `تغيير رقم الهاتف`,\r\n  change_password: `تغيير كلمة المرور`,\r\n  payment_information: `معلومات الدفع`,\r\n  add_new_card: `إضافة كارت جديد`,\r\n  expires_in: `ينتهي في`,\r\n  protection: `الحماية`,\r\n  point: `نقطة`,\r\n  change_your_phone: `تغيير رقم الهاتف`,\r\n  verfiy_email: `التحقق من البريد الإلكتروني`,\r\n  all_inputs_is_required: `مطلوب إدخال جميع حقول الإدخال`,\r\n  must_be_exactly_6_digits: `يجب إدخال 6 أرقام`,\r\n  //******  EDIT PROFILE MODAL\r\n  phone_is_required: `مطلوب إدخال رقم الموبايل `,\r\n  date_of_birth_is_required: `مطلوب إدخال تاريخ الميلاد`,\r\n  gender_is_required: `مطلوب أختيار النوع`,\r\n  edit_personal_information: `تعديل معلومات الصفحة الشخصية`,\r\n  phone: `الموبايل`,\r\n  female: `أنثي`,\r\n  update: `تحديث`,\r\n\r\n  //******  CHANGE PASSWORD MODAL\r\n  old_password_is_required: `مطلوب إدخال كلمة المرور القديمة`,\r\n  new_password_is_required: `مطلوب إدخال كلمة مرور جديدة`,\r\n  confirm_new_password_is_requierd: `مطلوب تأكييد كلمة المرور الجديدة`,\r\n  confirm_new_password: `أعد كتابة كلمة المرور الجديدة`,\r\n  new_password: `كلمة مرور جديدة`,\r\n  old_password: `كلمة المرور الجديدة`,\r\n  confirm: `تأكيد`,\r\n  //******  CHANGE EMAIL MODAL\r\n  email_must_be_avalid_email_address: `مطلوب إدخال بريد إلكتروني صالح`,\r\n  enter_password: `أدخل كلمة المرور`,\r\n  enter_your_verification_code_sent_to_your_email_within_1_minute:\r\n    \"أدخل رمز التحقق المرسل إلى بريدك الإلكتروني في غضون دقيقة واحدة\",\r\n  //******  ADD CARD MODAL\r\n  name_on_crad_is_required: `مطلوب إدخال الأسم الموجود بالكارت`,\r\n  card_expiry_date_is_required: `مطلوب إدخال تاريخ صلاحية الكارت`,\r\n  cvv_code_is_required: `مطلوب إدخال كود Cvv`,\r\n\r\n  // ==================================== @@@@ EMPLOYEE @@@@ ======================================\r\n\r\n  // ------------------------ EMPLOYEE Branch Dashboard ----------------------------\r\n  back_to_main_dashboard: `العودة إلي لوحة التحكم الرئيسية`,\r\n  the_highest_selling_meals: `الوجبات الأعلى مبيعاً`,\r\n  pending_ordrers: `الطلبات قيد الإنتظار`,\r\n  order_time: `وقت الطلب`,\r\n  order_location: `مكان الطلب`,\r\n  order_status: `حالة الطلب`,\r\n  confim_message: `تمت الموافقة على فروعك الجديدة بعد المراجعة من قبل DNNDON \r\n ، يرجى إكمال بقية البيانات  حتى تتمكن من إضافتها إلى التطبيق`,\r\n  // ------------------------ EMPLOYEE add new Offer Page ----------------------------\r\n  Add_new_offer: \"إضافة عرض جديد\",\r\n  offer_type: \"نوع العرض\",\r\n  discount_offer: \"عرض الخصم\",\r\n  combo_offer: \"عرض الكومبو\",\r\n  offer_photo: \"صورة العرض\",\r\n  description: \"الوصف\",\r\n  start_in: \"يبدأ في \",\r\n  end_in: \"ينتهي في\",\r\n  add_offer: \"إضافة العرض\",\r\n  select_item: \"أختر عنصر\",\r\n  discount: \"الخصم\",\r\n  price: \"السعر\",\r\n  first_meal: \"الوجبة الأولي\",\r\n  add_item: \"إضافة وجبة\",\r\n  second_meal: \"الوجبة الثانية\",\r\n  select_meal: \"أختر وجبة\",\r\n  offer_type_is_required: \"مطلوب إدخال نوع العرض \",\r\n  offer_name_is_required: \"مطلوب إدخال إسم العرض\",\r\n  offer_photo_required: \"مطلوب إدخال صورة العرض\",\r\n  description_is_required: \"مطلوب إدخال وصف للعرض\",\r\n  start_date_is_required: \"مطلوب إدخال تاريخ بداية العرض\",\r\n  end_date_required: \"مطلوب إدخال تاريخ نهاية العرض\",\r\n  selected_item_is_required: \"مطلوب إدخال عنصر\",\r\n  discount_percentage_is_required: \"مطلوب إدخال نسبة الخصم\",\r\n  price_is_required: \"مطلوب إدخال السعر \",\r\n  size_name_is_Required: `الحجم  باللغةالإنكليزية مطلوب`,\r\n  second_size_name_is_Required: `الحجم باللغةالعربية مطلوب`,\r\n  add_name_ons_item_is_Required: `اسم الإضافة باللغةالإنكليزية مطلوب`,\r\n  add_second_name_ons_item_is_Required: `اسم الإضافة باللغةالعربية مطلوب`,\r\n  currency_is_required: \"مطلوب إدخال العملة\",\r\n  select_meal_is_required: \"مطلوب إدخال وجبة\",\r\n\r\n  // ------------------------ EMPLOYEE Branch Information ----------------------------\r\n  branch_information: `معلومات الفرع`,\r\n  edit_branch_information: `تعديل معلومات الفرع`,\r\n  only_arbic_letters: `حروف عربية فقط`,\r\n  arabic_branch_name_is_required: `مطلوب إدخال إسم الفرع باللغة العربية`,\r\n  arabic_category_required: `مطلوب إدخال الأصناف باللغة العربية`,\r\n  minimum_order_amount_is_required: ` مطلوب إدخال الحد الأدني للطلب `,\r\n  branch_license_is_required: `مطلوب إدخال رخصة الفرع`,\r\n  branch_name_en: `إسم الفرع (باللغة الانكليزية)`,\r\n  branch_name_ar: `إسم الفرع (باللغة العربية)`,\r\n  branch_name_en: `إسم الفرع باللغة الانجليزية`,\r\n  branch_name_ar: `إسم الفرع باللغة العربية`,\r\n  categories_ar: `الأصناف (ar)`,\r\n  branch_License: `رخصة الفرع`,\r\n  save_changes: `حفظ التغييرات`,\r\n  save: `حفظ`,\r\n  edit_working_days: `تعديل أيام وساعات العمل`,\r\n  ratings_reviews: `مراجعات التقييم`,\r\n\r\n  // ------------------ EMPLOYEE Order Page ----------------------\r\n  on_time: `قي الموعد`,\r\n  delay: `تأخير`,\r\n  delivered_orders: `طلبات تم تسليمها`,\r\n  all_orders: `كل الطلبات`,\r\n  preparation_time: `وقت التحضير`,\r\n  orders_location: `مكان الطلب`,\r\n  no_of_orders: `عدد الطلبات`,\r\n  canceled: `إلغاء`,\r\n  delivered: `تم التوصيل`,\r\n  // ------------------ EMPLOYEE Performance Page ----------------------\r\n  total_number_of_reviews: `إجمالي عدد المراجعات`,\r\n  the_highest_rated_meal: `الوجبة الأعلى تصنيفًا`,\r\n  mighty_zinger_big_box: `صندوق زنجر الكبير`,\r\n  aed: `درهم اماراتي`,\r\n  //// ------------------ EMPLOYEE Menu Page ----------------------\r\n  add_category: `اضافة صنف جديد`,\r\n  category_name_en_is_required: `مطلوب إدخال اسم الصنف باللغة الإنجليزية`,\r\n  category_name_ar_is_required: `مطلوب إدخال اسم الصنف باللغة العربية`,\r\n  category_name_ar: `اسم الصنف (عربي)`,\r\n  category_name_en: `اسم الصنف (إنجليزي)`,\r\n  total_categories: `إجمالي الأصناف`,\r\n  category_name: `اسم الفئة`,\r\n  number_of_items: `عدد العناصر`,\r\n  number_of_orders: `عدد الطلبات`,\r\n  category_status: `حالة الفئة`,\r\n  are_you_sure_you_want_to_delete_this_item: `هل انت متاكد من حذف العنصر`,\r\n  add_new_item: `اضافة عنصر جديد`,\r\n  total_items: `إجمالي العناصر`,\r\n  photo: `صورة`,\r\n  name: `الاسم`,\r\n  category: `الفئة`,\r\n  item_status: `حالة العنصر`,\r\n  start_date: `تاريح البدء`,\r\n  end_date: `تاريخ الانتهاء`,\r\n  add_new_offer: `اضافة عرض جديد`,\r\n  offers: `العروض`,\r\n  offer_price: `العرض سعر`,\r\n  // category_name: `اسم الفئة في اللغة العربية`,\r\n  category_name_e: `اسم الفئة في اللغة الانكليزية`,\r\n  back_to_menu: `العودة الى القائمة`,\r\n  hum: `برجر الجبن هو هامبرغر مغطى بالجبن ، يتم وضع شريحة الجبن فوق شريحة اللحم. يضاف الجبن عادة إلى همبرغر الطبخ`,\r\n  meal_sizes: `حجم الوجبة`,\r\n  small: `صغير`,\r\n  medium: `متوسط`,\r\n  large: `كبير`,\r\n  add_ons: `الاضافات`,\r\n  add1: `الاضافة الاولى`,\r\n  add2: `الاضافة الثانية`,\r\n  add3: `الاضافة الثالثة`,\r\n  item_name_english: `اسم العنصر في اللغة الانكليزية`,\r\n  item_name_arabic: `اسم العنصر في  اللغة العربية`,\r\n  meal_photo: `صورة الوجبة`,\r\n  weight_or_size: `الوزن او الحجم`,\r\n  description_English: `الوصف باللغة الانكليزية`,\r\n  description_arabic: `الوصف باللغة العربية`,\r\n  back: `العودة`,\r\n  add_meal: `اضافة وجبة`,\r\n  offer_name: `اسم العرض`,\r\n  are_you_sure_you_want_to_delete_this_meal: `هل انت تريد بالتاكيد حذف هذه الوجبة`,\r\n  edit_meal: `تعديل الوجبة`,\r\n  mighty_zinger_png: `زنجر الاقوياء`,\r\n  item_sizes: `حجم العناصر`,\r\n  add_size: `اضافة حجم`,\r\n  a_cheeseburger_is_a_hamburger_topped_with_cheese: `تشيز برجر عبارة عن هامبرغر مغطى بالجبن ....`,\r\n  ketchup: `كاتشاب`,\r\n  pepsi: `بيبسي`,\r\n  add_new_meal: `اضافة وجبة جديدة`,\r\n  meal_name_en: `اسم الوجبة باللغة الانكليزية`,\r\n  meal_name_ar: `اسم الوجبة باللغة العربية`,\r\n  calories: `السعرات الحرارية`,\r\n  size1: `الحجم الاول`,\r\n  size2: `الحجم الثاني`,\r\n  size3: `الحجم الثالث`,\r\n  item_name: `اسم العنصر`,\r\n  preview: `معاينة`,\r\n  total_offers: \"إجمالي العروض\",\r\n  add_new_category: \"إضافة صنف جديد\",\r\n  edit_category: \"تعديل الصنف \",\r\n  edit_sub_category: `تعديل صنف فرعي`,\r\n  arabic_category_name_is_required: \"مطلوب إدخال اسم الصنف باللغة العربيه\",\r\n  category_name_is_required: \" مطلوب إدخال إسم الصنف باللغة الإنجليزية\",\r\n  preview: `عرض`,\r\n  total_offers: \"إجمالي العروض\",\r\n  add_new_category: \"إضافة صنف جديد\",\r\n  arabic_category_name_is_required: \"مطلوب إدخال اسم الصنف باللغة العربيه\",\r\n  category_name_is_required: \" مطلوب إدخال إسم الصنف باللغة الإنجليزية\",\r\n  // add new meal\r\n  meal_name_ar_is_required: \"مطلوب إدخال إسم الوجبة باللغة العربية\",\r\n  meal_name_en_is_required: \"مطلوب إدخال إسم الوجبة باللغة الإنجليزية\",\r\n  description_en_is_required: \"مطلوب إدخال وصف الوجبة باللغة الإنجليزية\",\r\n  description_ar_is_required: \"مطلوب إدخال وصف الوجبة باللغة العربية\",\r\n  categories_is_required: \"مطلوب إدخال الفئات\",\r\n  calories_is_required: \"مطلوب إدخال السعرات الحرارية\",\r\n  prepration_time_is_required: \"مطلوب إدخال وقت التحضير\",\r\n  meal_photo_required: \"مطلوب إدخال صورة الوجبة\",\r\n  first_meal_name_is_required: \"مطلوب إدخال إسم الوجبة الأولي\",\r\n  second_meal_name_is_required: \"مطلوب إدخال إسم الوجبة الثانية\",\r\n  first_meal_name: \"إسم الوجبة الأولي\",\r\n  second_meal_name: \"إسم الوجبة الثانية\",\r\n  confirm_item: \"تأكيد الوجبة\",\r\n  Edit_meal: \"تعديل الوجبة\",\r\n  meal_detail: `تفاصيل الوجبة`,\r\n  // ------------------ EMPLOYEE Profile Page ----------------------\r\n  enter_name_on_the_card: `ادخل اسم البطاقة`,\r\n  save_card: `حفظ البطاقة`,\r\n  enter_old_password: `ادخل كلمة السر القديمة`,\r\n  enter_new_password: `ادخل كلمة السر الجديدة`,\r\n  enter_new_email: `ادخل الايميل الجديد`,\r\n  enter_old_email: `ادخل الايميل القديم`,\r\n  password_changed_successfully: `تمَ تغيير كلمة المرور بنجاح`,\r\n\r\n  // ------------------ EMPLOYEE Help Pages ----------------------\r\n  balance_review_content: `Et laudantium omnis ex qui at sapiente velit sed ab.\r\n                          Odio tenetur ratione aut magni consectetur quae sint.\r\n                          Aut distinctio a praesentium dicta tempore sit odit.\r\n                          Excepturi autem facere eveniet possimus dolorem. \r\n                          Quis exercitationem esse voluptatibus doloremque.\r\n                          Non exercitationem dolor soluta eius,\r\n                          `,\r\n\r\n  add_new_question: `إضافة سؤال جديد`,\r\n  question: `سؤال`,\r\n  my_questions: `أسئلتي`,\r\n  my_meeting: `إجتماعاتي`,\r\n  you_do_not_have_meetings_during_the: `ليس لديك مقابلة خلال`,\r\n  coming_period: `الفترة القادمة`,\r\n  book_new_meeting: `أحجز إجتماع جديدة`,\r\n  withdraw_money: `سحب الأموال`,\r\n  balance_review: `مراجعة الرصيد`,\r\n  select_date: `حدد اليوم`,\r\n  meeting_locatoin: `مكان الإجتماع`,\r\n  meeting_scheduled_successfully: `تمت جدولة الأجتماع بنجاح`,\r\n  time: `الوقت`,\r\n  meeting_title_is_required: ` مطلوب إدخال موضوع الإجتماع `,\r\n  meeting_location_is_required: `مطلوب إدخال مكان الإجتماع`,\r\n  question_is_required: `مطلوب إدخال السؤال`,\r\n  day_is_required: `مطلوب إدخال اليوم`,\r\n  time_is_required: `مطلوب إدخال الوقت`,\r\n  Help: \"المساعدة\",\r\n\r\n  // ------------------ EMPLOYEE Opportunity Page ----------------------\r\n  basic_plan: `الخطة الاساسية`,\r\n  billed_monthly: `تدفع شهريا`,\r\n  access_to_all_basic_features: `الوصول إلى جميع الميزات الأساسية`,\r\n  basic_reporting_and_analytics: `التقارير الاساسية والتحليلات`,\r\n  up_to_10_individual_users: `ما يصل الى عشرة مستخدمين فرديين`,\r\n  individual_data_each_user: `20 جيجا بيانات فردية لكل مستخدم`,\r\n  basic_chat_and_email_support: `الدردشة الأساسية ودعم البريد الإلكتروني`,\r\n  get_started: `البدء`,\r\n  business_plan: `خطة العمل`,\r\n  billed_annually: `دفع سنوي`,\r\n  integrations: `+200 تكامل`,\r\n  advanced_reporting_and_analytics: `إعداد التقارير والتحليلات المتقدمة`,\r\n  priority_chat_and_email_support: `أولوية الدردشة ودعم البريد الإلكتروني`,\r\n  enterprise_plan: `خطة المؤسسة`,\r\n  advanced_custom_fields: `الحقول المخصصة المتقدمة`,\r\n  audit_log_and_data_history: `سجل التدقيق وسجل البيانات`,\r\n  unlimited_individual_users: `عدد غير محدود من المستخدمين الفرديين`,\r\n  unlimited_individual_data: `بيانات فردية غير محدودة`,\r\n  personalised_priotity_service: `خدمة شخصية + أولوية`,\r\n\r\n  // ------------------ EMPLOYEE User Page ----------------------\r\n  employees: `الموظفين`,\r\n  add_new_employee: `اضافة موظف جديد`,\r\n  total_employees: `مجموع الموظفين`,\r\n  employee_added_successfully: `تمت اضافة الموظف بنجاح`,\r\n  are_you_sure_you_want_to_delete_this_employee:\r\n    \"هل أنت متأكد من حذف هذا الموظف ؟\",\r\n  branch: \"الفرع\",\r\n\r\n  // ------------------ EMPLOYEE Finance Page ----------------------\r\n  transfer_money: `تحويل الاموال`,\r\n  withdraw_cash: `سحب النقود`,\r\n  transaction_history: `تاريخ المعاملات`,\r\n  total_transaction: `المعاملات الكلية`,\r\n  transfer_money_to_main_balance: `تحويل الاموال الى الرصيد الرئيسي`,\r\n  transfer: `تحويل`,\r\n  the_amount: `المبلغ`,\r\n  the_amount_is_required: ` مطلوب إدخال الكمية`,\r\n  location_is_required: `مطلوب إدخال المكان`,\r\n  enter_your_password: `ادخل كلمة السر`,\r\n  schedule_a_meetin_to_withdraw: `حدد موعد لسحب`,\r\n  money_cash: `الاموال النقدية`,\r\n  select_location: `اختر الموقع`,\r\n  location1: `الموقع الاول`,\r\n  location2: `الموقع الثاني`,\r\n  please_pick_up_location: `الرجاء اختيار موقع`,\r\n  location_is_picked: `تم اختيار الموقع  `,\r\n  nationality: `الجنسية`,\r\n  money_transferred_successfully: `تمَ تحويل الاموال بنجاح`,\r\n  transfer_number: `رقم التحويل`,\r\n  transfer_value: `قيمو التحويل`,\r\n  we_will_contact_you_soon_to_set_a_date_to: `سنتصل بك قريبا لتحيد موعد`,\r\n  receive_your_money: `تلقي اموالك`,\r\n  user_email: \"البريد الإلكتروني للمستخدم\",\r\n  wallet: \"محفظة\",\r\n  wallet_is_required: \"مطلوب أختيار المحفظة\",\r\n  website: `موقع الويب`,\r\n  accountUrl: `رايط الحساب`,\r\n  // ---------------------- EMPLOYEE NAVBAR ------------------\r\n  Help: `الدعم`,\r\n  main_dashboard: `لوحة التحكم الرئيسية`,\r\n  branch_dashboard: `لوحة تحكم الفرع`,\r\n  branch_info: `معومات الفرع`,\r\n  orders: `الطلبات`,\r\n  setting: `الإعدادات`,\r\n  // ---------------------- EMPLOYEE MARKET MENU ------------------\r\n  the_highest_rated_item: `العنصر الاعلي تقيماُ`,\r\n  are_you_sure_you_want_to_discard_this_product: `هل أنت متأكد أنك تريد تجاهل هذا المنتج هذا المنتج ؟ `,\r\n  discard: `تجاهل`,\r\n  back_to_preview: `رجوع إلى المعاينة`,\r\n  back_to_add_new_product: \"العودة لإضافة منتج جديد\",\r\n  preview_and_confirm: \"معاينة وتأكيد\",\r\n  add_new_product: \"إضافة منتج جديد\",\r\n  product_name_en: \"اسم المنتج (انجليزي)\",\r\n  product_name_ar: \"اسم المنتج (عربي)\",\r\n  product_photo: \"صورة المنتج\",\r\n  sub_category: \"تصنيف فرعي\",\r\n  size: \"الحجم او الوزن\",\r\n  unit_kg_litter: \"الوحدة (Kg,Litter..)\",\r\n  minmum_order: \"الحد الأدنى للطلب\",\r\n  product_name_en_is_required: \"مطلوب إدخال اسم المنتج باللغة الإنجليزية\",\r\n  arabic_product_name_is_required: \"مطلوب إدخال اسم المنتج باللغة العربية\",\r\n  product_photo_is_required: \"مطلوب إدخال صورة المنتج\",\r\n  sub_category_name_is_required: \"مطلوب إدخال التصنيف الفرعي\",\r\n  size_is_required: \" مطلوب إدخال الحجم او الوزن\",\r\n  unit_is_required: \"مطلوب إدخال الوحدة\",\r\n  discount_is_required: \"مطلوب إدخال الخصم\",\r\n  the_highest_rated_product: \"المنتج الأعلى تقيماً\",\r\n  the_highest_selling_product: \"المنتج الأعلى مبيعاً\",\r\n  market_menu: \"قائمة الماركت\",\r\n  add_sub_category: \"إضافة صنف فرعي\",\r\n  total_sub_categories: \"إجمالي الأصناف الفرعية\",\r\n  products: \"المنتجات\",\r\n  total_products: \"إجمالي المنتجات\",\r\n  add_new_sub_category: \"إضافة صنف فرعي جديد\",\r\n  sub_category_name_en: \"اسم الصنف الفرعي (الإنجليزية)\",\r\n  sub_category_name_ar: \"اسم الصنف الفرعي (عربي)\",\r\n  main_category_name: \"اسم الفئة الاساسية\",\r\n  are_you_sure_want_to_delete: \"هل انت متأكد برغبتك من حذف \",\r\n  item: \"عنصر\",\r\n  no_data: \"لا يوجد بيانات\",\r\n  this_year: `السنة الحالية`,\r\n  from_previous_year: `من السنة السابقة`,\r\n  last_year: `السنة السابقة`,\r\n  old_email: `الايميل السابق`,\r\n  profile_picture_is_required: `صورة الملف الشخصي مطلوبة`,\r\n  profile_picture: `صورة الملف الشخصي`,\r\n  edit_new_employee: `تعديل معلومات الموظف`,\r\n  wallet_is_required: `مطلوب ادخال المحفظة`,\r\n  wallet: `المحفظة`,\r\n  PhoneNo2_is_required: `رقم الهاتف الثاني مطلوب`,\r\n  order_id: `الرقم المميز للطلب`,\r\n  order_number: `رقم الطلب`,\r\n  delivery_name: `اسم شاب التوصيل `,\r\n  meals_with_sizes: `الوجبة مع الاحجام`,\r\n  meals_without_sizes: `الوجبة  المفردة`,\r\n  display_type: `عرض النوع`,\r\n  first_description: `الوصف باللغة الانجليزية`,\r\n  second_description: `الوصف باللغة العربية`,\r\n  select_item: `اختر عنصر`,\r\n  price_is_required: `ادخال السعر مطلوب`,\r\n  invoice_statue: `حالة الفاتورة`,\r\n  are_you_sure_want_to_ogout: `هل تريد بالتأكيد تسجيل الخروج`,\r\n  logout: `تسجيل الخروج`,\r\n  yes: `نعم`,\r\n  branch_type: `نوع الفرع`,\r\n  branch_commercial_register: `السجل التجاري للفرع`,\r\n  commercial_register_is_required: `السجل التجاري للفرع مطلوب`,\r\n  type_is_required: `النوع مطلوب`,\r\n  meal_price_is_Required: `سعر الوجبة مطلوب`,\r\n  price_is_Required: `السعر مطلوب`,\r\n  // ----------------- Monthes -------------------\r\n  january: \"يناير\",\r\n  february: \"فبراير\",\r\n  march: \"مارس\",\r\n  april: \"أبريل\",\r\n  may: \"مايو\",\r\n  june: \"يونيو\",\r\n  july: \"يوليو\",\r\n  august: \"أغسطس\",\r\n  september: \"سبمتبر\",\r\n  october: \"أكتوبر\",\r\n  november: \"نوفمر\",\r\n  december: \"ديسيمبر\",\r\n  // ----------------- Days -------------------\r\n  Saturday: `السبت`,\r\n  Sunday: `الأحد`,\r\n  Monday: `الأثنين`,\r\n  Tuesday: `الثلاثاء`,\r\n  Wednesday: `الأربعاء`,\r\n  Thursday: `الخميس`,\r\n  Friday: `الجمعة`,\r\n  close: \"مغلق\",\r\n  //\r\n  edit_personal_information: `تعديل المعلومات الشخصية`,\r\n  Profile: `الملف الشخصي`,\r\n\r\n  order_pending: `  قيد الانتظار`,\r\n  order_on_way: `   في طريقه إليك`,\r\n  order_on_progress: ` قيد التوصيل`,\r\n  order_delivered: `تم التوثيل `,\r\n  order_canceled: `تم الإلغاء `,\r\n  //\r\n  update_offer: `تعديل العرض`,\r\n  edit_meal: `تعديل الوجبة`,\r\n  edit_combo_offer: `تعديل العرض`,\r\n};\r\n\r\nexport default ar;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\langs\\en.js",["2549","2550","2551","2552","2553","2554","2555","2556","2557","2558","2559","2560","2561","2562","2563","2564","2565","2566","2567","2568","2569","2570","2571","2572","2573","2574","2575","2576","2577","2578","2579","2580","2581","2582","2583","2584","2585","2586","2587","2588","2589","2590","2591","2592","2593","2594","2595","2596","2597","2598","2599","2600","2601","2602","2603","2604","2605","2606","2607","2608"],[],"// ----------------------------------------------------------------------\r\n\r\nconst en = {\r\n  title: `English`,\r\n  hi: `Hi`,\r\n  email: `Email`,\r\n  // password: `password`,\r\n  sign_in: `Sign in`,\r\n  // email_is_required: `Email is required`,\r\n  // password_is_required: `Password is required`,\r\n  branche_id: `Branch ID`,\r\n  type_question: `Type your Question ...`,\r\n  search: `Search ...`,\r\n  // ---------------------------Menu-------------------------------------\r\n  dashboard: `Dashboard`,\r\n  overview: `Overview`,\r\n  users: `Users`,\r\n  // branches: `Branches`,\r\n\r\n  performance: `Performance`,\r\n  finance: `Finance`,\r\n  rank: `Rank`,\r\n  opportunity_center: `Opportunity Center`,\r\n  account_settings: `Account Settings`,\r\n  // help: `Help`,\r\n  log_out: `Log Out`,\r\n  // ---------------------------general-------------------------------------\r\n  print: `PRINT`,\r\n  export: `EXPORT `,\r\n  sort_by: `Sort by:`,\r\n  total_users: `Total Users`,\r\n\r\n  // ==================================== @@@@ ADMIN @@@@ ======================================\r\n\r\n  // ------------------------ ADMIN Auth ----------------------------\r\n  //******  LOGIN\r\n  welcome_to: `Welcome to`,\r\n  enter_your_data_to_log_in: `Enter your code to login`,\r\n  Email: `Email`,\r\n  password: `Password`,\r\n  forget_password: `Forget password ?`,\r\n  login: `Login`,\r\n  you_donot_have_an_account: `You don't have an account ?`,\r\n  create_an_account_for_your_restaurant_now_to: `Create an account for your restaurant now to`,\r\n  start_your_journey_with_DNNDON: `start your journey with DNNDON`,\r\n  email_must_be_a_valid_email_address: `Email must be a vaild email address`,\r\n  email_is_required: `Email is requiered`,\r\n  password_is_required: `Password is required`,\r\n\r\n  //****** REGISTER\r\n  first_name_is_required: `First Name is required`,\r\n  last_name_is_required: `Last name is requiered `,\r\n  required: `Required`,\r\n  address: `Address`,\r\n  address_name: `Address Name`,\r\n  phone_number_is_required: `Phone number is required`,\r\n  address_is_required: `Address is required`,\r\n  address_name_is_required: `Address Name is required`,\r\n  building_is_required: `Building is required`,\r\n  floor_is_required: `Floor is required`,\r\n  apartment_is_required: `Apartment is required`,\r\n  confirm_password_is_requierd: `Confirm password is required`,\r\n  passwords_do_not_match: `Passwords do not match`,\r\n  create_account: `Create account`,\r\n  enter_your_data_to_create_your_account: `Enter your data to create your account `,\r\n  first_name: `First Name`,\r\n  last_name: `Last Name`,\r\n  admin_email: `Admin Email`,\r\n  admin_password: `Admin Password`,\r\n  admin_phone: `Admin Phone`,\r\n  country_code: `Country Code`,\r\n  phone_number: `Phone number`,\r\n  enter_your_address: `Enter your address`,\r\n  building: `Building`,\r\n  floor: `Floor`,\r\n  apartment: `Apartment`,\r\n  confirm_password: `Confirm Password`,\r\n  you_have_an_account_already: `You have an account already ?`,\r\n  next: `Next`,\r\n  address_phone_number: `Address phone number`,\r\n  address_phone_number_is_required: `Address phone number is required`,\r\n  password_must_have_one_uppercase_one_special_charcteres_one_number_minimum_length_9_digit:\r\n    \"Password Must Contains One Number, One UpperCase Character, One Special Character and minimum length 9 digit\",\r\n  //****** RESTAURANT FORM\r\n  store_type_is_required: `Store type is required`,\r\n  category_is_required: `Category is required`,\r\n  en_istore_name_is_required: `English brand name is required`,\r\n  ar_store_name_is_required: `Arabic brand name is required`,\r\n  en_service_desc_is_required: `Service Description name is required`,\r\n  ar_service_desc_is_required: `Arabic Description name is required`,\r\n  country_id_is_required: `Country  is required`,\r\n  city_id_is_required: `City  is required`,\r\n  admin_photo_is_required: `Admin photo  is required`,\r\n  nationality_id_is_required: `Nationality  is required`,\r\n  PhoneNo1_is_required: `First Phone Number  is required`,\r\n  minimum_order_price_is_required: `Minimum Order Price is required`,\r\n  tax_is_required: `Tax Card is required`,\r\n  store_location_is_requierd: `Store location is required `,\r\n  store_licenses_is_required: `Brand licenses is required`,\r\n  store_logo_is_required: `Store logo is required`,\r\n  enter_your_restaurant_information_to_create_your_account: `Enter your restaurant information\r\n  to create your account\r\n  `,\r\n  nationality: `Nationality`,\r\n  store_type: `Store type`,\r\n  restaurant: `Restaurant`,\r\n  market: `Market`,\r\n  select_category: `Select category`,\r\n  store_name: `English Store Name`,\r\n  arabic_store_name: `Arabic Store Name`,\r\n  country: `Country`,\r\n  city: `City`,\r\n  service_desc: `Service Description in English`,\r\n  service_desc_ar: `Service Description in Arabic`,\r\n  minimum_order_price: `Minimum Order Price`,\r\n  tax_card: `Tax Card`,\r\n  first_phone_number: `First Phone Number `,\r\n  second_phone_number: `Second Phone Number `,\r\n  enter_store_location: `Enter store Location`,\r\n  store_website_optional: `Store website (Optional)`,\r\n  store_licenses: `Brand Licenses`,\r\n  store_logo: `Store Logo`,\r\n  logo: `Logo`,\r\n  cover_img: `Cover Image`,\r\n  license_img: `Tax License`,\r\n\r\n  //****** PAYMENT FORM\r\n  name_on_card_is_required: `Name on card is required`,\r\n  card_number_is_required: `Card number is required`,\r\n  expire_date_is_required: `Expire date is required`,\r\n  cvv_is_requierd: `Cvv is required`,\r\n  enter_your_payment_information: `Enter your payment information `,\r\n  please_enter_your_email_to_reset_your_password: `Please enter your email to Reset your password`,\r\n  enter_name_on_card: `Enter Name on card `,\r\n  enter_card_number: `Enter card number`,\r\n  mm_yy: `MM / YY`,\r\n  cvv: `CVV`,\r\n  you_can_skip_this_process: `You can skip this process`,\r\n  submit_your_request: `Submit your request`,\r\n  sign_up: `Sign up`,\r\n  add_accont_number: `Add Account Number`,\r\n  add_new_account: `Add New Account`,\r\n  admin_photo: `Admin photo`,\r\n\r\n  //****** RESET FORM and verivication and login with newpassword\r\n  confirm_email: `Confirm Email`,\r\n  we_sent_an_email_for_reset_your_password_you_need_to_enter_code_within_1_min: `\r\n Enter your verification code to verify your email.\r\n  `,\r\n  search_place: `Search place`,\r\n  verification_code: `Verification code`,\r\n  verification_code_is_required: `Verification code is Required`,\r\n  reset_password: `Reset Password`,\r\n  // ------------------------ ADMIN Overveiw Page ----------------------------\r\n  welcome_to_ddndon: `Welcome to DNNDON `,\r\n  adam_smith: `Adam Smith`,\r\n  admin: `Admin`,\r\n  show_profile: `Show profile`,\r\n  all_branches_overview: `All Branches Overview`,\r\n  the_highest_income_branches: `The highest-income branches`,\r\n  view_all: `View All`,\r\n  manager: `Manager`,\r\n  most_selling_cities: `Most selling cities`,\r\n  rows_per_page: `Rows per page`,\r\n  total_number_of_customers: `Total Number Of Customers`,\r\n  active: `Active`,\r\n  inactive: `inactive`,\r\n  completed: `Completed`,\r\n  incomplete: `Incomplete`,\r\n  total_number_of_orders: `Total Number Of orders`,\r\n  congratulations: `Congratulations`,\r\n  p: `Your new branches has been approved after review by DNNDON, Please complete the rest of the missing data so that you can add it to the application`,\r\n  complete_now: `Complete now`,\r\n  cancel: `Cancel`,\r\n  delete: `Delete`,\r\n  are_you_sure_you_want_to_delete_this_branch: `Are you sure you want to delete this branch ? `,\r\n  delete_item: `Delete Item`,\r\n  over_view: `Overview`,\r\n  to: `To`,\r\n  new_branches: `New Branches`,\r\n\r\n  // ------------------------ ADMIN Help Page ----------------------------\r\n  terms_conditions: `Terms & conditions`,\r\n  acceptance_of_terms: `Acceptance of Terms`,\r\n  p1: `By registering for and/or using the Service in any manner, including but not limited to visiting or browsing the Site, you agree to all of the terms and conditions contained herein (\"Terms of Use\"), which also incorporate Privacy Policy and all other operating rules, policies and procedures that may be published from time to time on the Site by Elmenus, each of which is incorporated by reference and each of which may be updated by Elmenus from time to time without notice to you. In addition, some services offered through the Service may be subject to additional terms and conditions specified by Elmenus from time to time; your use of such services is subject to those additional terms and conditions, which are incorporated into these Terms of Use by this reference. These Terms of Use apply to all users of the Service, including, without limitation, users who are contributors of content, information, and other materials or services on the Site, individual users of the Service and restaurants that have a page on the Service.\r\n  Access.\r\n  `,\r\n  p2: `\r\n  Subject to these Terms of Use, Elmenus may offer to provide the Services, as described more fully on the Site, and which are selected by you, solely for your own use, and not for the use or benefit of any third party. Services shall include, but not be limited to, any services Elmenus performs for you, any applications offered by Elmenus that you download from the Site or, subject to the terms set out under the \"Third party Sites and Services\" section below, from third party application stores (e.g., iTunes® store, Blackberry App World™, or Google Apps Marketplace) authorized by Elmenus, as well as the offering of any materials displayed or performed on or through the Services (including Content (as defined below)).\r\n  Registration and Eligibility.`,\r\n  p3: `You may browse the Site and view Content without registering, but as a condition to using certain aspects of the Service, you are required to register with Elmenus and represent, warrant and covenant that you provide Elmenus with accurate and complete registration information (including, but not limited to a user name (\"User Name\"), e-mail address and a password you will use to access the Service) and to keep your registration information accurate and up-to-date. Failure to do so shall constitute a breach of these Terms of Use, which may result in immediate termination of your Elmenus account. We recommend, but do not require, that you use your own name as your User Name so your friends can recognize you more easily.\r\n  You shall not:`,\r\n  p4: `. -create any account for anyone other than yourself without such person's permission;`,\r\n  h1: `.  use a User Name that is the name of another person with the intent to impersonate that person;`,\r\n  h2: `.  use a User Name or Elmenus account that is subject to any rights of a person other than you without appropriate authorization; or`,\r\n  h3: `.  use a User Name that is a name that is otherwise offensive, vulgar or obscene or otherwise unlawful.`,\r\n  p5: `Elmenus reserves the right to refuse registration of, or cancel a User Name in its sole discretion. You are solely responsible and liable for activity that occurs on your account and shall be responsible for maintaining the confidentiality of your Elmenus password. You shall never use another user's account without such other user's prior express permission. You will immediately notify Elmenus in writing of any unauthorized use of your account, or other account related security breach of which you are aware.\r\n  You represent and warrant that if you are an individual, you are of legal age to form a binding contract, or that if you are registering on behalf of an entity, that you are authorized to enter into, and bind the entity to, these Terms of Use and register for the Service. The Service is not available to individuals who are younger than 13 years old. Elmenus may, in its sole discretion, refuse to offer the Service to any person or entity and change its eligibility criteria at any time. You are solely responsible for ensuring that these Terms of Use are in compliance with all laws, rules and regulations applicable to you and the right to access `,\r\n  privacy_policy: `Privacy policy`,\r\n  legal_updates: `Legal updates`,\r\n  book_meeting: `Book Meeting`,\r\n  meeting_title: `Meeting title`,\r\n  type_your_question_here: `Type your question here...`,\r\n  meeting_details: `Meeting details`,\r\n  available_time_slots: `Available Time Slots`,\r\n  help: `Help & Support`,\r\n  faqs: `Faqs`,\r\n  booking_meeting: `Booking Meeting`,\r\n\r\n  // ------------------------ ADMIN Branches Page ----------------------------\r\n  //****** BRANCHLIST PAGE\r\n  branches: `Branches`,\r\n  add_new_branch: `Add new branch`,\r\n  branch_name: `Branch Name`,\r\n  branch_status: `Branch Status`,\r\n  location: `Location`,\r\n  total_orders: `Total Orders`,\r\n  completed_orders: `Completed Orders`,\r\n  reviews: `Reviews`,\r\n  action: `Action`,\r\n  branch_id: `Branch ID`,\r\n  status: `Status`,\r\n  data_completeness: `Data Completeness`,\r\n  available: `Available`,\r\n  busy: `Busy`,\r\n  pending: `Pending`,\r\n  rejected: `Rejected`,\r\n\r\n  //****** ADD and EDIT NEW BRANCH\r\n  branch_name_is_required: `Branch name is required`,\r\n  branch_location_is_required: `Branch location is required`,\r\n  branch_licenses_is_requierd: `Branch licenses is required`,\r\n  branch_manager_name_is_requierd: `Branch manger name is required`,\r\n  branch_manager_email_is_requierd: `Branch manager email is required`,\r\n  branch_logo_is_required: `Branch logo is required`,\r\n  branch_cover_is_required: `Branch cover is required`,\r\n  branch_location: `Branch Location`,\r\n  branch_licenses: `Branch Licenses`,\r\n  branch_logo: `Branch logo`,\r\n  branch_cover: `Branch cover`,\r\n  social_media_page_optional: `Soical media page (Optional)`,\r\n  add_social_contact: `Add social contact`,\r\n  add_social_media: `Add Social Media`,\r\n  user_name_url: `User Name / URL`,\r\n  add_branch_maneger: `Add branch manger`,\r\n  edit_branch_info: `Edit Branch Info`,\r\n  selected: `Selected`,\r\n  edit_branch: `Edit Branch`,\r\n  branch_manager: `Branch Manager`,\r\n  description_en: \"Description (En)\",\r\n  description_ar: \"Description (Ar)\",\r\n  branch_license: \"Branch license\",\r\n  branch_tax_card: \"Branch Tax Card\",\r\n  phoneNo1: \"PhoneNo1\",\r\n  phoneNo2: \"PhoneNo2\",\r\n  branch_description_en_is_required: \"Branch description (En) is requierd\",\r\n  branch_description_ar_is_required: \"Branch description (Ar) is requierd\",\r\n  branch_tax_card_is_required: \"Branch tax card is Required\",\r\n  phone_number1_is_required: \"PhoneNo1 is required\",\r\n  phone_number2_is_required: \"PhoneNo2 is required\",\r\n  branch_type: `Branch Type`,\r\n  description_en: `Description (en)`,\r\n  description_ar: `Description (ar)`,\r\n  PhoneNo1: `Phone Number 1`,\r\n  PhoneNo2: `Phone Number 2`,\r\n  branch_tax_card: `Branch Tax Card`,\r\n  branch_license: `Branch License`,\r\n  description_en: \"Description (En)\",\r\n  description_ar: \"Description (Ar)\",\r\n  branch_license: \"Branch license\",\r\n  branch_tax_card: \"Branch Tax Card\",\r\n  phoneNo1: \"PhoneNo1\",\r\n  phoneNo2: \"PhoneNo2\",\r\n  branch_description_en_is_required: \"Branch description (En) is requierd\",\r\n  branch_description_ar_is_required: \"Branch description (Ar) is requierd\",\r\n  branch_tax_card_is_required: \"Branch tax card is Required\",\r\n  phone_number1_is_required: \"PhoneNo1 is required\",\r\n  phone_number2_is_required: \"PhoneNo2 is required\",\r\n  pick_your_location: `Pick your current location`,\r\n  please_pick_up_location: `Please Pick Up Location`,\r\n  location_is_picked: `Location is picked`,\r\n  pick_up_location: `Pick-up Location`,\r\n  //\r\n  add_new_branch_manager: `Add New Branch Manager`,\r\n  second_name: `Second name`,\r\n  branch_manager_address: `Branch Manager Address`,\r\n  manager_phone: `Manager Phone`,\r\n  add_phone: `Add phone`,\r\n  second_name_is_required: `Second name is required`,\r\n  manager_email_is_required: `Manager email is required`,\r\n  manager_address_is_required: `Manager address is required`,\r\n  manager_phone_is_required: `Manager phone is required`,\r\n  confirm_password_is_required: `Confirm password is required`,\r\n  // add-working day page\r\n  add_working_days: `Add working days`,\r\n  must_be_this_format_08_00_22_00: \"Must be this format (08:00-22:00)\",\r\n  //\r\n  minimum_order_is_required: `Minimum order is required`,\r\n  minimum_order: `Minimum order`,\r\n  branch_categories_en_is_required: `Branch Categories (en) is required`,\r\n  branch_categories_ar_is_required: `Branch Categories (ar) is required`,\r\n  branch_categories_ar: `Branch categories (ar)`,\r\n  branch_categories_en: `Branch categories (en)`,\r\n  if_you_press_back_the_changes_you_have_made_will_be: `If you press Back, the changes you have made will be`,\r\n  canceled_are_you_sure: `canceled. Are you sure `,\r\n  about_this_step: `about this step?`,\r\n  continue_editing: `Continue Editing`,\r\n  //****** BRANCH ADDED SUCCESSFULLY POPUP\r\n  branch_summited_successfully: `Branch summited Successfully `,\r\n  respond_as_soon_as_possible: `Respond as soon as possible`,\r\n  all_details_of_this_branch_will_be_reviewed_and_we_will: `All details of this branch will be reviewed and we will`,\r\n  add_branch: `Add Branch`,\r\n  back_to_dashboard: `Back to dashboard`,\r\n  go_to_verifiaction_email: `Click to vreification email`,\r\n  resend_code: `Resend code`,\r\n\r\n  //****** BRANCH DETAILS POP UP\r\n  branch_open: `Branch open`,\r\n  branch_close: `Branch close`,\r\n  analysis: `Analysis`,\r\n  info: `Info`,\r\n\r\n  //analysis\r\n  total_number_of_customer: `Total Number Of Customer`,\r\n  incompleted: `Incompleted`,\r\n  good: `Good`,\r\n  bad: `Bad`,\r\n  earning: `Earning`,\r\n  month: `Month`,\r\n  this_month: `This month`,\r\n  from_previous_month: `From previous month`,\r\n  last_month: `Last month`,\r\n  view_details: `View Details`,\r\n  branch_manger: `Branch manger `,\r\n  contact_info: `Contact Info`,\r\n  categories: `Categories`,\r\n  fried_chicken: `Fried Chicken`,\r\n  sandwiches: `Sandwiches`,\r\n  fast_food: `Fast food`,\r\n  chicken: `Chicken`,\r\n  rating: `Rating`,\r\n  delivery_time: `Delivery time`,\r\n  mins: `Mins`,\r\n  minimum_order_amount: `Minimum order amount`,\r\n  delivery_free: `Delivery free`,\r\n  payment: `Payment`,\r\n  pre_order: `Pre-Order`,\r\n  yes: `Yes`,\r\n  open_now: `Open Now`,\r\n  working_days: `Working Days`,\r\n  saturday: `Saturday`,\r\n  sunday: `Sunday`,\r\n  monday: `Monday`,\r\n  tuesday: `Tuesday`,\r\n  wednesday: `Wednesday`,\r\n  thursday: `Thursday`,\r\n  friday: `Friday`,\r\n  recent_reviews: `Recent Reviews`,\r\n\r\n  // ------------------------ ADMIN Contact us Page ----------------------------\r\n  contact_us: `Contact Us`,\r\n  send_us_your_question_now_and_we_will_get_back_to: `Send us your question now and we will get `,\r\n  you_as_soon_as_possible: `back to you as soon as possible`,\r\n  your_question: `Your question`,\r\n  send: `Send`,\r\n  add_inquiry: `Add Inquiry`,\r\n  send_us_your_question_now_and_we_will_get_back_to_you_as_soon_as_possible: `Send us your question now and we will get back to you as soon as possible`,\r\n  subject: `Subject`,\r\n  details: `Details`,\r\n  send_inquiry: `SendInquiry`,\r\n  inbox: `Inbox`,\r\n  contact_information: `Contact Information`,\r\n  enter_message: `Enter message`,\r\n  enter_question_title: `Enter question title`,\r\n  subject_is_required: `Subject is required`,\r\n  details_is_required: `Details is required`,\r\n  coverPhoto_is_required: `Cover Photo is required`,\r\n  commercialregister_is_required: `Commercial Register is required`,\r\n  website_is_required: `Website is required`,\r\n  website: `Website`,\r\n  accountUrl: `Account Url`,\r\n\r\n  // ------------------------ ADMIN User Page ----------------------------\r\n  show_password: `Show password`,\r\n  user_name: `User name`,\r\n  add_new_user: `Add New User`,\r\n  add_user: `Add User`,\r\n  user_email: `User Email`,\r\n  select_user_position: `Select user position`,\r\n  select_branch: `Select branch`,\r\n  user_address: `user address`,\r\n  user_summited_successfully: `user summited successfully`,\r\n  request_has_been_sended_success: `Your request has been sended successfully`,\r\n  hint_send: `You will receive a confirmation email within 48 hours`,\r\n  user_data: `User Data`,\r\n  position: `Position`,\r\n  user_position: `User Position`,\r\n  branch_is_required: `Branch is required`,\r\n  user_position_is_required: `User position is required`,\r\n  user_address_is_required: `User address is required`,\r\n  branch: \"Branch\",\r\n  regional_manager: \"Regional Manager\",\r\n  owner: \"Owner\",\r\n  employee_address: \"Employee address\",\r\n  position_is_required: \"Position is required\",\r\n  employee_position: \"Employee position\",\r\n  employee_branch: \"Employee branch\",\r\n  add_employee: \"Add Employee\",\r\n  delete_employee_information: \"Delete Employee Information\",\r\n  edit_employee_information: \"Edit Employee Information\",\r\n  confirm_edit: \"Confirm Edit\",\r\n  branch: \"Branch\",\r\n  regional_manager: \"Regional Manager\",\r\n  owner: \"Owner\",\r\n  employee_address: \"Employee address\",\r\n  position_is_required: \"Position is required\",\r\n  employee_position: \"Employee position\",\r\n  employee_branch: \"Employee branch\",\r\n  add_employee: \"Add Employee\",\r\n  delete_employee_information: \"Delete Employee Information\",\r\n  are_you_sure_you_want_to_delete_this_employee:\r\n    \"Are You Sure You Want To Delete this Employee ?\",\r\n  edit_employee_information: \"Edit Employee Information\",\r\n  confirm_edit: \"Confirm Edit\",\r\n  user_phone: \"User Phone\",\r\n  edit_employee_info: \"Edit Employee Information\",\r\n  // ------------------------ ADMIN Finance Page ----------------------------\r\n  total_balance: `Total Balance`,\r\n  profile_picture_is_required: \"Profile picture is required\",\r\n  profile_picture: \"Profile Picture\",\r\n  // ------------------------ ADMIN Finance Page ----------------------------\r\n  total_balance: `Total Balance`,\r\n  net_balance: `Net Balance`,\r\n  with_value_added_tax: `With value added tax`,\r\n  from_previous_period: `From previous period`,\r\n  invoice_id: `Invoice id`,\r\n  request_date: `Request date`,\r\n  withdraw_data: `Withdraw data`,\r\n  invoice_value: `Invoice value`,\r\n  invoice_status: `Invoice status`,\r\n  succeed: `Succeed`,\r\n  failed: `Failed`,\r\n  invoices: `Invoices`,\r\n  total_invoices: `Total Invoices`,\r\n  we_will_contact_you_soon_to_set_a_date: `We will contact you soon to set a date`,\r\n  to_receive_your_money: `to receive your money`,\r\n  transfer_cash: `Transfer Cash`,\r\n  withdraw_by_cash: `Withdraw By Cash`,\r\n  amount_is_required: `Amount is required`,\r\n  Financial: `Financial`,\r\n  select_card: `Select Card`,\r\n  card_is_required: `Card is required`,\r\n  expiry_date_is_required: `Expiry date is required`,\r\n  delete_invoice: `Delete Invoice`,\r\n  are_you_sure_you_want_to_delete_this_invoice: `Are yoy sure you want to delete this invoice ?`,\r\n  // ------------------------ ADMIN Performance Page ----------------------------\r\n  most_selling_income: `Most Selling Income`,\r\n  highest_income: `Highest Income`,\r\n  total_income: `Total Income`,\r\n  order: \"Order\",\r\n\r\n  // ------------------------ ADMIN Rank Page ----------------------------\r\n  the_highest_rated_branch: `The Highest rated branch`,\r\n  the_lowest_rated_branch: `The Lowest Rated Branch`,\r\n  the_highest_income_branch: `The highest income branch`,\r\n  view_branch_details: `View branch details`,\r\n  rate: `Rate`,\r\n  total_reviews: `Total reviews`,\r\n  good_reviews: `Good reviews`,\r\n  bad_reviews: `Bad reviews`,\r\n  total_branches: `Total Branches`,\r\n  branch_rank: `Branch Rank`,\r\n  total_ranked_branches: `Total Ranked Branches`,\r\n  delete_branch: `Delete Branch`,\r\n\r\n  // ------------------------ ADMIN Opportunity Page ----------------------------\r\n  menu: `Menu`,\r\n  page_views: `Page views`,\r\n  reduce_workloads: `Reduce workloads`,\r\n  meals: `Meals`,\r\n  question1: `Question1`,\r\n  question2: `Question2`,\r\n  opportunity_content: `You can upgrade your business and increase the likelihood of your restaurant being among the first restaurants in the list in order to increase your profit rate.`,\r\n  promote_your_business: `Promote your business!`,\r\n  Promote_your_business: `Promote your business`,\r\n  promote_now: `Promote now`,\r\n\r\n  // ------------------------ ADMIN Profile Page ----------------------------\r\n  my_profile: `My Profile`,\r\n  logout: `Logout`,\r\n  profile_information: `Profile Information`,\r\n  edit: `Edit`,\r\n  full_name: `Full Name`,\r\n  mobile1: `Mobile1`,\r\n  date_of_birth: `Date of birth`,\r\n  gender: `Gender`,\r\n  male: `Male`,\r\n  change_email: `Change email`,\r\n  change_phone_number: `Change phone number`,\r\n  change_password: `Change password`,\r\n  payment_information: `Payment Information`,\r\n  expires_in: `Expires in`,\r\n  protection: `Protection`,\r\n  point: `Point`,\r\n  change_your_phone: `Change your phone`,\r\n  verfiy_email: `Verify email`,\r\n  all_inputs_is_required: `All Inputs is required`,\r\n  must_be_exactly_6_digits: `Must be exactly 6 digits`,\r\n  //******  EDIT PROFILE MODAL\r\n  phone_is_required: `Phone is required`,\r\n  date_of_birth_is_required: `Date of birth is required `,\r\n  gender_is_required: `Gender is required`,\r\n  edit_personal_information: `Edit personal information`,\r\n  phone: `Phone`,\r\n  female: `Female`,\r\n  update: `Update`,\r\n\r\n  //******  CHANGE PASSWORD MODAL\r\n  old_password_is_required: `Old password is required`,\r\n  new_password_is_required: `New passsword is required`,\r\n  confirm_new_password_is_requierd: `Confirm new password is required`,\r\n  confirm_new_password: `Confirm new password`,\r\n  new_password: `New password`,\r\n  old_password: `Old Password`,\r\n  confirm: `Confirm`,\r\n  //******  CHANGE EMAIL MODAL\r\n  email_must_be_avalid_email_address: `Email must be a valid email address`,\r\n  enter_password: `Enter Password`,\r\n  enter_your_verification_code_sent_to_your_email_within_1_minute:\r\n    \"Enter your verification code sent to your email within 1 minute\",\r\n\r\n  //******  ADD CARD MODAL\r\n  name_on_crad_is_required: `Name on crad is required`,\r\n  card_expiry_date_is_required: `Card expiry date is required`,\r\n  cvv_code_is_required: `Cvv code is required`,\r\n\r\n  // ==================================== @@@@ EMPLOYEE @@@@ ======================================\r\n\r\n  // ------------------------EMPLOYEE Branch Dashboard----------------------------\r\n  back_to_main_dashboard: `Back to main dashboard`,\r\n  the_highest_selling_meals: `The Highest selling meals`,\r\n  pending_ordrers: `Pending Orders`,\r\n  order_time: `Order time`,\r\n  order_location: `Order Location`,\r\n  order_status: `Order status`,\r\n  confim_message: `Your new branches has been approved after review by DNNDON, Please complete the rest \r\n  of the missing data so that you can add it to the application`,\r\n\r\n  // ------------------------ EMPLOYEE add new Offer Page ----------------------------\r\n  Add_new_offer: \"Add new Offer\",\r\n  offer_type: \"Offer type\",\r\n  discount_offer: \"Discount Offer\",\r\n  combo_offer: \"Combo offer\",\r\n  offer_photo: \"Offer Photo\",\r\n  description: \"Description\",\r\n  start_in: \"Start in\",\r\n  end_in: \"End in\",\r\n  add_offer: \"Add offer\",\r\n  select_item: \"Select item\",\r\n  discount: \"Discount\",\r\n  price: \"Price\",\r\n  offer_price: `Offer Price`,\r\n  first_meal: \"First meal\",\r\n  add_item: \"Add item\",\r\n  second_meal: \"Second meal\",\r\n  select_meal: \"Select meal\",\r\n  offer_type_is_required: \"Offer type is Required\",\r\n  offer_name_is_required: \"Offer name is required\",\r\n  offer_photo_required: \"Offer Photo Is required\",\r\n  description_is_required: \"Description is required\",\r\n  start_date_is_required: \"Start date is required\",\r\n  end_date_required: \"End date is required\",\r\n  selected_item_is_required: \"Selected item is required\",\r\n  discount_percentage_is_required: \"Discount percentage is required\",\r\n  price_is_required: \"Price is required \",\r\n  size_name_is_Required: `English size is Required`,\r\n  second_size_name_is_Required: `Arabic size size  is Required`,\r\n  add_name_ons_item_is_Required: `English name addition  is Required`,\r\n  add_second_name_ons_item_is_Required: `Arabic name addition  is Required`,\r\n  currency_is_required: \"Currency is requierd\",\r\n  select_meal_is_required: \"Select meal is required\",\r\n  order_id: \"Order id\",\r\n  delivery_name: \"Delivery name\",\r\n\r\n  // ------------------------ EMPLOYEE Branch Information ----------------------------\r\n  branch_information: `Branch Information`,\r\n  edit_branch_information: `Edit branch information`,\r\n  only_arbic_letters: `Only arabic letter`,\r\n  arabic_branch_name_is_required: `Arabic branch name is requierd`,\r\n  arabic_category_required: `Arabic category is requierd`,\r\n  minimum_order_amount_is_required: `Minimum order amount is required`,\r\n  branch_license_is_required: `Branch license is required`,\r\n  branch_name_en: `Branch name (en)`,\r\n  branch_name_ar: `Branch name (ar)`,\r\n  categories_ar: `Categories (ar)`,\r\n  branch_License: `Branch license`,\r\n  save_changes: `Save changes`,\r\n  edit_working_days: `Edit working days`,\r\n  ratings_reviews: `Rating reviews`,\r\n\r\n  // ------------------ EMPLOYEE Order Page ----------------------\r\n  on_time: `On time`,\r\n  delay: `Delay`,\r\n  no_of_orders: `No of orders`,\r\n  delivered_orders: `Delivered orders`,\r\n  all_orders: `All orders`,\r\n  preparation_time: `Preparation time`,\r\n  orders_location: `Order Location`,\r\n  canceled: `Canceled`,\r\n  delivered: `Delivered`,\r\n\r\n  // ------------------ EMPLOYEE Performance Page ----------------------\r\n  total_number_of_reviews: `Total number of Reviews`,\r\n  the_highest_rated_meal: `The highest rated meal`,\r\n  mighty_zinger_big_box: `Mighty Zinger big box`,\r\n  aed: `AED`,\r\n  // ------------------ EMPLOYEE Menu Page ----------------------\r\n  add_category: `Add category`,\r\n  total_categories: `Total categories`,\r\n  category_name: `Category name`,\r\n  category_name_en_is_required: `Category name (English) is required`,\r\n  category_name_ar_is_required: `Category name (Arabic) is required`,\r\n  category_name_ar: `Category name (Arabic)`,\r\n  category_name_en: `Category name (English)`,\r\n\r\n  number_of_items: `Number of items`,\r\n  number_of_orders: `Number of orders`,\r\n  category_status: `Category status`,\r\n  are_you_sure_you_want_to_delete_this_item: `Are you sure you want to delete this item`,\r\n  add_new_item: `Add new item`,\r\n  total_items: `Total items`,\r\n  photo: \"photo\",\r\n  name: `Name`,\r\n  category: `Category`,\r\n  item_status: `Item status`,\r\n  start_date: `Start date`,\r\n  end_date: `End date`,\r\n  add_new_offer: `Add New Offer`,\r\n  offers: `Offers`,\r\n  // category_name: `Category name (Arabic)`,\r\n  category_name_e: `Category name (English)`,\r\n  back_to_menu: `Back to menu`,\r\n  hum: `A cheeseburger is a hamburger topped with cheese. Traditionally, the slice of cheese is placed on top of the meat patty. The cheese is usually added to the cooking hamburger `,\r\n  meal_sizes: `Meal Sizes`,\r\n  small: `Small`,\r\n  medium: `Medium`,\r\n  large: `Large`,\r\n  add_ons: `Add-ons`,\r\n  add1: `Add1`,\r\n  add2: `Add2`,\r\n  add3: `Add3`,\r\n  item_name_english: `Item  name (English)`,\r\n  item_name_arabic: `Item name (Arabic)`,\r\n  meal_photo: `Meal photo`,\r\n  weight_or_size: `weight or size`,\r\n  description_English: `Description (English)`,\r\n  description_arabic: `Description (Arabic)`,\r\n  back: `Back`,\r\n  add_meal: `Add meal`,\r\n  offer_name: `offer name`,\r\n  are_you_sure_you_want_to_delete_this_meal: `Are you sure you want to delete this meal ? `,\r\n  edit_meal: `Edit meal`,\r\n  mighty_zinger_png: `Mighty Zinger.Png`,\r\n  item_sizes: `Item sizes`,\r\n  add_size: `Add size`,\r\n  a_cheeseburger_is_a_hamburger_topped_with_cheese: `A cheeseburger is a hamburger topped with cheese.... `,\r\n  ketchup: `Ketchup`,\r\n  Pepsi: `Pepsi`,\r\n  add_new_meal: `Add new meal`,\r\n  meal_name_en: `Meal name (English)`,\r\n  meal_name_ar: `Meal name (Arabic)`,\r\n  calories: `Calories`,\r\n  size1: `Size 1`,\r\n  size2: `Size 2`,\r\n  size3: `Size 3`,\r\n  item_name: `Item name`,\r\n  preview: `preview`,\r\n  // available: 'avialable',\r\n  not_available: \"Not avialable\",\r\n  total_offers: \"Total offers\",\r\n  add_new_category: \"Add New Category\",\r\n  edit_category: \"Edit Category\",\r\n  edit_sub_category: `Edit Sub Category`,\r\n  arabic_category_name_is_required: \"Arabic category name is required\",\r\n  category_name_is_required: \"Category name is required\",\r\n  // add new meal\r\n  meal_name_ar_is_required: \"Arabic meal name is required\",\r\n  meal_name_en_is_required: \"English meal name is required\",\r\n  description_en_is_required: \"Description is required\",\r\n  description_ar_is_required: \"Description is required\",\r\n  categories_is_required: \"Categories is required\",\r\n  calories_is_required: \"Calories is required\",\r\n  prepration_time_is_required: \"Prepration time is required\",\r\n  meal_photo_required: \"Meal photo is required\",\r\n  first_meal_name_is_required: \"First meal name is required\",\r\n  second_meal_name_is_required: \"Second meal name is required\",\r\n  first_meal_name: \"First meal name\",\r\n  second_meal_name: \"Second meal name\",\r\n  confirm_item: \"Confirm item\",\r\n  Edit_meal: \"Edit Meal\",\r\n  total_offers: \"Total offers\",\r\n  add_new_category: \"Add New Category\",\r\n  arabic_category_name_is_required: \"Arabic category name is required\",\r\n  category_name_is_required: \"Category name is required\",\r\n  // add new meal\r\n  meal_name_ar_is_required: \"Arabic meal name is required\",\r\n  meal_name_en_is_required: \"English meal name is required\",\r\n  description_en_is_required: \"Description is required\",\r\n  description_ar_is_required: \"Description is required\",\r\n  categories_is_required: \"Categories is required\",\r\n  calories_is_required: \"Calories is required\",\r\n  prepration_time_is_required: \"Prepration time is required\",\r\n  meal_photo_required: \"Meal photo is required\",\r\n  first_meal_name_is_required: \"First meal name is required\",\r\n  second_meal_name_is_required: \"Second meal name is required\",\r\n  first_meal_name: \"First meal name\",\r\n  second_meal_name: \"Second meal name\",\r\n  confirm_item: \"Confirm item\",\r\n  Edit_meal: \"Edit Meal\",\r\n  meal_detail: `Meal Details`,\r\n\r\n  // ------------------ EMPLOYEE Profile Page ----------------------\r\n  enter_name_on_the_card: `Enter name on the card`,\r\n  save_card: `Save card`,\r\n  save: `save`,\r\n  enter_old_password: `Enter old password`,\r\n  enter_new_password: `Enter new password`,\r\n  enter_new_email: `Enter new email`,\r\n  enter_old_email: `Enter old email`,\r\n  password_changed_successfully: `Password changed successfully `,\r\n  add_new_card: \"Add new card\",\r\n\r\n  // ------------------ EMPLOYEE Help Pages ---------------------\r\n  balance_review_content: `Et laudantium omnis ex qui at sapiente velit sed ab.\r\n                          Odio tenetur ratione aut magni consectetur quae sint.\r\n                          Aut distinctio a praesentium dicta tempore sit odit.\r\n                          Excepturi autem facere eveniet possimus dolorem. \r\n                          Quis exercitationem esse voluptatibus doloremque.\r\n                          Non exercitationem dolor soluta eius,\r\n                          `,\r\n  add_new_question: `Add New Question`,\r\n  question: `Question`,\r\n  my_questions: `My Question`,\r\n  my_meeting: `My Meeting`,\r\n  you_do_not_have_meetings_during_the: `You do not have meeting during the`,\r\n  coming_period: `coming period`,\r\n  book_new_meeting: `Book New Meeting`,\r\n  withdraw_money: `Withdraw Money`,\r\n  balance_review: `Balance Review`,\r\n  select_date: `Select Date`,\r\n  meeting_locatoin: `Meeting location`,\r\n  meeting_scheduled_successfully: `Meeting scheduled successfully`,\r\n  time: `Time`,\r\n  meeting_title_is_required: `Meeting title is required`,\r\n  meeting_location_is_required: `Meeting location is required`,\r\n  question_is_required: `Question is required`,\r\n  day_is_required: `Day is required`,\r\n  time_is_required: `Time is required`,\r\n  Help: \"Help\",\r\n\r\n  // ------------------ EMPLOYEE Opportunity Page ----------------------\r\n  basic_plan: `Basic plan`,\r\n  billed_monthly: `Billed Monthly`,\r\n  access_to_all_basic_features: `Access to all basic features`,\r\n  basic_reporting_and_analytics: `Basic reporting and analytics`,\r\n  up_to_10_individual_users: `Up to 10 individual users`,\r\n  individual_data_each_user: `20GB individual data each user`,\r\n  basic_chat_and_email_support: `Basic chat and email support`,\r\n  get_started: `Get started`,\r\n  business_plan: `Business plan`,\r\n  billed_annually: `Billed annually`,\r\n  integrations: `200+ integrations`,\r\n  priority_chat_and_email_support: `Priority chat and email support`,\r\n  enterprise_plan: `Enterprise plan`,\r\n  advanced_custom_fields: `Advanced custom fields`,\r\n  audit_log_and_data_history: `Audit log and data history`,\r\n  unlimited_individual_users: `Unlimited individual users`,\r\n  unlimited_individual_data: `Unlimited individual data`,\r\n  personalised_priotity_service: `Personalised+priotity service`,\r\n\r\n  // ------------------ EMPLOYEE User Page ----------------------\r\n  employees: `Employees`,\r\n  add_new_employee: `Add New employee`,\r\n  total_employees: `Total employees`,\r\n  employee_added_successfully: `Employee Added successfully`,\r\n\r\n  // ------------------ EMPLOYEE Finance Page ----------------------\r\n  transfer_money: `Transfer money`,\r\n  withdraw_cash: `Withdraw cash`,\r\n  transaction_history: `Transaction history`,\r\n  total_transaction: `Total transaction`,\r\n  withdraw_date: `Withdraw date`,\r\n  invoice_statue: `Invoice statue`,\r\n  transfer_money_to_main_balance: `Transfer money to main balance `,\r\n  transfer: `Transfer`,\r\n  the_amount: `The amount`,\r\n  the_amount_is_required: `The amount is required`,\r\n  location_is_required: `Location is required`,\r\n  enter_your_password: `Enter your Password`,\r\n  schedule_a_meetin_to_withdraw: `Schedule a meeting to withdraw`,\r\n  money_cash: ` money cash`,\r\n  select_location: `Select location`,\r\n  location1: `location1`,\r\n  location2: `location2`,\r\n  money_transferred_successfully: `Money transferred successfully `,\r\n  transfer_number: `Transfer number`,\r\n  transfer_value: `Transfer value `,\r\n  we_will_contact_you_soon_to_set_a_date_to: `We will contact you soon to set a date to`,\r\n  receive_your_money: `receive your money`,\r\n  wallet_is_required: \"Wallet is required\",\r\n  wallet: \"Wallet\",\r\n  // ---------------------- EMPLOYEE NAVBAR ------------------\r\n  Help: `Help`,\r\n  main_dashboard: `Main dashboard`,\r\n  branch_dashboard: `Branch dashboard`,\r\n  branch_info: `Branch Info`,\r\n  // ---------------------- EMPLOYEE MARKET MENU ------------------\r\n  the_highest_rated_item: `The highest rated item`,\r\n  are_you_sure_you_want_to_discard_this_product: `Are you sure you want to discard this product this product ?`,\r\n  discard: `Discard`,\r\n  back_to_preview: `Back to preview`,\r\n  back_to_add_new_product: \"Back to add new product\",\r\n  preview_and_confirm: \"Preview and Confirm\",\r\n  add_new_product: \"Add New Product\",\r\n  product_name_en: \"Product name (English)\",\r\n  product_name_ar: \"Product name (Arabic)\",\r\n  product_photo: \"Product photo\",\r\n  sub_category: \"Sub category\",\r\n  size: \"Size\",\r\n  unit_kg_litter: \"Unit (Kg,Litter..)\",\r\n  minmum_order: \"MinimumOrder\",\r\n  product_name_en_is_required: \"Product name is required\",\r\n  arabic_product_name_is_required: \"Arabic product name is required\",\r\n  product_photo_is_required: \"Product photo is required\",\r\n  sub_category_name_is_required: \"Sub-Category name is required\",\r\n  size_is_required: \"Size is required\",\r\n  unit_is_required: \"Unit is required\",\r\n  discount_is_required: \"Discount is required\",\r\n  the_highest_rated_product: \"The highest rated product\",\r\n  the_highest_selling_product: \"The  highest selling product\",\r\n  market_menu: \"Market menu\",\r\n  add_sub_category: \"Add Sub-Category\",\r\n  total_sub_categories: \"Total Sub-Categories\",\r\n  products: \"Products\",\r\n  total_products: \"Total products\",\r\n  add_new_sub_category: \"Add New Sub-Category\",\r\n  sub_category_name_en: \"Sub-Category name (English)\",\r\n  sub_category_name_ar: \"Sub-Category name (Arabic)\",\r\n  main_category_name: \"Main category name\",\r\n  are_you_sure_want_to_delete: \"are you sure want to delete\",\r\n  item: \"item\",\r\n  no_data: \"No Data\",\r\n  this_year: `This year`,\r\n  from_previous_year: `From previous year`,\r\n  last_year: `Last year`,\r\n  old_email: `Old email`,\r\n  profile_picture_is_required: `Profile picture is required`,\r\n  profile_picture: `Profile picture`,\r\n  edit_new_employee: `Edit new employee`,\r\n  wallet_is_required: `Wallet is required`,\r\n  wallet: \"Wallet\",\r\n  PhoneNo2_is_required: `Phone Number 2 is required`,\r\n  order_id: `Order id`,\r\n  order_number: `Order number`,\r\n  delivery_name: `Delivery name`,\r\n  meals_with_sizes: `Meals with sizes`,\r\n  meals_without_sizes: `Single Meal`,\r\n  display_type: `Display type`,\r\n  first_description: `First description`,\r\n  second_description: `Second description`,\r\n  select_item: `Select item`,\r\n  price_is_required: `Price is required`,\r\n  invoice_statue: `Invoice statue`,\r\n  are_you_sure_want_to_ogout: `Are you Sure Want To Logout`,\r\n  logout: `Logout`,\r\n  yes: `Yes`,\r\n  branch_type: `Branch type`,\r\n  branch_commercial_register: `branch commercial register`,\r\n  commercial_register_is_required: `commercial register is required`,\r\n  type_is_required: `type is required`,\r\n  meal_price_is_Required: `meal price is Required`,\r\n  price_is_Required: `price is Required`,\r\n  // ---------------- Monthes --------------------\r\n  january: \"January\",\r\n  february: \"February\",\r\n  march: \"March\",\r\n  april: \"April\",\r\n  may: \"May\",\r\n  june: \"June\",\r\n  july: \"July\",\r\n  august: \"August\",\r\n  september: \"Sebtember\",\r\n  october: \"October\",\r\n  november: \"November\",\r\n  december: \"December\",\r\n  // ----------------- Days -------------------\r\n  Saturday: `Saturday`,\r\n  Sunday: `Sunday`,\r\n  Monday: `Monday`,\r\n  Tuesday: `Tuesday`,\r\n  Wednesday: `Wednesday`,\r\n  Thursday: `Thursday`,\r\n  Friday: `Friday`,\r\n  close: \"Close\",\r\n  //\r\n  edit_personal_information: `Edit Personal Information`,\r\n  Profile: `Profile`,\r\n\r\n  order_pending: ` Pending`,\r\n  order_on_way: ` On Way`,\r\n  order_on_progress: ` On Progress`,\r\n  order_delivered: ` Delivered`,\r\n  order_canceled: ` Canceled`,\r\n  //\r\n  update_offer: `Update Offer`,\r\n  edit_meal: `Edit Meal`,\r\n  edit_combo_offer: `Edit combo offer`,\r\n};\r\n\r\nexport default en;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\routes\\index.js",["2609","2610","2611","2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622","2623","2624","2625","2626","2627","2628","2629","2630","2631","2632","2633","2634","2635","2636"],[],"import { Navigate, useRoutes } from \"react-router-dom\";\r\nimport DashboardLayout from \"../layouts/dashboard/DashboardLayout\";\r\nimport EmployeeDashboardLayout from \"../layouts/employee-dashboard/EmployeeDashboardLayout\";\r\n// import EmployeeDashboardLayout from \"../layouts/employee/EmployeeDashboardLayout\";\r\nimport {\r\n  // HomePage,\r\n  AddNewOfferPage,\r\n  AddNewBranchPage,\r\n  AddNewItem,\r\n  AddMarketItem,\r\n  AddMarketOffer,\r\n  AddNewMeal,\r\n  BranchesListPage,\r\n  BranchDashboardPage,\r\n  BranchInformationPage,\r\n  EmployeePerformancePage,\r\n  Finance,\r\n  FinancePage,\r\n  Help,\r\n  HelpPage,\r\n  LoginPage,\r\n  MenuFirstPage,\r\n  NewBranchStatusPage,\r\n  PaymentFormPage,\r\n  ProfilePageEmloyee,\r\n  PerformancePage,\r\n  PromoteNow,\r\n  ProfilePage,\r\n  RestaurantFormPage,\r\n  RankPage,\r\n  RegisterPage,\r\n  OverViewPageTwo,\r\n  OpportunityCenterPage,\r\n  OrderPage,\r\n  OpportunityCenter,\r\n  Users,\r\n  ContactUsEmployee,\r\n  ContactUsAdmin,\r\n  EmployeesPage,\r\n  FinanceInvoicesPage,\r\n  ResetPasswordPage,\r\n  VerificationCodePage,\r\n  NewPasswordLoginPage,\r\n  EditBranchPage,\r\n  AdminBranchInformationPage,\r\n  AddWorkingDaysPage,\r\n  AddNewEmployeePage,\r\n  EditEmployeeInfoPage,\r\n  MostSellingCitiesPage,\r\n  TransferCashPage,\r\n  WithdrawCashPage,\r\n  PromotePage,\r\n  EditPersonalInfoPage,\r\n  ChangePasswordPage,\r\n  ChangeEmailPage,\r\n  HighestIcomeBranchesPage,\r\n  ChangePhonePage,\r\n  VerifyEmailPage,\r\n  EditBranchInfoPage,\r\n  EmployeeFinancePage,\r\n  EmployeeWithdrawCash,\r\n  EmployeeTransferMoney,\r\n  UsersPage,\r\n  EmployeePage,\r\n  AddNewUserPage,\r\n  EditCategoryPage,\r\n  ConfirmationCodePage,\r\n  PromoteNowPage,\r\n  EditProfileInfoPage,\r\n  EmployeeChangeEmailPage,\r\n  EmployeeChangePasswordPage,\r\n  EmployeeChangePhonePage,\r\n  EmployeeVerifyEmailPage,\r\n  AddNewCategoryPage,\r\n  AddNewMealPage,\r\n  ItemDetailsPage,\r\n  MealDetailsPage,\r\n  EditMealPage,\r\n  MarketMenuPage,\r\n  AddMarketCategoryPage,\r\n  AddMarketSubCategoryPage,\r\n  AddMarketProductPage,\r\n  PreviewMarketProductPage,\r\n  EditUserInfoPage,\r\n  ContactUs,\r\n  HelpCPage,\r\n  ProfileCPage,\r\n  OpportunityCenterCPage,\r\n  PromoteNowCPage,\r\n  EditMarketSubCategoryPage,\r\n  EditMarketProductPage,\r\n  EditEmployeePage,\r\n  AddComboMeal,\r\n  EditEmployeeProfilePage,\r\n  EditAdminProfilePage,\r\n  EditComboOfferPage,\r\n  EditSingleMealPage,\r\n} from \"./elements\";\r\nimport AuthGuard from \"../auth/AuthAdminGuard\";\r\nimport AuthEmployeeGuard from \"../auth/AuthEmployeeGuard\";\r\nimport AuthAdminGuard from \"../auth/AuthAdminGuard\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function Router() {\r\n  return useRoutes([\r\n    // Auth\r\n    {\r\n      path: \"/\",\r\n      children: [\r\n        {\r\n          element: <Navigate to=\"auth/restaurant-form\" replace />,\r\n          index: true,\r\n        },\r\n        { path: \"auth/login\", element: <LoginPage /> },\r\n        { path: \"auth/restaurant-form\", element: <RestaurantFormPage /> },\r\n        { path: \"auth/admin-form\", element: <RegisterPage /> },\r\n        { path: \"auth/payment-form\", element: <PaymentFormPage /> },\r\n        { path: \"auth/reset-password\", element: <ResetPasswordPage /> },\r\n        { path: \"auth/confirmation\", element: <ConfirmationCodePage /> },\r\n        {\r\n          path: \"auth/password-verification\",\r\n          element: <VerificationCodePage />,\r\n        },\r\n        { path: \"auth/newPassword-login\", element: <NewPasswordLoginPage /> },\r\n      ],\r\n    },\r\n    // =============  @@@@ ADMIN @@@@ =========\r\n    // Dashboard\r\n    {\r\n      path: \"dashboard\",\r\n      element: (\r\n        <AuthAdminGuard>\r\n          <DashboardLayout />\r\n        </AuthAdminGuard>\r\n      ),\r\n      children: [\r\n        { element: <Navigate to=\"/dashboard/overview\" replace />, index: true },\r\n        { path: \"overview\", element: <OverViewPageTwo /> },\r\n        { path: \"contact-us\", element: <ContactUs /> },\r\n        {\r\n          path: \"branches\",\r\n          children: [\r\n            { path: \"\", element: <BranchesListPage /> },\r\n            { path: \"add-branch\", element: <AddNewBranchPage /> },\r\n            {\r\n              path: \"add-branch/add-working-days\",\r\n              element: <AddWorkingDaysPage />,\r\n            },\r\n            // { path: \"edit-branch/:id\", element: <EditBranchPage /> },\r\n            // { path: \"edit-branch\", element: <EditBranchPage /> },\r\n            { path: \"edit-branch\", element: <EditBranchInfoPage /> },\r\n            { path: \"branch-info\", element: <AdminBranchInformationPage /> },\r\n          ],\r\n        },\r\n        {\r\n          path: \"users\",\r\n          children: [\r\n            { path: \"\", element: <UsersPage /> },\r\n            { path: \"add-new-user\", element: <AddNewUserPage /> },\r\n            { path: \"edit-user-info\", element: <EditUserInfoPage /> },\r\n            // { path: \"add-branch/add-working-days\", element: <AddWorkingDaysPage /> },\r\n          ],\r\n        },\r\n        {\r\n          path: \"performance\",\r\n          children: [\r\n            { path: \"\", element: <PerformancePage /> },\r\n            {\r\n              path: \"highest-income-branches\",\r\n              element: <HighestIcomeBranchesPage />,\r\n            },\r\n            { path: \"most_selling_cities\", element: <MostSellingCitiesPage /> },\r\n          ],\r\n        },\r\n\r\n        {\r\n          path: \"financial\",\r\n          children: [\r\n            { path: \"\", element: <FinancePage /> },\r\n            // { path: \"invoices\", element: <FinanceInvoicesPage /> },\r\n            { path: \"transfer-cash\", element: <TransferCashPage /> },\r\n            { path: \"withdraw-cash\", element: <WithdrawCashPage /> },\r\n          ],\r\n        },\r\n        { path: \"rank\", element: <RankPage /> },\r\n        {\r\n          path: \"opportunity-center\",\r\n          children: [\r\n            { path: \"\", element: <OpportunityCenterCPage /> },\r\n            { path: \"promote\", element: <PromoteNowCPage /> },\r\n          ],\r\n        },\r\n        {\r\n          path: \"profile\",\r\n          children: [\r\n            { path: \"\", element: <ProfileCPage /> },\r\n            { path: \"edit-profile-info\", element: <EditAdminProfilePage /> },\r\n            { path: \"change-password\", element: <ChangePasswordPage /> },\r\n            { path: \"change-email\", element: <ChangeEmailPage /> },\r\n            { path: \"verify-email\", element: <VerifyEmailPage /> },\r\n            { path: \"change-phone\", element: <ChangePhonePage /> },\r\n          ],\r\n        },\r\n        { path: \"help\", element: <HelpCPage /> },\r\n      ],\r\n    },\r\n    // =============  @@@@ EMPLOYEE @@@@ =========\r\n    {\r\n      path: \"employee\",\r\n      element: (\r\n        <AuthEmployeeGuard>\r\n          <EmployeeDashboardLayout />,\r\n        </AuthEmployeeGuard>\r\n      ),\r\n      children: [\r\n        {\r\n          element: <Navigate to=\"/employee/branch-dashboard\" replace />,\r\n          index: true,\r\n        },\r\n        { path: \"branch-dashboard\", element: <BranchDashboardPage /> },\r\n        {\r\n          path: \"branch-dashboard/new-branch-status\",\r\n          element: <NewBranchStatusPage />,\r\n        },\r\n        {\r\n          path: \"menu\",\r\n          children: [\r\n            { path: \"\", element: <MenuFirstPage /> },\r\n            { path: \"add-new-category\", element: <AddNewCategoryPage /> },\r\n            { path: \"edit-category\", element: <EditCategoryPage /> },\r\n            { path: \"edit-combo\", element: <EditComboOfferPage /> },\r\n            { path: \"edit-single-meal\", element: <EditSingleMealPage /> },\r\n            {\r\n              path: \"add-new-meal\",\r\n              children: [\r\n                { path: \"\", element: <AddNewMealPage /> },\r\n                { path: \"add-combo\", element: <AddComboMeal /> },\r\n              ],\r\n            },\r\n            { path: \"add-new-offer\", element: <AddNewOfferPage /> },\r\n            {\r\n              path: \"meal-details\",\r\n              children: [\r\n                { path: \"\", element: <MealDetailsPage /> },\r\n                { path: \"edit-meal\", element: <EditMealPage /> },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          path: \"market-menu\",\r\n          children: [\r\n            { path: \"\", element: <MarketMenuPage /> },\r\n            { path: \"add-market-category\", element: <AddMarketCategoryPage /> },\r\n            {\r\n              path: \"add-market-subCategory\",\r\n              element: <AddMarketSubCategoryPage />,\r\n            },\r\n            {\r\n              path: \"edit-market-subCategory\",\r\n              element: <EditMarketSubCategoryPage />,\r\n            },\r\n            {\r\n              path: \"add-market-product\",\r\n              children: [\r\n                { path: \"\", element: <AddMarketProductPage /> },\r\n                {\r\n                  path: \"preview-product\",\r\n                  element: <PreviewMarketProductPage />,\r\n                },\r\n              ],\r\n            },\r\n            {\r\n              path: \"edit-market-product\",\r\n              children: [\r\n                { path: \"\", element: <EditMarketProductPage /> },\r\n                {\r\n                  path: \"preview-product\",\r\n                  element: <PreviewMarketProductPage />,\r\n                },\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        { path: \"orders\", element: <OrderPage /> },\r\n        {\r\n          path: \"branch-info\",\r\n          children: [\r\n            { path: \"\", element: <BranchInformationPage /> },\r\n            { path: \"edit-info\", element: <EditBranchInfoPage /> },\r\n          ],\r\n        },\r\n        {\r\n          path: \"financial\",\r\n          children: [\r\n            { path: \"\", element: <EmployeeFinancePage /> },\r\n            { path: \"withdraw-cash\", element: <EmployeeWithdrawCash /> },\r\n            { path: \"transfer-cash\", element: <EmployeeTransferMoney /> },\r\n          ],\r\n        },\r\n        { path: \"financial-invoices\", element: <FinanceInvoicesPage /> },\r\n        { path: \"performance\", element: <EmployeePerformancePage /> },\r\n\r\n        {\r\n          path: \"users\",\r\n          children: [\r\n            { path: \"\", element: <EmployeePage /> },\r\n            { path: \"add-new-user\", element: <AddNewEmployeePage /> },\r\n            { path: \"edit-user-info\", element: <EditEmployeePage /> },\r\n          ],\r\n        },\r\n        {\r\n          path: \"opportunity-center\",\r\n          children: [\r\n            { path: \"\", element: <OpportunityCenterCPage /> },\r\n            { path: \"promote\", element: <PromoteNowCPage /> },\r\n          ],\r\n        },\r\n        {\r\n          path: \"profile\",\r\n          children: [\r\n            { path: \"\", element: <ProfileCPage /> },\r\n            { path: \"edit-profile-info\", element: <EditEmployeeProfilePage /> },\r\n            { path: \"change-password\", element: <ChangePasswordPage /> },\r\n            { path: \"change-email\", element: <ChangeEmailPage /> },\r\n            { path: \"verify-email\", element: <VerifyEmailPage /> },\r\n            { path: \"change-phone\", element: <ChangePhonePage /> },\r\n          ],\r\n        },\r\n        { path: \"help\", element: <HelpCPage /> },\r\n        { path: \"contact-us\", element: <ContactUs /> },\r\n\r\n        { path: \"new-branch-status\", element: <NewBranchStatusPage /> },\r\n      ],\r\n    },\r\n\r\n    { path: \"/500\", element: <></> },\r\n    { path: \"/404\", element: <></> },\r\n  ]);\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\chart\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeSettings.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\SettingsContext.js",[],["2637"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scroll-to-top\\ScrollToTop.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\useLocales.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\toastMessage.js",["2638"],[],"import { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const successToast = (a) => {\r\n  toast(\r\n    <div className=\"JustifyingMSG\">\r\n      <div>\r\n        <i class=\"fa fa-check\" aria-hidden=\"true\"></i>\r\n      </div>\r\n      <div>{a}</div>\r\n    </div>,\r\n    {\r\n      position: \"top-left\",\r\n      autoClose: 1500,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: true,\r\n      closeButton: false,\r\n      className: \"toastMessage_ar successToastMessage\",\r\n    }\r\n  );\r\n};\r\nexport const errorToast = (a) => {\r\n  toast.error(\r\n    <div className=\"JustifyingMSG\">\r\n      <div>\r\n        <i className=\"fa fa-exclamation\" aria-hidden=\"true\"></i>\r\n      </div>\r\n      <div>{a}</div>\r\n    </div>,\r\n    {\r\n      position: \"top-left\",\r\n      autoClose: 1500,\r\n      pauseOnHover: false,\r\n      pauseOnFocusLoss: true,\r\n      closeOnClick: true,\r\n      draggable: true,\r\n      closeButton: false,\r\n      className: \"toastMessage_ar errorToastMessage\",\r\n    }\r\n  );\r\n};\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\authentication.js",["2639"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport moment from \"moment\";\r\nimport {\r\n  signupAdmin,\r\n  confirmEmail,\r\n  resendPasswordCode,\r\n  updatePassword,\r\n  confirmPasswordCode,\r\n  resetPasswordCode,\r\n  validateEmail,\r\n} from \"../services/auth_service\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"authentication\",\r\n  initialState: {\r\n    isLoading: false,\r\n    isLoadingConfirmEmail: false,\r\n    Latitude: 30.3456,\r\n    Longitude: 31.02069,\r\n    ProfilePicture: null,\r\n    Building: \"\",\r\n    Floor: \"\",\r\n    Apartment: \"\",\r\n    MoreDetails: \"\",\r\n    AddressPhoneNumber: \"\",\r\n    AddressName: \"\",\r\n    NationalityId: \"\",\r\n    Brand: {\r\n      Name: \"\",\r\n      SecondName: \"\",\r\n      //\r\n      WebsiteUrl: \"\",\r\n      StoreTypeId: 0,\r\n      SocialMediaAccounts: \"\",\r\n    },\r\n    //images\r\n    Photo: \"\",\r\n    CoverPhoto: \"\",\r\n    CommercialRegister: \"\",\r\n    TaxLicense: \"\",\r\n    CountryId: \"\",\r\n    //imges\r\n    StoreTypeId: null,\r\n    LicenseName: \"\",\r\n    PhotoName: \"\",\r\n    CoverPhotoName: \"\",\r\n    CommercialRegisterName: \"\",\r\n    TaxLicenseName: \"\",\r\n    FacilityType: 0,\r\n    ProfilePictureName: null,\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    PhoneNumber: \"\",\r\n    Gender: 0,\r\n    Email: \"\",\r\n    Password: \"\",\r\n    ConfirmPassword: \"\",\r\n    DateOfBirth: \"01/01/2000\",\r\n    CountryCode: \"+02\",\r\n    isSubmitAdmin: false,\r\n    SocialMediaAccounts: null,\r\n    BankAccounts: null,\r\n    isPickedLoction: false,\r\n  },\r\n  reducers: {\r\n    setAdminInfo(state, action) {\r\n      console.log(\"from slice\");\r\n      console.log(action.payload);\r\n      state.FirstName = action.payload.FirstName;\r\n      state.LastName = action.payload.LastName;\r\n      state.Email = action.payload.Email;\r\n      state.Gender = action.payload.Gender;\r\n      state.AddressName = action.payload.AddressName;\r\n      state.PhoneNumber = action.payload.PhoneNumber;\r\n      state.Password = action.payload.Password;\r\n      state.AddressPhoneNumber = action.payload.AddressPhoneNumber;\r\n      state.Apartment = action.payload.Apartment;\r\n      state.Building = action.payload.Building;\r\n      state.Floor = action.payload.Floor;\r\n      //  state.CountryCode = action.payload.CountryCode;\r\n      state.ConfirmPassword = action.payload.ConfirmPassword;\r\n      state.NationalityId = action.payload.NationalityId;\r\n      state.DateOfBirth = action.payload.DateOfBirth;\r\n      state.ProfilePicture = action.payload.ProfilePicture;\r\n      state.ProfilePictureName = action.payload.ProfilePicture.name;\r\n    },\r\n    setDateOfBirthday(state, action) {\r\n      console.log(action.payload);\r\n      state.DateOfBirth = action.payload;\r\n    },\r\n    reSetAdminInfo(state) {\r\n      state.FirstName = \"\";\r\n      state.LastName = \"\";\r\n      state.Gender = 0;\r\n      state.AddressName = \"\";\r\n      state.PhoneNumber = \"\";\r\n      state.Password = \"\";\r\n      state.AddressPhoneNumber = \"\";\r\n      state.Apartment = \"\";\r\n      state.Building = \"\";\r\n      state.Floor = \"\";\r\n      state.CountryCode = \"\";\r\n      state.DateOfBirth = \"\";\r\n      state.ConfirmPassword = \"\";\r\n      //restuarant info\r\n      state.Brand.Name = \"\";\r\n      state.Brand.SecondName = \"\";\r\n      //photo\r\n      state.Photo = \"\";\r\n      state.PhotoName = \"\";\r\n\r\n      state.CoverPhoto = \"\";\r\n      state.CoverPhotoName = \"\";\r\n\r\n      state.CommercialRegister = \"\";\r\n      state.CommercialRegisterName = \"\";\r\n\r\n      state.TaxLicense = \"\";\r\n      state.TaxLicenseName = \"\";\r\n\r\n      state.Brand.WebsiteUrl = \"\";\r\n      state.StoreTypeId = null;\r\n      state.SocialMediaAccounts = null;\r\n      state.BankAccounts = null;\r\n    },\r\n    setRestaurantInfo(state, action) {\r\n      console.log(\"from slice\");\r\n      console.log(action.payload);\r\n      state.Brand.Name = action.payload.Name;\r\n      state.Brand.SecondName = action.payload.SecondName;\r\n      //photo\r\n      state.Photo = action.payload.Photo;\r\n      state.PhotoName = action.payload.Photo.name;\r\n\r\n      state.CoverPhoto = action.payload.CoverPhoto;\r\n      state.CoverPhotoName = action.payload.CoverPhoto.name;\r\n\r\n      state.CommercialRegister = action.payload.CommercialRegister;\r\n      state.CommercialRegisterName = action.payload.CommercialRegister.name;\r\n\r\n      state.TaxLicense = action.payload.TaxLicense;\r\n      state.TaxLicenseName = action.payload.TaxLicense.name;\r\n\r\n      state.Brand.WebsiteUrl = action.payload.WebsiteUrl;\r\n      state.StoreTypeId = action.payload.StoreTypeId;\r\n      state.SocialMediaAccounts = action.payload.SocialMediaAccounts;\r\n    },\r\n    addBanAccountInfo(state, action) {\r\n      console.log(action.payload);\r\n      state.BankAccounts = action.payload.BankAccounts;\r\n    },\r\n    setFacilityTypeAndCity(state, action) {\r\n      console.log(action.payload);\r\n      state.FacilityType = action.payload.FacilityType;\r\n      state.Facility.MarketType = action.payload.MarketType;\r\n      state.Facility.CityId = action.payload.CityId;\r\n    },\r\n    setLatAndLong(state, action) {\r\n      state.isPickedLoction = true;\r\n      state.Latitude = action.payload.Latitude;\r\n      state.Longitude = action.payload.Longitude;\r\n    },\r\n    setProfilePic(state, action) {\r\n      state.ProfilePicture = action.payload.ProfilePicture;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    // ==> Get  Restaurant Monthly Earnings\r\n    [signupAdmin.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (action.payload.message === \"Success\") {\r\n        console.log(\"Added Success\");\r\n        state.isSubmitAdmin = true;\r\n        state.FirstName = \"\";\r\n        state.LastName = \"\";\r\n        state.Gender = 0;\r\n        state.PhoneNumber = \"\";\r\n        state.Password = \"\";\r\n        state.AddressPhoneNumber = \"\";\r\n        state.Apartment = \"\";\r\n        state.Building = \"\";\r\n        state.Floor = \"\";\r\n        state.CountryCode = \"\";\r\n        state.DateOfBirth = \"\";\r\n        state.ConfirmPassword = \"\";\r\n      }\r\n    },\r\n    [signupAdmin.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [signupAdmin.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    //Confirm Email\r\n\r\n    [confirmEmail.fulfilled]: (state, action) => {\r\n      state.isLoadingConfirmEmail = false;\r\n      if (action.payload.message === \"Success\") {\r\n      }\r\n    },\r\n    [confirmEmail.rejected]: (state, action) => {\r\n      state.isLoadingConfirmEmail = false;\r\n      state.error = false;\r\n    },\r\n    [confirmEmail.pending]: (state) => {\r\n      state.isLoadingConfirmEmail = true;\r\n    },\r\n    //isResendPasswordCode\r\n    [validateEmail.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (\r\n        action.payload.message === \"Success\" ||\r\n        action.payload.message === \"تمت العملية بنجاح\"\r\n      ) {\r\n        window.location.href = \"/auth/password-verification\";\r\n      }\r\n    },\r\n    [validateEmail.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [validateEmail.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    //isResendPasswordCode\r\n    [resendPasswordCode.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (\r\n        action.payload.message === \"Success\" ||\r\n        action.payload.message === \"تمت العملية بنجاح\"\r\n      ) {\r\n        window.location.href = \"/auth/verification\";\r\n      }\r\n    },\r\n    [resendPasswordCode.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [resendPasswordCode.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //confirmPasswordCode\r\n    [confirmPasswordCode.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (\r\n        action.payload.message === \"Success\" ||\r\n        action.payload.message === \"تمت العملية بنجاح\"\r\n      ) {\r\n        window.location.href = \"/auth/newPassword-login\";\r\n      } else {\r\n      }\r\n    },\r\n    [confirmPasswordCode.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [confirmPasswordCode.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //resetpassword\r\n    [resetPasswordCode.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (\r\n        action.payload.message === \"Success\" ||\r\n        action.payload.message === \"تمت العملية بنجاح\"\r\n      ) {\r\n        window.location.href = \"/auth/login\";\r\n      }\r\n    },\r\n    [resetPasswordCode.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [resetPasswordCode.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //updatePassword\r\n    [updatePassword.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [updatePassword.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [updatePassword.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\n// Actions\r\nexport const {\r\n  setAdminInfo,\r\n  addBanAccountInfo,\r\n  reSetAdminInfo,\r\n  setDateOfBirthday,\r\n  setRestaurantInfo,\r\n  setFacilityTypeAndCity,\r\n  setLatAndLong,\r\n  setProfilePic,\r\n} = slice.actions;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employeeBranches.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\adminHelp.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employeeFacility.js",["2640"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addRestaurantCategory,\r\n  deleteRestaurantCategoryById,\r\n  getRestaurantCategories,\r\n  getRestaurantCategoriesDetails,\r\n  getResturantAdmins,\r\n  addInquiry,\r\n  getInquiry,\r\n  getRestaurantHighestRatedMeal,\r\n  getRestaurantHighestSellingMeal,\r\n  updateResturantCategory,\r\n  updateCategoryCurrentStatus,\r\n  getInquiriesBySubject,\r\n  getInquirybyId,\r\n  replyToInquiry,\r\n} from \"../services/employee_facility_service\";\r\n\r\n// --------------------------------------------------------------------------------\r\n\r\n//----------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"employeeFacility\",\r\n  initialState: {\r\n    isLoading: true,\r\n    error: null,\r\n    restaurantCategories: [],\r\n\r\n    deleteCategorySuccessfully: false,\r\n    admins: [],\r\n    isAdded: false,\r\n    inquiry: [],\r\n    isLoadingAddInquiry: false,\r\n    highestSellingMeal: {},\r\n    highestRatedMeal: null,\r\n    isLoadingHighestRatedMeal: false,\r\n    isLoadingHighestSellingMeal: false,\r\n    inquiryById: {},\r\n    massege: [],\r\n    isLoadingCategroy: false,\r\n    isLoadingupdateResturantCategory: false,\r\n  },\r\n  reducers: {\r\n    initialize: (state) => {\r\n      state.addCategorySuccessfully = false;\r\n      state.deleteCategorySuccessfully = false;\r\n      state.replyToInquiryIsSuccess = false;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    // ==> Get employee Reastaurant Categories Facility\r\n    [getRestaurantCategoriesDetails.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.restaurantCategories = action.payload.data.categories;\r\n    },\r\n    [getRestaurantCategoriesDetails.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantCategoriesDetails.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> UPDATe employee Reastaurant Category\r\n    [updateResturantCategory.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingupdateResturantCategory = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.addCategorySuccessfully = true;\r\n        window.location.href = \"/employee/menu\";\r\n      }\r\n    },\r\n    [updateResturantCategory.rejected]: (state, action) => {\r\n      state.isLoadingupdateResturantCategory = false;\r\n      state.error = false;\r\n    },\r\n    [updateResturantCategory.pending]: (state) => {\r\n      state.isLoadingupdateResturantCategory = true;\r\n    },\r\n\r\n    // ==> Add employee Reastaurant Category\r\n    [addRestaurantCategory.fulfilled]: (state, action) => {\r\n      state.isLoadingCategroy = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.addCategorySuccessfully = true;\r\n        alert(\"Done !!!!!!\");\r\n        //window.location.href = \"/employee/menu\";\r\n      }\r\n    },\r\n    [addRestaurantCategory.rejected]: (state, action) => {\r\n      state.isLoadingCategroy = false;\r\n      state.error = false;\r\n    },\r\n    [addRestaurantCategory.pending]: (state) => {\r\n      state.isLoadingCategroy = true;\r\n    },\r\n\r\n    // ==> Delete employee Reastaurant Category By id\r\n    [deleteRestaurantCategoryById.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.deleteCategorySuccessfully = true;\r\n      }\r\n    },\r\n    [deleteRestaurantCategoryById.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [deleteRestaurantCategoryById.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Add employee Reastaurant Category\r\n    [getResturantAdmins.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.admins = action.payload.data;\r\n    },\r\n    [getResturantAdmins.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getResturantAdmins.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Add employee Reastaurant Category\r\n    [addInquiry.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingAddInquiry = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.isAdded = true;\r\n      }\r\n    },\r\n    [addInquiry.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingAddInquiry = false;\r\n      state.error = false;\r\n    },\r\n    [addInquiry.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingAddInquiry = true;\r\n    },\r\n\r\n    // ==> Add employee Reastaurant Category\r\n    [getInquiry.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.inquiry = action.payload.data.inquiries;\r\n      state.badge = action.payload.data.unboxed;\r\n      console.log(\"bodge\", state.badge);\r\n    },\r\n    [getInquiry.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getInquiry.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> getRestaurantHighestRatedMeal\r\n    [getRestaurantHighestRatedMeal.fulfilled]: (state, action) => {\r\n      state.isLoadingHighestRatedMeal = false;\r\n      state.highestRatedMeal = action.payload.data;\r\n    },\r\n    [getRestaurantHighestRatedMeal.rejected]: (state, action) => {\r\n      state.isLoadingHighestRatedMeal = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantHighestRatedMeal.pending]: (state) => {\r\n      state.isLoadingHighestRatedMeal = true;\r\n    },\r\n\r\n    // ==> get Restaurant Highest Selling Meal\r\n    [getRestaurantHighestSellingMeal.fulfilled]: (state, action) => {\r\n      state.isLoadingHighestSellingMeal = false;\r\n      state.highestSellingMeal = action.payload.data;\r\n    },\r\n    [getRestaurantHighestSellingMeal.rejected]: (state, action) => {\r\n      state.isLoadingHighestSellingMeal = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantHighestSellingMeal.pending]: (state) => {\r\n      state.isLoadingHighestSellingMeal = true;\r\n    },\r\n\r\n    // ==> Put Restaurant Highest Selling Meal\r\n    [updateCategoryCurrentStatus.fulfilled]: (state, action) => {\r\n      state.isLoadingHighestSellingMeal = false;\r\n      console.log(\"zy elfoll\");\r\n      // state.highestSellingMeal = action.payload.data;\r\n    },\r\n    [updateCategoryCurrentStatus.rejected]: (state, action) => {\r\n      state.isLoadingHighestSellingMeal = false;\r\n      state.error = false;\r\n      console.log(\"fa4l\");\r\n    },\r\n    [updateCategoryCurrentStatus.pending]: (state) => {\r\n      state.isLoadingHighestSellingMeal = true;\r\n      console.log(\"pending\");\r\n    },\r\n\r\n    //result of search\r\n    [getInquiriesBySubject.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled search\");\r\n      state.isLoading = false;\r\n      state.inquiry = action.payload.data;\r\n    },\r\n    [getInquiriesBySubject.rejected]: (state, { payload }) => {\r\n      console.log(\"rejected\");\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getInquiriesBySubject.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // Get Inquiry by Id\r\n    [getInquirybyId.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled get Inquiry by Id\");\r\n      state.isLoading = false;\r\n      state.inquiryById = action.payload.data;\r\n      state.massege = action.payload.data.messages;\r\n    },\r\n    [getInquirybyId.rejected]: (state, { payload }) => {\r\n      console.log(\"rejected\");\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getInquirybyId.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> replyToInquiry\r\n    [replyToInquiry.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled Replay\");\r\n      state.isLoadingReplyToInquiry = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.replyToInquiryIsSuccess = true;\r\n        alert(\"You Send Message Successfuly\");\r\n      }\r\n    },\r\n    [replyToInquiry.rejected]: (state, action) => {\r\n      state.isLoadingReplyToInquiry = false;\r\n      state.error = false;\r\n    },\r\n    [replyToInquiry.pending]: (state, action) => {\r\n      state.isLoadingReplyToInquiry = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\nexport const { initialize } = slice.actions;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\adminProfile.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employeeOrders.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\routes\\paths.js",["2641","2642"],[],"// ----------------------------------------------------------------------\r\n\r\nfunction path(root, sublink) {\r\n  return `${root}${sublink}`;\r\n}\r\nconst ROOTS_AUTH = \"/auth\";\r\n// ----------------------------------------------------------------------\r\nexport const PATH_AUTH = {\r\n  root: ROOTS_AUTH,\r\n  login: path(ROOTS_AUTH, \"/login\"),\r\n  register: path(ROOTS_AUTH, \"/register\"),\r\n  verify: path(ROOTS_AUTH, \"/verify\"),\r\n  resetPassword: path(ROOTS_AUTH, \"/reset-password\"),\r\n  newPassword: path(ROOTS_AUTH, \"/new-password\"),\r\n};\r\nconst ROOTS_DASHBOARD = \"/dashboard\";\r\nexport const PATH_PAGE = {\r\n  payment: \"/payment\",\r\n  about: \"/about-us\",\r\n  contact: \"/contact-us\",\r\n  faqs: \"/faqs\",\r\n  page403: \"/403\",\r\n  page404: \"/404\",\r\n  page500: \"/500\",\r\n};\r\nexport const PATH_DASHBOARD = {\r\n  overview: \"/overview\",\r\n  users: \"/users\",\r\n  branches: \"/branches\",\r\n  performance: \"/performance\",\r\n  finance: \"/finance\",\r\n  rank: \"/rank\",\r\n  opportunity_center: \"/opportunity_center\",\r\n  account_settings: \"/account_settings\",\r\n  help: \"/help\",\r\n  log_out: \"/log_out\",\r\n  menu: \"/menu\",\r\n  profile_employee:\"/profile-employee\",\r\n  opportunity_center_employee:\"/opportunity-center-employee\",\r\n  //m start\r\n  user:\"/user\",\r\n  finance: \"/finance-employee\",\r\n  contact_us:\"/contact-us-employee\"\r\n};\r\nexport const PATH_EMPLOYEE = {\r\n  home: \"/home\",\r\n  menu: \"/menu\",\r\n  store: \"/store\",\r\n  orders: \"/orders\",\r\n  opportunities: \"/opportunities\",\r\n  opportunity_center: \"/opportunity_center\",\r\n  attendance_enhancer: \"/attendance_enhancer\",\r\n  inbox: \"/inbox\",\r\n  rank: \"/rank\",\r\n  finance: \"/finance\",\r\n  account_settings: \"/account_settings\",\r\n  help: \"/help\",\r\n  log_out: \"/log_out\",\r\n};\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\locales\\ThemeLocalization.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\resturants.js",["2643","2644","2645","2646"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\n//services\r\nimport { adminHighestRatedBranch } from \"../services/rank_service\";\r\nimport { adminLowestRatedBranch } from \"../services/admin_lowest_rated_branch_service\";\r\nimport { getRestaurantChainReview } from \"../services/admin_restaurant_chain_review_service\";\r\nimport {\r\n  getAllRestaurantMonthlyEarnings,\r\n  getAnnualEarningsAnalysis,\r\n  getMarketMostSellingCities,\r\n  getRestaurantMonthlyEarnings,\r\n  getRestaurantMostSellingCities,\r\n} from \"../services/restaurant_service\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"resturants\",\r\n  initialState: {\r\n    isLoading: false,\r\n    error: null,\r\n    rateBranch: {},\r\n    lowestRateBransh: {},\r\n    chainReview: [],\r\n    allRestaurantMonthlyEarnings: {\r\n      current: [],\r\n      previous: [],\r\n      currency: \"\",\r\n    },\r\n    \r\n    branchesMostSellingCities:[],\r\n    isLoadingMostSellingCities:false,\r\n    annualEarningsAnalysis: {\r\n      current: [],\r\n      previous: [],\r\n      currency: \"\",\r\n    },\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    // get admin lowest rated branch\r\n    [adminLowestRatedBranch.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.lowestRateBransh = action.payload.data;\r\n    },\r\n    [adminLowestRatedBranch.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [adminLowestRatedBranch.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // Get Resturant Chain Review\r\n    [getRestaurantChainReview.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.chainReview = action.payload.data;\r\n    },\r\n    [getRestaurantChainReview.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [getRestaurantChainReview.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // // Get Restaurant Monthly Earning\r\n    // [getAllRestaurantMonthlyEarnings.fulfilled]: (state, action) => {\r\n    //   // console.log('fullfilled')\r\n    //   state.isLoading = false;\r\n    //   // console.log(action.payload.data)\r\n    //   state.allRestaurantMonthlyEarnings = action.payload.data;\r\n    // },\r\n    // [getAllRestaurantMonthlyEarnings.rejected]: (state, action) => {\r\n    //   // console.log('rejected')\r\n    //   state.isLoading = false;\r\n    // },\r\n    // [getAllRestaurantMonthlyEarnings.pending]: (state) => {\r\n    //   // console.log('pending')\r\n    //   state.isLoading = true;\r\n    // },\r\n\r\n\r\n    // Get Annual Earning Analysis\r\n    // [getAnnualEarningsAnalysis.fulfilled]: (state, action) => {\r\n    //   console.log(\"fullfilled\");\r\n    //   state.isLoading = false;\r\n    //   console.log(action.payload.data);\r\n    //   state.annualEarningsAnalysis = action.payload.data;\r\n    // },\r\n    // [getAnnualEarningsAnalysis.rejected]: (state, action) => {\r\n    //   // console.log('rejected')\r\n    //   state.isLoading = false;\r\n    // },\r\n    // [getAnnualEarningsAnalysis.pending]: (state) => {\r\n    //   // console.log('pending')\r\n    //   state.isLoading = true;\r\n    // },\r\n\r\n    // Get Resturant Most Selling Cities  Review\r\n    [getRestaurantMostSellingCities.fulfilled]: (state, action) => {\r\n      state.isLoadingMostSellingCities = false;\r\n      state.branchesMostSellingCities = action.payload.data;\r\n    },\r\n    [getRestaurantMostSellingCities.rejected]: (state, action) => {\r\n      state.isLoadingMostSellingCities = false;\r\n    },\r\n    [getRestaurantMostSellingCities.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // Get Resturant Most Selling Cities  Review\r\n    [getMarketMostSellingCities.fulfilled]: (state, action) => {\r\n      state.isLoadingMostSellingCities = false;\r\n      state.branchesMostSellingCities = action.payload.data;\r\n    },\r\n    [getMarketMostSellingCities.rejected]: (state, action) => {\r\n      state.isLoadingMostSellingCities = false;\r\n    },\r\n    [getMarketMostSellingCities.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\market.js",["2647"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\n//services\r\nimport {\r\n  getAllBranchesMarket,\r\n  getMarketOrdersNumber,\r\n  getMarketReviewNumber,\r\n  getMarketCustomersNumber,\r\n  getMarketReview,\r\n  getMarketsMonthlyEarnings,\r\n  getPendingMarketBranches,\r\n  getMarketBasicInfo,\r\n  getMarketWorkTimes,\r\n  getMarketDetailsById,\r\n  getMostSellingCities,\r\n  getMarketAdmins,\r\n  addNewMarketBranch,\r\n  setMarketWorkTimes,\r\n  getMarketHighestSellingProduct,\r\n  getMarketCategoriesDetails,\r\n  deleteMarketCategories,\r\n  getMarketMenu,\r\n  deleteMarketProduct,\r\n  updateMarketSubCategoryStatus,\r\n  updateMarket,\r\n} from \"../services/markets_service\";\r\n\r\n//----------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"markets\",\r\n  initialState: {\r\n    isLoading: true,\r\n    allbranches: [],\r\n    error: null,\r\n    admins: [],\r\n    branches: [],\r\n    // branchId: '',\r\n    marketsReviews: [],\r\n    ordersNumber: {},\r\n\r\n    reviewsNumber: {},\r\n    marketDetails: {},\r\n    restaurantMonthlyEarnings: {\r\n      current: [],\r\n      previous: [],\r\n    },\r\n    isDeleted: false,\r\n    isDeletedCategories: false,\r\n\r\n    branchesMarket: [],\r\n    isloadingReviewNumberMarket: false,\r\n    reviewsNumberMarket: {},\r\n    isloadingOrderNumberMarket:false,\r\n    ordersNumberMarket: {},\r\n    restBranches: [],\r\n    customerNumberMarket: [],\r\n    marketReviews: {},\r\n    marketsEarnings: [],\r\n    allbranchesMarket: [],\r\n    addBranchData: \"\",\r\n    workingDays: [],\r\n    marketInfo: {},\r\n    isLoadingMarketInfo: false,\r\n    highestRatedMeal: {},\r\n    isLoadingHighestRatedMeal: false,\r\n    marketWorkTimes: [],\r\n    isLoadingPendingMarketBranches: false,\r\n    pendingMarketBranches: [],\r\n    isLoadingMostMarketSellingCities: false,\r\n    mostSellingMarketCities: [],\r\n    isLoadingMarketAdmins: false,\r\n    marketAdmins: [],\r\n    newMarketId: \"\",\r\n    marketHighestSellingProduct: [],\r\n    isLoadingMarketHighestSelling: false,\r\n    marketCategories: [],\r\n    isLoadingmarketCategories: false,\r\n    isLoadingDelete: false,\r\n    products: [],\r\n    isLoadingProduct: false,\r\n    isLoadingChangeStatus: false,\r\n    subCatStatusIsUpdated: false,\r\n    isLoadingAddMarket: false,\r\n    isLoadingUpdateMarket: false,\r\n    isLoadingSetWorkTimeMarket: false,\r\n    isLoadingMarket: false,\r\n  },\r\n\r\n  reducers: {\r\n    Initialize: (state, action) => {\r\n      state.isDeleted = false;\r\n      state.isDeletedCategories = false;\r\n      state.isDeletedProduct = false;\r\n      state.subCatStatusIsUpdated = false;\r\n    },\r\n  },\r\n\r\n  extraReducers: {\r\n    // ==> Get  Restaurant Reviews\r\n    [getMarketReviewNumber.fulfilled]: (state, action) => {\r\n      state.isloadingReviewNumberMarket = false;\r\n      state.reviewsNumberMarket = action.payload.data;\r\n    },\r\n    [getMarketReviewNumber.rejected]: (state, action) => {\r\n      state.isloadingReviewNumberMarket = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketReviewNumber.pending]: (state) => {\r\n      state.isloadingReviewNumberMarket = true;\r\n    },\r\n\r\n    // ==> get MarketBasicInfo\r\n    [getMarketBasicInfo.fulfilled]: (state, action) => {\r\n      state.isLoadingMarketInfo = false;\r\n      state.marketInfo = action.payload.data;\r\n    },\r\n    [getMarketBasicInfo.rejected]: (state, action) => {\r\n      state.isLoadingMarketInfo = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketBasicInfo.pending]: (state) => {\r\n      state.isLoadingMarketInfo = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Orders Number\r\n    [getMarketOrdersNumber.fulfilled]: (state, action) => {\r\n      state.isloadingOrderNumberMarket = false;\r\n      state.ordersNumberMarket = action.payload.data;\r\n    },\r\n    [getMarketOrdersNumber.rejected]: (state, action) => {\r\n      state.isloadingOrderNumberMarket = false;\r\n      state.error = false;\r\n      console.log(action);\r\n    },\r\n    [getMarketOrdersNumber.pending]: (state) => {\r\n      state.isloadingOrderNumberMarket = true;\r\n    },\r\n\r\n    // ==>get All Branches Market\r\n    [getAllBranchesMarket.fulfilled]: (state, action) => {\r\n      state.isLoadingMarket = false;\r\n      state.branchesMarket = action.payload.data;\r\n    },\r\n    [getAllBranchesMarket.rejected]: (state, action) => {\r\n      state.isLoadingMarket = false;\r\n      state.error = false;\r\n    },\r\n    [getAllBranchesMarket.pending]: (state) => {\r\n      state.isLoadingMarket = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Reviews\r\n    [getMarketReview.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.marketReviews = action.payload.data;\r\n    },\r\n    [getMarketReview.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketReview.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //Get Pending Restaurant Branches\r\n    [getPendingMarketBranches.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.allbranchesMarket = action.payload.data;\r\n    },\r\n    [getPendingMarketBranches.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [getPendingMarketBranches.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Get  Market Monthly Earnings\r\n    [getMarketsMonthlyEarnings.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.marketsEarnings = action.payload.data;\r\n    },\r\n    [getMarketsMonthlyEarnings.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketsMonthlyEarnings.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //getWorkingDays\r\n    [getMarketWorkTimes.fulfilled]: (state, action) => {\r\n      state.marketWorkTimes = action.payload.data;\r\n      state.isLoading = false;\r\n    },\r\n    [getMarketWorkTimes.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketWorkTimes.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    //getMarketDetailsById\r\n    [getMarketDetailsById.fulfilled]: (state, action) => {\r\n      state.marketDetails = action.payload.data;\r\n      state.isLoading = false;\r\n    },\r\n    [getMarketDetailsById.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketDetailsById.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //Get Pending Restaurant Branches\r\n    [getPendingMarketBranches.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingPendingMarketBranches = false;\r\n      state.pendingMarketBranches = action.payload.data;\r\n    },\r\n    [getPendingMarketBranches.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingPendingMarketBranches = false;\r\n      console.log(\"action is\", action);\r\n    },\r\n    [getPendingMarketBranches.pending]: (state) => {\r\n      state.isLoadingPendingMarketBranches = true;\r\n    },\r\n\r\n    //Get Pending Restaurant Branches\r\n    [getMostSellingCities.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingMostMarketSellingCities = false;\r\n      state.mostSellingMarketCities = action.payload.data;\r\n    },\r\n    [getMostSellingCities.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingMostMarketSellingCities = false;\r\n      console.log(\"action is\", action);\r\n    },\r\n    [getMostSellingCities.pending]: (state) => {\r\n      state.isLoadingMostMarketSellingCities = true;\r\n    },\r\n\r\n    //Get Admins\r\n    [getMarketAdmins.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingMarketAdmins = false;\r\n      state.marketAdmins = action.payload.data;\r\n    },\r\n    [getMostSellingCities.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingMarketAdmins = false;\r\n      console.log(\"action is\", action);\r\n    },\r\n    [getMostSellingCities.pending]: (state) => {\r\n      state.isLoadingMarketAdmins = true;\r\n    },\r\n\r\n    // Post ==> Add New Market Branch\r\n    [addNewMarketBranch.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingAddMarket = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.newMarketId = action.payload.data;\r\n        localStorage.setItem(\"newMarketId\", state.newMarketId);\r\n      }\r\n    },\r\n    [addNewMarketBranch.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingAddMarket = false;\r\n      console.log(\"action is\", action);\r\n    },\r\n    [addNewMarketBranch.pending]: (state) => {\r\n      state.isLoadingAddMarket = true;\r\n    },\r\n\r\n    // ==> Post  Set Market WorkTimes\r\n    [setMarketWorkTimes.fulfilled]: (state, action) => {\r\n      console.log(\"fullfield\");\r\n      state.isLoading = false;\r\n      if (action.payload.message === \"Success\") {\r\n        // window.location.replace(\"/dashboard/branches\");\r\n        alert(\"you added work time sucssesfuly !\");\r\n      }\r\n    },\r\n    [setMarketWorkTimes.rejected]: (state, action) => {\r\n      // console.log(\"rejected\");\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [setMarketWorkTimes.pending]: (state) => {\r\n      // console.log(\"pending\");\r\n      state.isLoading = true;\r\n    },\r\n\r\n    [getMarketHighestSellingProduct.fulfilled]: (state, action) => {\r\n      state.isLoadingMarketHighestSelling = false;\r\n      state.marketHighestSellingProduct = action.payload.data;\r\n    },\r\n    [getMarketHighestSellingProduct.rejected]: (state, action) => {\r\n      state.isLoadingMarketHighestSelling = false;\r\n    },\r\n    [getMarketHighestSellingProduct.pending]: (state) => {\r\n      state.isLoadingMarketHighestSelling = true;\r\n    },\r\n\r\n    [getMarketCategoriesDetails.fulfilled]: (state, action) => {\r\n      console.log(\" done !\");\r\n      state.isLoadingmarketCategories = false;\r\n      state.marketCategories = action.payload.data.categories;\r\n    },\r\n    [getMarketCategoriesDetails.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingmarketCategories = false;\r\n    },\r\n    [getMarketCategoriesDetails.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingmarketCategories = true;\r\n    },\r\n\r\n    //Delete Categories\r\n    [deleteMarketCategories.fulfilled]: (state, action) => {\r\n      state.isLoadingDelete = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.isDeletedCategories = true;\r\n        alert(\"delete done\");\r\n      }\r\n    },\r\n    [deleteMarketCategories.rejected]: (state, action) => {\r\n      state.isLoadingDelete = false;\r\n      console.log(\"delete fa4al\");\r\n    },\r\n    [deleteMarketCategories.pending]: (state) => {\r\n      state.isLoadingDelete = true;\r\n      console.log(\"delete pending\");\r\n    },\r\n\r\n    [getMarketMenu.fulfilled]: (state, action) => {\r\n      console.log(\" fulfilled !\");\r\n      state.isLoadingProduct = false;\r\n      state.products = action.payload.data.menu;\r\n    },\r\n    [getMarketMenu.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingProduct = false;\r\n    },\r\n    [getMarketMenu.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingProduct = true;\r\n    },\r\n\r\n    //Delete Categories\r\n    [deleteMarketProduct.fulfilled]: (state, action) => {\r\n      state.isLoadingDelete = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.isDeletedProduct = true;\r\n        alert(\"delete done\");\r\n      }\r\n    },\r\n    [deleteMarketProduct.rejected]: (state, action) => {\r\n      state.isLoadingDelete = false;\r\n      console.log(\"delete fa4al\");\r\n    },\r\n    [deleteMarketProduct.pending]: (state) => {\r\n      state.isLoadingDelete = true;\r\n      console.log(\"delete pending\");\r\n    },\r\n    //update Market SubCategory Status\r\n    [updateMarketSubCategoryStatus.fulfilled]: (state, action) => {\r\n      console.log(\" fulfilled !\");\r\n      state.isLoadingChangeStatus = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.subCatStatusIsUpdated = true;\r\n        alert(\"Market Sub Category Status Change Successfully\");\r\n      }\r\n    },\r\n    [updateMarketSubCategoryStatus.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingChangeStatus = false;\r\n    },\r\n    [updateMarketSubCategoryStatus.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingChangeStatus = true;\r\n    },\r\n\r\n    //update Market Info\r\n\r\n    [updateMarket.fulfilled]: (state, action) => {\r\n      state.isLoadingUpdateMarket = false;\r\n      if (\r\n        action.payload.message === \"Success\" ||\r\n        action.payload.message === \"تمت العملية بنجاح\"\r\n      ) {\r\n        window.location.href = \"/employee/menu\";\r\n      }\r\n    },\r\n    [updateMarket.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingUpdateMarket = false;\r\n    },\r\n    [updateMarket.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingUpdateMarket = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\n// Actions\r\nexport const { Initialize } = slice.actions;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\branches.js",["2648","2649","2650"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\n//services\r\nimport {\r\n  getAllBranches,\r\n  getRestaurantAdmins,\r\n  getResturantInfo,\r\n  getRestaurantDetailsById,\r\n  // getRestaurantMonthlyEarnings,\r\n  getRestaurantOrderNumber,\r\n  getRestaurantReview,\r\n  getRestaurantReviewNumber,\r\n  getPendingRestaurantBranches,\r\n  deleteBranchById,\r\n  getRestaurantCustomerNumber,\r\n  setResturantWorkTimes,\r\n  addbranch,\r\n  getWorkingDays,\r\n  getRestaurantHighestRatedMeal,\r\n  getResturantWorkTimes,\r\n  deleteMarket,\r\n  getMostRestaurantSellingCities,\r\n  addNewRestaurantBranch,\r\n  updateResturant,\r\n  getEmployeeData,\r\n  getRestaurantMinimalInfo,\r\n  getRestaurantAnnualEarningsAnalysis,\r\n  getRestaurantAnnualEarnings,\r\n} from \"../services/restaurant_service\";\r\n\r\n//----------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"branches\",\r\n  initialState: {\r\n    isLoading: true,\r\n    allbranches: [],\r\n    error: null,\r\n    restaurantAdmins: [],\r\n    branches: [],\r\n    // branchId: '',\r\n    RestaurantsReviews: [],\r\n    isloadingOrderNumber: false,\r\n    ordersNumber: {},\r\n    isloadingReviewNumber: false,\r\n    reviewsNumber: {},\r\n    restaurantDetails: {},\r\n    restaurantMonthlyEarnings: {\r\n      current: [],\r\n      previous: [],\r\n    },\r\n    isDeleted: false,\r\n    isDeletedMarket: false,\r\n\r\n    branchesMarket: [],\r\n    reviewsNumberMarket: {},\r\n    ordersNumberMarket: {},\r\n    restBranches: [],\r\n    customerNumberMarket: [],\r\n    MarketReviews: {},\r\n    marketsEarnings: [],\r\n    allbranchesMarket: [],\r\n    newRestaurantId: \"\",\r\n    days: [],\r\n    restaurantInfo: {},\r\n    isLoadingRestaurantInfo: false,\r\n    highestRatedMeal: {},\r\n    isLoadingHighestRatedMeal: false,\r\n    restaurantWorkTimes: [],\r\n    isLoadingPendingRestaurantBranches: false,\r\n    mostSellingRestaurntCities: [],\r\n    isLoadingMostRestaurantSellingCities: false,\r\n    isLoadingRestaurantAdmins: false,\r\n    isLoadingAddNewBranch: false,\r\n    isLoadingUpdateRestaurant: false,\r\n    isLoadingSetWorkTime: false,\r\n    employeeData: {},\r\n    restStatus: {},\r\n    isLoadingRestStatus: false,\r\n    FacilityAnnualEarning: {},\r\n    isLoadingFacilityAnnualEarnings: false,\r\n    totalNewBranch: 0,\r\n  },\r\n\r\n  reducers: {\r\n    Initialize: (state, action) => {\r\n      state.isDeleted = false;\r\n      state.isDeletedMarket = false;\r\n    },\r\n  },\r\n\r\n  extraReducers: {\r\n    [getRestaurantMinimalInfo.fulfilled]: (state, action) => {\r\n      state.isLoadingRestStatus = false;\r\n      state.restStatus = action.payload.data;\r\n    },\r\n    [getRestaurantMinimalInfo.rejected]: (state, action) => {\r\n      state.isLoadingRestStatus = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantMinimalInfo.pending]: (state) => {\r\n      state.isLoadingRestStatus = true;\r\n    },\r\n\r\n    // ==> Get Restaurants Admins\r\n    [getRestaurantAdmins.fulfilled]: (state, action) => {\r\n      state.isLoadingRestaurantAdmins = false;\r\n      state.restaurantAdmins = action.payload.data;\r\n    },\r\n    [getRestaurantAdmins.rejected]: (state, action) => {\r\n      state.isLoadingRestaurantAdmins = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantAdmins.pending]: (state) => {\r\n      state.isLoadingRestaurantAdmins = true;\r\n    },\r\n\r\n    // ==> Get Restaurants BY ID\r\n    [getResturantInfo.fulfilled]: (state, action) => {\r\n      state.isLoadingRestaurantInfo = false;\r\n      state.restaurantInfo = action.payload.data;\r\n    },\r\n    [getResturantInfo.rejected]: (state, action) => {\r\n      state.isLoadingRestaurantInfo = false;\r\n      state.error = false;\r\n    },\r\n    [getResturantInfo.pending]: (state) => {\r\n      state.isLoadingRestaurantInfo = true;\r\n    },\r\n\r\n    // ==> Get AllBranches\r\n    [getAllBranches.fulfilled]: (state, action) => {\r\n      console.log(\"sosos ososo \");\r\n      console.log(action.payload.data.totalBranches);\r\n\r\n      state.isLoading = false;\r\n      state.branches = action.payload.data.data;\r\n      state.totalNewBranch = action.payload.data.totalBranches;\r\n    },\r\n    [getAllBranches.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n      console.log(action);\r\n    },\r\n    [getAllBranches.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Reviews\r\n    [getRestaurantReview.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.RestaurantsReviews = action.payload.data;\r\n    },\r\n    [getRestaurantReview.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantReview.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Restaurant Details By Id\r\n    [getRestaurantDetailsById.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.restaurantDetails = action.payload.data;\r\n    },\r\n    [getRestaurantReview.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantReview.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Customer Number\r\n    [getRestaurantCustomerNumber.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.cutomersNumber = action.payload.data;\r\n    },\r\n    [getRestaurantCustomerNumber.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantCustomerNumber.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Reviews Number\r\n    [getRestaurantReviewNumber.fulfilled]: (state, action) => {\r\n      state.isloadingReviewNumber = false;\r\n      state.reviewsNumber = action.payload.data;\r\n    },\r\n    [getRestaurantReviewNumber.rejected]: (state, action) => {\r\n      state.isloadingReviewNumber = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantReviewNumber.pending]: (state) => {\r\n      state.isloadingReviewNumber = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Orders Number\r\n    [getRestaurantOrderNumber.fulfilled]: (state, action) => {\r\n      state.isloadingOrderNumber = false;\r\n      state.ordersNumber = action.payload.data;\r\n    },\r\n    [getRestaurantOrderNumber.rejected]: (state, action) => {\r\n      state.isloadingOrderNumber = false;\r\n      state.error = false;\r\n      console.log(action);\r\n    },\r\n    [getRestaurantOrderNumber.pending]: (state) => {\r\n      state.isloadingOrderNumber = true;\r\n    },\r\n\r\n    // ==> Get  Restaurant Monthly Earnings\r\n    // [getRestaurantMonthlyEarnings.fulfilled]: (state, action) => {\r\n    //   state.isLoading = false;\r\n    //   state.restaurantMonthlyEarnings = action.payload.data;\r\n    // },\r\n    // [getRestaurantMonthlyEarnings.rejected]: (state, action) => {\r\n    //   state.isLoading = false;\r\n    //   state.error = false;\r\n    // },\r\n    // [getRestaurantMonthlyEarnings.pending]: (state) => {\r\n    //   state.isLoading = true;\r\n    // },\r\n\r\n    //Get Pending Restaurant Branches\r\n    [getPendingRestaurantBranches.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingPendingRestaurantBranches = false;\r\n      state.pendingRestaurantBranches = action.payload.data;\r\n    },\r\n    [getPendingRestaurantBranches.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingPendingRestaurantBranches = false;\r\n      console.log(\"action is\", action);\r\n    },\r\n    [getPendingRestaurantBranches.pending]: (state) => {\r\n      state.isLoadingPendingRestaurantBranches = true;\r\n    },\r\n\r\n    //Get Pending Restaurant Branches\r\n    [getRestaurantHighestRatedMeal.fulfilled]: (state, action) => {\r\n      state.isLoadingHighestRatedMeal = false;\r\n      state.highestRatedMeal = action.payload.data;\r\n    },\r\n    [getRestaurantHighestRatedMeal.rejected]: (state, action) => {\r\n      state.isLoadingHighestRatedMeal = false;\r\n    },\r\n    [getRestaurantHighestRatedMeal.pending]: (state) => {\r\n      state.isLoadingHighestRatedMeal = true;\r\n    },\r\n\r\n    // //Get Restaurant Branches Income\r\n    // [getRestaurantBranchesIncome.fulfilled]: (state, action) => {\r\n    //     state.isLoading = false;\r\n    //     state.restaurantBranchesIncome = action.payload.data;\r\n    //     console.log(action.payload.data)\r\n    // },\r\n    // [getRestaurantBranchesIncome.rejected]: (state, action) => {\r\n    //     state.isLoading = false;\r\n    // },\r\n    // [getRestaurantBranchesIncome.pending]: (state) => {\r\n    //     state.isLoading = true;\r\n    // },\r\n\r\n    // //Get Resturant Chain Sales\r\n    // [getResturantChainSales.fulfilled]: (state, action) => {\r\n    //     state.isLoading = false;\r\n    //     state.restaurantsMostSelling = action.payload.data;\r\n    //     // console.log(action.payload.data)\r\n    // },\r\n    // [getResturantChainSales.rejected]: (state, action) => {\r\n    //     state.isLoading = false;\r\n    // },\r\n    // [getResturantChainSales.pending]: (state) => {\r\n    //     state.isLoading = true;\r\n    // },\r\n\r\n    //Delete Branche by id\r\n    [deleteBranchById.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.isDeleted = true;\r\n        alert(\"delete done\");\r\n      }\r\n    },\r\n    [deleteBranchById.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      console.log(\"delete fa4al\");\r\n    },\r\n    [deleteBranchById.pending]: (state) => {\r\n      state.isLoading = true;\r\n      console.log(\"delete pending\");\r\n    },\r\n\r\n    //Delete Branche by id\r\n    [deleteMarket.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.isDeletedMarket = true;\r\n        alert(\"delete done\");\r\n      }\r\n    },\r\n    [deleteMarket.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [deleteMarket.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // ==> Post   Add new Restaurant Branch\r\n    [addNewRestaurantBranch.fulfilled]: (state, action) => {\r\n      state.isLoadingAddNewBranch = false;\r\n      if (action.payload.message === \"Success\") {\r\n        state.newRestaurantId = action.payload.data;\r\n        localStorage.setItem(\"newRestaurantId\", state.newRestaurantId);\r\n      }\r\n    },\r\n    [addNewRestaurantBranch.rejected]: (state, action) => {\r\n      state.isLoadingAddNewBranch = false;\r\n      state.error = false;\r\n    },\r\n    [addNewRestaurantBranch.pending]: (state) => {\r\n      state.isLoadingAddNewBranch = true;\r\n    },\r\n\r\n    // ==> Post  SetResturant WorkTimes\r\n    [setResturantWorkTimes.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.isLoadingSetWorkTime = false;\r\n      if (action.payload.message === \"Success\") {\r\n        window.location.href = \"/employee/branch-info\";\r\n      }\r\n    },\r\n    [setResturantWorkTimes.rejected]: (state, action) => {\r\n      state.isLoadingSetWorkTime = false;\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [setResturantWorkTimes.pending]: (state) => {\r\n      state.isLoadingSetWorkTime = true;\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //GET ==> getWorkingDays\r\n    [getWorkingDays.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.days = action.payload.data;\r\n    },\r\n    [getWorkingDays.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getWorkingDays.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //GET ==> getWorkingDays\r\n    [getResturantWorkTimes.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.restaurantWorkTimes = action.payload.data;\r\n    },\r\n    [getResturantWorkTimes.rejected]: (state, { payload }) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getResturantWorkTimes.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //update Restaurant Info\r\n    [updateResturant.fulfilled]: (state, action) => {\r\n      state.isLoadingUpdateRestaurant = false;\r\n      if (\r\n        action.payload.message === \"Success\" ||\r\n        action.payload.message === \"تمت العملية بنجاح\"\r\n      ) {\r\n        window.location.href = \"/employee/menu\";\r\n      }\r\n    },\r\n    [updateResturant.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingUpdateRestaurant = false;\r\n    },\r\n    [updateResturant.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingUpdateRestaurant = true;\r\n    },\r\n\r\n    //GET ==> get Employee Data\r\n    [getEmployeeData.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.employeeData = action.payload.data;\r\n    },\r\n    [getEmployeeData.rejected]: (state) => {\r\n      state.isLoading = false;\r\n      state.error = false;\r\n    },\r\n    [getEmployeeData.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //GET ==> get Restaurant AnnualEarnings Analysis\r\n    [getRestaurantAnnualEarnings.fulfilled]: (state, action) => {\r\n      state.isLoadingFacilityAnnualEarnings = false;\r\n      state.FacilityAnnualEarning = action.payload.data;\r\n    },\r\n    [getRestaurantAnnualEarnings.rejected]: (state) => {\r\n      state.isLoadingFacilityAnnualEarnings = false;\r\n      state.error = false;\r\n    },\r\n    [getRestaurantAnnualEarnings.pending]: (state) => {\r\n      state.isLoadingFacilityAnnualEarnings = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\n// Actions\r\nexport const { Initialize } = slice.actions;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\orders.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\performance.js",["2651"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  getRestaurantBranchesIncome,\r\n  getResturantChainSales,\r\n  getMarketMostSales,\r\n  getHighestBranchesSales,\r\n  getMarketHighestIncome,\r\n  getHighestRestaurentsBranchesSales,\r\n  getRestaurantAnnualEarningsAnalysis,\r\n  getMarketAnnualEarningsAnalysis,\r\n  getAllMarketsOrdersNumber,\r\n  getRestaurantOrderNumber,\r\n  getAllResturantsReviewsNumber,\r\n  getAllMarketsReviewsNumber,\r\n  getMarketHighestBranchesSales,\r\n  getAllRestaurantMonthlyEarnings,\r\n  getAllMarketsMonthlyEarnings,\r\n  getAllRestaurantOrdersNumber,\r\n} from \"../services/performance_service\";\r\n\r\n//-----------------------------------------------------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"performance\",\r\n  initialState: {\r\n    isLoading: true,\r\n    error: null,\r\n    marketIncome: [],\r\n    restaurantBranchesIncome: [],\r\n    restaurantsMostSelling: [],\r\n    MarketMostSelling: [],\r\n    marketBranchesIncome: [],\r\n    HighestBranchesSales: [],\r\n    isLoadingHighestIncomeBranchesSales: false,\r\n    highestIncomeBranchesSales: [],\r\n    isLoadingMarketHighestIncome: false,\r\n    isLoadingRestaurentsHighestIncome: false,\r\n    highestRestaurentsBranchesSales: [],\r\n    isLoadingHighestRestaurentsBranchesSales: false,\r\n    annualEarningsAnalysis: {\r\n      current: [],\r\n      previous: [],\r\n      currency: \"\",\r\n    },\r\n    isLoadingOrderNumbers: false,\r\n    isLoadingReviewsNumbers: false,\r\n    orderNumbers: {},\r\n    reviewNumbers: {},\r\n    allOrdersNumber: {},\r\n    AllBranchesEarningMonthly:{},\r\n    isLoadingBranchesEarningMonthly:false,\r\n  },\r\n\r\n  extraReducers: {\r\n    //GET ==>  Get Highest Branches Sales\r\n    [getHighestRestaurentsBranchesSales.fulfilled]: (state, action) => {\r\n      state.isLoadingHighestIncomeBranchesSales = false;\r\n      state.highestIncomeBranchesSales = action.payload.data;\r\n      localStorage.setItem(\r\n        \"initialBranch\",\r\n        JSON.stringify(action.payload.data[0])\r\n      );\r\n    },\r\n    [getHighestRestaurentsBranchesSales.rejected]: (state, action) => {\r\n      state.isLoadingHighestIncomeBranchesSales = false;\r\n    },\r\n    [getHighestRestaurentsBranchesSales.pending]: (state) => {\r\n      state.isLoadingHighestIncomeBranchesSales = true;\r\n    },\r\n\r\n    //Get Restaurant Branches Income\r\n    [getRestaurantBranchesIncome.fulfilled]: (state, action) => {\r\n      state.isLoadingRestaurentsHighestIncome = false;\r\n      state.restaurantBranchesIncome = action.payload.data;\r\n    },\r\n    [getRestaurantBranchesIncome.rejected]: (state, action) => {\r\n      state.isLoadingRestaurentsHighestIncome = false;\r\n    },\r\n    [getRestaurantBranchesIncome.pending]: (state) => {\r\n      state.isLoadingRestaurentsHighestIncome = true;\r\n    },\r\n\r\n    //Get Restaurant Branches Income\r\n    [getMarketHighestIncome.fulfilled]: (state, action) => {\r\n      state.isLoadingMarketHighestIncome = false;\r\n      state.marketIncome = action.payload.data;\r\n    },\r\n    [getMarketHighestIncome.rejected]: (state, action) => {\r\n      state.isLoadingMarketHighestIncome = false;\r\n    },\r\n    [getMarketHighestIncome.pending]: (state) => {\r\n      state.isLoadingMarketHighestIncome = true;\r\n    },\r\n\r\n    //Get Resturant Chain Sales\r\n    [getResturantChainSales.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.restaurantsMostSelling = action.payload.data;\r\n      // console.log(action.payload.data)\r\n    },\r\n    [getResturantChainSales.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [getResturantChainSales.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //Get Resturant Chain Sales\r\n    [getMarketMostSales.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.MarketMostSelling = action.payload.data;\r\n    },\r\n    [getMarketMostSales.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n    },\r\n    [getMarketMostSales.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    //GET ==>  Get Market Highest Branches Sales\r\n    [getHighestBranchesSales.fulfilled]: (state, action) => {\r\n      console.log(\"fulfilled\");\r\n      state.isLoadingHighestIncomeBranchesSales = false;\r\n      state.highestIncomeBranchesSales = action.payload.data;\r\n      localStorage.setItem(\r\n        \"initialBranch\",\r\n        JSON.stringify(action.payload.data[0])\r\n      );\r\n      console.log(\"OMG :\", state.HighestBranchesSales);\r\n    },\r\n    [getHighestBranchesSales.rejected]: (state, action) => {\r\n      console.log(\"rejected\");\r\n      state.isLoadingHighestIncomeBranchesSales = false;\r\n    },\r\n    [getHighestBranchesSales.pending]: (state) => {\r\n      console.log(\"pending\");\r\n      state.isLoadingHighestIncomeBranchesSales = true;\r\n    },\r\n\r\n    // Get Restaurant Annual Earning Analysis\r\n    [getRestaurantAnnualEarningsAnalysis.fulfilled]: (state, action) => {\r\n      console.log(\"fullfilled\");\r\n      state.isLoading = false;\r\n      console.log(action.payload.data);\r\n      state.annualEarningsAnalysis = action.payload.data;\r\n    },\r\n    [getRestaurantAnnualEarningsAnalysis.rejected]: (state, action) => {\r\n      // console.log('rejected')\r\n      state.isLoading = false;\r\n    },\r\n    [getRestaurantAnnualEarningsAnalysis.pending]: (state) => {\r\n      // console.log('pending')\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // Get Market Annual Earning Analysis\r\n    [getMarketAnnualEarningsAnalysis.fulfilled]: (state, action) => {\r\n      console.log(\"fullfilled\");\r\n      state.isLoading = false;\r\n      console.log(action.payload.data);\r\n      state.annualEarningsAnalysis = action.payload.data;\r\n    },\r\n    [getMarketAnnualEarningsAnalysis.rejected]: (state, action) => {\r\n      // console.log('rejected')\r\n      state.isLoading = false;\r\n    },\r\n    [getMarketAnnualEarningsAnalysis.pending]: (state) => {\r\n      // console.log('pending')\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // get Restaurant Order Number\r\n    [getRestaurantOrderNumber.fulfilled]: (state, action) => {\r\n      state.isLoadingOrderNumbers = false;\r\n      state.orderNumbers = action.payload.data;\r\n    },\r\n    [getRestaurantOrderNumber.rejected]: (state, action) => {\r\n      state.isLoadingOrderNumbers = false;\r\n    },\r\n    [getRestaurantOrderNumber.pending]: (state) => {\r\n      state.isLoadingOrderNumbers = true;\r\n    },\r\n\r\n    //get All Markets Orders Number\r\n    [getAllMarketsOrdersNumber.fulfilled]: (state, action) => {\r\n      state.isLoadingOrderNumbers = false;\r\n      state.allOrdersNumber = action.payload.data;\r\n    },\r\n    [getAllMarketsOrdersNumber.rejected]: (state, action) => {\r\n      state.isLoadingOrderNumbers = false;\r\n    },\r\n    [getAllMarketsOrdersNumber.pending]: (state) => {\r\n      state.isLoadingOrderNumbers = true;\r\n    },\r\n\r\n    //getAll Resturants Reviews Number\r\n    [getAllResturantsReviewsNumber.fulfilled]: (state, action) => {\r\n      state.isLoadingReviewsNumbers = false;\r\n      state.reviewNumbers = action.payload.data;\r\n    },\r\n    [getAllResturantsReviewsNumber.rejected]: (state, action) => {\r\n      state.isLoadingReviewsNumbers = false;\r\n    },\r\n    [getAllResturantsReviewsNumber.pending]: (state) => {\r\n      state.isLoadingReviewsNumbers = true;\r\n    },\r\n\r\n    //getAllMarketsReviewsNumber\r\n    [getAllMarketsReviewsNumber.fulfilled]: (state, action) => {\r\n      state.isLoadingReviewsNumbers = false;\r\n      state.reviewNumbers = action.payload.data;\r\n    },\r\n    [getAllMarketsReviewsNumber.rejected]: (state, action) => {\r\n      state.isLoadingReviewsNumbers = false;\r\n    },\r\n    [getAllMarketsReviewsNumber.pending]: (state) => {\r\n      state.isLoadingReviewsNumbers = true;\r\n    },\r\n\r\n    //get All Restaurants Monthly Earnings\r\n    [getAllRestaurantMonthlyEarnings.fulfilled]: (state, action) => {\r\n      state.isLoadingBranchesEarningMonthly = false;\r\n      state.AllBranchesEarningMonthly = action.payload.data;\r\n    },\r\n    [getAllRestaurantMonthlyEarnings.rejected]: (state, action) => {\r\n      state.isLoadingBranchesEarningMonthly = false;\r\n    },\r\n    [getAllRestaurantMonthlyEarnings.pending]: (state) => {\r\n      state.isLoadingBranchesEarningMonthly = true;\r\n    },\r\n\r\n    //get All Markets Monthly Earnings\r\n    [getAllMarketsMonthlyEarnings.fulfilled]: (state, action) => {\r\n      state.isLoadingBranchesEarningMonthly = false;\r\n      state.AllBranchesEarningMonthly = action.payload.data;\r\n    },\r\n    [getAllMarketsMonthlyEarnings.rejected]: (state, action) => {\r\n      state.isLoadingBranchesEarningMonthly = false;\r\n    },\r\n    [getAllMarketsMonthlyEarnings.pending]: (state) => {\r\n      state.isLoadingBranchesEarningMonthly = true;\r\n    },\r\n\r\n    //getAllRestaurantOrdersNumber\r\n    [getAllRestaurantOrdersNumber.fulfilled]: (state, action) => {\r\n      state.isLoadingOrderNumbers = false;\r\n      state.allOrdersNumber = action.payload.data;\r\n    },\r\n    [getAllRestaurantOrdersNumber.rejected]: (state, action) => {\r\n      state.isLoadingOrderNumbers = false;\r\n    },\r\n    [getAllRestaurantOrdersNumber.pending]: (state) => {\r\n      state.isLoadingOrderNumbers = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\n// Actions\r\n//export const { setInitial } = slice.actions;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\rank.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\withdrawMeeting.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\employees.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\branchMarket.js",["2652"],[],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport moment from \"moment\";\r\nimport {\r\n  getCategories,\r\n  addMarketSubCategory,\r\n  getMarketCategories,\r\n  getSubCategoriesByMarketId,\r\n  addMarketProduct,\r\n  updateMarketSubCategory,\r\n  updateMarketProduct,\r\n} from \"../services/branch_market_service\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"branch_market\",\r\n  initialState: {\r\n    isLoadingCategories: false,\r\n    isLoadingMarketCategory: false,\r\n    isLoadingSubCategory: false,\r\n    isLoadingAddSubCategory: false,\r\n    isLoadingAddMarketProduct: false,\r\n    isLoadingUpdateSubCategory: false,\r\n    categories: [],\r\n    marketCategory: [],\r\n    subCategory: [],\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    //getCategories\r\n    [getCategories.fulfilled]: (state, action) => {\r\n      state.isLoadingCategories = false;\r\n      state.categories = action.payload.data;\r\n    },\r\n    [getCategories.rejected]: (state, action) => {\r\n      state.isLoadingCategories = false;\r\n      state.error = false;\r\n    },\r\n    [getCategories.pending]: (state) => {\r\n      state.isLoadingCategories = true;\r\n    },\r\n    //get Market Categories\r\n\r\n    [getMarketCategories.fulfilled]: (state, action) => {\r\n      state.isLoadingMarketCategory = false;\r\n      state.marketCategory = action.payload.data;\r\n    },\r\n    [getMarketCategories.rejected]: (state, action) => {\r\n      state.isLoadingMarketCategory = false;\r\n      state.error = false;\r\n    },\r\n    [getMarketCategories.pending]: (state) => {\r\n      state.isLoadingMarketCategory = true;\r\n    },\r\n\r\n    //getSubCategoriesByMarketId\r\n    [getSubCategoriesByMarketId.fulfilled]: (state, action) => {\r\n      state.isLoadingSubCategory = false;\r\n      state.subCategory = action.payload.data;\r\n    },\r\n    [getSubCategoriesByMarketId.rejected]: (state, { payload }) => {\r\n      state.isLoadingSubCategory = false;\r\n      state.error = false;\r\n    },\r\n    [getSubCategoriesByMarketId.pending]: (state) => {\r\n      state.isLoadingSubCategory = true;\r\n    },\r\n\r\n    //addMarketSubCategory\r\n\r\n    [addMarketSubCategory.fulfilled]: (state, action) => {\r\n      state.isLoadingAddSubCategory = false;\r\n      window.location.href = \"/employee/market-menu\";\r\n    },\r\n    [addMarketSubCategory.rejected]: (state, { payload }) => {\r\n      state.isLoadingAddSubCategory = false;\r\n      state.error = false;\r\n    },\r\n    [addMarketSubCategory.pending]: (state) => {\r\n      state.isLoadingAddSubCategory = true;\r\n    },\r\n\r\n    //updateMarketSubCategory\r\n\r\n    [updateMarketSubCategory.fulfilled]: (state, action) => {\r\n      state.isLoadingUpdateSubCategory = false;\r\n      window.location.href = \"/employee/market-menu\";\r\n    },\r\n    [updateMarketSubCategory.rejected]: (state, { payload }) => {\r\n      state.isLoadingUpdateSubCategory = false;\r\n      state.error = false;\r\n    },\r\n    [updateMarketSubCategory.pending]: (state) => {\r\n      state.isLoadingUpdateSubCategory = true;\r\n    },\r\n\r\n    //addMarketProduct\r\n\r\n    [addMarketProduct.fulfilled]: (state, action) => {\r\n      state.isLoadingAddMarketProduct = false;\r\n      window.location.href = \"/employee/market-menu\";\r\n    },\r\n    [addMarketProduct.rejected]: (state, { payload }) => {\r\n      state.isLoadingAddMarketProduct = false;\r\n      state.error = false;\r\n    },\r\n    [addMarketProduct.pending]: (state) => {\r\n      state.isLoadingAddMarketProduct = true;\r\n    },\r\n    //updateMarketProduct\r\n    [updateMarketProduct.fulfilled]: (state, action) => {\r\n      state.isLoadingAddMarketProduct = false;\r\n      window.location.href = \"/employee/market-menu\";\r\n    },\r\n    [updateMarketProduct.rejected]: (state, { payload }) => {\r\n      state.isLoadingAddMarketProduct = false;\r\n      state.error = false;\r\n    },\r\n    [updateMarketProduct.pending]: (state) => {\r\n      state.isLoadingAddMarketProduct = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\n// Actions\r\n/*export const {\r\n  setAdminInfo,\r\n  addBanAccountInfo,\r\n  reSetAdminInfo,\r\n  setDateOfBirthday,\r\n  setRestaurantInfo,\r\n  setFacilityTypeAndCity,\r\n} = slice.actions;*/\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\finance.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\control.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\users.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\countries.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\customShadows.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\routes\\elements.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\typography.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\AuthAdminGuard.js",["2653","2654","2655","2656"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { Navigate, useLocation } from \"react-router-dom\";\r\n// components\r\nimport LoadingScreen from \"../components/loading-screen\";\r\n//\r\nimport Login from \"../pages/auth/LoginPage\";\r\nimport { useAuthContext } from \"./useAuthContext\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAuthAdminGuard.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default function AuthAdminGuard({ children }) {\r\n  const { isAuthenticated, isInitialized } = useAuthContext();\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  const [requestedLocation, setRequestedLocation] = useState(null);\r\n\r\n  /*alert(pathname);\r\n  // /dashboard/overview\r\n  if (!isInitialized) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  \r\n  if (requestedLocation && pathname !== requestedLocation) {\r\n    setRequestedLocation(null);\r\n    return <Navigate to={requestedLocation} />;\r\n  }*/\r\n  if (!localStorage.getItem(\"isAuthenticated\")) {\r\n    if (pathname !== requestedLocation) {\r\n      setRequestedLocation(pathname);\r\n    }\r\n    return <Login />;\r\n  }\r\n\r\n  if (\r\n    localStorage.getItem(\"role\") !== \"Owner\" &&\r\n    localStorage.getItem(\"role\") !== \"RegionalManager\"\r\n  ) {\r\n \r\n    return <Login />;\r\n  }\r\n\r\n  if (\r\n    localStorage.getItem(\"role\") === \"Owner\" ||\r\n    localStorage.getItem(\"role\") === \"RegionalManager\"\r\n  ) {\r\n    return <>{children}</>;\r\n  } else {\r\n    return <Login />;\r\n  }\r\n  /*if (\r\n    localStorage.getItem(\"role\") === \"Owner\" ||\r\n    localStorage.getItem(\"role\") === \"RegionalManager\"\r\n  ) {\r\n    return <>{children}</>;\r\n  }*/\r\n\r\n  //return <>{children}</>;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\shadows.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\AuthEmployeeGuard.js",["2657","2658","2659","2660"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { Navigate, useLocation } from \"react-router-dom\";\r\n// components\r\nimport LoadingScreen from \"../components/loading-screen\";\r\n//\r\nimport Login from \"../pages/auth/LoginPage\";\r\nimport { useAuthContext } from \"./useAuthContext\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAuthEmployeeGuard.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default function AuthEmployeeGuard({ children }) {\r\n  const { isAuthenticated, isInitialized } = useAuthContext();\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  const [requestedLocation, setRequestedLocation] = useState(null);\r\n\r\n  /*alert(pathname);\r\n  // /dashboard/overview\r\n  if (!isInitialized) {\r\n    return <LoadingScreen />;\r\n  }\r\n\r\n  \r\n  if (requestedLocation && pathname !== requestedLocation) {\r\n    setRequestedLocation(null);\r\n    return <Navigate to={requestedLocation} />;\r\n  }*/\r\n  if (!localStorage.getItem(\"isAuthenticated\")) {\r\n    if (pathname !== requestedLocation) {\r\n      setRequestedLocation(pathname);\r\n    }\r\n    return <Login />;\r\n  }\r\n\r\n  if (\r\n    localStorage.getItem(\"role\") !== \"Owner\" &&\r\n    localStorage.getItem(\"role\") !== \"RegionalManager\" &&\r\n    localStorage.getItem(\"role\") !== \"BranchManager\" &&\r\n    localStorage.getItem(\"role\") !== \"Cashier\"\r\n  ) {\r\n    return <Login />;\r\n  }\r\n\r\n  if (\r\n    localStorage.getItem(\"role\") === \"Owner\" ||\r\n    localStorage.getItem(\"role\") === \"RegionalManager\" ||\r\n    localStorage.getItem(\"role\") === \"BranchManager\" ||\r\n    localStorage.getItem(\"role\") === \"Cashier\"\r\n  ) {\r\n    return <>{children}</>;\r\n  } else {\r\n    alert(\"ماعندك صلاحية طلاع بلا قلة ادب\");\r\n    return <Login />;\r\n  }\r\n\r\n  //return <>{children}</>;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\palette.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\slices\\menuRestaurant.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\globalStyles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\chart\\styles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeColorPresets.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\chart\\useChart.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeRtlLayout.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\config.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\presets.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\settings\\ThemeContrast.js",[],["2661"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useLocalStorage.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\EmployeeDashboardLayout.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\DashboardLayout.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\auth_service.js",["2662"],[],"import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport React from \"react\";\r\nimport * as URLS from \"../../urls\";\r\n//axios\r\nimport axios from \"../../utils/axios\";\r\n\r\nexport const signupAdmin = createAsyncThunk(\r\n  \"authentication/signupAdmin\",\r\n  async (data, thunkAPI) => {\r\n    try {\r\n      const response = await axios.post(URLS.signUpAdminURL, data, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n      return response;\r\n    } catch (e) {\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n//ConfirmEmail\r\nexport const confirmEmail = createAsyncThunk(\r\n  \"authentication/ConfirmEmail\",\r\n  async (data, thunkAPI) => {\r\n    try {\r\n      const response = await axios.post(URLS.confirmEmailURL, data);\r\n      return response;\r\n    } catch (e) {\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n//Reset password by insert email to have a code\r\nexport const validateEmail = createAsyncThunk(\r\n  \"authentication/validateEmail\",\r\n  async (email, thunkAPI) => {\r\n    try {\r\n      const response = axios.post(URLS.validateEmailURL, null, {\r\n        params: { email: email },\r\n      });\r\n      return response;\r\n    } catch (e) {\r\n      console.log(\"Error\", e.response.data);\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n//Reset password by insert email to have a code\r\nexport const resendPasswordCode = createAsyncThunk(\r\n  \"authentication/forgetPassword\",\r\n  async (email, thunkAPI) => {\r\n    try {\r\n      const response = axios.post(URLS.resendPasswordCodeURL, null, {\r\n        params: { email: email },\r\n      });\r\n      return response;\r\n    } catch (e) {\r\n      console.log(\"Error\", e.response.data);\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n//varif code which come from email to rest password\r\nexport const confirmPasswordCode = createAsyncThunk(\r\n  \"authentication/confirmPasswordCode\",\r\n  async (data, thunkAPI) => {\r\n    try {\r\n      const response = axios.post(URLS.confirmPasswordCodeURL, data);\r\n      return response;\r\n    } catch (e) {\r\n      console.log(\"Error\", e.response.data);\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n//reset password code\r\nexport const resetPasswordCode = createAsyncThunk(\r\n  \"setting/resetPasswordCode\",\r\n  async (data, thunkAPI) => {\r\n    try {\r\n      const response = axios.post(URLS.resetPasswordCodeURL, data);\r\n      return response;\r\n    } catch (e) {\r\n      console.log(\"Error\", e.response.data);\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n//Update Password\r\nexport const updatePassword = createAsyncThunk(\r\n  \"authentication/updatePassword\",\r\n  async (data, thunkAPI) => {\r\n    try {\r\n      const response = axios.put(URLS.updatePasswordURL, data);\r\n      return response;\r\n    } catch (e) {\r\n      console.log(\"Error\", e.response.data);\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_help_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\employee_pending_orders_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\employee_facility_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_profile_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_lowest_rated_branch_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\admin_restaurant_chain_review_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\rank_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\restaurant_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\markets_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\get_resturant_admins_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\add_withdraw_meeting_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\performance_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\branch_market_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\orders_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\users_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\countries_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\finance_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\auth\\useAuthContext.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\VerificationPasswordCode.js",["2663","2664","2665","2666","2667","2668","2669","2670","2671"],[],"import React, { useState } from \"react\";\r\n//helemt\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../locales\";\r\nimport * as Yup from \"yup\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport { Alert, Box, Stack, Typography, Grid } from \"@mui/material\";\r\n//mui\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// routes\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\n//toast\r\nimport { MuiOtpInput } from \"mui-one-time-password-input\";\r\nimport {\r\n  confirmPasswordCode,\r\n  resendPasswordCode,\r\n} from \"../../redux/services/auth_service\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\n\r\n// -----------------------------------------------------------------------------\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  paddingBottom: \"23px\",\r\n  textAlign: \"center\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    width: \"60px\",\r\n    textAlign: \"center\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: (theme) => (theme.palette.mode === \"light\" ? \"#EBF4F8\" : \"grey.800\"),\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nexport default function VerificationCodePage() {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, Email } = useSelector((state) => state.authentication);\r\n\r\n  const [otp, setOtp] = useState(\"\");\r\n\r\n  const handleChange = (newValue) => {\r\n    setOtp(newValue);\r\n  };\r\n\r\n  const defaultValues = {\r\n    code: \"\",\r\n    role: 3,\r\n  };\r\n\r\n  const methods = useForm({\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      dispatch(\r\n        confirmPasswordCode({\r\n          email: localStorage.getItem(\"email\"),\r\n          verifyCode: otp,\r\n          //fcmToken:\"\",\r\n          isEmailUpdated: true,\r\n        })\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  // --------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Verification Code</title>\r\n      </Helmet>\r\n\r\n      <Grid container height=\"100%\">\r\n        {/* ********************* Login Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          {/* __________________ Login Form page ____________ */}\r\n          <Stack sx={{ ...holder, justifyContent: \"center\", height: \"100%\" }}>\r\n            {/* _____ Head of login page ____ */}\r\n            <Stack mb=\"23px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <img src=\"/assets/images/logo/logo2.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              {/* <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <Typography sx={{ ...titleSx, mr: \"8px\" }}>\r\n                  {translate(`welcome_to`)}\r\n                </Typography>\r\n                <img src=\"/assets/images/logo/logo_name.svg\" alt=\"logo\" />\r\n  </Stack>*/}\r\n\r\n              {/*--- instruction message --- */}\r\n              <Typography sx={{ ...subTitleSx, overflowWrap: \"break-word\" }}>\r\n                {translate(\r\n                  `we_sent_an_email_for_reset_your_password_you_need_to_enter_code_within_1_min`\r\n                )}\r\n                <span style={{ textDecoration: \"underline\" }}>{Email}</span>\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of login page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n                <Box\r\n                  display={\"flex\"}\r\n                  justifyContent={\"center\"}\r\n                  flexDirection={\"row\"}\r\n                  textAlign={\"center\"}\r\n                  alignItems={\"center\"}\r\n                >\r\n                  <Box\r\n                    width={{\r\n                      lg: \"100%\",\r\n                      xs: \"100%\",\r\n                      paddingLeft: \"30px\",\r\n                      paddingRight: \"30px\",\r\n                    }}\r\n                    display={\"flex\"}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"center\"}\r\n                  >\r\n                    <MuiOtpInput\r\n                      sx={txtFieldBorderStyle}\r\n                      value={otp}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n                <Typography\r\n                  sx={{\r\n                    textAlign: \"center\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: 400,\r\n                    color: \"#535353\",\r\n                    marginBottom: \"24px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => {\r\n                    dispatch(resendPasswordCode(localStorage.getItem(\"email\")));\r\n                  }}\r\n                >\r\n                  {translate(\"resend_code\")}\r\n                </Typography>\r\n                {/*------ email input -------- \r\n                <RHFTextField\r\n                  name=\"code\"\r\n                  // label={translate(\"Email\")}\r\n                  placeholder={translate(\"verification_code\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />*/}\r\n              </Box>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isLoading}\r\n                  sx={{\r\n                    ...loadingButtonStyle,\r\n                  }}\r\n                  disabled={otp.length != 4 ? true : false}\r\n                >\r\n                  {translate(\"confirm\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ************ image Section ************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={657} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditMealPage.js",["2672","2673","2674","2675","2676","2677"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n//@Mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// Form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFSelect,\r\n} from \"../../../components/hook-form\";\r\n// Section Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport ConfirmAddMealModal from \"../../../section/@employee/menu/details/ConfirmAddMealModal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// --------------------------------------------------------------------------------------\r\n\r\n// ------------ Style --------------\r\n\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"30px 30px 48px 20px\",\r\n    sm: \"30px 42px 48px 42px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"22px\",\r\n    color: \"#535353\",\r\n    paddingRight: \"30px\",\r\n    pr: \"5px!important\",\r\n    pl: \"3px\",\r\n  },\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"5px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  paddingLeft: { lg: \"70px\", sm: \"70px\", xs: \"42px\" },\r\n  paddingRight: { lg: \"70px\", sm: \"70px\", xs: \"42px\" },\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \" #FFCC63\",\r\n  border: \"0.901691px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  paddingLeft: { lg: \"85px\", sm: \"85px\", xs: \"52px\" },\r\n  paddingRight: { lg: \"85px\", sm: \"85px\", xs: \"52px\" },\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  marginRight: \"18px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst myButtonsBoxStyle = {\r\n  display: \"flex\",\r\n  justifyContent: { xs: \"center\", sm: \"center\", lg: \"flex-end\" },\r\n  marginTop: \"27px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst typo1Style = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#000000\",\r\n};\r\n\r\nconst typo2Style = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFCC63\",\r\n  textDecoration: \"underline\",\r\n};\r\n\r\nconst boxTypoStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"16px\",\r\n};\r\n\r\nconst img2Style = {\r\n  marginRight: \"8px\",\r\n  width: \"13.33px\",\r\n  height: \"13.33px\",\r\n};\r\n\r\nexport default function EditMealPage() {\r\n  const [open, setOpen] = useState(false);\r\n  const [data, setData] = useState({});\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { productDetailes, menuRestaurent } = useSelector(\r\n    (state) => state.menuRestaurant\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const initialState = {\r\n    itemSizes: [...Array(1)],\r\n    itemAdditions: [...Array(1)],\r\n  };\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addMealSizeHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemSizes: [...mealItems.itemSizes, mealItems.itemSizes.push()],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for first meal\r\n  const removeMealSizeHandler = () => {\r\n    let { itemSizes } = mealItems;\r\n    // console.log(firstMealItems)\r\n    let newArr = itemSizes.slice(1);\r\n    // console.log(newArr)\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemSizes: [...newArr],\r\n    }));\r\n  };\r\n\r\n  // to add select item for Second meal\r\n  const addMealAdditionsHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemAdditions: [\r\n        ...mealItems.itemAdditions,\r\n        mealItems.itemAdditions.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for Second meal\r\n  const removeMealAdditionsmHandler = () => {\r\n    let { itemAdditions } = mealItems;\r\n    // console.log(firstMealItems)\r\n    let newArr = itemAdditions.slice(1);\r\n    // console.log(newArr)\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemAdditions: [...newArr],\r\n    }));\r\n  };\r\n\r\n  const MealFormSchema = Yup.object().shape({\r\n    MealNameEn: Yup.string().required(translate(\"meal_name_ar_is_required\")),\r\n    MealNameAr: Yup.string().required(translate(\"meal_name_en_is_required\")),\r\n    MealPhoto: Yup.string().required(translate(\"meal_photo_required\")),\r\n    DescritionEn: Yup.string().required(\r\n      translate(\"description_en_is_required\")\r\n    ),\r\n    DescriptionAr: Yup.string().required(\r\n      translate(\"description_ar_is_required\")\r\n    ),\r\n    Calories: Yup.string().required(translate(\"calories_is_required\")),\r\n    PreprationTime: Yup.string().required(\r\n      translate(\"prepration_time_is_required\")\r\n    ),\r\n    Categories: Yup.string().required(translate(\"categories_is_required\")),\r\n    Sizes: Yup.array().required(translate(\"size_is_required\")),\r\n    Additions: Yup.array().required(translate(\"additions_item_is_required\")),\r\n    Currency: Yup.string().required(translate(\"currency_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    MealNameEn: productDetailes?.name,\r\n    MealNameAr: productDetailes?.secondName,\r\n    MealPhoto: \"\",\r\n    DescritionEn: productDetailes?.descreption,\r\n    DescriptionAr: productDetailes?.secondDescreption,\r\n    Calories: productDetailes?.cal,\r\n    PreprationTime: productDetailes?.prepareTime,\r\n    Categories: \"\",\r\n    Currency: \"AED\",\r\n    Sizes: [\r\n      {\r\n        name: \"\",\r\n        price: \"\",\r\n      },\r\n    ],\r\n    Additions: [\r\n      {\r\n        name: \"\",\r\n        price: \"\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(MealFormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const watchMealPhoto = watch(\"MealPhoto\");\r\n\r\n  const formData = new FormData();\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      setData(data);\r\n      handleOpen();\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`Edit_meal`)}\r\n    </Typography>,\r\n  ];\r\n  // ------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Meal</title>\r\n      </Helmet>\r\n\r\n      <ConfirmAddMealModal open={open} onClose={handleClose} data={data} />\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ----- Title -----  */}\r\n          <Typography variant=\"h5\" color=\"#ffcc63\" mb=\"24px\">\r\n            {translate(`Edit_meal`)}\r\n          </Typography>\r\n\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* ************ Start Add New Meal  (Main Form)************/}\r\n            <Grid container rowSpacing={2} columnSpacing={8}>\r\n              {/* ------------ Left Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/* meal name en  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"MealNameEn\"\r\n                      label={translate(\"meal_name_en\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal name ar  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"MealNameAr\"\r\n                      label={translate(\"meal_name_ar\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal photo input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"MealPhoto\"\r\n                      type=\"file\"\r\n                      label={translate(\"meal_photo\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchMealPhoto ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"licenses\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal  calories  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Calories\"\r\n                      type=\"text\"\r\n                      label={translate(\"calories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal prepration time  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"PreprationTime\"\r\n                      type=\"text\"\r\n                      label={translate(\"preparation_time\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton>\r\n                              <label htmlFor=\"licenses\">\r\n                                <img\r\n                                  src=\"/assets/icons/employee/time.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal category input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"Categories\"\r\n                      label={translate(\"categories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(\"Categories\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/employee/bigArrow.svg\"\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"21px\",\r\n                            }}\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"1\">fast food</MenuItem>\r\n                      <MenuItem value=\"1\">fast food</MenuItem>\r\n                    </RHFSelect>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------------ Right Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2}>\r\n                  {/* Description En Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"DescritionEn\"\r\n                      label={translate(\"description_English\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  {/* Description Ar Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"DescriptionAr\"\r\n                      label={translate(\"description_arabic\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ************* Start additions Form (Secondary Form) *************/}\r\n            <Grid container columnSpacing={8} mt=\"50px\">\r\n              {/* ------------ Left Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                {/*  title and add action  */}\r\n                <Grid item xs={12}>\r\n                  <Box sx={boxTypoStyle}>\r\n                    <Typography fontWeight={\"400\"} sx={typo1Style}>\r\n                      {translate(\"item_sizes\")}\r\n                    </Typography>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      alignItems=\"center\"\r\n                      onClick={addMealSizeHandler}\r\n                      sx={{\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src=\"/assets/icons/employee/addIcon.svg\"\r\n                        alt=\"\"\r\n                        style={img2Style}\r\n                      />\r\n                      <Typography sx={typo2Style}>\r\n                        {translate(\"add_size\")}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </Grid>\r\n\r\n                {mealItems.itemSizes.map((e, index) => (\r\n                  <Grid container columnSpacing={2} key={index}>\r\n                    {/* meal size1 input */}\r\n                    <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                      <RHFTextField\r\n                        name={`Sizes[${index}][name]`}\r\n                        label={translate(`size${index + 1}`)}\r\n                        type=\"text\"\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/* meal size1 Price input */}\r\n                    <Grid item xs={12} sm={6} position=\"relative\" mb=\"16px\">\r\n                      <RHFTextField\r\n                        name={`Sizes[${index}][price]`}\r\n                        type=\"number\"\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        placeholder={translate(`price`)}\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <RHFSelect\r\n                              name=\"Currency\"\r\n                              sx={{\r\n                                ...transparentBorderTxtField,\r\n                                width: \"80px\",\r\n                              }}\r\n                              SelectProps={{\r\n                                native: false,\r\n                                IconComponent: () => (\r\n                                  <img\r\n                                    src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                ),\r\n                              }}\r\n                              onChange={(e) =>\r\n                                setValue(\"Currency\", e.target.value, {\r\n                                  shouldValidate: true,\r\n                                })\r\n                              }\r\n                            >\r\n                              <MenuItem value=\"AED\">AED</MenuItem>\r\n                              <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                            </RHFSelect>\r\n                          ),\r\n                        }}\r\n                      />\r\n                      {index >= 1 && (\r\n                        <IconButton\r\n                          onClick={removeMealSizeHandler}\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            right: { xs: \"-30px\", md: \"-35px\" },\r\n                            top: { xs: \"-15px\", sm: \"10px\" },\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </IconButton>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n\r\n              {/* ------------ Right Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                {/*  title and add action  */}\r\n                <Grid item xs={12}>\r\n                  <Box sx={boxTypoStyle}>\r\n                    <Typography fontWeight=\"400\" sx={typo1Style}>\r\n                      {translate(\"add_ons\")}\r\n                    </Typography>\r\n                    <Box\r\n                      display=\"flex\"\r\n                      alignItems=\"center\"\r\n                      onClick={addMealAdditionsHandler}\r\n                      sx={{\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src=\"/assets/icons/employee/addIcon.svg\"\r\n                        alt=\"\"\r\n                        style={img2Style}\r\n                      />\r\n\r\n                      <Typography sx={typo2Style}>\r\n                        {translate(\"add_item\")}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n                </Grid>\r\n\r\n                {mealItems.itemAdditions.map((e, index) => (\r\n                  <Grid container columnSpacing=\"16px\" key={index}>\r\n                    {/* meal add-ons Price input */}\r\n                    <Grid item xs={12} sm={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name={`Additions[${index}][name]`}\r\n                        label={translate(\"item_name\")}\r\n                        type=\"text\"\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/* meal add-ons Price input */}\r\n                    <Grid item xs={12} sm={6} position=\"relative\" mb=\"16px\">\r\n                      <RHFTextField\r\n                        name={`Additions[${index}][price]`}\r\n                        type=\"number\"\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        placeholder={translate(`price`)}\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <RHFSelect\r\n                              name=\"Currency\"\r\n                              sx={{\r\n                                ...transparentBorderTxtField,\r\n                                width: \"80px\",\r\n                              }}\r\n                              SelectProps={{\r\n                                native: false,\r\n                                IconComponent: () => (\r\n                                  <img\r\n                                    src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                ),\r\n                              }}\r\n                              onChange={(e) =>\r\n                                setValue(\"Currency\", e.target.value, {\r\n                                  shouldValidate: true,\r\n                                })\r\n                              }\r\n                            >\r\n                              <MenuItem value=\"AED\">AED</MenuItem>\r\n                              <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                            </RHFSelect>\r\n                          ),\r\n                        }}\r\n                      />\r\n\r\n                      {index >= 1 && (\r\n                        <IconButton\r\n                          onClick={removeMealAdditionsmHandler}\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            right: { xs: \"-30px\", md: \"-35px\" },\r\n                            top: { xs: \"-15px\", sm: \"10px\" },\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </IconButton>\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* =========@@ Action Button and Section @@========*/}\r\n            <Grid container columnSpacing={8}>\r\n              <Grid item xs={12} md={6} />\r\n\r\n              <Grid item xs={12} md={6}>\r\n                <Box sx={myButtonsBoxStyle}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    sx={outLinedButtonStyle}\r\n                    onClick={() => navigate(\"/employee/menu\")}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    sx={containedButtonStyle}\r\n                    type=\"submit\"\r\n                  >\r\n                    {translate(`preview`)}\r\n                  </Button>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddComboMeal.js",["2678","2679","2680","2681","2682","2683"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-emotion\r\nimport { useTheme } from \"@emotion/react\";\r\n//mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { RHFSelect, RHFTextField } from \"../../../components/hook-form\";\r\nimport FormProvider from \"../../../components/hook-form/FormProvider\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport {\r\n  AddComboOfferMeal,\r\n  getProductBasicInfo,\r\n  getRestaurantMealsCategories,\r\n} from \"../../../redux/services/menu_restaurant_service\";\r\n// ---------------------------------------------------------------------------------------------\r\n\r\n// ------------- Style --------------\r\nconst formHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  p: {\r\n    xs: \"30px 20px 50px 20px\",\r\n    md: \"30px 44px 50px 44px\",\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"20px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"#BCBCBC\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst selectFieldSX = {\r\n  ...txtFieldBorderStyle,\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"#BCBCBC\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"20px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  // minWidth: { xs: '145px', sm: '206px' },\r\n  // boxShadow:\r\n  //     \"0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: 300,\r\n  color: \"#ffcc63\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#000000\",\r\n  fontWeight: 400,\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontWeight: 400,\r\n  fontSize: \"14.2428px\",\r\n  lineHeight: \"22px\",\r\n  textDecoration: \"underline\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst selectItemHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  mb: \"16px\",\r\n  position: \"relative\",\r\n};\r\n\r\nexport default function AddComboMeal() {\r\n  const dispatch = useDispatch();\r\n  const { branchId } = useSelector((state) => state.control);\r\n  const { mealsCategory, meals, addComboOfferMeal } = useSelector(\r\n    (state) => state.menuRestaurant\r\n  );\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n  const { translate } = useLocales();\r\n  const navigate = useNavigate();\r\n\r\n  const [Image, setImage] = useState(null);\r\n\r\n  const initialState = {\r\n    firstMealItems: [...Array(1)],\r\n    secondMealItems: [...Array(1)],\r\n  };\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addFirstMealItemHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      firstMealItems: [\r\n        ...mealItems.firstMealItems,\r\n        mealItems.firstMealItems.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for first meal\r\n  const removeFirstMealItemHandler = () => {\r\n    let { firstMealItems } = mealItems;\r\n    if (firstMealItems.length > 1) {\r\n      // console.log(firstMealItems)\r\n      let newArr = firstMealItems.slice(1);\r\n      // console.log(newArr)\r\n      setMealItems((mealItems) => ({\r\n        ...mealItems,\r\n        firstMealItems: [...newArr],\r\n      }));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  // to add select item for Second meal\r\n  const addSecondMealItemHandler = () => {\r\n    setMealItems((MealItems) => ({\r\n      ...MealItems,\r\n      secondMealItems: [\r\n        ...mealItems.secondMealItems,\r\n        mealItems.secondMealItems.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for Second meal\r\n  const removeSecondMealItemHandler = () => {\r\n    let { secondMealItems } = mealItems;\r\n    if (secondMealItems.length > 1) {\r\n      // console.log(firstMealItems)\r\n      let newArr = secondMealItems.slice(1);\r\n      // console.log(newArr)\r\n      setMealItems((mealItems) => ({\r\n        ...mealItems,\r\n        secondMealItems: [...newArr],\r\n      }));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const ComboMealSchema = Yup.object().shape({\r\n    DisplayType: Yup.number(),\r\n    CategoryId: Yup.string().required(translate(\"category_id_is_required\")),\r\n    Image: Yup.string().required(translate(\"photo_is_required\")),\r\n    ExpireDate: Yup.string().required(translate(\"expire_date_required\")),\r\n    Price: Yup.string().required(translate(\"price_is_required\")),\r\n    Description: Yup.string().required(translate(\"description_is_required\")),\r\n    SecondDescription: Yup.string().required(\r\n      translate(\"second_description_is_required\")\r\n    ),\r\n    Name: Yup.string().required(translate(\"first_name_is_required\")),\r\n    SecondName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Currency: Yup.string(),\r\n    FirstCategories: Yup.array().of(\r\n      Yup.object().shape({\r\n        title: Yup.string().required(translate(\"first_name_is_required\")),\r\n        secondTitle: Yup.string().required(\r\n          translate(\"second_name_is_required\")\r\n        ),\r\n        products: Yup.array().of(\r\n          Yup.object().shape({\r\n            productId: Yup.string().required(translate(\"first_name_is_Req\")),\r\n            quantity: Yup.number(),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n\r\n    SecondCategories: Yup.array().of(\r\n      Yup.object().shape({\r\n        title: Yup.string().required(translate(\"first_name_is_required\")),\r\n        secondTitle: Yup.string().required(\r\n          translate(\"second_name_is_required\")\r\n        ),\r\n        products: Yup.array().of(\r\n          Yup.object().shape({\r\n            productId: Yup.string().required(translate(\"first_name_is_Req\")),\r\n            quantity: Yup.number(),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n  });\r\n\r\n  const defaultValues = {\r\n    DisplayType: 2,\r\n    CategoryId: \"\",\r\n    Image: \"\",\r\n    ExpireDate: new Date(),\r\n    Price: \"\",\r\n    Description: \"\",\r\n    SecondDescription: \"\",\r\n    Name: \"\",\r\n    SecondName: \"\",\r\n    Currency: \"AED\",\r\n    FirstCategories: [],\r\n    SecondCategories: [],\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ComboMealSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  // watch Offer Photo if value changed\r\n  const watchPic = watch(\"Image\");\r\n\r\n  const onSubmit = async (data, event) => {\r\n    console.log(data);\r\n\r\n    let { FirstCategories, SecondCategories, ExpireDate } = data;\r\n    ExpireDate = convertDateFormat(ExpireDate);\r\n    let Categories = [...FirstCategories, ...SecondCategories];\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryId\", data.CategoryId);\r\n\r\n    formData.append(\"Image\", Image);\r\n\r\n    formData.append(\"ExpireDate\", data.ExpireDate);\r\n\r\n    formData.append(\"Price\", +data.Price);\r\n\r\n    formData.append(\"Description\", data.Description);\r\n\r\n    formData.append(\"Name\", data.Name);\r\n\r\n    formData.append(\"SecondName\", data.SecondName);\r\n\r\n    formData.append(\"SecondDescription\", data.SecondDescription);\r\n\r\n    formData.append(\"Categories\", JSON.stringify(Categories));\r\n\r\n    try {\r\n      dispatch(AddComboOfferMeal(formData));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_offer`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getRestaurantMealsCategories({\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n    dispatch(\r\n      getProductBasicInfo({\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  // ------------------ JSX Code ----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Offer</title>\r\n      </Helmet>\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...formHolderSx }}>\r\n          {/* ********************** Title Holder ******************* */}\r\n          <Typography\r\n            variant=\"h5\"\r\n            sx={{\r\n              ...titleSx,\r\n              cursor: \"pointer\",\r\n              mb: \"24px\",\r\n            }}\r\n          >\r\n            {translate(`Add_new_offer`)}\r\n          </Typography>\r\n\r\n          {/* ********************** Start add new offer Form ******************* */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container rowSpacing={2} columnSpacing={{ xs: 4, md: 8 }}>\r\n              {/* error Message after submit */}\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {/* ********************** Left Side ******************* */}\r\n              <Grid item xs={12} sm={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/*========== Dispaly Type Photo  ========== */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"DisplayType\"\r\n                      label={translate(\"display_type\")}\r\n                      sx={{ ...selectFieldSX }}\r\n                      onChange={(e) => {\r\n                        if (e.target.value === 0 || e.target.value === 1) {\r\n                          navigate(\"/employee/menu/add-new-meal\", {\r\n                            state: { id: e.target.value },\r\n                          });\r\n                        }\r\n                        // setDisplayType(e.target.value)\r\n                        // setValue('DisplayType', e.target.value, { shouldValidate: true })\r\n                      }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/employee/bigArrow.svg\"\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"21px\",\r\n                            }}\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      <MenuItem value={0}>\r\n                        {translate(\"meals_with_sizes\")}\r\n                      </MenuItem>\r\n                      <MenuItem value={1}>\r\n                        {translate(\"meals-without_sizes\")}\r\n                      </MenuItem>\r\n                      <MenuItem value={2}>{translate(\"combo_offer\")}</MenuItem>\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/*========== Offer name  ========== */}\r\n                  <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                      {/*======= offer Name Input ========== */}\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFTextField\r\n                          name=\"Name\"\r\n                          label={translate(\"first_name\")}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFTextField\r\n                          name=\"SecondName\"\r\n                          label={translate(\"second_name\")}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/*========= offer Photo Input and Category ========== */}\r\n                  <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                      {/*========= offer Photo  ========== */}\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFTextField\r\n                          name=\"Image\"\r\n                          label={translate(\"offer_photo\")}\r\n                          type=\"file\"\r\n                          hidden\r\n                          id=\"offerPic\"\r\n                          sx={{\r\n                            ...txtFieldBorderStyle,\r\n                            \"& .MuiOutlinedInput-input\": {\r\n                              color: watchPic ? \"#535353\" : \"transparent\",\r\n                              fontSize: \"14px\",\r\n                            },\r\n                          }}\r\n                          onChange={(e) => {\r\n                            console.log(e.target.files[0]);\r\n                            setImage(e.target.files[0]);\r\n                            setValue(\"Image\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            });\r\n                          }}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  aria-label=\"upload picture\"\r\n                                  component=\"label\"\r\n                                >\r\n                                  <label htmlFor=\"offerPic\">\r\n                                    <img\r\n                                      src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                      alt=\"upload_icon\"\r\n                                    />\r\n                                  </label>\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/*========= offer Category Input  ========== */}\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFSelect\r\n                          name=\"CategoryId\"\r\n                          label={translate(\"categories\")}\r\n                          sx={{ ...selectFieldSX }}\r\n                          onChange={(e) => {\r\n                            setValue(\"CategoryId\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            });\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                alt=\"\"\r\n                                style={{\r\n                                  marginRight: \"21px\",\r\n                                }}\r\n                              />\r\n                            ),\r\n                          }}\r\n                        >\r\n                          {mealsCategory?.map((category, index) => (\r\n                            <MenuItem value={category?.id} key={index}>\r\n                              {category?.name}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </RHFSelect>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/*======= offer End in Date ======== */}\r\n                  <Grid item xs={12}>\r\n                    <CustomDataPicker\r\n                      name=\"ExpireDate\"\r\n                      textLabel=\"end_in\"\r\n                      inputFormat=\"DD/MM/YYYY\"\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ********************** Right Side ******************* */}\r\n              <Grid item xs={12} sm={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/*============ Offer Price  Input ============ */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"Price\"\r\n                      type=\"number\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      placeholder={translate(`price`)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <RHFSelect\r\n                            name=\"Currency\"\r\n                            sx={{\r\n                              ...transparentBorderTxtField,\r\n                              width: \"80px\",\r\n                            }}\r\n                            SelectProps={{\r\n                              native: false,\r\n                              IconComponent: () => (\r\n                                <img\r\n                                  src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                                  alt=\"\"\r\n                                />\r\n                              ),\r\n                            }}\r\n                            onChange={(e) =>\r\n                              setValue(\"Currency\", e.target.value, {\r\n                                shouldValidate: true,\r\n                              })\r\n                            }\r\n                          >\r\n                            <MenuItem value=\"AED\">AED</MenuItem>\r\n                            <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                          </RHFSelect>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*=========== Offer First  Description Input =========== */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.5}\r\n                      name=\"Description\"\r\n                      label={translate(\"first_description\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          pr: \"0px\",\r\n                          height: \"82px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#BCBCBC\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*=========== Offer Second Description Input =========== */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.5}\r\n                      name=\"SecondDescription\"\r\n                      label={translate(\"second_description\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          pr: \"0px\",\r\n                          height: \"82px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#BCBCBC\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ******************** CompoOffer First and Second Meals Selection ******************** */}\r\n            <Grid container rowSpacing={2} columnSpacing={8} mt=\"35px\">\r\n              {/* ****************  First Meal ***************/}\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                {/* --- meal title and action -- */}\r\n                <Stack\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"16px\"\r\n                >\r\n                  <Typography sx={{ ...subTitleSx }}>\r\n                    {translate(`first_meal`)}\r\n                  </Typography>\r\n\r\n                  <Typography\r\n                    sx={{ ...highLightTextSx, cursor: \"pointer\" }}\r\n                    onClick={addFirstMealItemHandler}\r\n                  >\r\n                    {translate(`add_item`)}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                {mealItems.firstMealItems?.map((_, index) => (\r\n                  <Stack key={index}>\r\n                    {index === 0 && (\r\n                      <Grid container columnSpacing={2}>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`FirstCategories[${0}][title]`}\r\n                            type=\"text\"\r\n                            label={translate(\"first_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`FirstCategories[${0}][secondTitle]`}\r\n                            type=\"text\"\r\n                            label={translate(\"second_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Stack key={index} sx={{ ...selectItemHolderSx }}>\r\n                      <RHFSelect\r\n                        name={`FirstCategories[${0}][products][${index}][productId]`}\r\n                        label={translate(\"select_meal\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        onChange={(e) => {\r\n                          setValue(\r\n                            `FirstCategories[${0}][products][${index}][productId]`,\r\n                            e.target.value,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                          setValue(\r\n                            `FirstCategories[${0}][products][${index}][quantity]`,\r\n                            1,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                      >\r\n                        {meals?.map((meal, index) => (\r\n                          <MenuItem value={meal?.id} key={index}>\r\n                            {meal?.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </RHFSelect>\r\n                      <IconButton\r\n                        onClick={removeFirstMealItemHandler}\r\n                        sx={{\r\n                          position: \"absolute\",\r\n                          right: { xs: \"-25px\", md: \"-35px\" },\r\n                          top: \"10px\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      </IconButton>\r\n                    </Stack>\r\n                  </Stack>\r\n                ))}\r\n              </Grid>\r\n\r\n              {/* ***********  Second Meal **************/}\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                {/* -- meal title and action -- */}\r\n                <Stack\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"16px\"\r\n                >\r\n                  <Typography sx={{ ...subTitleSx }}>\r\n                    {translate(`second_meal`)}\r\n                  </Typography>\r\n\r\n                  <Typography\r\n                    sx={{ ...highLightTextSx, cursor: \"pointer\" }}\r\n                    onClick={addSecondMealItemHandler}\r\n                  >\r\n                    {translate(`add_item`)}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                {mealItems.secondMealItems.map((_, index) => (\r\n                  <Stack key={index}>\r\n                    {index === 0 && (\r\n                      <Grid container columnSpacing={2}>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`SecondCategories[${0}][title]`}\r\n                            label={translate(\"first_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`SecondCategories[${0}][secondTitle]`}\r\n                            label={translate(\"second_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Stack key={index} sx={{ ...selectItemHolderSx }}>\r\n                      <RHFSelect\r\n                        name={`SecondCategories[${0}][products][${index}][productId]`}\r\n                        label={translate(\"select_item\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        onChange={(e) => {\r\n                          setValue(\r\n                            `SecondCategories[${0}][products][${index}][productId]`,\r\n                            e.target.value,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                          setValue(\r\n                            `SecondCategories[${0}][products][${index}][quantity]`,\r\n                            1,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                      >\r\n                        {meals?.map((meal, index) => (\r\n                          <MenuItem value={meal?.id} key={index}>\r\n                            {meal?.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </RHFSelect>\r\n\r\n                      <IconButton\r\n                        onClick={removeSecondMealItemHandler}\r\n                        sx={{\r\n                          position: \"absolute\",\r\n                          right: { xs: \"-25px\", md: \"-35px\" },\r\n                          top: \"10px\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      </IconButton>\r\n                    </Stack>\r\n                  </Stack>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* =================@@ Action Button and Section @@================*/}\r\n            <Grid container rowSpacing={2} columnSpacing={8} mt=\"32px\">\r\n              <Grid item xs={12} sm={12} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    onClick={() => navigate(`/employee/menu`)}\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // onClick={onClose}\r\n                    // onClick={() => navigate(-1)}\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                  >\r\n                    {translate(\"cancel\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={addComboOfferMeal}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_offer\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditSingleMealPage.js",["2684","2685","2686","2687","2688","2689","2690"],[],"import React, { useState, useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n//@Mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// Form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFSelect,\r\n} from \"../../../components/hook-form\";\r\n// Section Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport ConfirmAddMealModal from \"../../../section/@employee/menu/details/ConfirmAddMealModal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getRestaurantMealsCategories,\r\n  getRestaurantProductDetails,\r\n  updateResturantProduct,\r\n} from \"../../../redux/services/menu_restaurant_service\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport * as URLS from \"../../../urls\";\r\n// ---------------------------------------------------------------------------------------------\r\n// ------------ Style --------------\r\n\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"30px 30px 48px 20px\",\r\n    sm: \"30px 42px 48px 42px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"22px\",\r\n    color: \"#535353\",\r\n    paddingRight: \"30px\",\r\n    pr: \"5px!important\",\r\n    pl: \"3px\",\r\n  },\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"5px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \" #FFCC63\",\r\n  border: \"0.901691px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  marginRight: \"18px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst myButtonsBoxStyle = {\r\n  display: \"flex\",\r\n  justifyContent: { xs: \"center\", sm: \"center\", lg: \"flex-end\" },\r\n  marginTop: \"27px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst typo1Style = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#000000\",\r\n};\r\n\r\nconst typo2Style = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFCC63\",\r\n  textDecoration: \"underline\",\r\n};\r\n\r\nconst boxTypoStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"16px\",\r\n};\r\n\r\nconst img2Style = {\r\n  marginRight: \"8px\",\r\n  width: \"13.33px\",\r\n  height: \"13.33px\",\r\n};\r\n\r\nexport default function EditSingleMealPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    mealsCategory,\r\n    isLoadingAddProduct,\r\n    restaurantProductDetails,\r\n    isLoadingupdateResturantProduct,\r\n  } = useSelector((state) => state.menuRestaurant);\r\n\r\n  console.log(restaurantProductDetails);\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n  const { restaurantProductInfo, RestaurantProductId } = useSelector(\r\n    (state) => state.control\r\n  );\r\n  console.log(restaurantProductInfo)\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  const [file, setFile] = useState(null);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [DisplayType, setDisplayType] = useState(\r\n    restaurantProductInfo?.display\r\n  );\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const initialState = {\r\n    itemSizes: [...Array(restaurantProductInfo?.sizes?.length)] || [\r\n      ...Array(1),\r\n    ],\r\n    itemAdditions: [...Array(restaurantProductInfo?.additions?.length)] || [\r\n      ...Array(1),\r\n    ],\r\n  };\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addMealSizeHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemSizes: [...mealItems.itemSizes, mealItems.itemSizes.push()],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for first meal\r\n  const removeMealSizeHandler = () => {\r\n    let { itemSizes } = mealItems;\r\n    // console.log(firstMealItems)\r\n    let newArr = itemSizes.slice(1);\r\n    // console.log(newArr)\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemSizes: [...newArr],\r\n    }));\r\n  };\r\n\r\n  // to add select item for Second meal\r\n  const addMealAdditionsHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemAdditions: [\r\n        ...mealItems.itemAdditions,\r\n        mealItems.itemAdditions.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for Second meal\r\n  const removeMealAdditionsmHandler = () => {\r\n    let { itemAdditions } = mealItems;\r\n    // console.log(firstMealItems)\r\n    let newArr = itemAdditions.slice(1);\r\n    // console.log(newArr)\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemAdditions: [...newArr],\r\n    }));\r\n  };\r\n\r\n  const timeRegEx = /(?:[01]\\d|2[0-3]):(?:[0-5]\\d):(?:[0-5]\\d)/;\r\n\r\n  const MealFormSchema = Yup.object().shape({\r\n    Name: Yup.string().required(translate(\"meal_name_ar_is_required\")),\r\n    SecondName: Yup.string().required(translate(\"meal_name_en_is_required\")),\r\n    Description: Yup.string()\r\n      .required(translate(\"description_en_is_required\"))\r\n      .min(10, \"Must be up 10 digits\"),\r\n    SecondDescription: Yup.string().required(\r\n      translate(\"description_ar_is_required\")\r\n    ),\r\n    ImageUrl:\r\n      file === null\r\n        ? Yup.string().required(translate(\"meal_photo_required\"))\r\n        : \"\",\r\n    Cal: Yup.string().required(translate(\"calories_is_required\")),\r\n    PreparingTime: Yup.string()\r\n      .required(translate(\"prepration_time_is_required\"))\r\n      .matches(timeRegEx, translate(\"time_must_be_hh_mm_ss\")),\r\n\r\n    ResturantCategoryId: Yup.string().required(\r\n      translate(\"categories_is_required\")\r\n    ),\r\n    DisplayType: Yup.number().required(translate(\"display_type_is_required\")),\r\n    Sizes:\r\n      DisplayType === 0\r\n        ? Yup.array().of(\r\n          Yup.object().shape({\r\n            name: Yup.string().required(translate(\"size_name_is_Required\")),\r\n            secondName: Yup.string().required(\r\n              translate(\"second_size_name_is_Required\")\r\n            ),\r\n            price: Yup.number().nullable().required(\"price_is_required\"),\r\n          })\r\n        )\r\n        : Yup.string(),\r\n    Additions:\r\n      DisplayType === 0\r\n        ? Yup.array().of(\r\n          Yup.object().shape({\r\n            name: Yup.string().required(\r\n              translate(\"add_name_ons_item_is_Required\")\r\n            ),\r\n            secondName: Yup.string().required(\r\n              translate(\"add_second_name_ons_item_is_Required\")\r\n            ),\r\n            price: Yup.number()\r\n              .nullable()\r\n              .required(translate(\"price_is_required\")),\r\n          })\r\n        )\r\n        : Yup.string(),\r\n    Price:\r\n      DisplayType === 1\r\n        ? Yup.string().required(translate(\"meal_price_is_Required\"))\r\n        : Yup.string(),\r\n    Currency: Yup.string(),\r\n  });\r\n\r\n  const defaultValues = {\r\n    Name: restaurantProductInfo?.name,\r\n    SecondName: restaurantProductInfo?.secondName,\r\n    Description: restaurantProductInfo?.descreption,\r\n    SecondDescription: restaurantProductInfo?.secondDescreption,\r\n    ImageUrl: \"\",\r\n    Cal: restaurantProductInfo?.cal,\r\n    PreparingTime: restaurantProductInfo?.prepareTime,\r\n    ResturantCategoryId: restaurantProductInfo?.resturantCategoryId,\r\n    // Type: \"0\",\r\n    DisplayType: restaurantProductInfo?.display,\r\n    Sizes: restaurantProductInfo?.sizes ? restaurantProductInfo?.sizes : \"\",\r\n    Additions: restaurantProductInfo?.additions\r\n      ? restaurantProductInfo?.additions\r\n      : \"\",\r\n    Price: DisplayType === 1 ? restaurantProductInfo?.price : \"\",\r\n    Currency: \"AED\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(MealFormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const watchMealPhoto = watch(\"ImageUrl\");\r\n\r\n  let formData = new FormData();\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    setData(data);\r\n    //  handleOpen();\r\n    try {\r\n      formData.append(\"Name\", data.Name);\r\n      formData.append(\"SecondName\", data.SecondName);\r\n      formData.append(\"Description\", data.Description);\r\n      formData.append(\"SecondDescription\", data.SecondDescription);\r\n      formData.append(\"ImageUrl\", file);\r\n      formData.append(\"Cal\", data.Cal);\r\n      formData.append(\"PreparingTime\", data.PreparingTime);\r\n      formData.append(\"ResturantCategoryId\", data.ResturantCategoryId);\r\n      // formData.append(\"Visibility\", true);\r\n      if (DisplayType === 0) {\r\n        formData.append(\"DisplayType\", 0);\r\n        const arrayOfAdditions = JSON.stringify(data.Additions);\r\n        formData.append(\"Additions\", arrayOfAdditions);\r\n        const arrayOfSizes = JSON.stringify(data.Sizes);\r\n        formData.append(\"Sizes\", arrayOfSizes);\r\n        formData.append(\"Price\", 1);\r\n        dispatch(\r\n          updateResturantProduct({\r\n            productId: RestaurantProductId,\r\n            data: formData,\r\n          })\r\n        )\r\n          .unwrap()\r\n          .then((_) => alert(\"You Added Meal Successfuly !!\"))\r\n          .catch((_) => alert(\"Failed\"));\r\n      }\r\n      if (DisplayType === 1) {\r\n        formData.append(\"Price\", +data.Price);\r\n        formData.append(\"DisplayType\", 1);\r\n        for (const value of formData.values()) {\r\n          console.log(value);\r\n        }\r\n        dispatch(\r\n          updateResturantProduct({\r\n            productId: RestaurantProductId,\r\n            data: formData,\r\n          })\r\n        )\r\n          .unwrap()\r\n          .then((_) => {\r\n            // dispatch(getResturantProductDetails(newMealId));\r\n            setOpen(true);\r\n          })\r\n          .catch((_) => alert(\"Failed\"));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getRestaurantProductDetails({\r\n        productId: RestaurantProductId,\r\n      })\r\n    );\r\n    dispatch(\r\n      getRestaurantMealsCategories({\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_meal`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ----------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Meal</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ----- Title -----  */}\r\n          <Typography variant=\"h5\" color=\"#ffcc63\" mb=\"24px\">\r\n            {translate(`edit_meal`)}\r\n          </Typography>\r\n\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* ************ Start Add New Meal  (Main Form)************/}\r\n            <Grid container rowSpacing={2} columnSpacing={8}>\r\n              {/* ------------ Left Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/* Display Type input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"DisplayType\"\r\n                      label={translate(\"display_type\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      // onChange={(e) => {\r\n                      //     if (e.target.value === 2) {\r\n                      //         navigate(\"add-combo\");\r\n                      //     }\r\n                      //     setDisplayType(e.target.value);\r\n                      //     setValue(\"DisplayType\", e.target.value, {\r\n                      //         shouldValidate: true,\r\n                      //     });\r\n                      // }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/employee/bigArrow.svg\"\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"21px\",\r\n                            }}\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      {DisplayType === 0 ? (\r\n                        <MenuItem value={0}>\r\n                          {translate(\"meals_with_sizes\")}\r\n                        </MenuItem>\r\n                      ) : (\r\n                        <MenuItem value={1}>\r\n                          {translate(\"meals-without_sizes\")}\r\n                        </MenuItem>\r\n                      )}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/* meal name en  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Name\"\r\n                      label={translate(\"meal_name_en\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal name ar  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"SecondName\"\r\n                      label={translate(\"meal_name_ar\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal photo input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"ImageUrl\"\r\n                      type=\"file\"\r\n                      label={translate(\"meal_photo\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchMealPhoto ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setFile(e.target.files[0]);\r\n                        setValue(\"ImageUrl\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"licenses\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                    {\r\n                      restaurantProductInfo?.imageUrl !== null &&\r\n                      <Box\r\n                        sx={{\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          mt: \"12px\",\r\n                          p: '8px',\r\n                          background: '#e1e1e1',\r\n                          borderRadius: '10px',\r\n                          width: 'fit-content',\r\n                          mx: 'auto'\r\n                        }}\r\n                      >\r\n                        <Image\r\n                          src={\r\n                            localStorage.getItem(\"facilityType\") === \"1\"\r\n                                ? URLS.baseImageURL + `product/${restaurantProductInfo?.imageUrl}`\r\n                                : URLS.baseImageURL + `product/${restaurantProductInfo?.imageUrl}`\r\n                          }\r\n                          sx={{\r\n                            width: \"90px\",\r\n                            height: \"90px\",\r\n                            borderRadius: '10px',\r\n                          }}\r\n                        />\r\n                      </Box>\r\n                    }\r\n                  </Grid>\r\n\r\n                  {/* meal  calories  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Cal\"\r\n                      type=\"text\"\r\n                      label={translate(\"calories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal prepration time  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"PreparingTime\"\r\n                      type=\"text\"\r\n                      label={translate(\"preparation_time\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton>\r\n                              <label htmlFor=\"licenses\">\r\n                                <img\r\n                                  src=\"/assets/icons/employee/time.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal category input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"ResturantCategoryId\"\r\n                      label={translate(\"categories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(\"ResturantCategoryId\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/employee/bigArrow.svg\"\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"21px\",\r\n                            }}\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      {mealsCategory.map((option, index) => (\r\n                        <MenuItem key={index} value={option.id}>\r\n                          {option.name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/* ###################### Case of DispalyType === 1 ######################  */}\r\n                  {/* meal Price en  input */}\r\n                  {DisplayType === 1 && (\r\n                    <Grid item xs={12}>\r\n                      <RHFTextField\r\n                        name=\"Price\"\r\n                        label={translate(\"meal_price\")}\r\n                        type=\"text\"\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------------ Right Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2}>\r\n                  {/* Description En Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"Description\"\r\n                      label={translate(\"description_English\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* Description Ar Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"SecondDescription\"\r\n                      label={translate(\"description_arabic\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ************* Start additions Form (Secondary Form) *************/}\r\n\r\n            {/* ###################### Case of DispalyType === 0 ######################  */}\r\n            {DisplayType === 0 && (\r\n              <Grid container columnSpacing={8} mt=\"50px\">\r\n                {/* ------------ Left Side Inputs ------- */}\r\n                <Grid item xs={12} md={6}>\r\n                  {/*  title and add action  */}\r\n                  <Grid item xs={12}>\r\n                    <Box sx={boxTypoStyle}>\r\n                      <Typography fontWeight={\"400\"} sx={typo1Style}>\r\n                        {translate(\"item_sizes\")}\r\n                      </Typography>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        onClick={addMealSizeHandler}\r\n                        sx={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/employee/addIcon.svg\"\r\n                          alt=\"\"\r\n                          style={img2Style}\r\n                        />\r\n                        <Typography sx={typo2Style}>\r\n                          {translate(\"add_size\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </Grid>\r\n\r\n                  {mealItems.itemSizes.map((e, index) => (\r\n                    <Grid container columnSpacing={2} key={index}>\r\n                      {/* meal size1 input */}\r\n                      <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                        <RHFTextField\r\n                          name={`Sizes[${index}][name]`}\r\n                          label={translate(`size${index + 1}`)}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* meal size1 input */}\r\n                      <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                        <RHFTextField\r\n                          name={`Sizes[${index}][secondName]`}\r\n                          label={translate(`size${index + 1}`)}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* meal size1 Price input */}\r\n                      <Grid item xs={12} sm={12} position=\"relative\" mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Sizes[${index}][price]`}\r\n                          type=\"number\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                          placeholder={translate(`price`)}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <RHFSelect\r\n                                name=\"Currency\"\r\n                                sx={{\r\n                                  ...transparentBorderTxtField,\r\n                                  width: \"80px\",\r\n                                }}\r\n                                SelectProps={{\r\n                                  native: false,\r\n                                  IconComponent: () => (\r\n                                    <img\r\n                                      src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                      alt=\"\"\r\n                                    />\r\n                                  ),\r\n                                }}\r\n                                onChange={(e) =>\r\n                                  setValue(\"Currency\", e.target.value, {\r\n                                    shouldValidate: true,\r\n                                  })\r\n                                }\r\n                              >\r\n                                <MenuItem value=\"AED\">AED</MenuItem>\r\n                                <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                              </RHFSelect>\r\n                            ),\r\n                          }}\r\n                        />\r\n                        {index >= 1 && (\r\n                          <IconButton\r\n                            onClick={removeMealSizeHandler}\r\n                            sx={{\r\n                              position: \"absolute\",\r\n                              right: { xs: \"-30px\", md: \"-35px\" },\r\n                              top: { xs: \"-15px\", sm: \"10px\" },\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          </IconButton>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n\r\n                {/* ------------ Right Side Inputs ------- */}\r\n                <Grid item xs={12} md={6}>\r\n                  {/*  title and add action  */}\r\n                  <Grid item xs={12}>\r\n                    <Box sx={boxTypoStyle}>\r\n                      <Typography fontWeight=\"400\" sx={typo1Style}>\r\n                        {translate(\"add_ons\")}\r\n                      </Typography>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        onClick={addMealAdditionsHandler}\r\n                        sx={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/employee/addIcon.svg\"\r\n                          alt=\"\"\r\n                          style={img2Style}\r\n                        />\r\n\r\n                        <Typography sx={typo2Style}>\r\n                          {translate(\"add_item\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </Grid>\r\n\r\n                  {mealItems.itemAdditions.map((e, index) => (\r\n                    <Grid container columnSpacing=\"16px\" key={index}>\r\n                      {/* name add-ons Price input */}\r\n                      <Grid item xs={12} sm={6} mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Additions[${index}][name]`}\r\n                          label={translate(\"item_name\")}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* secondName add-ons Price input */}\r\n                      <Grid item xs={12} sm={6} mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Additions[${index}][secondName]`}\r\n                          label={translate(\"item_name\")}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n                      {/* meal add-ons Price input */}\r\n                      <Grid item xs={12} sm={12} position=\"relative\" mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Additions[${index}][price]`}\r\n                          type=\"number\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                          placeholder={translate(`price`)}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <RHFSelect\r\n                                name=\"Currency\"\r\n                                sx={{\r\n                                  ...transparentBorderTxtField,\r\n                                  width: \"80px\",\r\n                                }}\r\n                                SelectProps={{\r\n                                  native: false,\r\n                                  IconComponent: () => (\r\n                                    <img\r\n                                      src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                      alt=\"\"\r\n                                    />\r\n                                  ),\r\n                                }}\r\n                                onChange={(e) =>\r\n                                  setValue(\"Currency\", e.target.value, {\r\n                                    shouldValidate: true,\r\n                                  })\r\n                                }\r\n                              >\r\n                                <MenuItem value=\"AED\">AED</MenuItem>\r\n                                <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                              </RHFSelect>\r\n                            ),\r\n                          }}\r\n                        />\r\n\r\n                        {index >= 1 && (\r\n                          <IconButton\r\n                            onClick={removeMealAdditionsmHandler}\r\n                            sx={{\r\n                              position: \"absolute\",\r\n                              right: { xs: \"-30px\", md: \"-35px\" },\r\n                              top: { xs: \"-15px\", sm: \"10px\" },\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          </IconButton>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n\r\n            {/* =========@@ Action Button and Section @@========*/}\r\n            <Grid container columnSpacing={8}>\r\n              <Grid item xs={12} md={6} />\r\n              <Grid item xs={12} md={6}>\r\n                <Box sx={myButtonsBoxStyle}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    sx={outLinedButtonStyle}\r\n                    onClick={() => navigate(\"/employee/menu\")}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n\r\n                  <LoadingButton\r\n                    variant=\"contained\"\r\n                    sx={containedButtonStyle}\r\n                    type=\"submit\"\r\n                    loading={isLoadingupdateResturantProduct}\r\n                  >\r\n                    {translate(`update`)}\r\n                  </LoadingButton>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n      {open && (\r\n        <ConfirmAddMealModal open={open} onClose={handleClose} data={data} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\NewPasswordLoginPage.js",["2691","2692","2693","2694"],[],"import React, { useState } from \"react\";\r\n//helemt\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../locales\";\r\nimport * as Yup from \"yup\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  Grid,\r\n} from \"@mui/material\";\r\n//mui\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport Iconify from \"../../components/iconify\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\n//toast\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\nimport { resetPasswordCode } from \"../../redux/services/auth_service\";\r\n\r\n// ----------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"18px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  paddingBottom: \"23px\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"50px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: (theme) => (theme.palette.mode === \"light\" ? \"#EBF4F8\" : \"grey.800\"),\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nexport default function NewPasswordLoginPage() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading } = useSelector((state) => state.authentication);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const NewPasswordLoginSchema = Yup.object().shape({\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n    confirm_password: Yup.string()\r\n      .required(translate(\"confirm_password_is_requierd\"))\r\n      .oneOf([Yup.ref(\"password\")], \"passwords_do_not_match\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n    role: 1,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(NewPasswordLoginSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      dispatch(\r\n        resetPasswordCode({\r\n          email: localStorage.getItem(\"email\"),\r\n          password: data.password,\r\n          role: 1,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  // --------------- JSX Code ------------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>New Password Login</title>\r\n      </Helmet>\r\n\r\n      <Grid container height=\"100%\">\r\n        {/* ********************* Login Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          {/* __________________ Login Form page ____________ */}\r\n          <Stack sx={{ ...holder, justifyContent: \"center\", height: \"100%\" }}>\r\n            {/* _____ Head of login page ____ */}\r\n            <Stack mb=\"23px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <img src=\"/assets/images/logo/logo2.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <Typography sx={{ ...titleSx, mr: \"8px\" }}>\r\n                  {translate(`welcome_to`)}\r\n                </Typography>\r\n                <img src=\"/assets/images/logo/logo_name.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              {/*--- instruction message --- */}\r\n              <Typography sx={{ ...subTitleSx }}>\r\n                {translate(`enter_your_data_to_log_in`)}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of login page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n                {/*------ password input -------- */}\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword\r\n                                ? \"eva:eye-outline\"\r\n                                : \"eva:eye-off-outline\"\r\n                            }\r\n                            color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n\r\n                {/*------ password input -------- */}\r\n                <RHFTextField\r\n                  name=\"confirm_password\"\r\n                  label={translate(\"confirm_password\")}\r\n                  type={showConfirmPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() =>\r\n                            setShowConfirmPassword(!showConfirmPassword)\r\n                          }\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showConfirmPassword\r\n                                ? \"eva:eye-outline\"\r\n                                : \"eva:eye-off-outline\"\r\n                            }\r\n                            color={showConfirmPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Box>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  isLoading={isLoading}\r\n                  sx={{\r\n                    ...loadingButtonStyle,\r\n                  }}\r\n                >\r\n                  {translate(\"reset_password\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ************ image Section ************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={657} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddNewMealPage.js",["2695","2696","2697","2698","2699","2700","2701","2702","2703"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n//@Mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// Form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFSelect,\r\n} from \"../../../components/hook-form\";\r\n// Section Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport ConfirmAddMealModal from \"../../../section/@employee/menu/details/ConfirmAddMealModal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  addProductFullDisplay,\r\n  addProductMiniDisplay,\r\n  getRestaurantMealsCategories,\r\n  getResturantProductDetails,\r\n} from \"../../../redux/services/menu_restaurant_service\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport { transform } from \"framer-motion\";\r\n\r\n// --------------------------------------------------------------------------------------\r\n\r\n// ------------ Style --------------\r\n\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"30px 30px 48px 20px\",\r\n    sm: \"30px 42px 48px 42px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"22px\",\r\n    color: \"#535353\",\r\n    paddingRight: \"30px\",\r\n    pr: \"5px!important\",\r\n    pl: \"3px\",\r\n  },\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"5px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \" #FFCC63\",\r\n  border: \"0.901691px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  marginRight: \"18px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst myButtonsBoxStyle = {\r\n  display: \"flex\",\r\n  justifyContent: { xs: \"center\", sm: \"center\", lg: \"flex-end\" },\r\n  marginTop: \"27px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst typo1Style = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#000000\",\r\n};\r\n\r\nconst typo2Style = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFCC63\",\r\n  textDecoration: \"underline\",\r\n};\r\n\r\nconst boxTypoStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"16px\",\r\n};\r\n\r\nconst img2Style = {\r\n  marginRight: \"8px\",\r\n  width: \"13.33px\",\r\n  height: \"13.33px\",\r\n};\r\n\r\nexport default function AddNewMealPage() {\r\n  const { state } = useLocation();\r\n  const { id } = state || 0;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { mealsCategory, isLoadingAddProduct, newMealId } = useSelector(\r\n    (state) => state.menuRestaurant\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  const [file, setFile] = useState(null);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [hour, setHour] = useState(0)\r\n  const [min, setMin] = useState(0)\r\n\r\n\r\n\r\n  const [ImageUrl, setImageUrl] = useState(null);\r\n\r\n  const [DisplayType, setDisplayType] = useState(0);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleOpen = () => setOpen(true);\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const initialState = {\r\n    itemSizes: [...Array(1)],\r\n    itemAdditions: [...Array(1)],\r\n  };\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addMealSizeHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemSizes: [...mealItems.itemSizes, mealItems.itemSizes.push()],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for first meal\r\n  const removeMealSizeHandler = () => {\r\n    let { itemSizes } = mealItems;\r\n    // console.log(firstMealItems)\r\n    let newArr = itemSizes.slice(1);\r\n    // console.log(newArr)\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemSizes: [...newArr],\r\n    }));\r\n  };\r\n\r\n  // to add select item for Second meal\r\n  const addMealAdditionsHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemAdditions: [\r\n        ...mealItems.itemAdditions,\r\n        mealItems.itemAdditions.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for Second meal\r\n  const removeMealAdditionsmHandler = () => {\r\n    let { itemAdditions } = mealItems;\r\n    // console.log(firstMealItems)\r\n    let newArr = itemAdditions.slice(1);\r\n    // console.log(newArr)\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      itemAdditions: [...newArr],\r\n    }));\r\n  };\r\n\r\n  const timeRegEx = /(?:[01]\\d|2[0-3]):(?:[0-5]\\d):(?:[0-5]\\d)/;\r\n  const MealFormSchema = Yup.object().shape({\r\n    Name: Yup.string().required(translate(\"meal_name_ar_is_required\")),\r\n    SecondName: Yup.string().required(translate(\"meal_name_en_is_required\")),\r\n    Description: Yup.string()\r\n      .required(translate(\"description_en_is_required\"))\r\n      .min(10, \"Must be up 10 digits\"),\r\n    SecondDescription: Yup.string().required(\r\n      translate(\"description_ar_is_required\")\r\n    ),\r\n    ImageUrl:\r\n      file === null\r\n        ? Yup.string().required(translate(\"meal_photo_required\"))\r\n        : \"\",\r\n    Cal: Yup.string().required(translate(\"calories_is_required\")),\r\n    // PreparingTime: Yup.string()\r\n    //   .required(translate(\"prepration_time_is_required\"))\r\n    //   .matches(timeRegEx, translate(\"time_must_be_hh_mm_ss\")),\r\n    ResturantCategoryId: Yup.string().required(\r\n      translate(\"categories_is_required\")\r\n    ),\r\n    DisplayType: Yup.number().required(translate(\"display_type_is_required\")),\r\n    Sizes:\r\n      DisplayType === 0\r\n        ? Yup.array().of(\r\n          Yup.object().shape({\r\n            name: Yup.string().required(translate(\"size_name_is_Required\")),\r\n            secondName: Yup.string().required(\r\n              translate(\"second_size_name_is_Required\")\r\n            ),\r\n            price: Yup.number().nullable().required(\"price_is_Required\"),\r\n          })\r\n        )\r\n        : Yup.array(),\r\n    Additions:\r\n      DisplayType === 0\r\n        ? Yup.array().of(\r\n          Yup.object().shape({\r\n            name: Yup.string().required(\r\n              translate(\"add_name_ons_item_is_Required\")\r\n            ),\r\n            secondName: Yup.string().required(\r\n              translate(\"add_second_name_ons_item_is_Required\")\r\n            ),\r\n            price: Yup.number()\r\n              .nullable()\r\n              .required(translate(\"price_is_required\")),\r\n          })\r\n        )\r\n        : Yup.array(),\r\n    Price:\r\n      DisplayType === 1\r\n        ? Yup.string().required(translate(\"meal_price_is_Required\"))\r\n        : Yup.string(),\r\n    Currency: Yup.string(),\r\n    Hour: Yup.string().required(translate(\"hour_is_required\")),\r\n    Min: Yup.string().required(translate(\"min_is_required\"))\r\n  });\r\n\r\n  const defaultValues = {\r\n    Name: \"\",\r\n    SecondName: \"\",\r\n    Description: \"\",\r\n    SecondDescription: \"\",\r\n    ImageUrl: \"\",\r\n    Cal: \"\",\r\n    // PreparingTime: \"\",\r\n    ResturantCategoryId: \"\",\r\n    // Type: \"0\",\r\n    DisplayType: id ? id : 0,\r\n    Sizes: [],\r\n    Additions: [],\r\n    Currency: \"AED\",\r\n    Hour: '',\r\n    Min: ''\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(MealFormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const increaseHourHandler = () => {\r\n    if (hour !== 23) {\r\n      if (hour < 10) {\r\n        setHour((prev) => prev + 1)\r\n        setValue(\"Hour\", `0${hour + 1}`, {\r\n          shouldValidate: true,\r\n        })\r\n      } else {\r\n        setHour((prev) => prev + 1)\r\n        setValue(\"Hour\", hour + 1, {\r\n          shouldValidate: true,\r\n        })\r\n      }\r\n\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  const decreaseHourHandler = () => {\r\n    if (hour !== 0) {\r\n      if (hour < 10) {\r\n        setHour((prev) => prev - 1)\r\n        setValue(\"Hour\", `0${hour - 1}`, {\r\n          shouldValidate: true,\r\n        })\r\n      } else {\r\n        setHour((prev) => prev - 1)\r\n        setValue(\"Hour\", hour - 1, {\r\n          shouldValidate: true,\r\n        })\r\n      }\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  const increaseMinHandler = () => {\r\n    if (min !== 59) {\r\n      if (hour < 10) {\r\n        setMin((prev) => prev + 1)\r\n        setValue(\"Min\", `0${min + 1}`, {\r\n          shouldValidate: true,\r\n        })\r\n      } else {\r\n        setMin((prev) => prev + 1)\r\n        setValue(\"Min\", min + 1, {\r\n          shouldValidate: true,\r\n        })\r\n      }\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  const decreaseMinHandler = () => {\r\n    if (min !== 0) {\r\n      if (hour < 10) {\r\n        setMin((prev) => prev - 1)\r\n        setValue(\"Min\", `0${min - 1}`, {\r\n          shouldValidate: true,\r\n        })\r\n      } else {\r\n        setMin((prev) => prev - 1)\r\n        setValue(\"Min\", min - 1, {\r\n          shouldValidate: true,\r\n        })\r\n      }\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n  const watchMealPhoto = watch(\"ImageUrl\");\r\n\r\n  let formData = new FormData();\r\n\r\n  const onSubmit = async (data) => {\r\n    setData(data);\r\n    //  handleOpen();\r\n    console.log(data)\r\n    const { Hour, Min } = data\r\n    const PreparingTime = `${Hour}:${Min}:00`\r\n    console.log(PreparingTime)\r\n\r\n    try {\r\n      formData.append(\"Name\", data.Name);\r\n      formData.append(\"SecondName\", data.SecondName);\r\n      formData.append(\"Description\", data.Description);\r\n      formData.append(\"SecondDescription\", data.SecondDescription);\r\n      formData.append(\"ImageUrl\", file);\r\n      formData.append(\"Cal\", data.Cal);\r\n      formData.append(\"PreparingTime\", 0);\r\n      formData.append(\"ResturantCategoryId\", data.ResturantCategoryId);\r\n\r\n      if (DisplayType === 0) {\r\n        formData.append(\"DisplayType\", 0);\r\n        const arrayOfAdditions = JSON.stringify(data.Additions);\r\n        formData.append(\"Additions\", arrayOfAdditions);\r\n        const arrayOfSizes = JSON.stringify(data.Sizes);\r\n        formData.append(\"Sizes\", arrayOfSizes);\r\n\r\n        dispatch(addProductFullDisplay(formData))\r\n          .unwrap()\r\n          .then((_) => alert(\"You Added Meal Successfuly !!\"))\r\n          .catch((_) => alert(\"Failed\"));\r\n      }\r\n      if (DisplayType === 1) {\r\n        formData.append(\"Price\", data.Price);\r\n        for (const value of formData.values()) {\r\n          console.log(value);\r\n        }\r\n        dispatch(addProductMiniDisplay(formData))\r\n          .unwrap()\r\n          .then((_) => {\r\n            dispatch(getResturantProductDetails(newMealId));\r\n            setOpen(true);\r\n          })\r\n          .catch((_) => alert(\"Failed\"));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getRestaurantMealsCategories({\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_meal`)}\r\n    </Typography>,\r\n  ];\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Meal</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ----- Title -----  */}\r\n          <Typography variant=\"h5\" color=\"#ffcc63\" mb=\"24px\">\r\n            {translate(`add_new_meal`)}\r\n          </Typography>\r\n\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* ************ Start Add New Meal  (Main Form)************/}\r\n            <Grid container rowSpacing={2} columnSpacing={8}>\r\n              {/* ------------ Left Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/* Display Type input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"DisplayType\"\r\n                      label={translate(\"display_type\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        if (e.target.value === 2) {\r\n                          navigate(\"add-combo\");\r\n                        }\r\n                        setDisplayType(e.target.value);\r\n                        setValue(\"DisplayType\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/employee/bigArrow.svg\"\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"21px\",\r\n                            }}\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      <MenuItem hidden />\r\n                      <MenuItem value={0}>\r\n                        {translate(\"meals_with_sizes\")}\r\n                      </MenuItem>\r\n                      <MenuItem value={1}>\r\n                        {translate(\"meals_without_sizes\")}\r\n                      </MenuItem>\r\n                      <MenuItem value={2}>{translate(\"combo_offer\")}</MenuItem>\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/* meal name en  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Name\"\r\n                      label={translate(\"meal_name_en\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal name ar  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"SecondName\"\r\n                      label={translate(\"meal_name_ar\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal photo input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"ImageUrl\"\r\n                      type=\"file\"\r\n                      label={translate(\"meal_photo\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchMealPhoto ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setFile(e.target.files[0]);\r\n                        setValue(\"ImageUrl\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"licenses\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal  calories  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Cal\"\r\n                      type=\"text\"\r\n                      label={translate(\"calories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal prepration time  input */}\r\n                  <Grid item xs={12} md={3}>\r\n                    <RHFTextField\r\n                      name=\"Hour\"\r\n                      type=\"text\"\r\n                      label={translate(\"hour\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      value={hour}\r\n\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            position=\"end\"\r\n                            sx={{\r\n                              display: 'flex',\r\n                              flexDirection: 'column',\r\n                              height: '30px',\r\n                              justifyContent: 'space-around',\r\n                              alignItems: 'center',\r\n                            }}\r\n                          >\r\n                            <img\r\n                              onClick={() => {\r\n                                increaseHourHandler()\r\n                              }}\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                              style={{\r\n                                cursor: 'pointer',\r\n                                transform: 'rotate(-180deg)'\r\n                              }}\r\n                            />\r\n                            <img\r\n                              onClick={() => {\r\n                                decreaseHourHandler()\r\n                              }}\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                              style={{ cursor: 'pointer' }}\r\n                            />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n\r\n                  <Grid item xs={12} md={3}>\r\n                    <RHFTextField\r\n                      name=\"Min\"\r\n                      type=\"text\"\r\n                      label={translate(\"min\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      value={min}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            position=\"end\"\r\n                            sx={{\r\n                              display: 'flex',\r\n                              flexDirection: 'column',\r\n                              height: '30px',\r\n                              justifyContent: 'space-around',\r\n                              alignItems: 'center',\r\n                            }}\r\n                          >\r\n                            <img\r\n                              onClick={increaseMinHandler}\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                              style={{\r\n                                cursor: 'pointer',\r\n                                transform: 'rotate(-180deg)'\r\n                              }}\r\n                            />\r\n                            <img\r\n                              onClick={decreaseMinHandler}\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                              style={{\r\n                                cursor: 'pointer',\r\n                              }}\r\n                            />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* meal category input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"ResturantCategoryId\"\r\n                      label={translate(\"categories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    >\r\n                      {mealsCategory.map((option, index) => (\r\n                        <>\r\n                          <option hidden />\r\n                          <option key={index} value={option.id}>\r\n                            {option.name}\r\n                          </option>\r\n                        </>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/* ###################### Case of DispalyType === 1 ######################  */}\r\n                  {/* meal Price en  input */}\r\n                  {DisplayType === 1 && (\r\n                    <Grid item xs={12}>\r\n                      <RHFTextField\r\n                        name=\"Price\"\r\n                        label={translate(\"meal_price\")}\r\n                        type=\"text\"\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------------ Right Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2}>\r\n                  {/* Description En Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"Description\"\r\n                      label={translate(\"description_English\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* Description Ar Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"SecondDescription\"\r\n                      label={translate(\"description_arabic\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ************* Start additions Form (Secondary Form) *************/}\r\n\r\n            {/* ###################### Case of DispalyType === 0 ######################  */}\r\n            {DisplayType === 0 && (\r\n              <Grid container columnSpacing={8} mt=\"50px\">\r\n                {/* ------------ Left Side Inputs ------- */}\r\n                <Grid item xs={12} md={6}>\r\n                  {/*  title and add action  */}\r\n                  <Grid item xs={12}>\r\n                    <Box sx={boxTypoStyle}>\r\n                      <Typography fontWeight={\"400\"} sx={typo1Style}>\r\n                        {translate(\"item_sizes\")}\r\n                      </Typography>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        onClick={addMealSizeHandler}\r\n                        sx={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/employee/addIcon.svg\"\r\n                          alt=\"\"\r\n                          style={img2Style}\r\n                        />\r\n                        <Typography sx={typo2Style}>\r\n                          {translate(\"add_size\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </Grid>\r\n\r\n                  {mealItems.itemSizes.map((e, index) => (\r\n                    <Grid container columnSpacing={2} key={index}>\r\n                      {/* meal size1 input */}\r\n                      <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                        <RHFTextField\r\n                          name={`Sizes[${index}][name]`}\r\n                          label={translate(`size${index + 1}`)}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* meal size1 input */}\r\n                      <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                        <RHFTextField\r\n                          name={`Sizes[${index}][secondName]`}\r\n                          label={translate(`size${index + 1}`)}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* meal size1 Price input */}\r\n                      <Grid item xs={12} sm={12} position=\"relative\" mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Sizes[${index}][price]`}\r\n                          type=\"number\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                          placeholder={translate(`price`)}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <RHFSelect\r\n                                name=\"Currency\"\r\n                                sx={{\r\n                                  ...transparentBorderTxtField,\r\n                                  width: \"80px\",\r\n                                }}\r\n                                SelectProps={{\r\n                                  native: false,\r\n                                  IconComponent: () => (\r\n                                    <img\r\n                                      src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                      alt=\"\"\r\n                                    />\r\n                                  ),\r\n                                }}\r\n                                onChange={(e) =>\r\n                                  setValue(\"Currency\", e.target.value, {\r\n                                    shouldValidate: true,\r\n                                  })\r\n                                }\r\n                              >\r\n                                <MenuItem value=\"AED\">AED</MenuItem>\r\n                                <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                              </RHFSelect>\r\n                            ),\r\n                          }}\r\n                        />\r\n                        {index >= 0 && (\r\n                          <IconButton\r\n                            onClick={removeMealSizeHandler}\r\n                            sx={{\r\n                              position: \"absolute\",\r\n                              right: { xs: \"-30px\", md: \"-35px\" },\r\n                              top: { xs: \"-15px\", sm: \"10px\" },\r\n                            }}\r\n                          >\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          </IconButton>\r\n                        )}\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n\r\n                {/* ------------ Right Side Inputs ------- */}\r\n                <Grid item xs={12} md={6}>\r\n                  {/*  title and add action  */}\r\n                  <Grid item xs={12}>\r\n                    <Box sx={boxTypoStyle}>\r\n                      <Typography fontWeight=\"400\" sx={typo1Style}>\r\n                        {translate(\"add_ons\")}\r\n                      </Typography>\r\n                      <Box\r\n                        display=\"flex\"\r\n                        alignItems=\"center\"\r\n                        onClick={addMealAdditionsHandler}\r\n                        sx={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/employee/addIcon.svg\"\r\n                          alt=\"\"\r\n                          style={img2Style}\r\n                        />\r\n\r\n                        <Typography sx={typo2Style}>\r\n                          {translate(\"add_item\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  </Grid>\r\n\r\n                  {mealItems.itemAdditions.map((e, index) => (\r\n                    <Grid container columnSpacing=\"16px\" key={index}>\r\n                      {/* name add-ons Price input */}\r\n                      <Grid item xs={12} sm={6} mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Additions[${index}][name]`}\r\n                          label={translate(\"item_name\")}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      {/* secondName add-ons Price input */}\r\n                      <Grid item xs={12} sm={6} mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Additions[${index}][secondName]`}\r\n                          label={translate(\"item_name\")}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n                      {/* meal add-ons Price input */}\r\n                      <Grid item xs={12} sm={12} position=\"relative\" mb=\"16px\">\r\n                        <RHFTextField\r\n                          name={`Additions[${index}][price]`}\r\n                          type=\"number\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                          placeholder={translate(`price`)}\r\n                          InputProps={{\r\n                            startAdornment: (\r\n                              <RHFSelect\r\n                                name=\"Currency\"\r\n                                sx={{\r\n                                  ...transparentBorderTxtField,\r\n                                  width: \"80px\",\r\n                                }}\r\n                                SelectProps={{\r\n                                  native: false,\r\n                                  IconComponent: () => (\r\n                                    <img\r\n                                      src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                      alt=\"\"\r\n                                    />\r\n                                  ),\r\n                                }}\r\n                                onChange={(e) =>\r\n                                  setValue(\"Currency\", e.target.value, {\r\n                                    shouldValidate: true,\r\n                                  })\r\n                                }\r\n                              >\r\n                                <MenuItem value=\"AED\">AED</MenuItem>\r\n                                <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                              </RHFSelect>\r\n                            ),\r\n                          }}\r\n                        />\r\n\r\n                        <IconButton\r\n                          onClick={removeMealAdditionsmHandler}\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            right: { xs: \"-30px\", md: \"-35px\" },\r\n                            top: { xs: \"-15px\", sm: \"10px\" },\r\n                          }}\r\n                        >\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n\r\n            {/* =========@@ Action Button and Section @@========*/}\r\n            <Grid container columnSpacing={8}>\r\n              <Grid item xs={12} md={6} />\r\n              <Grid item xs={12} md={6}>\r\n                <Box sx={myButtonsBoxStyle}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    sx={outLinedButtonStyle}\r\n                    onClick={() => navigate(\"/employee/menu\")}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n\r\n                  <LoadingButton\r\n                    variant=\"contained\"\r\n                    sx={containedButtonStyle}\r\n                    type=\"submit\"\r\n                    loading={isLoadingAddProduct}\r\n                  >\r\n                    {translate(`preview`)}\r\n                  </LoadingButton>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n      {open && (\r\n        <ConfirmAddMealModal open={open} onClose={handleClose} data={data} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\MealDetailsPage.js",["2704","2705","2706","2707","2708","2709","2710","2711","2712","2713","2714","2715","2716"],[],"import React, { useEffect, useState } from \"react\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// @Mui\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  IconButton,\r\n  Button,\r\n  Stack,\r\n  useTheme,\r\n  Container,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { updateMealStatus } from \"../../../redux/services/menu_restaurant_service\";\r\n\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Link from \"@mui/material/Link\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Image from \"../../../components/image/Image\";\r\n// sectionsComponents\r\nimport DeleteItemPopUp from \"../../../section/@employee/menu/details/DeleteItemPopUp\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getResturantProductDetails } from \"../../../redux/services/menu_restaurant_service\";\r\nimport * as URLS from \"../../../urls\";\r\nimport { deleteRestaurentProduct } from \"../../../redux/services/menu_restaurant_service\";\r\nimport { updateCurrentStatus } from \"../../../redux/services/menu_restaurant_service\";\r\nimport { getRestaurantMinimalInfo } from \"../../../redux/services/restaurant_service\";\r\nimport { getRestaurantMenu } from \"../../../redux/services/menu_restaurant_service\";\r\n\r\n// ---------------------------------------------------------------------------\r\n// --------Style ------------\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"39px 20px 50px 20px\",\r\n    sm: \"39px 32px 50px 32px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst availableSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4EE476\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst notAvailableSelectSx = {\r\n  ...availableSelectSx,\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4E6FE4\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n};\r\n\r\nconst subHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  marginBottom: \"32px\",\r\n  alignItems: \"center\",\r\n};\r\nconst statusTextSx = {\r\n  color: \"#4EE476\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"8px\",\r\n};\r\nconst constentHolderSx = {\r\n  pt: { xs: \"25px\", md: \"0px\" },\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  pl: { sm: \"30px\", md: \"50px\" },\r\n};\r\n\r\nconst rateHolderSx = {\r\n  p: \"4px 8px\",\r\n  display: \"flex\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst titleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  paddingLeft: \"13px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst mainTextSx = {\r\n  fontWeight: \"700\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n  color: \"#FFCC63\",\r\n  paddingRight: \"16px\",\r\n};\r\n\r\nconst rateTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  paddingLeft: \"5px\",\r\n};\r\n\r\nconst numberTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  paddingLeft: \"10px\",\r\n};\r\n\r\nconst contentTextSx = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst gridBoxStyle = {\r\n  p: \"32px 24px\",\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n  boxShadow: \"\",\r\n  borderRadius: \"16px\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n};\r\n\r\nconst mainTitleStyle = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"16px\",\r\n  paddingBottom: \"18px\",\r\n};\r\n\r\nconst mimiTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  opacity: 0.74,\r\n};\r\n\r\nconst priceTextSx = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"24px\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"#4EE476\",\r\n};\r\n\r\nconst headerContainerSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  px: { xs: \"15px\", sm: \"23px\", lg: \"32px\" },\r\n};\r\n\r\nconst switchSx = {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  padding: \"9px 13px 25px 12px\",\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-2px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(25px)\",\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#FFCC63\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\n\r\nconst busySx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"red\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\n\r\nexport default function MealDetailsPage() {\r\n  const { mealId } = useSelector((state) => state.control);\r\n\r\n  const { productDetailes, menuRestaurent } = useSelector(\r\n    (state) => state.menuRestaurant\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { restStatus } = useSelector((state) => state.branches);\r\n\r\n  const [availableChecked, setAvailableChecked] = useState(\"\");\r\n\r\n  const [orderStatus, setOrderStatus] = useState(\r\n    menuRestaurent[mealId]?.available\r\n  );\r\n\r\n  const { mealStatusIsUpdated } = useSelector((state) => state.menuRestaurant);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const theme = useTheme();\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`meal_detail`)}\r\n    </Typography>,\r\n  ];\r\n  useEffect(() => {\r\n    dispatch(getResturantProductDetails(mealId));\r\n    dispatch(getRestaurantMinimalInfo({ Id: branchId }))\r\n      .unwrap()\r\n      .then((result) => {\r\n        setAvailableChecked(result.data.status);\r\n      });\r\n  }, [dispatch, availableChecked, mealStatusIsUpdated, menuRestaurent]);\r\n\r\n  const handleChange = (e) => {\r\n    dispatch(\r\n      updateCurrentStatus({\r\n        restaurantId: branchId,\r\n        currentstatus: availableChecked ? 0 : 1,\r\n      })\r\n    )\r\n      .unwrap()\r\n      .then(() => setAvailableChecked(!availableChecked));\r\n  };\r\n\r\n  const onChangeStatusHandler = (e) => {\r\n    setOrderStatus(e.target.value);\r\n    dispatch(\r\n      updateMealStatus({\r\n        id: mealId,\r\n        val: e.target.value,\r\n      })\r\n    );\r\n  };\r\n  // -------------- JSX Code ----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Meal Details</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* ******* Delete Item Pop Up ******** */}\r\n        <DeleteItemPopUp open={openConfirm} onClose={handleCloseConfirm} />\r\n\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {/* ********* Start Page Header *********** */}\r\n        <Stack sx={{ ...headerContainerSx, mb: \"48px\" }}>\r\n          {/* ------- Branch Logo ------- */}\r\n          <Box display=\"flex\" alignItems=\"center\" my=\"12px\">\r\n            <Image\r\n              src={\r\n                localStorage.getItem(\"facilityType\") === \"1\"\r\n                  ? URLS.baseImageURL + `market/${restStatus?.imgUrl}`\r\n                  : URLS.baseImageURL + `resturant/${restStatus?.imgUrl}`\r\n              }\r\n              sx={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          {/* ------- title and status ------- */}\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            flexGrow={1}\r\n          >\r\n            <Typography\r\n              color=\"#121212\"\r\n              ml={{ xs: \"5px\", sm: \"25px\" }}\r\n              variant=\"h5\"\r\n            >\r\n              {restStatus?.name}\r\n              <span> </span> {translate(`overview`)}\r\n            </Typography>\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              flexDirection={{ xs: \"column\", sm: \"row\" }}\r\n            >\r\n              {availableChecked ? (\r\n                <Typography\r\n                  sx={{ ...highLightTextSx, mr: { xs: \"0px\", sm: \"20px\" } }}\r\n                >\r\n                  {translate(`available`)}\r\n                </Typography>\r\n              ) : (\r\n                <Typography sx={{ ...busySx, mr: { xs: \"0px\", sm: \"20px\" } }}>\r\n                  {translate(`busy`)}\r\n                </Typography>\r\n              )}\r\n\r\n              <Switch\r\n                sx={{ ...switchSx }}\r\n                checked={restStatus.status}\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Stack>\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ******* Start Title and Actions Button ******** */}\r\n          <Box sx={{ ...subHolderSx }}>\r\n            {/* Title */}\r\n            <Box display=\"flex\">\r\n              <IconButton\r\n                disableRipple\r\n                onClick={() => {\r\n                  navigate(\"/employee/menu\");\r\n                }}\r\n                sx={{\r\n                  width: \"25px\",\r\n                  transform: theme.direction === \"rtl\" ? \"rotate(180deg)\" : \"\",\r\n                }}\r\n              >\r\n                <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n              </IconButton>\r\n\r\n              <Typography\r\n                variant=\"h5\"\r\n                sx={{ ...titleSx }}\r\n                onClick={() => {\r\n                  navigate(\"/employee/menu\");\r\n                }}\r\n              >\r\n                {translate(`back_to_menu`)}\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* actions Btn */}\r\n            <Box display=\"flex\">\r\n              <IconButton\r\n                disableTouchRipple\r\n                disableRipple\r\n                sx={{ p: \"0px\" }}\r\n                onClick={() => navigate(\"edit-meal\")}\r\n              >\r\n                <img\r\n                  src=\"/assets/icons/employee/pen.svg\"\r\n                  alt=\"\"\r\n                  width=\"44px\"\r\n                  height=\"44px\"\r\n                />\r\n              </IconButton>\r\n\r\n              <IconButton\r\n                disableTouchRipple\r\n                disableRipple\r\n                sx={{ p: \"0px\" }}\r\n                onClick={() => {\r\n                  handleOpenConfirm();\r\n                }}\r\n              >\r\n                <img\r\n                  src=\"/assets/icons/employee/toolTip.svg\"\r\n                  alt=\"\"\r\n                  width=\"44px\"\r\n                  height=\"44px\"\r\n                />\r\n              </IconButton>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* ******* Start Meal Deatail ******** */}\r\n          <Grid container mb=\"40px\">\r\n            {/* Meal Image */}\r\n            <Grid item xs={12} sm={4.5} md={3.5}>\r\n              <img\r\n                src={`${URLS.baseImageURL}product/${productDetailes?.imageUrl}`}\r\n                alt=\"\"\r\n                style={{\r\n                  maxWidth: \"300px\",\r\n                  width: \"100%\",\r\n                  height: \"206px\",\r\n                  margin: \"auto\",\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Meal Info */}\r\n            <Grid item xs={12} sm={7.5} md={8.5}>\r\n              <Box sx={{ ...constentHolderSx }}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                  <Box display=\"flex\">\r\n                    <Typography sx={{ ...mainTextSx }}>\r\n                      {productDetailes?.name}\r\n                    </Typography>\r\n\r\n                    <Box sx={{ ...rateHolderSx }}>\r\n                      <img src=\"/assets/icons/employee/Vector.svg\" alt=\"img\" />\r\n                      <Typography sx={{ ...rateTextSx }}>\r\n                        {productDetailes?.rate}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Box>\r\n\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Typography sx={{ ...statusTextSx }}>\r\n                      {translate(\"available\")}\r\n                    </Typography>\r\n                    <img src=\"/assets/icons/employee/arrow.svg\" alt=\"\" />\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Typography sx={{ ...mainTextSx }}>\r\n                  {productDetailes?.secondName}\r\n                </Typography>\r\n                <Box py=\"25px\" display=\"flex\">\r\n                  <Box display=\"flex\" pr=\"18px\">\r\n                    <img src=\"/assets/icons/employee/icon2.svg\" alt=\"\" />\r\n                    <Typography sx={{ ...numberTextSx }}>\r\n                      {productDetailes?.cal}\r\n                      {translate(\"KCAL\")}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display={\"flex\"}>\r\n                    <img src=\"/assets/icons/employee/icon3.svg\" alt=\"\" />\r\n                    <Typography sx={{ ...numberTextSx }}>\r\n                      {productDetailes?.prepareTime}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n                <Typography sx={{ ...contentTextSx }}>\r\n                  {productDetailes?.descreption}\r\n                </Typography>\r\n\r\n                <Typography sx={{ ...contentTextSx }}>\r\n                  {productDetailes?.secondDescreption}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* ******* Start Meals Sizes and Addditions ******** */}\r\n          {productDetailes?.display == 0 ? (\r\n            <Grid container spacing={3}>\r\n              {/* ********** Meals Sizes ***********/}\r\n              <Grid item xs={12} sm={6} lg={6}>\r\n                <Box sx={gridBoxStyle}>\r\n                  <Typography sx={mainTitleStyle}>\r\n                    {translate(\"meal_sizes\")}\r\n                  </Typography>\r\n                  {productDetailes?.sizes.map((row, index) => (\r\n                    <Box\r\n                      paddingBottom={\"24px\"}\r\n                      display={\"flex\"}\r\n                      justifyContent={\"space-between\"}\r\n                    >\r\n                      <Typography sx={{ ...mimiTextSx }}>\r\n                        {row?.name}\r\n                      </Typography>\r\n\r\n                      <Typography sx={{ ...mimiTextSx }}>\r\n                        {row?.secondName}\r\n                      </Typography>\r\n\r\n                      <Typography sx={{ ...priceTextSx }}>\r\n                        {row?.currency}\r\n                        {row?.price}\r\n                      </Typography>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n\r\n              {/* ********** Meals Addtions ***********/}\r\n              <Grid item xs={12} sm={6} lg={6}>\r\n                <Box sx={gridBoxStyle}>\r\n                  <Typography sx={mainTitleStyle}>\r\n                    {translate(\"add_ons\")}\r\n                  </Typography>\r\n                  {productDetailes?.additions.map((row, index) => (\r\n                    <Box\r\n                      paddingBottom={\"24px\"}\r\n                      display={\"flex\"}\r\n                      justifyContent={\"space-between\"}\r\n                    >\r\n                      <Typography sx={{ ...mimiTextSx }}>\r\n                        {row?.name}\r\n                      </Typography>\r\n\r\n                      <Typography sx={{ ...mimiTextSx }}>\r\n                        {row?.secondName}\r\n                      </Typography>\r\n                      <Typography sx={{ ...priceTextSx }}>\r\n                        {row?.price}\r\n                      </Typography>\r\n                    </Box>\r\n                  ))}\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          ) : (\r\n            <Box></Box>\r\n          )}\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditComboOfferPage.js",["2717","2718","2719","2720","2721","2722","2723","2724","2725"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-emotion\r\nimport { useTheme } from \"@emotion/react\";\r\n//mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { RHFSelect, RHFTextField } from \"../../../components/hook-form\";\r\nimport FormProvider from \"../../../components/hook-form/FormProvider\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport {\r\n  AddComboOfferMeal,\r\n  getProductBasicInfo,\r\n  getRestaurantMealsCategories,\r\n  updateComboOfferMeal,\r\n} from \"../../../redux/services/menu_restaurant_service\";\r\nimport { getComboOfferDetails } from \"../../../redux/services/menu_restaurant_service\";\r\nimport { setComboInfo } from \"../../../redux/slices/control\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport * as URLS from \"../../../urls\";\r\n// ---------------------------------------------------------------------------------------------\r\n\r\n// ------------- Style --------------\r\nconst formHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  p: {\r\n    xs: \"30px 20px 50px 20px\",\r\n    md: \"30px 44px 50px 44px\",\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"20px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"#BCBCBC\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst selectFieldSX = {\r\n  ...txtFieldBorderStyle,\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"#BCBCBC\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"20px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  // minWidth: { xs: '145px', sm: '206px' },\r\n  // boxShadow:\r\n  //     \"0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: 300,\r\n  color: \"#ffcc63\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#000000\",\r\n  fontWeight: 400,\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontWeight: 400,\r\n  fontSize: \"14.2428px\",\r\n  lineHeight: \"22px\",\r\n  textDecoration: \"underline\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst selectItemHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  mb: \"16px\",\r\n  position: \"relative\",\r\n};\r\n\r\nexport default function EditComboOfferPage() {\r\n  const dispatch = useDispatch();\r\n  const { branchId } = useSelector((state) => state.control);\r\n  const {\r\n    comboOfferDetails,\r\n    mealsCategory,\r\n    meals,\r\n    isEditCombo,\r\n    isLoadingupdateComboOfferMeal,\r\n  } = useSelector((state) => state.menuRestaurant);\r\n  const { ComboOfferInfo, ComboId } = useSelector((state) => state.control);\r\n  // const ComboOfferInfo = JSON.parse(localStorage.getItem('ComboOfferInfo'))\r\n  const { state } = useLocation();\r\n\r\n  console.log(ComboId);\r\n  // console.log(comboOfferDetails)\r\n  console.log(ComboOfferInfo);\r\n\r\n  console.log(ComboOfferInfo?.categories);\r\n  let FirstMeals = [ComboOfferInfo?.categories[0]];\r\n  let SecondMeals = [ComboOfferInfo?.categories[1]];\r\n\r\n  // console.log(FirstMeals[0]['products']?.length)\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n  const { translate } = useLocales();\r\n  const navigate = useNavigate();\r\n\r\n  const ComboID = localStorage.getItem(\"ComboID\");\r\n  const [Image, setImage] = useState(null);\r\n\r\n  const initialState = {\r\n    firstMealItems: [...Array(FirstMeals[0]?.products?.length)] || [\r\n      ...Array(1),\r\n    ],\r\n    secondMealItems: [...Array(SecondMeals[0]?.products?.length)] || [\r\n      ...Array(1),\r\n    ],\r\n  };\r\n  // const initialState = {\r\n  //   firstMealItems:  [...Array(1)],\r\n  //   secondMealItems:  [...Array(1)],\r\n  // };\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addFirstMealItemHandler = () => {\r\n    setMealItems((mealItems) => ({\r\n      ...mealItems,\r\n      firstMealItems: [\r\n        ...mealItems.firstMealItems,\r\n        mealItems.firstMealItems.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for first meal\r\n  const removeFirstMealItemHandler = () => {\r\n    let { firstMealItems } = mealItems;\r\n    if (firstMealItems.length > 1) {\r\n      // console.log(firstMealItems)\r\n      let newArr = firstMealItems.slice(1);\r\n      // console.log(newArr)\r\n      setMealItems((mealItems) => ({\r\n        ...mealItems,\r\n        firstMealItems: [...newArr],\r\n      }));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  // to add select item for Second meal\r\n  const addSecondMealItemHandler = () => {\r\n    setMealItems((MealItems) => ({\r\n      ...MealItems,\r\n      secondMealItems: [\r\n        ...mealItems.secondMealItems,\r\n        mealItems.secondMealItems.push(),\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // to remove select item for Second meal\r\n  const removeSecondMealItemHandler = () => {\r\n    let { secondMealItems } = mealItems;\r\n    if (secondMealItems.length > 1) {\r\n      // console.log(firstMealItems)\r\n      let newArr = secondMealItems.slice(1);\r\n      // console.log(newArr)\r\n      setMealItems((mealItems) => ({\r\n        ...mealItems,\r\n        secondMealItems: [...newArr],\r\n      }));\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const ComboMealSchema = Yup.object().shape({\r\n    DisplayType: Yup.number(),\r\n    CategoryId: Yup.string().required(translate(\"category_id_is_required\")),\r\n    Image: Yup.string().required(translate(\"photo_is_required\")),\r\n    ExpireDate: Yup.string().required(translate(\"expire_date_required\")),\r\n    Price: Yup.string().required(translate(\"price_is_required\")),\r\n    Description: Yup.string().required(translate(\"description_is_required\")),\r\n    SecondDescription: Yup.string().required(\r\n      translate(\"second_description_is_required\")\r\n    ),\r\n    Name: Yup.string().required(translate(\"first_name_is_required\")),\r\n    SecondName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Currency: Yup.string(),\r\n    FirstCategories: Yup.array().of(\r\n      Yup.object().shape({\r\n        title: Yup.string().required(translate(\"first_name_is_required\")),\r\n        secondTitle: Yup.string().required(\r\n          translate(\"second_name_is_required\")\r\n        ),\r\n        products: Yup.array().of(\r\n          Yup.object().shape({\r\n            productId: Yup.string().required(translate(\"first_name_is_Req\")),\r\n            quantity: Yup.number().required(translate(\"select_item\")),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n\r\n    SecondCategories: Yup.array().of(\r\n      Yup.object().shape({\r\n        title: Yup.string().required(translate(\"first_name_is_required\")),\r\n        secondTitle: Yup.string().required(\r\n          translate(\"second_name_is_required\")\r\n        ),\r\n        products: Yup.array().of(\r\n          Yup.object().shape({\r\n            productId: Yup.string().required(translate(\"first_name_is_Req\")),\r\n            quantity: Yup.number(),\r\n          })\r\n        ),\r\n      })\r\n    ),\r\n  });\r\n\r\n  const defaultValues = {\r\n    DisplayType: 2,\r\n    CategoryId: ComboOfferInfo?.categoryId,\r\n    Image: \"\",\r\n    ExpireDate: ComboOfferInfo?.expireDate,\r\n    Price: +`${ComboOfferInfo?.price}`,\r\n    Description: ComboOfferInfo?.description,\r\n    SecondDescription: ComboOfferInfo?.secondDescription,\r\n    Name: ComboOfferInfo?.name,\r\n    SecondName: ComboOfferInfo?.secondName,\r\n    Currency: \"AED\",\r\n    FirstCategories: FirstMeals,\r\n    SecondCategories: SecondMeals,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ComboMealSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  // watch Offer Photo if value changed\r\n  const watchPic = watch(\"Image\");\r\n\r\n  const onSubmit = async (data, event) => {\r\n    console.log(data);\r\n\r\n    let { FirstCategories, SecondCategories, ExpireDate } = data;\r\n    ExpireDate = convertDateFormat(ExpireDate);\r\n    let Categories = [...FirstCategories, ...SecondCategories];\r\n    console.log(Categories);\r\n    const formData = new FormData();\r\n    formData.append(\"CategoryId\", data.CategoryId);\r\n\r\n    formData.append(\"Image\", Image);\r\n\r\n    formData.append(\"ExpireDate\", ExpireDate);\r\n\r\n    formData.append(\"Price\", +data.Price);\r\n\r\n    formData.append(\"Description\", data.Description);\r\n\r\n    formData.append(\"Name\", data.Name);\r\n\r\n    formData.append(\"SecondName\", data.SecondName);\r\n\r\n    formData.append(\"SecondDescription\", data.SecondDescription);\r\n\r\n    formData.append(\"Categories\", JSON.stringify(Categories));\r\n\r\n    try {\r\n      dispatch(\r\n        updateComboOfferMeal({\r\n          data: formData,\r\n          ComboOfferId: state?.id ? state?.id : ComboID,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_combo_offer`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getComboOfferDetails({\r\n        id: state?.id ? state?.id : ComboId,\r\n        // id: state?.id\r\n      })\r\n    );\r\n    dispatch(setComboInfo(comboOfferDetails[0]));\r\n    dispatch(\r\n      getRestaurantMealsCategories({\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n    dispatch(\r\n      getProductBasicInfo({\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  // ---------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Combo Offer</title>\r\n      </Helmet>\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...formHolderSx }}>\r\n          {/* ********************** Title Holder ******************* */}\r\n          <Typography\r\n            variant=\"h5\"\r\n            sx={{\r\n              ...titleSx,\r\n              cursor: \"pointer\",\r\n              mb: \"24px\",\r\n            }}\r\n          >\r\n            {translate(`edit_combo_offer`)}\r\n          </Typography>\r\n\r\n          {/* ********************** Start add new offer Form ******************* */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container rowSpacing={2} columnSpacing={{ xs: 4, md: 8 }}>\r\n              {/* error Message after submit */}\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {/* ********************** Left Side ******************* */}\r\n              <Grid item xs={12} sm={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/*========== Dispaly Type Photo  ========== */}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"DisplayType\"\r\n                      label={translate(\"display_type\")}\r\n                      sx={{ ...selectFieldSX }}\r\n                      onChange={(e) => {\r\n                        if (e.target.value === 0 || e.target.value === 1) {\r\n                          navigate(\"/employee/menu/add-new-meal\", {\r\n                            state: { id: e.target.value },\r\n                          });\r\n                        }\r\n                        // setDisplayType(e.target.value)\r\n                        // setValue('DisplayType', e.target.value, { shouldValidate: true })\r\n                      }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/employee/bigArrow.svg\"\r\n                            alt=\"\"\r\n                            style={{\r\n                              marginRight: \"21px\",\r\n                            }}\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      <MenuItem value={2}>{translate(\"combo_offer\")}</MenuItem>\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/*========== Offer name  ========== */}\r\n                  <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                      {/*======= offer Name Input ========== */}\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFTextField\r\n                          name=\"Name\"\r\n                          label={translate(\"first_name\")}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFTextField\r\n                          name=\"SecondName\"\r\n                          label={translate(\"second_name\")}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/*========= offer Photo Input and Category ========== */}\r\n                  <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                      {/*========= offer Photo  ========== */}\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFTextField\r\n                          name=\"Image\"\r\n                          label={translate(\"offer_photo\")}\r\n                          type=\"file\"\r\n                          hidden\r\n                          id=\"offerPic\"\r\n                          sx={{\r\n                            ...txtFieldBorderStyle,\r\n                            \"& .MuiOutlinedInput-input\": {\r\n                              color: watchPic ? \"#535353\" : \"transparent\",\r\n                              fontSize: \"14px\",\r\n                            },\r\n                          }}\r\n                          onChange={(e) => {\r\n                            console.log(e.target.files[0]);\r\n                            setImage(e.target.files[0]);\r\n                            setValue(\"Image\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            });\r\n                          }}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  aria-label=\"upload picture\"\r\n                                  component=\"label\"\r\n                                >\r\n                                  <label htmlFor=\"offerPic\">\r\n                                    <img\r\n                                      src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                      alt=\"upload_icon\"\r\n                                    />\r\n                                  </label>\r\n                                </IconButton>\r\n                              </InputAdornment>\r\n                            ),\r\n                          }}\r\n                        />\r\n\r\n                        {\r\n                          ComboOfferInfo?.image &&\r\n                          <Box\r\n                            sx={{\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                              mt: \"12px\",\r\n                              p: '8px',\r\n                              background: '#e1e1e1',\r\n                              borderRadius: '10px',\r\n                              width: 'fit-content',\r\n                              mx: 'auto'\r\n                            }}\r\n                          >\r\n                            {/* <Image/> */}\r\n                            <img\r\n                              src={\r\n                                // ComboOfferInfo?.image\r\n                                //   ?\r\n                                //   (localStorage.getItem(\"facilityType\") === \"1\")\r\n                                //     ?\r\n                                //     URLS.baseImageURL + `product/${ComboOfferInfo?.image}`\r\n                                //     :\r\n                                //     URLS.baseImageURL + `product/${ComboOfferInfo?.image}`\r\n                                //   :\r\n                                  '/assets/images/dashboard/meal.png'\r\n                              }\r\n                              alt=''\r\n                            />\r\n                          </Box>\r\n                        }\r\n\r\n\r\n                      </Grid>\r\n\r\n                      {/*========= offer Category Input  ========== */}\r\n                      <Grid item xs={12} sm={6} md={6}>\r\n                        <RHFSelect\r\n                          name=\"CategoryId\"\r\n                          label={translate(\"categories\")}\r\n                          sx={{ ...selectFieldSX }}\r\n                          onChange={(e) => {\r\n                            setValue(\"CategoryId\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            });\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/employee/bigArrow.svg\"\r\n                                alt=\"\"\r\n                                style={{\r\n                                  marginRight: \"21px\",\r\n                                }}\r\n                              />\r\n                            ),\r\n                          }}\r\n                        >\r\n                          {mealsCategory?.map((category, index) => (\r\n                            <MenuItem value={category?.id} key={index}>\r\n                              {category?.name}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </RHFSelect>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/*======= offer End in Date ======== */}\r\n                  <Grid item xs={12}>\r\n                    <CustomDataPicker\r\n                      name=\"ExpireDate\"\r\n                      textLabel=\"end_in\"\r\n                      inputFormat=\"DD/MM/YYYY\"\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ********************** Right Side ******************* */}\r\n              <Grid item xs={12} sm={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/*============ Offer Price  Input ============ */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"Price\"\r\n                      type=\"number\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      placeholder={translate(`price`)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <RHFSelect\r\n                            name=\"Currency\"\r\n                            sx={{\r\n                              ...transparentBorderTxtField,\r\n                              width: \"80px\",\r\n                            }}\r\n                            SelectProps={{\r\n                              native: false,\r\n                              IconComponent: () => (\r\n                                <img\r\n                                  src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                                  alt=\"\"\r\n                                />\r\n                              ),\r\n                            }}\r\n                            onChange={(e) =>\r\n                              setValue(\"Currency\", e.target.value, {\r\n                                shouldValidate: true,\r\n                              })\r\n                            }\r\n                          >\r\n                            <MenuItem value=\"AED\">AED</MenuItem>\r\n                            <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                          </RHFSelect>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*=========== Offer First  Description Input =========== */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.5}\r\n                      name=\"Description\"\r\n                      label={translate(\"first_description\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          pr: \"0px\",\r\n                          height: \"82px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#BCBCBC\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*=========== Offer Second Description Input =========== */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.5}\r\n                      name=\"SecondDescription\"\r\n                      label={translate(\"second_description\")}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          pr: \"0px\",\r\n                          height: \"82px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#BCBCBC\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ******************** CompoOffer First and Second Meals Selection ******************** */}\r\n            <Grid container rowSpacing={2} columnSpacing={8} mt=\"35px\">\r\n              {/* ****************  First Meal ***************/}\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                {/* --- meal title and action -- */}\r\n                <Stack\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"16px\"\r\n                >\r\n                  <Typography sx={{ ...subTitleSx }}>\r\n                    {translate(`first_meal`)}\r\n                  </Typography>\r\n\r\n                  <Typography\r\n                    sx={{ ...highLightTextSx, cursor: \"pointer\" }}\r\n                    onClick={addFirstMealItemHandler}\r\n                  >\r\n                    {translate(`add_item`)}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                {mealItems?.firstMealItems?.map((_, index) => (\r\n                  <Stack key={index}>\r\n                    {index === 0 && (\r\n                      <Grid container columnSpacing={2}>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`FirstCategories[${0}][title]`}\r\n                            type=\"text\"\r\n                            label={translate(\"first_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`FirstCategories[${0}][secondTitle]`}\r\n                            type=\"text\"\r\n                            label={translate(\"second_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Stack key={index} sx={{ ...selectItemHolderSx }}>\r\n                      <RHFSelect\r\n                        name={`FirstCategories[${0}][products][${index}][productId]`}\r\n                        label={translate(\"select_meal\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        onChange={(e) => {\r\n                          setValue(\r\n                            `FirstCategories[${0}][products][${index}][productId]`,\r\n                            e.target.value,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                          setValue(\r\n                            `FirstCategories[${0}][products][${index}][quantity]`,\r\n                            1,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                      >\r\n                        {meals?.map((meal, index) => (\r\n                          <MenuItem value={meal?.id} key={index}>\r\n                            {meal?.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </RHFSelect>\r\n                      <IconButton\r\n                        onClick={removeFirstMealItemHandler}\r\n                        sx={{\r\n                          position: \"absolute\",\r\n                          right: { xs: \"-25px\", md: \"-35px\" },\r\n                          top: \"10px\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      </IconButton>\r\n                    </Stack>\r\n                  </Stack>\r\n                ))}\r\n              </Grid>\r\n\r\n              {/* ***********  Second Meal **************/}\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                {/* -- meal title and action -- */}\r\n                <Stack\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"16px\"\r\n                >\r\n                  <Typography sx={{ ...subTitleSx }}>\r\n                    {translate(`second_meal`)}\r\n                  </Typography>\r\n\r\n                  <Typography\r\n                    sx={{ ...highLightTextSx, cursor: \"pointer\" }}\r\n                    onClick={addSecondMealItemHandler}\r\n                  >\r\n                    {translate(`add_item`)}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                {mealItems.secondMealItems.map((_, index) => (\r\n                  <Stack key={index}>\r\n                    {index === 0 && (\r\n                      <Grid container columnSpacing={2}>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`SecondCategories[${0}][title]`}\r\n                            label={translate(\"first_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name={`SecondCategories[${0}][secondTitle]`}\r\n                            label={translate(\"second_name\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Stack key={index} sx={{ ...selectItemHolderSx }}>\r\n                      <RHFSelect\r\n                        name={`SecondCategories[${0}][products][${index}][productId]`}\r\n                        label={translate(\"select_item\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        onChange={(e) => {\r\n                          setValue(\r\n                            `SecondCategories[${0}][products][${index}][productId]`,\r\n                            e.target.value,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                          setValue(\r\n                            `SecondCategories[${0}][products][${index}][quantity]`,\r\n                            1,\r\n                            {\r\n                              shouldValidate: true,\r\n                            }\r\n                          );\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                      >\r\n                        {meals?.map((meal, index) => (\r\n                          <MenuItem value={meal?.id} key={index}>\r\n                            {meal?.name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </RHFSelect>\r\n\r\n                      <IconButton\r\n                        onClick={removeSecondMealItemHandler}\r\n                        sx={{\r\n                          position: \"absolute\",\r\n                          right: { xs: \"-25px\", md: \"-35px\" },\r\n                          top: \"10px\",\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      </IconButton>\r\n                    </Stack>\r\n                  </Stack>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* =================@@ Action Button and Section @@================*/}\r\n            <Grid container rowSpacing={2} columnSpacing={8} mt=\"32px\">\r\n              <Grid item xs={12} sm={12} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    onClick={() => navigate(`/employee/menu`)}\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // onClick={onClose}\r\n                    // onClick={() => navigate(-1)}\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                  >\r\n                    {translate(\"cancel\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingupdateComboOfferMeal}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"update_offer\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n/// -------------------------------\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\ConfirmationCodePage.js",["2726","2727","2728","2729","2730","2731","2732","2733","2734","2735","2736"],[],"import React, { useState } from \"react\";\r\n//helemt\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../locales\";\r\nimport * as Yup from \"yup\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport { Alert, Box, Stack, Typography, Grid } from \"@mui/material\";\r\n//mui\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// routes\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\n//toast\r\nimport { MuiOtpInput } from \"mui-one-time-password-input\";\r\nimport {\r\n  confirmEmail,\r\n  confirmPasswordCode,\r\n  resendPasswordCode,\r\n} from \"../../redux/services/auth_service\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\n\r\n// -----------------------------------------------------------------------------\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  paddingBottom: \"23px\",\r\n  textAlign: \"center\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    width: \"60px\",\r\n    textAlign: \"center\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: (theme) => (theme.palette.mode === \"light\" ? \"#EBF4F8\" : \"grey.800\"),\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nexport default function ConfirmationCodePage() {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, Email } = useSelector((state) => state.authentication);\r\n\r\n  const [otp, setOtp] = useState(\"\");\r\n\r\n  const handleChange = (newValue) => {\r\n    setOtp(newValue);\r\n  };\r\n\r\n  const defaultValues = {\r\n    code: \"\",\r\n    role: 3,\r\n  };\r\n\r\n  const methods = useForm({\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      dispatch(\r\n        confirmEmail({\r\n          email: Email,\r\n          verifyCode: otp,\r\n          isEmailUpdated: true,\r\n        })\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  // --------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Verification Code</title>\r\n      </Helmet>\r\n\r\n      <Grid container height=\"100%\">\r\n        {/* ********************* Login Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          {/* __________________ Login Form page ____________ */}\r\n          <Stack sx={{ ...holder, justifyContent: \"center\", height: \"100%\" }}>\r\n            {/* _____ Head of login page ____ */}\r\n            <Stack mb=\"23px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <img src=\"/assets/images/logo/logo2.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              {/* <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <Typography sx={{ ...titleSx, mr: \"8px\" }}>\r\n                  {translate(`welcome_to`)}\r\n                </Typography>\r\n                <img src=\"/assets/images/logo/logo_name.svg\" alt=\"logo\" />\r\n  </Stack>*/}\r\n\r\n              {/*--- instruction message --- */}\r\n              <Typography sx={{ ...subTitleSx, overflowWrap: \"break-word\" }}>\r\n                {translate(\r\n                  `we_sent_an_email_for_reset_your_password_you_need_to_enter_code_within_1_min`\r\n                )}\r\n                <span style={{ textDecoration: \"underline\" }}>{Email}</span>\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of login page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n                <Box\r\n                  display={\"flex\"}\r\n                  justifyContent={\"center\"}\r\n                  flexDirection={\"row\"}\r\n                  textAlign={\"center\"}\r\n                  alignItems={\"center\"}\r\n                >\r\n                  <Box\r\n                    width={{\r\n                      lg: \"100%\",\r\n                      xs: \"100%\",\r\n                      paddingLeft: \"30px\",\r\n                      paddingRight: \"30px\",\r\n                    }}\r\n                    display={\"flex\"}\r\n                    alignItems={\"center\"}\r\n                    justifyContent={\"center\"}\r\n                  >\r\n                    <MuiOtpInput\r\n                      sx={txtFieldBorderStyle}\r\n                      value={otp}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n                {/*-  <Typography\r\n                  sx={{\r\n                    textAlign: \"center\",\r\n                    fontSize: \"14px\",\r\n                    fontWeight: 400,\r\n                    color: \"#535353\",\r\n                    marginBottom: \"24px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => {\r\n                    dispatch(resendPasswordCode(localStorage.getItem(\"email\")));\r\n                  }}\r\n                >\r\n                  {translate(\"resend_code\")}\r\n                </Typography>\r\n             ----- email input -------- \r\n                <RHFTextField\r\n                  name=\"code\"\r\n                  // label={translate(\"Email\")}\r\n                  placeholder={translate(\"verification_code\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />*/}\r\n              </Box>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isLoading}\r\n                  sx={{\r\n                    ...loadingButtonStyle,\r\n                  }}\r\n                  disabled={otp.length != 4 ? true : false}\r\n                >\r\n                  {translate(\"confirm\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ************ image Section ************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={657} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\ResetPasswordPage.js",["2737","2738","2739","2740","2741"],[],"import React, { useState } from \"react\";\r\n//helemt\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../locales\";\r\nimport * as Yup from \"yup\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport { Link, Alert, Box, Stack, Typography, Grid } from \"@mui/material\";\r\n//mui\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\n//toast\r\nimport { toast } from \"react-toastify\";\r\nimport { validateEmail } from \"../../redux/services/auth_service\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\n// -----------------------------------------------------------------------------\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"18px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  paddingBottom: \"23px\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"50px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: (theme) => (theme.palette.mode === \"light\" ? \"#EBF4F8\" : \"grey.800\"),\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  \"&:focus\": {\r\n    bgcolor: \"#fba900\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst signupLinkStyle = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"16px\",\r\n  textDecoration: \"none\",\r\n  fontWeight: 400,\r\n  ml: \"8px\",\r\n  \"&:hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nexport default function ResetPasswordPage() {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading } = useSelector((state) => state.authentication);\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"email_must_be_a_valid_email_address\")\r\n      .required(translate(\"email_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: \"\",\r\n    role: 1,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ResetPasswordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    localStorage.setItem(\"email\", data.email);\r\n    try {\r\n      dispatch(validateEmail(data.email));\r\n    } catch (error) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  // --------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Reset Password</title>\r\n      </Helmet>\r\n\r\n      <Grid container height=\"100%\">\r\n        {/* ********************* Reset Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          {/* __________________ Reset Form page ____________ */}\r\n          <Stack sx={{ ...holder, justifyContent: \"center\", height: \"100%\" }}>\r\n            {/* _____ Head of login page ____ */}\r\n            <Stack mb=\"23px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <img src=\"/assets/images/logo/logo2.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              <Stack\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                mb=\"28px\"\r\n              >\r\n                <Typography sx={{ ...titleSx, mr: \"8px\" }}>\r\n                  {translate(`welcome_to`)}\r\n                </Typography>\r\n                <img\r\n                  src=\"/assets/images/logo/logo_name.svg\"\r\n                  alt=\"logo\"\r\n                  style={{ width: \"120px\", height: \"17px\" }}\r\n                />\r\n              </Stack>\r\n\r\n              {/*--- instruction message --- */}\r\n              <Typography sx={{ ...subTitleSx }}>\r\n                {translate(`please_enter_your_email_to_reset_your_password`)}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of login page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n                {/*------ email input -------- */}\r\n                <RHFTextField\r\n                  name=\"email\"\r\n                  label={translate(\"Email\")}\r\n                  placeholder={translate(\"hellouihut@gmail.com\")}\r\n                  type=\"email\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />\r\n              </Box>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  disableRipple\r\n                  loading={isLoading}\r\n                  sx={{\r\n                    ...loadingButtonStyle,\r\n                  }}\r\n                >\r\n                  {translate(\"confirm_email\")}\r\n                </LoadingButton>\r\n\r\n                {/*--- Sign up Link --- */}\r\n                <Typography\r\n                  color=\"#535353\"\r\n                  fontWeight={400}\r\n                  fontSize=\"16px\"\r\n                  textAlign=\"center\"\r\n                >\r\n                  {translate(\"you_donot_have_an_account\")}\r\n                  <Link\r\n                    to=\"/auth/register\"\r\n                    component={RouterLink}\r\n                    sx={{ ...signupLinkStyle }}\r\n                  >\r\n                    {translate(\"sign_up\")}\r\n                  </Link>\r\n                </Typography>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ************ image Section ************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={657} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\PaymentFormPage.js",["2742","2743","2744","2745","2746","2747","2748","2749"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react router\r\nimport { Link as RouterLink, json } from \"react-router-dom\";\r\n// formen\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Link,\r\n  Alert,\r\n  Box,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  Grid,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// routes\r\nimport { PATH_AUTH } from \"../../routes/paths\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport CustomStepper from \"../../components/custom-stepper\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\nimport {\r\n  addBanAccountInfo,\r\n  reSetAdminInfo,\r\n} from \"../../redux/slices/authentication\";\r\nimport { signupAdmin } from \"../../redux/services/auth_service\";\r\nimport UserAddSuccessfully from \"../../section/@dashboard/users/detailes/UserAddSuccessfully\";\r\nimport RequestSendedSuccessfully from \"../../section/auth/Modal/RequestSendedSuccessfully\";\r\n\r\n// --------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"18px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  marginBottom: \"24px\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    height: \"48px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n  \"& MuiOutlinedInput-input:not([multiple])option\": {\r\n    background: \"red !important\",\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: \"#FFFFFF\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  \"&:focus\": {\r\n    bgcolor: \"#fba900\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst signupLinkStyle = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"16px\",\r\n  textDecoration: \"none\",\r\n  fontWeight: 400,\r\n  ml: \"8px\",\r\n  \"&:hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  height: \"auto\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nexport default function PaymentFormPage() {\r\n  const {\r\n    Latitude,\r\n    Longitude,\r\n    Building,\r\n    Floor,\r\n    Apartment,\r\n    Brand,\r\n    ProfilePicture,\r\n    BankAccounts,\r\n    SocialMediaAccounts,\r\n    FirstName,\r\n    LastName,\r\n    PhoneNumber,\r\n    Gender,\r\n    Email,\r\n    Password,\r\n    DateOfBirth,\r\n    isSubmitAdmin,\r\n    isLoading,\r\n    Photo,\r\n    CoverPhoto,\r\n    CommercialRegister,\r\n    TaxLicense,\r\n    StoreTypeId,\r\n    NationalityId,\r\n  } = useSelector((state) => state.authentication);\r\n\r\n  const initialState = {\r\n    accounts:\r\n      JSON.parse(BankAccounts) !== null\r\n        ? JSON.parse(BankAccounts)\r\n        : [...Array(1)],\r\n  };\r\n\r\n  const [bankAccounts, setBankAccounts] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addBankAccountHandler = () => {\r\n    setBankAccounts((bankAccounts) => ({\r\n      ...bankAccounts,\r\n      accounts: [...bankAccounts.accounts, bankAccounts.accounts.push()],\r\n    }));\r\n  };\r\n\r\n  // to remove bank account\r\n  const removeBankAccountHandler = () => {\r\n    let { accounts } = bankAccounts;\r\n\r\n    let newArr = accounts.slice(1);\r\n\r\n    setBankAccounts((bankAccounts) => ({\r\n      ...bankAccounts,\r\n      accounts: [...newArr],\r\n    }));\r\n  };\r\n\r\n  const { translate } = useLocales();\r\n\r\n  let formData = new FormData();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  useEffect(() => {\r\n    if (isSubmitAdmin === true) {\r\n      setOpen(true);\r\n      dispatch(reSetAdminInfo());\r\n    }\r\n  }, [isSubmitAdmin, open]);\r\n\r\n  const PaymentSchema = Yup.object().shape({\r\n    /* BankAccounts: Yup.array().of(\r\n      Yup.object().shape({\r\n        iban: Yup.string().required(translate(\"iban_is_Required\")),\r\n      })\r\n    ),*/\r\n  });\r\n\r\n  const defaultValues = {\r\n    BankAccounts: JSON.parse(BankAccounts),\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(PaymentSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  useEffect(() => {\r\n    console.log(bankAccounts);\r\n  }, []);\r\n\r\n  const onSubmit = async (data) => {\r\n    const arrayOfBankAccounts = JSON.stringify(data.BankAccounts);\r\n    dispatch(\r\n      addBanAccountInfo({\r\n        BankAccounts:\r\n          data.BankAccounts !== undefined ? arrayOfBankAccounts : null,\r\n      })\r\n    );\r\n\r\n    try {\r\n      formData.append(\"Latitude\", Number(Latitude));\r\n      formData.append(\"Longitude\", Number(Longitude));\r\n      formData.append(\"Brand.Photo\", Photo);\r\n      formData.append(\"Brand.CoverPhoto\", CoverPhoto);\r\n      formData.append(\"Brand.CommercialRegister\", CommercialRegister);\r\n      formData.append(\"Brand.TaxLicense\", TaxLicense);\r\n      formData.append(\"Brand.Name\", Brand.Name);\r\n      formData.append(\"Brand.SecondName\", Brand.SecondName);\r\n      formData.append(\"Brand.WebsiteUrl\", Brand.WebsiteUrl);\r\n      formData.append(\"Brand.StoreTypeId\", StoreTypeId);\r\n      formData.append(\r\n        \"Brand.SocialMediaAccounts\",\r\n        SocialMediaAccounts[0].platformId === undefined\r\n          ? null\r\n          : SocialMediaAccounts\r\n      );\r\n      formData.append(\"Building\", Building);\r\n      formData.append(\"Floor\", Floor);\r\n      formData.append(\"Apartment\", Apartment);\r\n      formData.append(\r\n        \"BankAccounts\",\r\n        arrayOfBankAccounts[0].iban === undefined ? null : arrayOfBankAccounts\r\n      );\r\n      formData.append(\"NationalityId\", Number(NationalityId));\r\n      formData.append(\"FirstName\", FirstName);\r\n      formData.append(\"LastName\", LastName);\r\n      formData.append(\"Gender\", Number(Gender));\r\n      formData.append(\"PhoneNumber\", PhoneNumber);\r\n      formData.append(\"DateOfBirth\", DateOfBirth);\r\n      formData.append(\"Email\", Email);\r\n      formData.append(\"Password\", Password);\r\n      formData.append(\"ProfilePicture\", ProfilePicture);\r\n\r\n      dispatch(signupAdmin(formData));\r\n    } catch (error) {\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  // --------- JSX Code --------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Payment Form Page</title>\r\n      </Helmet>\r\n      <Grid container height={\"100%\"}>\r\n        {/* ********************* Register Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          <Stack sx={{ ...holder, justifyContent: \"center\" }}>\r\n            {/*----------------- Head of payment form page -------------- */}\r\n            <Stack mb=\"22px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\">\r\n                <img src=\"/assets/images/logo/logo.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <Typography sx={{ ...titleSx }}>\r\n                  {translate(`create_account`)}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              {/*---------- Stepper  ------- */}\r\n              <CustomStepper activeStep={3} />\r\n\r\n              {/*---------- instruction message  ------- */}\r\n              <Typography sx={{ ...subTitleSx, mt: \"23px\" }}>\r\n                {translate(`enter_your_payment_information`)}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of Payment  page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box\r\n                sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                onClick={addBankAccountHandler}\r\n              >\r\n                {\" \"}\r\n                <IconButton>\r\n                  <img src=\"/assets/icons/dashboard/add_circle.svg\" alt=\"\" />\r\n                </IconButton>\r\n                <Typography>{translate(\"add_new_account\")}</Typography>\r\n              </Box>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n                <Grid container columnSpacing=\"16px\">\r\n                  {bankAccounts.accounts.map((e, index) => {\r\n                    return (\r\n                      <Grid item xs={12} sm={12} position=\"relative\">\r\n                        <RHFTextField\r\n                          name={`BankAccounts[${index}][iban]`}\r\n                          label={translate(\"add_accont_number\")}\r\n                          type=\"text\"\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                        <IconButton\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            right: { xs: \"-30px\", md: \"-35px\" },\r\n                            top: { xs: \"-15px\", sm: \"10px\" },\r\n                          }}\r\n                          onClick={removeBankAccountHandler}\r\n                        >\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n                {/*------ Skip Link -------- */}\r\n                <Typography\r\n                  sx={{\r\n                    ...subTitleSx,\r\n                    color: \"#FFCC63\",\r\n                    textAlign: \"left\",\r\n                    mb: \"23px\",\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  {translate(`you_can_skip_this_process`)}\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Submit Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  disableRipple\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isLoading}\r\n                  sx={{ ...loadingButtonStyle }}\r\n                >\r\n                  {translate(\"submit_your_request\")}\r\n                </LoadingButton>\r\n\r\n                {/*--- Sign in Link --- */}\r\n                <Typography\r\n                  color=\"#535353\"\r\n                  fontWeight={400}\r\n                  fontSize=\"16px\"\r\n                  textAlign=\"center\"\r\n                >\r\n                  {translate(\"you_have_an_account_already\")}\r\n                  <Link\r\n                    to=\"/auth/login\"\r\n                    component={RouterLink}\r\n                    sx={{ ...signupLinkStyle }}\r\n                  >\r\n                    {translate(\"sign_in\")}\r\n                  </Link>\r\n                </Typography>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ********************** image Section *********************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={650} />\r\n        </Grid>\r\n      </Grid>{\" \"}\r\n      {isSubmitAdmin && (\r\n        <RequestSendedSuccessfully open={open} onCloseModel={handleClose} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddNewCategoryPage.js",["2750","2751","2752","2753","2754","2755","2756"],[],"import React, { useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// services\r\nimport { addRestaurantCategory } from \"../../../redux/services/employee_facility_service\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n//-------------------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"40px 25px\", md: \"40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function AddNewCategoryPage() {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, error, addCategorySuccessfully, isLoadingCategroy } =\r\n    useSelector((state) => state.employeeFacility);\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n  const navigate = useNavigate();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const AddNewCategorydSchema = Yup.object().shape({\r\n    name: Yup.string().required(translate(\"category_name_is_required\")),\r\n    secondName: Yup.string()\r\n      .required(translate(\"arabic_category_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    name: \"\",\r\n    secondName: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddNewCategorydSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  // console.log(branchId)\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      let convertedData = [];\r\n      convertedData.push(data);\r\n      // code here\r\n      dispatch(\r\n        addRestaurantCategory({\r\n          // resturantId: URLS.restaurantId,\r\n          resturantId: branchId,\r\n          data: convertedData,\r\n        })\r\n      );\r\n      reset();\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_category`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ----------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Category </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Typography variant=\"h5\" color=\"#FFCC63\" mb=\"24px\">\r\n            {translate(`add_new_category`)}\r\n          </Typography>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add new Category ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*====== CategoryNameAr Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"name\"\r\n                  label={translate(\"category_name_en\")}\r\n                  // placeholder={translate(\"category_name_ar\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*====== CategoryNameEn Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"secondName\"\r\n                  label={translate(\"category_name_ar\")}\r\n                  // placeholder={translate(\"category_name_en\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6} mt=\"32px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      navigate(-1);\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingCategroy}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_category\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\AddNewDiscountOffer.js",["2757","2758","2759","2760","2761","2762","2763","2764","2765","2766","2767","2768","2769","2770","2771","2772"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-emotion\r\nimport { useTheme } from \"@emotion/react\";\r\n//mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { RHFSelect, RHFTextField } from \"../../../components/hook-form\";\r\nimport FormProvider from \"../../../components/hook-form/FormProvider\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  addDiscountOffer,\r\n  getProductsToOfferByResturantId,\r\n} from \"../../../redux/services/menu_restaurant_service\";\r\nimport moment from \"moment\";\r\n\r\n// ------------- Style --------------\r\nconst formHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  p: {\r\n    xs: \"30px 20px 50px 20px\",\r\n    md: \"30px 44px 50px 44px\",\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"#BCBCBC\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  // minWidth: { xs: '145px', sm: '206px' },\r\n  // boxShadow:\r\n  //     \"0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: 300,\r\n  color: \"#ffcc63\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#000000\",\r\n  fontWeight: 400,\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontWeight: 400,\r\n  fontSize: \"14.2428px\",\r\n  lineHeight: \"22px\",\r\n  textDecoration: \"underline\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst selectItemHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  mb: \"16px\",\r\n  position: \"relative\",\r\n};\r\n\r\nexport default function AddNewDiscountOffer() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { productsForOffer, isLoadingAddOffer } = useSelector(\r\n    (state) => state.menuRestaurant\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getProductsToOfferByResturantId(branchId));\r\n    console.log(productsForOffer);\r\n  }, []);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const theme = useTheme();\r\n\r\n  const navigate = useNavigate();\r\n  // offer type select\r\n  const [selectedOfferType, setSelectedOfferType] = useState(\"0\");\r\n\r\n  const initialState = {\r\n    firstMealItems: [...Array(0)],\r\n    secondMealItems: [...Array(0)],\r\n  };\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  const OfferSchema = Yup.object().shape({\r\n    productId: Yup.string().required(translate(\"offer_type_is_required\")),\r\n    offerName: Yup.string().required(translate(\"offer_name_is_required\")),\r\n    startDate: Yup.string().required(translate(\"start_date_is_required\")),\r\n    endDate: Yup.string().required(translate(\"end_date_required\")),\r\n    offerPrice: Yup.string().required(translate(\"price_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    productId: \"\",\r\n    offerName: \"\",\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    offerPrice: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(OfferSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  // watch Offer Photo if value changed\r\n  const watchPic = watch(\"offerPhoto\");\r\n\r\n  const onSubmit = async (data, event) => {\r\n    try {\r\n      dispatch(\r\n        addDiscountOffer({\r\n          productId: data.productId,\r\n          data: {\r\n            offerPrice: data.offerPrice,\r\n            startDate: moment(data.startDate).format(\"YYYY-MM-DD\"),\r\n            endDate: moment(data.endDate).format(\"YYYY-MM-DD\"),\r\n          },\r\n        })\r\n      )\r\n        .unwrap()\r\n        .then((_) => alert(\"You Added Offer Successfuly !!\"))\r\n        .catch((_) => alert(\"Failed\"));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_offer`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Offer</title>\r\n      </Helmet>\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...formHolderSx }}>\r\n          {/* ********************** Title Holder ******************* */}\r\n          <Typography\r\n            variant=\"h5\"\r\n            sx={{\r\n              ...titleSx,\r\n              cursor: \"pointer\",\r\n              mb: \"24px\",\r\n            }}\r\n          >\r\n            {translate(`Add_new_offer`)}\r\n          </Typography>\r\n\r\n          {/* ********************** Start add new offer Form ******************* */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container rowSpacing={2} columnSpacing={8}>\r\n              {/* error Message after submit */}\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {/*========== Offer Type Select ========== */}\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <RHFSelect\r\n                  name=\"offerType\"\r\n                  type=\"text\"\r\n                  label={translate(\"offer_type\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  value={selectedOfferType}\r\n                  onChange={(e) => {\r\n                    if (e.target.value === \"1\") {\r\n                      navigate(\"/employee/menu/add-new-meal/add-combo\");\r\n                    }\r\n                  }}\r\n                >\r\n                  <option value=\"0\">{translate(`discount_offer`)}</option>\r\n                  <option value=\"1\">{translate(`combo_offer`)}</option>\r\n                </RHFSelect>\r\n                <Stack mb=\"24px\" />\r\n                <RHFSelect\r\n                  name=\"productId\"\r\n                  type=\"text\"\r\n                  label={translate(\"select_item\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                >\r\n                  {productsForOffer?.map((option, index) => (\r\n                    <>\r\n                      <option hidden />\r\n                      <option key={index} value={option.id}>\r\n                        {option.name}\r\n                      </option>\r\n                    </>\r\n                  ))}\r\n                </RHFSelect>\r\n              </Grid>\r\n              {/*========== Offer Type Select ========== */}\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <RHFTextField\r\n                  name=\"offerName\"\r\n                  label={translate(\"offer_name\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />\r\n                <Grid container spacing={2} mb=\"24px\">\r\n                  {/*======= offer Start in Date ======== */}\r\n                  <Grid item xs={12} sm={6} md={6} mt=\"24px\">\r\n                    <CustomDataPicker\r\n                      name=\"startDate\"\r\n                      textLabel=\"start_in\"\r\n                      onChange={(e) => {\r\n                        setValue(\"startDate\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} md={6} mt=\"24px\">\r\n                    <CustomDataPicker\r\n                      name=\"endDate\"\r\n                      textLabel=\"end_in\"\r\n                      // onChange={(e) => {\r\n                      //   setValue(\"endDate\", e.target.value, {\r\n                      //     shouldValidate: true,\r\n                      //   });\r\n                      // }}\r\n                      inputFormat=\"DD/MM/YYYY\"\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>{\" \"}\r\n                </Grid>\r\n                <RHFTextField\r\n                  name=\"offerPrice\"\r\n                  type=\"number\"\r\n                  label={translate(\"offer_price\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* =================@@ Action Button and Section @@================*/}\r\n\r\n            <Grid container rowSpacing={2} columnSpacing={8} mt=\"32px\">\r\n              <Grid item xs={12} sm={12} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    onClick={() => navigate(`/employee/menu`)}\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // onClick={onClose}\r\n                    // onClick={() => navigate(-1)}\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                  >\r\n                    {translate(\"cancel\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingAddOffer}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_offer\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\MenuFirstPage.js",["2773"],[],"import React, { useEffect, useState } from \"react\";\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-roter-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\n// @Mui\r\nimport {\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  Typography,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport Switch from \"@mui/material/Switch\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport HighestMealCard from \"../../../components/cards/branch-info/HighestMealCard\";\r\n// Sections Components\r\nimport CategoriesList from \"../../../section/@employee/menu/lists/CategoriesList\";\r\nimport MenuList from \"../../../section/@employee/menu/lists/MenuList\";\r\nimport OffersList from \"../../../section/@employee/menu/lists/OffersList\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n\r\nimport {\r\n  getRestaurantMenu,\r\n  getRestaurantOffers,\r\n} from \"../../../redux/services/menu_restaurant_service\";\r\n\r\nimport {\r\n  getRestaurantHighestSellingMeal,\r\n  getRestaurantHighestRatedMeal,\r\n} from \"../../../redux/services/employee_facility_service\";\r\nimport HighestSellingMeal from \"../../../components/cards/branch-info/HighestSellingMeal\";\r\nimport { updateCurrentStatus } from \"../../../redux/services/menu_restaurant_service\";\r\nimport { getRestaurantMinimalInfo } from \"../../../redux/services/restaurant_service\";\r\nimport * as URLS from \"../../../urls\";\r\nimport LoadingCards from \"../../../components/loadingSkeleton/LoadingCards\";\r\n// ----------------------------------------------------------------------------------------------\r\n// ----------- Styles ----------\r\nconst headerContainerSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  px: { xs: \"15px\", sm: \"32px\" },\r\n};\r\n\r\nconst titleHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"26px\",\r\n  mt: \"44px\",\r\n};\r\n\r\nconst titleTextSx = {\r\n  color: \"#333333;\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"#4EE476\",\r\n};\r\n\r\nconst textSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  pl: \"17px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst buttonStyle = {\r\n  borderRadius: \"5px\",\r\n  background: \"#FFCC63\",\r\n  alignItems: \"center\",\r\n  width: \"34px\",\r\n  height: \"34px\",\r\n  \":hover\": {\r\n    background: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst switchSx = {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  padding: \"9px 13px 25px 12px\",\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-2px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(25px)\",\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#FFCC63\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\nconst busySx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"red\",\r\n};\r\n\r\nexport default function MenuFirstPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { mealStatusIsUpdated, catStatusIsUpdated } = useSelector(\r\n    (state) => state.menuRestaurant\r\n  );\r\n\r\n  const {\r\n    isLoadingHighestSellingMeal,\r\n    highestSellingMeal,\r\n    isLoadingHighestRatedMeal,\r\n    highestRatedMeal } = useSelector(\r\n      (state) => state.employeeFacility\r\n    );\r\n  const { restStatus } = useSelector((state) => state.branches);\r\n\r\n  const [availableChecked, setAvailableChecked] = useState(\"\");\r\n  //\r\n  useEffect(() => {\r\n    dispatch(getRestaurantMenu({ pageNumber: 1, restaurantId: branchId }));\r\n    dispatch(getRestaurantOffers({ pageNumber: 1, restaurantId: branchId }));\r\n    dispatch(getRestaurantHighestSellingMeal(branchId));\r\n    dispatch(getRestaurantHighestRatedMeal(branchId));\r\n    dispatch(getRestaurantMinimalInfo({ Id: branchId }))\r\n      .unwrap()\r\n      .then((result) => {\r\n        setAvailableChecked(result.data.status);\r\n      });\r\n  }, [dispatch, mealStatusIsUpdated, catStatusIsUpdated, availableChecked]);\r\n\r\n  const handleChange = (e) => {\r\n    dispatch(\r\n      updateCurrentStatus({\r\n        restaurantId: branchId,\r\n        currentstatus: availableChecked ? 0 : 1,\r\n      })\r\n    )\r\n      .unwrap()\r\n      .then(() => setAvailableChecked(!availableChecked));\r\n  };\r\n  // -------------- JSX Code ------------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Menu </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* ********* Start Page Header *********** */}\r\n        <Stack sx={{ ...headerContainerSx, mb: \"48px\" }}>\r\n          {/* ------- Branch Logo ------- */}\r\n          <Box display=\"flex\" alignItems=\"center\" my=\"12px\" mb=\"14px\">\r\n            <Image\r\n              src={\r\n                localStorage.getItem(\"facilityType\") === \"1\"\r\n                  ? URLS.baseImageURL + `market/${restStatus?.imgUrl}`\r\n                  : URLS.baseImageURL + `resturant/${restStatus?.imgUrl}`\r\n              }\r\n              sx={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          {/* ------- title and status ------- */}\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            flexGrow={1}\r\n          >\r\n            <Typography\r\n              color=\"#121212\"\r\n              ml={{ xs: \"5px\", sm: \"25px\" }}\r\n              variant=\"h5\"\r\n            >\r\n              {restStatus?.name}\r\n              <span> </span> {translate(`overview`)}\r\n            </Typography>\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              flexDirection={{ xs: \"column\", sm: \"row\" }}\r\n            >\r\n              {availableChecked ? (\r\n                <Typography\r\n                  sx={{ ...highLightTextSx, mr: { xs: \"0px\", sm: \"20px\" } }}\r\n                >\r\n                  {translate(`available`)}\r\n                </Typography>\r\n              ) : (\r\n                <Typography sx={{ ...busySx, mr: { xs: \"0px\", sm: \"20px\" } }}>\r\n                  {translate(`busy`)}\r\n                </Typography>\r\n              )}\r\n\r\n              <Switch\r\n                sx={{ ...switchSx }}\r\n                checked={restStatus.status}\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Stack>\r\n\r\n        {/* ********* Start Card Row ********* */}\r\n        <Grid container spacing=\"24px\">\r\n          <Grid item xs={12} sm={6}>\r\n            {!isLoadingHighestSellingMeal ?\r\n              <HighestSellingMeal data={highestSellingMeal} />\r\n              :\r\n              <LoadingCards />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            {!isLoadingHighestRatedMeal ?\r\n              <HighestMealCard data={highestRatedMeal} />\r\n              :\r\n              <LoadingCards />\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* ********* Start Categories List ********* */}\r\n        {/* ---- table title  holder----- */}\r\n        <Box sx={{ ...titleHolderSx }}>\r\n          {/* title */}\r\n          <Typography variant=\"h5\" sx={titleTextSx}>\r\n            {translate(\"categories\")}\r\n          </Typography>\r\n\r\n          {/* Add Category Btn */}\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <IconButton\r\n              onClick={() => navigate(\"add-new-category\")}\r\n              sx={buttonStyle}\r\n            >\r\n              <img src=\"/assets/icons/arrow/plus.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography\r\n              sx={textSx}\r\n              onClick={() => navigate(\"add-new-category\")}\r\n            >\r\n              {translate(\"add_category\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <CategoriesList />\r\n\r\n        {/* ********* Start Menu List ********* */}\r\n        {/* ---- table title  holder----- */}\r\n        <Box sx={{ ...titleHolderSx }}>\r\n          {/* title */}\r\n          <Typography variant=\"h5\" sx={{ ...titleTextSx }}>\r\n            {translate(\"menu\")}\r\n          </Typography>\r\n\r\n          {/* add new item Btn */}\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <IconButton\r\n              onClick={() => {\r\n                navigate(\"add-new-meal\");\r\n              }}\r\n              sx={{ ...buttonStyle }}\r\n            >\r\n              <img src=\"/assets/icons/arrow/plus.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography\r\n              onClick={() => {\r\n                navigate(\"add-new-meal\");\r\n              }}\r\n              sx={textSx}\r\n            >\r\n              {translate(\"add_new_item\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <MenuList />\r\n\r\n        {/* ********* Start Offers List ********* */}\r\n        {/* ---- table title  holder----- */}\r\n        <Box sx={{ ...titleHolderSx }}>\r\n          {/* title */}\r\n          <Typography variant=\"h5\" sx={{ ...titleTextSx }}>\r\n            {translate(\"offers\")}\r\n          </Typography>\r\n          {/* add new offer Btn */}\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <IconButton\r\n              onClick={() => navigate(\"add-new-offer\")}\r\n              sx={{ ...buttonStyle }}\r\n            >\r\n              <img src=\"/assets/icons/arrow/plus.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography sx={textSx} onClick={() => navigate(\"add-new-offer\")}>\r\n              {translate(\"add_new_offer\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <OffersList />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\menu\\EditCategoryPage.js",["2774","2775","2776","2777","2778","2779","2780","2781"],[],"import React, { useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// services\r\nimport {\r\n  addRestaurantCategory,\r\n  updateResturantCategory,\r\n} from \"../../../redux/services/employee_facility_service\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n//-------------------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"40px 25px\", md: \"40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function EditCategoryPage() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    isLoading,\r\n    error,\r\n    addCategorySuccessfully,\r\n    isLoadingupdateResturantCategory,\r\n  } = useSelector((state) => state.employeeFacility);\r\n\r\n  const { categoryId, oldCategoryName, oldCategorySecondName } = useSelector(\r\n    (state) => state.control\r\n  );\r\n  const navigate = useNavigate();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const AddNewCategorydSchema = Yup.object().shape({\r\n    name: Yup.string().required(translate(\"category_name_is_required\")),\r\n    secondName: Yup.string()\r\n      .required(translate(\"arabic_category_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    name: oldCategoryName,\r\n    secondName: oldCategorySecondName,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddNewCategorydSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  // console.log(branchId)\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // code here\r\n      dispatch(\r\n        updateResturantCategory({\r\n          Id: categoryId,\r\n          data: data,\r\n        })\r\n      );\r\n      reset();\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_category`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ----------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Category </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Typography variant=\"h5\" color=\"#FFCC63\" mb=\"24px\">\r\n            {translate(`add_new_category`)}\r\n          </Typography>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add new Category ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*====== CategoryNameAr Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"name\"\r\n                  label={translate(\"category_name_en\")}\r\n                  // placeholder={translate(\"category_name_ar\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*====== CategoryNameEn Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"secondName\"\r\n                  label={translate(\"category_name_ar\")}\r\n                  // placeholder={translate(\"category_name_en\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6} mt=\"32px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      navigate(-1);\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingupdateResturantCategory}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"save\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\users\\AddNewEmployee.js",["2782","2783","2784","2785","2786","2787","2788","2789","2790","2791","2792","2793","2794"],[],"import React, { useState, useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n  OutlinedInput,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport { addFacilityAdmin } from \"../../../redux/services/get_resturant_admins_service\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  getAllBranches,\r\n  getAllBranchesMarket,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport moment from \"moment\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst positions = [\r\n  {\r\n    name: \"regional_manager\",\r\n    Role: 1,\r\n  },\r\n  {\r\n    name: \"branch_manager\",\r\n    Role: 2,\r\n  },\r\n  {\r\n    name: \"chasher\",\r\n    Role: 3,\r\n  },\r\n];\r\n\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  // mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\n\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nexport default function AddNewEmployee() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllBranches(1));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket(1));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const [allBranches, setAllBranches] = useState([]);\r\n\r\n  const { branches } = useSelector((state) => state.branches);\r\n\r\n  const { isAdded, isLoadingFacilityAdmin } = useSelector(\r\n    (state) => state.employees\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { branchesMarket } = useSelector((state) => state.market);\r\n\r\n  useEffect(() => {\r\n    setAllBranches(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [branches, branchesMarket]);\r\n\r\n  const [ProfilePicture, setSelectedFile] = React.useState(null);\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [selectedNames, setSelectedNames] = useState([]);\r\n\r\n  const [valueType, setValueType] = useState(false);\r\n\r\n  const AddEmployeeSchema = Yup.object().shape({\r\n    Gender: Yup.string().required(translate(\"gender_name_is_required\")),\r\n    //  ProfilePicture: Yup.string().required(\r\n    //     translate(\"profile_picture_name_is_required\")\r\n    //   ),\r\n    DateOfBirht: Yup.string().required(\r\n      translate(\"date_of_birht_name_is_required\")\r\n    ),\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Email: Yup.string()\r\n      .required(translate(\"email_is_required\"))\r\n      .email(\"email_must_be_a_valid_email_address\"),\r\n    Address: Yup.string().required(translate(\"address_is_required\")),\r\n    ProfilePicture: Yup.string().required(\r\n      translate(\"profile_picture_is_required\")\r\n    ),\r\n    PhoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    Role: Yup.string().required(translate(\"position_is_required\")),\r\n    countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n    Password: Yup.string().required(translate(\"password_is_required\")),\r\n    ConfirmPassword: Yup.string()\r\n      .required(translate(\"confirm_password_is_required\"))\r\n      .oneOf([Yup.ref(\"Password\")], \"passwords_do_not_match\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    Email: \"\",\r\n    Address: \"\",\r\n    PhoneNumber: \"\",\r\n    Role: \"\",\r\n    FacilityIds: branchId,\r\n    countryCode: \"+02\",\r\n    Password: \"\",\r\n    ConfirmPassword: \"\",\r\n    Gender: \"\",\r\n    ProfilePicture: \"\",\r\n    DateOfBirht: new Date(),\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddEmployeeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const watchRole = watch(\"Role\");\r\n\r\n  const onSubmit = async (data) => {\r\n    let { FacilityIds, DateOfBirht } = data;\r\n    DateOfBirht = convertDateFormat(DateOfBirht);\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"ProfilePicture\", ProfilePicture);\r\n\r\n    formData.append(\"DateOfBirht\", data.DateOfBirht);\r\n\r\n    formData.append(\"Password\", data.Password);\r\n\r\n    formData.append(\"Email\", data.Email);\r\n\r\n    formData.append(\"Gender\", data.Gender);\r\n\r\n    formData.append(\"PhoneNumber\", data.PhoneNumber);\r\n\r\n    formData.append(\"LastName\", data.LastName);\r\n\r\n    formData.append(\"FirstName\", data.FirstName);\r\n\r\n    formData.append(\"Address\", data.Address);\r\n\r\n    formData.append(\"Role\", data.Role);\r\n\r\n    formData.append(\"FacilityIds\", branchId);\r\n\r\n    try {\r\n      dispatch(addFacilityAdmin(formData))\r\n        .unwrap()\r\n        .then((_) => alert(\"You Added User Successfuly !!\"))\r\n        .catch((_) => alert(\"Failed\"));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/users\"\r\n    >\r\n      {translate(`employees`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_employee`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add Employee Information </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`add_new_employee`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add New Employee ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/* ******** Left Side Inputs ******* */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== employee name ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- employee first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"FirstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- employee second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"LastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== employee email ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Email\"\r\n                    type=\"email\"\r\n                    label={translate(\"email\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Phone ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNumber\"\r\n                    type=\"number\"\r\n                    label={translate(\"employee_phone\")}\r\n                    placeholder={translate(\"add_phone\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        fontSize: \"16px\",\r\n                        fontWeight: 400,\r\n                        lineHeight: \"16px\",\r\n                        color: \"#121212\",\r\n                        pl: \"10px\",\r\n                      },\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        height: \"50px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"countryCode\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                                alt=\"\"\r\n                              />\r\n                            ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"countryCode\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                          <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Position  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"Role\"\r\n                    type=\"text\"\r\n                    label={translate(\"employee_position\")}\r\n                    placeholder={translate(\"select_employee_position\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"Role\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                      e.target.value === 1\r\n                        ? setValueType(true)\r\n                        : setValueType(false);\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    {positions.map((row, index) => (\r\n                      <MenuItem value={row?.Role} key={index}>\r\n                        {translate(`${row?.name}`)}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </RHFSelect>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ************* Right Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== emplyee Address  ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Address\"\r\n                    label={translate(\"employee_address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Password\"\r\n                    label={translate(\"password\")}\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Confirm Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ConfirmPassword\"\r\n                    label={translate(\"confirm_password\")}\r\n                    type={showConfirmPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() =>\r\n                              setShowConfirmPassword(!showConfirmPassword)\r\n                            }\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showConfirmPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={\r\n                                showConfirmPassword ? \"#FFCC63\" : \"#BCBCBC\"\r\n                              }\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Date of birth   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <CustomDataPicker\r\n                    name=\"DateOfBirht\"\r\n                    textLabel=\"date_of_birth\"\r\n                    sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee picture   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ProfilePicture\"\r\n                    label={translate(\"profile_picture\")}\r\n                    type=\"file\"\r\n                    onChange={(event) => {\r\n                      console.log(event.target.files[0]);\r\n                      setSelectedFile(event.target.files[0]);\r\n                      setValue(\"ProfilePicture\", event.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    // label={translate(\"user image\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color: ProfilePicture ? \"#535353\" : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    inputProps={{\r\n                      sx: {\r\n                        \"&::placeholder\": {\r\n                          textAlign: \"left\",\r\n                          color: \"#BCBCBC\",\r\n                          fontWeight: \"400\",\r\n                          fontSize: \"14px\",\r\n                          lineHeight: \"22px\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                          >\r\n                            <label htmlFor=\"licenses\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee gender   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Stack sx={{ ...genderHolderSx, position: \"relative\" }}>\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      //  placeholder={Gender}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/users\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingFacilityAdmin}\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_employee\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\users\\EdiEmployeeInfoPage.js",["2795","2796","2797","2798","2799","2800","2801","2802","2803","2804","2805","2806"],[],"import React, { useState, useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n  OutlinedInput,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport {\r\n  addFacilityAdmin,\r\n  updateFacilityProfile,\r\n} from \"../../../redux/services/get_resturant_admins_service\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  getAllBranches,\r\n  getAllBranchesMarket,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport moment from \"moment\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst positions = [\r\n  {\r\n    name: \"regional_manager\",\r\n    Role: 1,\r\n  },\r\n  {\r\n    name: \"branch_manager\",\r\n    Role: 2,\r\n  },\r\n  {\r\n    name: \"chasher\",\r\n    Role: 3,\r\n  },\r\n];\r\n\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  // mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\n\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nexport default function AddNewEmployee() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllBranches(1));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket(1));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const [allBranches, setAllBranches] = useState([]);\r\n\r\n  const { branches } = useSelector((state) => state.branches);\r\n\r\n  const { editIsSuccessful } = useSelector((state) => state.employees);\r\n  const { branchId, AdminId, employeeInfo } = useSelector(\r\n    (state) => state.control\r\n  );\r\n\r\n  const { branchesMarket } = useSelector((state) => state.market);\r\n\r\n  useEffect(() => {\r\n    setAllBranches(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [branches, branchesMarket]);\r\n\r\n  const [ProfilePicture, setSelectedFile] = React.useState(null);\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [selectedNames, setSelectedNames] = useState([]);\r\n\r\n  const [valueType, setValueType] = useState(false);\r\n  console.log(valueType);\r\n\r\n  const AddEmployeeSchema = Yup.object().shape({\r\n    Gender: Yup.string().required(translate(\"gender_name_is_required\")),\r\n    //  ProfilePicture: Yup.string().required(\r\n    //     translate(\"profile_picture_name_is_required\")\r\n    //   ),\r\n    DateOfBirht: Yup.string().required(\r\n      translate(\"date_of_birht_name_is_required\")\r\n    ),\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Email: Yup.string()\r\n      .required(translate(\"email_is_required\"))\r\n      .email(\"email_must_be_a_valid_email_address\"),\r\n    Address: Yup.string().required(translate(\"address_is_required\")),\r\n    ProfilePicture: Yup.string().required(\r\n      translate(\"profile_picture_is_required\")\r\n    ),\r\n    PhoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    Role: Yup.string().required(translate(\"position_is_required\")),\r\n    countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n    Password: Yup.string().required(translate(\"password_is_required\")),\r\n    ConfirmPassword: Yup.string()\r\n      .required(translate(\"confirm_password_is_required\"))\r\n      .oneOf([Yup.ref(\"Password\")], \"passwords_do_not_match\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: employeeInfo?.firstName,\r\n    LastName: employeeInfo?.lastName,\r\n    Email: employeeInfo?.email,\r\n    Address: employeeInfo?.addressName || \"\",\r\n    PhoneNumber: employeeInfo?.phoneNumber,\r\n    Role: \"\",\r\n    FacilityIds: branchId,\r\n    countryCode: \"+02\",\r\n    Password: \"\",\r\n    ConfirmPassword: \"\",\r\n    Gender: employeeInfo?.gender,\r\n    ProfilePicture: \"\",\r\n    DateOfBirht: employeeInfo?.dateOfBirth,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddEmployeeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const watchRole = watch(\"Role\");\r\n\r\n  const onSubmit = async (data) => {\r\n    let { FacilityIds, DateOfBirht } = data;\r\n    DateOfBirht = convertDateFormat(DateOfBirht);\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"AdminId\", AdminId);\r\n\r\n    formData.append(\"ProfilePicture\", ProfilePicture);\r\n\r\n    formData.append(\"DateOfBirht\", data.DateOfBirht);\r\n\r\n    formData.append(\"Password\", data.Password);\r\n\r\n    formData.append(\"Email\", data.Email);\r\n\r\n    formData.append(\"Gender\", data.Gender);\r\n\r\n    formData.append(\"PhoneNumber\", data.PhoneNumber);\r\n\r\n    formData.append(\"LastName\", data.LastName);\r\n\r\n    formData.append(\"FirstName\", data.FirstName);\r\n\r\n    formData.append(\"Address\", data.Address);\r\n\r\n    formData.append(\"Role\", data.Role);\r\n\r\n    formData.append(\"FacilityIds\", branchId);\r\n\r\n    try {\r\n      dispatch(updateFacilityProfile(formData));\r\n\r\n      // if (!postIsSuccessful === true) {\r\n      //   console.log(\"You Added User Successfuly !!\");\r\n      // } else {\r\n      //   alert(\"Failed !!\");\r\n      //   console.log(\"Failed !!\");\r\n      // }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/users\"\r\n    >\r\n      {translate(`employees`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_employee_information`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Employee Information </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`edit_employee_information`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add New Employee ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/* ******** Left Side Inputs ******* */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== employee name ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- employee first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"FirstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- employee second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"LastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== employee email ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Email\"\r\n                    type=\"email\"\r\n                    label={translate(\"email\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Phone ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNumber\"\r\n                    type=\"number\"\r\n                    label={translate(\"employee_phone\")}\r\n                    placeholder={translate(\"add_phone\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        fontSize: \"16px\",\r\n                        fontWeight: 400,\r\n                        lineHeight: \"16px\",\r\n                        color: \"#121212\",\r\n                        pl: \"10px\",\r\n                      },\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        height: \"50px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"countryCode\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                                alt=\"\"\r\n                              />\r\n                            ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"countryCode\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                          <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Position  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"Role\"\r\n                    type=\"text\"\r\n                    label={translate(\"employee_position\")}\r\n                    placeholder={translate(\"select_employee_position\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"Role\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                      e.target.value === 1\r\n                        ? setValueType(true)\r\n                        : setValueType(false);\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    {positions.map((row, index) => (\r\n                      <MenuItem value={row?.Role} key={index}>\r\n                        {translate(`${row?.name}`)}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </RHFSelect>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ************* Right Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== emplyee Address  ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Address\"\r\n                    label={translate(\"employee_address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Password\"\r\n                    label={translate(\"password\")}\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Confirm Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ConfirmPassword\"\r\n                    label={translate(\"confirm_password\")}\r\n                    type={showConfirmPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() =>\r\n                              setShowConfirmPassword(!showConfirmPassword)\r\n                            }\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showConfirmPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={\r\n                                showConfirmPassword ? \"#FFCC63\" : \"#BCBCBC\"\r\n                              }\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Date of birth   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <CustomDataPicker\r\n                    name=\"DateOfBirht\"\r\n                    textLabel=\"date_of_birth\"\r\n                    sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee picture   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ProfilePicture\"\r\n                    label={translate(\"profile_picture\")}\r\n                    type=\"file\"\r\n                    onChange={(event) => {\r\n                      console.log(event.target.files[0]);\r\n                      setSelectedFile(event.target.files[0]);\r\n                      setValue(\"ProfilePicture\", event.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    // label={translate(\"user image\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color: ProfilePicture ? \"#535353\" : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    inputProps={{\r\n                      sx: {\r\n                        \"&::placeholder\": {\r\n                          textAlign: \"left\",\r\n                          color: \"#BCBCBC\",\r\n                          fontWeight: \"400\",\r\n                          fontSize: \"14px\",\r\n                          lineHeight: \"22px\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                          >\r\n                            <label htmlFor=\"licenses\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee gender   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Stack sx={{ ...genderHolderSx, position: \"relative\" }}>\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      //  placeholder={Gender}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/users\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={editIsSuccessful}\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_employee\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\PreviewMarketProductPage.js",["2807","2808","2809"],[],"import React, { useState } from \"react\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// @Mui\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  IconButton,\r\n  Button,\r\n  Stack,\r\n  useTheme,\r\n  Container,\r\n} from \"@mui/material\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Link from \"@mui/material/Link\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Image from \"../../../components/image/Image\";\r\n// sectionsComponents\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport DiscardDialog from \"../../../section/@employee/market-menu/details/DiscardDialog\";\r\n\r\n// ---------------------------------------------------------------------------\r\n\r\n// --------Style ------------\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"39px 20px 50px 20px\",\r\n    sm: \"39px 32px 50px 32px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  marginBottom: \"32px\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst constentHolderSx = {\r\n  pt: { xs: \"25px\", md: \"0px\" },\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  pl: { sm: \"30px\", md: \"50px\" },\r\n};\r\n\r\nconst rateHolderSx = {\r\n  p: \"4px 8px\",\r\n  display: \"flex\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst titleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  paddingLeft: \"13px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst mainTextSx = {\r\n  fontWeight: \"700\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst rateTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  paddingLeft: \"5px\",\r\n};\r\n\r\nconst numberTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  paddingLeft: \"10px\",\r\n};\r\n\r\nconst contentTextSx = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  py: \"12px\",\r\n  borderRadius: \"8px\",\r\n  height: \"48px\",\r\n  width: { xs: \"100%\", md: \"236px\" },\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \" #FFCC63\",\r\n  border: \"0.901691px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  marginRight: \"18px\",\r\n  height: \"48px\",\r\n  width: { xs: \"100%\", md: \"236px\" },\r\n};\r\n\r\nexport default function PreviewMarketProductPage() {\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n  const { themeStretch } = useSettingsContext();\r\n  const { translate } = useLocales();\r\n  const navigate = useNavigate();\r\n  const theme = useTheme();\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu\"\r\n    >\r\n      {translate(`menu`)}\r\n    </Link>,\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"2\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu/add-market-product\"\r\n    >\r\n      {translate(`add_new_product`)}\r\n    </Link>,\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"3\"\r\n    >\r\n      {translate(`preview_and_confirm`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ----------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Preview Product Details</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ******* Start Title and Actions Button ******** */}\r\n          <Box sx={{ ...subHolderSx }}>\r\n            {/* Title */}\r\n            <Box display=\"flex\">\r\n              <IconButton\r\n                disableRipple\r\n                onClick={() => {\r\n                  navigate(\"/employee/market-menu/add-market-product\");\r\n                }}\r\n                sx={{\r\n                  width: \"25px\",\r\n                  transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                }}\r\n              >\r\n                <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n              </IconButton>\r\n\r\n              <Typography\r\n                variant=\"h5\"\r\n                sx={{ ...titleSx }}\r\n                onClick={() => {\r\n                  navigate(\"/employee/market-menu/add-market-product\");\r\n                }}\r\n              >\r\n                {translate(`back_to_add_new_product`)}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* ******* Start Item Deatail ******** */}\r\n          <Grid container mb=\"40px\">\r\n            {/* Product Image */}\r\n            <Grid item xs={12} sm={4.5} md={3.5}>\r\n              <img\r\n                src=\"/assets/images/employee/product.png\"\r\n                alt=\"\"\r\n                style={{\r\n                  maxWidth: \"300px\",\r\n                  width: \"100%\",\r\n                  height: \"206px\",\r\n                  margin: \"auto\",\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            {/* Product Info */}\r\n            <Grid item xs={12} sm={7.5} md={8.5}>\r\n              <Box sx={{ ...constentHolderSx }}>\r\n                <Box display=\"flex\" justifyContent=\"space-between\">\r\n                  <Typography sx={{ ...mainTextSx }}>\r\n                    {translate(\"mighty_zinger_big_box\")}\r\n                  </Typography>\r\n                  <Box sx={{ ...rateHolderSx }}>\r\n                    <img src=\"/assets/icons/employee/Vector.svg\" alt=\"img\" />\r\n                    <Typography sx={{ ...rateTextSx }}>\r\n                      {translate(\"4.9\")}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Box py=\"25px\" display=\"flex\">\r\n                  <Box display={\"flex\"} paddingRight={\"19px\"}>\r\n                    <img src=\"/assets/icons/employee/icon1.svg\" alt=\"\" />\r\n                    <Typography sx={{ ...numberTextSx }}>\r\n                      +20{translate(\"orders\")}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\" pr=\"18px\">\r\n                    <img src=\"/assets/icons/employee/icon2.svg\" alt=\"\" />\r\n                    <Typography sx={{ ...numberTextSx }}>\r\n                      125{translate(\"KCAL\")}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display={\"flex\"}>\r\n                    <img src=\"/assets/icons/employee/icon3.svg\" alt=\"\" />\r\n                    <Typography sx={{ ...numberTextSx }}>\r\n                      20{translate(\"min\")}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Typography sx={{ ...contentTextSx }}>\r\n                  {translate(\"hum\")}\r\n                </Typography>\r\n\r\n                <Typography sx={{ ...mainTextSx, mt: \"24px\" }}>\r\n                  AED 55.50\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* **************** Start Actions Button ***********/}\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent={{\r\n              xs: \"center\",\r\n              md: \"flex-end\",\r\n            }}\r\n            mt=\"60px\"\r\n          >\r\n            <Button\r\n              variant=\"outlined\"\r\n              sx={outLinedButtonStyle}\r\n              onClick={handleOpenConfirm}\r\n            >\r\n              {translate(\"discard\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              sx={containedButtonStyle}\r\n              // onClick={() => navigate('/employee/menu/add-new-offer')}\r\n            >\r\n              {translate(\"confirm_item\")}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        <DiscardDialog open={openConfirm} onClose={handleCloseConfirm} />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\AddMarketSubCategoryPage.js",["2810","2811","2812","2813","2814","2815"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  MenuItem,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  addMarketSubCategory,\r\n  getCategories,\r\n} from \"../../../redux/services/branch_market_service\";\r\nimport { useEffect } from \"react\";\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"40px 25px\", md: \"40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function AddMarketSubCategoryPage() {\r\n  const navigate = useNavigate();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategories());\r\n  }, []);\r\n\r\n  const { categories, isLoadingAddSubCategory } = useSelector(\r\n    (state) => state.branchMarket\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const AddNewSubCategorydSchema = Yup.object().shape({\r\n    categoryId: Yup.string().required(\r\n      translate(\"sub_category_name_is_required\")\r\n    ),\r\n    name: Yup.string().required(translate(\"category_name_is_required\")),\r\n    secondName: Yup.string()\r\n      .required(translate(\"arabic_category_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    categoryId: \"\",\r\n    name: \"\",\r\n    secondName: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddNewSubCategorydSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      dispatch(\r\n        addMarketSubCategory({\r\n          marketId: branchId,\r\n          categoryId: data.categoryId,\r\n          name: data.name,\r\n          secondName: data.secondName,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu\"\r\n    >\r\n      {translate(`market_menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_sub_category`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add Market New Sub Category </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Typography variant=\"h5\" color=\"#FFCC63\" mb=\"24px\">\r\n            {translate(`add_new_sub_category`)}\r\n          </Typography>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add new Category ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*========== Sub-Category Select ========== */}\r\n              <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"categoryId\"\r\n                  type=\"text\"\r\n                  label={translate(\"select_category\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                >\r\n                  {categories.map((option, index) => (\r\n                    <>\r\n                      <option hidden />\r\n                      <option key={index} value={option.id}>\r\n                        {option.name}\r\n                      </option>\r\n                    </>\r\n                  ))}\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12} md={6} />\r\n\r\n              {/*====== Sub-CategoryNameEn Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"name\"\r\n                  label={translate(\"sub_category_name_en\")}\r\n                  // placeholder={translate(\"category_name_en\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*====== Sub-CategoryNameAr Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"secondName\"\r\n                  label={translate(\"sub_category_name_ar\")}\r\n                  // placeholder={translate(\"category_name_ar\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6} mt=\"32px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      navigate(-1);\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingAddSubCategory}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_category\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\users\\EmployeePage.js",["2816","2817","2818","2819","2820","2821"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Mui\r\nimport { Box, Container, Typography, IconButton } from \"@mui/material\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n// Section Components\r\nimport UserList from \"../../../section/common/userPages/UserList\";\r\nimport AddUserModal from \"../../../section/@dashboard/users/detailes/AddUserModal\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { getRestaurantAdmins } from \"../../../redux/services/restaurant_service\";\r\nimport { getMarketAdmins } from \"../../../redux/services/markets_service\";\r\nimport {\r\n  getMarketAdminsBranches,\r\n  getRestaurantAdminsForBranches,\r\n} from \"../../../redux/services/users_service\";\r\nimport EmployeeList from \"../../../section/common/userPages/EmployeeList\";\r\n// ---------------------------------------------------------------------------------------\r\n\r\n// ---------------- Styles ---------------\r\nconst titleStyle = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n};\r\n\r\nconst typoStyle = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"16px\",\r\n  paddingLeft: \"16px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst imgStyle = {\r\n  margin: \"auto\",\r\n};\r\n\r\nconst boxTitleStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"28px\",\r\n};\r\n\r\nconst buttonStyle = {\r\n  borderRadius: \"5px\",\r\n  background: \"#FFCC63\",\r\n  alignItems: \"center\",\r\n  width: \"34px\",\r\n  height: \"34px\",\r\n};\r\n\r\nexport default function EmployeePage() {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getRestaurantAdminsForBranches({\r\n          id: branchId,\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketAdminsBranches({ id: branchId, pageNumber: 1 }));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // ---------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Users </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <Box sx={boxTitleStyle}>\r\n          <Typography sx={titleStyle} variant=\"h5\">\r\n            {translate(\"employees\")}\r\n          </Typography>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <Box sx={buttonStyle}>\r\n              <IconButton onClick={() => navigate(\"add-new-user\")}>\r\n                <img\r\n                  src=\"/assets/icons/arrow/plus.svg\"\r\n                  alt=\"\"\r\n                  style={imgStyle}\r\n                />\r\n              </IconButton>\r\n            </Box>\r\n            <Typography sx={typoStyle} onClick={() => navigate(\"add-new-user\")}>\r\n              {translate(\"add_new_employee\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <EmployeeList />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\AddMarketProductPage.js",["2822","2823","2824","2825","2826","2827","2828"],[],"import React from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n//@Mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// Form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFSelect,\r\n} from \"../../../components/hook-form\";\r\n// Section Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useTheme } from \"@emotion/react\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  addMarketProduct,\r\n  getMarketCategories,\r\n  getSubCategoriesByMarketId,\r\n} from \"../../../redux/services/branch_market_service\";\r\nimport { useState } from \"react\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n// ------------ Style --------------\r\n\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"30px 30px 48px 20px\",\r\n    sm: \"30px 42px 48px 42px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"22px\",\r\n    color: \"#535353\",\r\n    paddingRight: \"30px\",\r\n    pr: \"5px!important\",\r\n    pl: \"3px\",\r\n  },\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"5px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  paddingLeft: { lg: \"70px\", sm: \"70px\", xs: \"42px\" },\r\n  paddingRight: { lg: \"70px\", sm: \"70px\", xs: \"42px\" },\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \" #FFCC63\",\r\n  border: \"0.901691px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  paddingLeft: { lg: \"85px\", sm: \"85px\", xs: \"52px\" },\r\n  paddingRight: { lg: \"85px\", sm: \"85px\", xs: \"52px\" },\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  marginRight: \"18px\",\r\n  width: \"100%\",\r\n};\r\n\r\nexport default function AddMarketProductPage() {\r\n  const navigate = useNavigate();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const theme = useTheme();\r\n\r\n  const [categoryId, setCategoryId] = useState(undefined);\r\n\r\n  const [marketSubCategoryId, setMarketSubCategoryId] = useState();\r\n\r\n  const [file, setFile] = useState(null);\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { marketCategory, subCategory, isLoadingAddMarketProduct } =\r\n    useSelector((state) => state.branchMarket);\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const ProductSchema = Yup.object().shape({\r\n    Name: Yup.string().required(translate(\"product_name_en_is_required\")),\r\n    SecondName: Yup.string()\r\n      .required(translate(\"arabic_product_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n    ImageUrl:\r\n      file !== null\r\n        ? \"\"\r\n        : Yup.string().required(translate(\"product_photo_is_required\")),\r\n\r\n    Description: Yup.string()\r\n      .required(translate(\"description_en_is_required\"))\r\n      .min(20),\r\n    SecondDescription: Yup.string()\r\n      .required(translate(\"description_ar_is_required\"))\r\n      .min(20),\r\n    categoryId:\r\n      categoryId !== undefined\r\n        ? \"\"\r\n        : Yup.string().required(translate(\"category_is_required\")),\r\n    MarketSubCategoryId: Yup.string().required(\r\n      translate(\"sub_category_name_is_required\")\r\n    ),\r\n    Unit: Yup.string().required(translate(\"unit_is_required\")),\r\n    Price: Yup.string().required(translate(\"minimum_order_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    Name: \"\",\r\n    SecondName: \"\",\r\n    ImageUrl: \"\",\r\n    Description: \"\",\r\n    SecondDescription: \"\",\r\n    categoryId: categoryId,\r\n    SubCategory: marketSubCategoryId,\r\n    Unit: \"\",\r\n    Price: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ProductSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const watchImageUrl = watch(\"ImageUrl\");\r\n\r\n  let formData = new FormData();\r\n\r\n  const addImageUrl = async (e) => {\r\n    setFile(e.target.files[0]);\r\n    formData.append(\"ImageUrl\", e.target.files[0]);\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      formData.append(\"Name\", data.Name);\r\n      formData.append(\"SecondName\", data.SecondName);\r\n      formData.append(\"Description\", data.Description);\r\n      formData.append(\"SecondDescription\", data.SecondDescription);\r\n      formData.append(\"MarketSubCategoryId\", data.MarketSubCategoryId);\r\n      formData.append(\"ImageUrl\", file);\r\n      formData.append(\"Unit\", data.Unit);\r\n      formData.append(\"Price\", data.Price);\r\n      dispatch(addMarketProduct(formData));\r\n    } catch (error) {\r\n      reset();\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    dispatch(getMarketCategories(branchId));\r\n  }, [categoryId]);\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu\"\r\n    >\r\n      {translate(`market_menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_product`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------- JSX Code --------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Market Product </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Box display=\"flex\" mb=\"24px\" alignItems=\"center\">\r\n            <IconButton\r\n              disableRipple\r\n              onClick={() => {\r\n                navigate(\"/employee/market-menu\");\r\n              }}\r\n              sx={{\r\n                width: \"25px\",\r\n                transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n              }}\r\n            >\r\n              <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n            </IconButton>\r\n            {/* ----- Title -----  */}\r\n            <Typography variant=\"h5\" color=\"#ffcc63\" ml=\"13px\">\r\n              {translate(`add_new_product`)}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* ************ Start Add New Product ************/}\r\n            <Grid container rowSpacing={2} columnSpacing={8}>\r\n              {/* ------------ Left Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/* product name en  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Name\"\r\n                      label={translate(\"product_name_en\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product name ar  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"SecondName\"\r\n                      label={translate(\"product_name_ar\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product photo input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"ImageUrl\"\r\n                      label={translate(\"product_photo\")}\r\n                      value={file?.name}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: file ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"ImageUrl\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                                <input\r\n                                  hidden\r\n                                  accept=\"image/*\"\r\n                                  type=\"file\"\r\n                                  onChange={addImageUrl}\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*Category Select*/}\r\n\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"categoryId\"\r\n                      type=\"text\"\r\n                      label={translate(\"categories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      // value={categoryId}\r\n                      onChange={(e) => {\r\n                        setCategoryId(e.target.value);\r\n                        dispatch(\r\n                          getSubCategoriesByMarketId({\r\n                            marketId: branchId,\r\n                            categoryId: e.target.value,\r\n                          })\r\n                        );\r\n                      }}\r\n                    >\r\n                      {marketCategory.map((option, index) => (\r\n                        <>\r\n                          <option hidden />\r\n                          <option key={index} value={option.id}>\r\n                            {option.name}\r\n                          </option>\r\n                        </>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/*Sub-Category Select*/}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"MarketSubCategoryId\"\r\n                      type=\"text\"\r\n                      label={translate(\"sub_category\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      /*  value={marketSubCategoryId}\r\n                      onChange={(e) => {\r\n                        setMarketSubCategoryId(e.target.value);\r\n                      }}*/\r\n                    >\r\n                      {subCategory.map((option, index) => (\r\n                        <>\r\n                          <option hidden />\r\n                          <option key={index} value={option.id}>\r\n                            {option.name}\r\n                          </option>\r\n                        </>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/* product  size  input \r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Size\"\r\n                      type=\"text\"\r\n                      label={translate(\"size\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>*/}\r\n\r\n                  {/* product unit  input */}\r\n                  <Grid item xs={12} md={12}>\r\n                    <RHFTextField\r\n                      name=\"Unit\"\r\n                      type=\"text\"\r\n                      label={translate(\"unit_kg_litter\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product minimum order input*/}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"Price\"\r\n                      type=\"number\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      label={translate(`minmum_order`)}\r\n                      // placeholder={translate(`minmum_order`)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <RHFSelect\r\n                            name=\"Currency\"\r\n                            sx={{\r\n                              ...transparentBorderTxtField,\r\n                              width: \"80px\",\r\n                            }}\r\n                            onChange={(e) =>\r\n                              setValue(\"Currency\", e.target.value, {\r\n                                shouldValidate: true,\r\n                              })\r\n                            }\r\n                          >\r\n                            <MenuItem value=\"AED\">AED</MenuItem>\r\n                            <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                          </RHFSelect>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product discount  input \r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"Discount\"\r\n                      type=\"text\"\r\n                      label={translate(\"discount\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>*/}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------------ Right Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2}>\r\n                  {/* Description En Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"Description\"\r\n                      label={translate(\"description_English\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#bcbcbc\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  {/* Description Ar Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"SecondDescription\"\r\n                      label={translate(\"description_arabic\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#bcbcbc\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* =========@@ Action Button @@========*/}\r\n            <Grid container columnSpacing={8}>\r\n              <Grid item xs={12} md={6} />\r\n\r\n              <Grid item xs={12} md={6}>\r\n                <Stack direction=\"row\" mt=\"48px\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    sx={outLinedButtonStyle}\r\n                    onClick={() => navigate(\"/employee/market-menu\")}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n\r\n                  <LoadingButton\r\n                    sx={{ ...containedButtonStyle }}\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingAddMarketProduct}\r\n                  >\r\n                    {translate(`preview`)}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\EditMarketSubCategoryPage.js",["2829","2830","2831","2832","2833","2834","2835"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  MenuItem,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  addMarketSubCategory,\r\n  getCategories,\r\n  updateMarketSubCategory,\r\n} from \"../../../redux/services/branch_market_service\";\r\nimport { useEffect } from \"react\";\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"40px 25px\", md: \"40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function EditMarketSubCategoryPage() {\r\n  const navigate = useNavigate();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n  const { categories, isLoadingUpdateSubCategory } = useSelector(\r\n    (state) => state.branchMarket\r\n  );\r\n  const { subCategoryId, oldSubCategoryName } = useSelector(\r\n    (state) => state.control\r\n  );\r\n  useEffect(() => {\r\n    dispatch(getCategories());\r\n  }, [isLoadingUpdateSubCategory]);\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const AddNewSubCategorydSchema = Yup.object().shape({\r\n    categoryId: Yup.string().required(\r\n      translate(\"sub_category_name_is_required\")\r\n    ),\r\n    name: Yup.string().required(translate(\"category_name_is_required\")),\r\n    secondName: Yup.string()\r\n      .required(translate(\"arabic_category_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    categoryId: \"\",\r\n    name: oldSubCategoryName,\r\n    secondName: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddNewSubCategorydSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      dispatch(\r\n        updateMarketSubCategory({\r\n          id: subCategoryId,\r\n          name: data.name,\r\n          secondName: data.secondName,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu\"\r\n    >\r\n      {translate(`market_menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_sub_category`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add Market New Sub Category </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Typography variant=\"h5\" color=\"#FFCC63\" mb=\"24px\">\r\n            {translate(`edit_sub_category`)}\r\n          </Typography>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add new Category ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*========== Sub-Category Select ========== */}\r\n              <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"categoryId\"\r\n                  type=\"text\"\r\n                  label={translate(\"select_category\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                >\r\n                  {categories.map((option, index) => (\r\n                    <>\r\n                      <option hidden />\r\n                      <option key={index} value={option.id}>\r\n                        {option.name}\r\n                      </option>\r\n                    </>\r\n                  ))}\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12} md={6} />\r\n\r\n              {/*====== Sub-CategoryNameEn Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"name\"\r\n                  label={translate(\"sub_category_name_en\")}\r\n                  // placeholder={translate(\"category_name_en\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*====== Sub-CategoryNameAr Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"secondName\"\r\n                  label={translate(\"sub_category_name_ar\")}\r\n                  // placeholder={translate(\"category_name_ar\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6} mt=\"32px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      navigate(-1);\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingUpdateSubCategory}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_category\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\AddMarketCategoryPage.js",["2836","2837"],[],"import React from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n\r\n// --------------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"40px 25px\", md: \"40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function AddMarketCategoryPage() {\r\n  const navigate = useNavigate();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const AddNewCategorydSchema = Yup.object().shape({\r\n    CategoryNameEn: Yup.string().required(\r\n      translate(\"category_name_is_required\")\r\n    ),\r\n    CategoryNameAr: Yup.string()\r\n      .required(translate(\"arabic_category_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    CategoryNameEn: \"\",\r\n    CategoryNameAr: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddNewCategorydSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      // code here\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu\"\r\n    >\r\n      {translate(`market_menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_category`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add Market New Category </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Typography variant=\"h5\" color=\"#FFCC63\" mb=\"24px\">\r\n            {translate(`add_new_category`)}\r\n          </Typography>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add new Category ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*====== CategoryNameAr Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"CategoryNameAr\"\r\n                  label={translate(\"category_name_ar\")}\r\n                  // placeholder={translate(\"category_name_ar\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*====== CategoryNameEn Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"CategoryNameEn\"\r\n                  label={translate(\"category_name_en\")}\r\n                  // placeholder={translate(\"category_name_en\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"16px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              <Grid item xs={12} sm={12} md={6} mt=\"32px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      navigate(-1);\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_category\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\MarketMenuPage.js",["2838","2839","2840"],[],"import React, { useEffect } from \"react\";\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-roter-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\n// @Mui\r\nimport {\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  Typography,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport Switch from \"@mui/material/Switch\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport HighestItemCard from \"../../../components/cards/market/HighestItemCard\";\r\nimport MarketCategoryList from \"../../../section/@employee/market-menu/lists/MarketCategoryList\";\r\nimport MarketSubCategoryList from \"../../../section/@employee/market-menu/lists/MarketSubCategoryList\";\r\nimport MarketProductList from \"../../../section/@employee/market-menu/lists/MarketProductList\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  getCategories,\r\n  getMarketCategories,\r\n} from \"../../../redux/services/branch_market_service\";\r\n\r\nimport {\r\n  getMarketHighestSellingProduct,\r\n  getMarketCategoriesDetails,\r\n  getMarketMenu,\r\n} from \"../../../redux/services/markets_service\";\r\n\r\n// -----------------------------------------------------------------------\r\n\r\n// ----------- Styles ----------\r\nconst headerContainerSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  px: { xs: \"15px\", sm: \"23px\", md: \"32px\" },\r\n};\r\n\r\nconst titleHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"26px\",\r\n  mt: \"50px\",\r\n};\r\n\r\nconst titleTextSx = {\r\n  color: \"#333333;\",\r\n  fontWeight: \"600\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"#4EE476\",\r\n};\r\n\r\nconst textSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  pl: \"17px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst buttonStyle = {\r\n  borderRadius: \"5px\",\r\n  background: \"#FFCC63\",\r\n  alignItems: \"center\",\r\n  width: \"34px\",\r\n  height: \"34px\",\r\n  \":hover\": {\r\n    background: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst switchSx = {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  padding: \"9px 13px 25px 12px\",\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-2px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(25px)\",\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#FFCC63\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\n\r\nexport default function MarketMenuPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId, branchName } = useSelector((state) => state.control);\r\n\r\n  const { subCatStatusIsUpdated } = useSelector((state) => state.market);\r\n\r\n  useEffect(() => {\r\n    dispatch(getCategories());\r\n\r\n    dispatch(getMarketCategories(branchId));\r\n  }, []);\r\n\r\n  //\r\n\r\n  //\r\n  useEffect(() => {\r\n    dispatch(getMarketHighestSellingProduct(branchId));\r\n    dispatch(getMarketCategoriesDetails({ pageNumber: 1, marketId: branchId }));\r\n    dispatch(getMarketMenu({ pageNumber: 1, marketId: branchId }));\r\n  }, [dispatch, subCatStatusIsUpdated]);\r\n\r\n  // ----------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Market Menu </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* ********* Start Page Header *********** */}\r\n        <Stack sx={{ ...headerContainerSx, mb: \"48px\" }}>\r\n          {/* ------- Branch Logo ------- */}\r\n          <Box display=\"flex\" alignItems=\"center\" my=\"12px\">\r\n            <Image\r\n              src=\"/assets/images/employee/pandaLogo.png\"\r\n              sx={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          {/* ------- title and status ------- */}\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            flexGrow={1}\r\n          >\r\n            <Typography\r\n              color=\"#121212\"\r\n              ml={{ xs: \"8px\", sm: \"25px\" }}\r\n              variant=\"h5\"\r\n            >\r\n              {branchName}\r\n            </Typography>\r\n\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              flexDirection={{ xs: \"column\", sm: \"row\" }}\r\n            >\r\n              <Typography\r\n                sx={{ ...highLightTextSx, mr: { xs: \"0px\", sm: \"20px\" } }}\r\n              >\r\n                {translate(`available`)}\r\n              </Typography>\r\n              <Switch sx={{ ...switchSx }} checked />\r\n            </Box>\r\n          </Box>\r\n        </Stack>\r\n\r\n        {/* ********* Start Product Cards Row ********* */}\r\n        <Grid container spacing=\"24px\">\r\n          <Grid item xs={12} sm={6}>\r\n            <HighestItemCard title=\"the_highest_selling_product\" />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <HighestItemCard title=\"the_highest_rated_product\" />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* ********* Start Market Sub Categories List ********* */}\r\n        {/* ---- table title  holder----- */}\r\n        <Box sx={{ ...titleHolderSx }}>\r\n          {/* title */}\r\n          <Typography variant=\"h5\" sx={titleTextSx}>\r\n            {translate(\"sub_category\")}\r\n          </Typography>\r\n\r\n          {/* Add Category Btn */}\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <IconButton\r\n              onClick={() => navigate(\"add-market-subCategory\")}\r\n              sx={buttonStyle}\r\n            >\r\n              <img src=\"/assets/icons/arrow/plus.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography\r\n              sx={textSx}\r\n              onClick={() => navigate(\"add-market-subCategory\")}\r\n            >\r\n              {translate(\"add_sub_category\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <MarketSubCategoryList />\r\n\r\n        {/* ********* Start Market Products List ********* */}\r\n        {/* ---- table title  holder----- */}\r\n        <Box sx={{ ...titleHolderSx }}>\r\n          {/* title */}\r\n          <Typography variant=\"h5\" sx={titleTextSx}>\r\n            {translate(\"products\")}\r\n          </Typography>\r\n\r\n          {/* Add Category Btn */}\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <IconButton\r\n              onClick={() => navigate(\"add-market-product\")}\r\n              sx={buttonStyle}\r\n            >\r\n              <img src=\"/assets/icons/arrow/plus.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography\r\n              sx={textSx}\r\n              onClick={() => navigate(\"add-market-product\")}\r\n            >\r\n              {translate(\"add_new_product\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n        <MarketProductList />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\opportunityPages\\PromoteNowPage.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\opportunityPages\\OpportunityCenterPage.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\VerifyEmailPage.js",["2841","2842","2843"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport RHFMuiOtpInput from \"../../../components/hook-form/RHFMuiOtpInput\";\r\n\r\n// import { MuiOtpInput } from 'mui-one-time-password-input';\r\n\r\n// -------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 15px 40px\", md: \"45px 40px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n  width: { xs: \"95%\", sm: \"534px\" },\r\n  m: \"auto\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function VerifyEmailPage() {\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  const navigate = useNavigate();\r\n\r\n  const VerifySchema = Yup.object().shape({\r\n    VeificationCode: Yup.string()\r\n      .required(translate(\"all_inputs_is_required\"))\r\n      .min(6, translate(\"must_be_exactly_6_digits\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    VeificationCode: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(VerifySchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      // code here\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`verfiy_email`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // -------------- JSX Code ----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Verify Email </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Stack justifyContent=\"center\" alignItems=\"center\">\r\n          <Box sx={{ ...mainHolderSx, mt: { lg: \"126px\" } }}>\r\n            {/* ------ Tilte ---- */}\r\n            <Typography\r\n              variant=\"h5\"\r\n              color=\"#121212\"\r\n              mb=\"24px\"\r\n              textAlign=\"center\"\r\n            >\r\n              {translate(`verfiy_email`)}\r\n            </Typography>\r\n\r\n            {/* ------ Image Holder ---- */}\r\n            <Box mb=\"15px\">\r\n              <img\r\n                src=\"/assets/images/dashboard/changeEmail.svg\"\r\n                alt=\"\"\r\n                style={{\r\n                  margin: \"auto\",\r\n                }}\r\n              />\r\n            </Box>\r\n\r\n            <Box mb=\"24px\">\r\n              <Typography fontSize=\"16px\" color=\"#121212\" textAlign=\"center\">\r\n                {translate(\r\n                  `enter_your_verification_code_sent_to_your_email_within_1 minute `\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              <Stack mb=\"24px\">\r\n                <RHFMuiOtpInput\r\n                  name=\"VeificationCode\"\r\n                  display=\"flex\"\r\n                  gap={2}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  length={6}\r\n                  TextFieldsProps={{\r\n                    placeholder: \"_\",\r\n                  }}\r\n                />\r\n              </Stack>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Stack direction=\"row\">\r\n                <Button\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  variant=\"Contained\"\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                  onClick={() => {\r\n                    navigate(-1);\r\n                  }}\r\n                >\r\n                  {translate(\"back\")}\r\n                </Button>\r\n                <LoadingButton\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                >\r\n                  {translate(\"confirm\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Box>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ChangePhonePage.js",["2844","2845"],[],"import React from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  MenuItem,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { updateProfilePhoneNumber } from \"../../../redux/services/admin_profile_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// ---------------------------------------------------------------------------------\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 15px 40px\", md: \"45px 40px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n  width: { xs: \"95%\", sm: \"534px\" },\r\n  m: \"auto\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function ChangePhonePage() {\r\n  const { translate } = useLocales();\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingUpdatePhonNumber } = useSelector(\r\n    (state) => state.adminProfile\r\n  );\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n  const navigate = useNavigate();\r\n\r\n  const ChangePhoneSchema = Yup.object().shape({\r\n    phoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    // countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    phoneNumber: \"\",\r\n    countryCode: \"+02\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ChangePhoneSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(\"data is \", data.phoneNumber);\r\n    try {\r\n      // code here\r\n      dispatch(updateProfilePhoneNumber(data));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`change_your_phone`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -------------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Change Phone Page</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Stack justifyContent=\"center\" alignItems=\"center\">\r\n          <Box sx={{ ...mainHolderSx, mt: { lg: \"126px\" } }}>\r\n            {/* ------ Tilte ---- */}\r\n            <Typography\r\n              variant=\"h5\"\r\n              color=\"#121212\"\r\n              mb=\"24px\"\r\n              textAlign=\"center\"\r\n            >\r\n              {translate(`change_your_phone`)}\r\n            </Typography>\r\n\r\n            {/* ------ Image Holder ---- */}\r\n            <Box mb=\"24px\">\r\n              <img\r\n                src=\"/assets/images/dashboard/changePhone.svg\"\r\n                alt=\"\"\r\n                style={{\r\n                  margin: \"auto\",\r\n                }}\r\n              />\r\n            </Box>\r\n\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              <Stack mb=\"24px\">\r\n                <RHFTextField\r\n                  name=\"phoneNumber\"\r\n                  type=\"number\"\r\n                  label={translate(\"phone\")}\r\n                  placeholder={translate(\"add_phone\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      pr: \"20px\",\r\n                      height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#D8D8D8\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"countryCode\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          width: \"80px\",\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"countryCode\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                        <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Stack>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Stack direction=\"row\">\r\n                <Button\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  variant=\"Contained\"\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                  onClick={() => {\r\n                    navigate(-1);\r\n                  }}\r\n                >\r\n                  {translate(\"back\")}\r\n                </Button>\r\n                <LoadingButton\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isLoadingUpdatePhonNumber}\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                >\r\n                  {translate(\"confirm\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Box>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ChangeEmailPage.js",["2846","2847","2848"],[],"import React from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport { updateAdminEmail } from \"../../../redux/services/admin_profile_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// -------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 15px 40px\", md: \"45px 40px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n  width: { xs: \"95%\", sm: \"534px\" },\r\n  m: \"auto\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  marginBottom: \"10px\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function ChangeEmailPage() {\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingUpdateEmail } = useSelector((state) => state.adminProfile);\r\n\r\n  const ChangeEmailSchema = Yup.object().shape({\r\n    newEmail: Yup.string()\r\n      .email(translate(\"email_must_be_a_valid_email_address\"))\r\n      .required(translate(\"email_is_required\")),\r\n    oldEmail: Yup.string()\r\n      .email(translate(\"email_must_be_a_valid_email_address\"))\r\n      .required(translate(\"email_is_required\")),\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    newEmail: \"\",\r\n    oldEmail: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ChangeEmailSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      // code here\r\n      dispatch(updateAdminEmail(data));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`change_email`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // -------------- JSX Code ----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Change Email Page</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Stack justifyContent=\"center\" alignItems=\"center\">\r\n          <Box sx={{ ...mainHolderSx, mt: { lg: \"126px\" } }}>\r\n            {/* ------ Tilte ---- */}\r\n            <Typography\r\n              variant=\"h5\"\r\n              color=\"#121212\"\r\n              mb=\"24px\"\r\n              textAlign=\"center\"\r\n            >\r\n              {translate(`change_email`)}\r\n            </Typography>\r\n\r\n            {/* ------ Image Holder ---- */}\r\n            <Box mb=\"24px\">\r\n              <img\r\n                src=\"/assets/images/dashboard/changeEmail.svg\"\r\n                alt=\"\"\r\n                style={{\r\n                  margin: \"auto\",\r\n                }}\r\n              />\r\n            </Box>\r\n\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              <Stack mb=\"24px\">\r\n                <RHFTextField\r\n                  name=\"oldEmail\"\r\n                  label={translate(\"old_email\")}\r\n                  placeholder={translate(\"enter_your_new_email\")}\r\n                  type=\"email\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"22px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n                <RHFTextField\r\n                  name=\"newEmail\"\r\n                  label={translate(\"Email\")}\r\n                  placeholder={translate(\"enter_your_new_email\")}\r\n                  type=\"email\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"22px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  placeholder={translate(\"enter_your_new_email\")}\r\n                  type=\"password\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"22px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Stack>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Stack direction=\"row\">\r\n                <Button\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  variant=\"Contained\"\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                  onClick={() => {\r\n                    navigate(-1);\r\n                  }}\r\n                >\r\n                  {translate(\"back\")}\r\n                </Button>\r\n                <LoadingButton\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isLoadingUpdateEmail}\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                >\r\n                  {translate(\"confirm\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Box>\r\n        </Stack>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\helpPages\\HelpCPage.js",["2849","2850"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Box, Container } from \"@mui/material\";\r\n//layout Components\r\nimport Main from \"../../../layouts/dashboard/Main\";\r\n//sections components\r\nimport Faqs from \"../../../section/common/helpPages/Faqs\";\r\nimport HelpHeader from \"../../../section/common/helpPages/details/HelpHeader\";\r\nimport MyQuestions from \"../../../section/common/helpPages/MyQuestions\";\r\nimport MyMeeting from \"../../../section/common/helpPages/MyMeeting\";\r\nimport PrivacyPolicy from \"../../../section/common/helpPages/PrivacyPolicy\";\r\nimport LegalUpdates from \"../../../section/common/helpPages/LegalUpdates\";\r\nimport TermsConditions from \"../../../section/common/helpPages/TermsConditions\";\r\n// component\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n\r\n// -------------------------------------------------------------------------------------------\r\n\r\nexport default function HelpCPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const [currentTab, setCurrentTab] = useState(\"faqs\");\r\n\r\n  const changeTabHandler = (newTab) => {\r\n    setCurrentTab(newTab);\r\n  };\r\n\r\n  const TABS = [\r\n    {\r\n      value: \"faqs\",\r\n      component: <Faqs />,\r\n    },\r\n    {\r\n      value: \"terms_conditions\",\r\n      component: <TermsConditions />,\r\n    },\r\n    {\r\n      value: \"privacy_policy\",\r\n      component: <PrivacyPolicy />,\r\n    },\r\n    {\r\n      value: \"legal_updates\",\r\n      component: <LegalUpdates />,\r\n    },\r\n    // {\r\n    //     value: \"my_questions\",\r\n    //     component: <MyQuestions />,\r\n    // },\r\n    // {\r\n    //  value: \"my_meeting\",\r\n    //  component: <MyMeeting />,\r\n    // },\r\n  ];\r\n\r\n  // ---------- JSX Code ----------\r\n  return (\r\n    <>\r\n      <>\r\n        <Helmet>\r\n          <title> Help & Suppourt </title>\r\n        </Helmet>\r\n\r\n        {/* ******** Start Header ******** */}\r\n        <HelpHeader selectedTab={currentTab} onChangeTab={changeTabHandler} />\r\n\r\n        {/* ******* Start OutLet ********* */}\r\n        <Main sx={{ width: \"100%\", pt: \"40px\" }}>\r\n          <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n            {TABS.map(\r\n              (tab) =>\r\n                tab.value === currentTab && (\r\n                  <Box key={tab.value}> {tab.component} </Box>\r\n                )\r\n            )}\r\n          </Container>\r\n        </Main>\r\n      </>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\market-menu\\EditMarketProduct.js",["2851","2852","2853","2854","2855","2856","2857","2858"],[],"import React from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n//@Mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// Form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFSelect,\r\n} from \"../../../components/hook-form\";\r\n// Section Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useTheme } from \"@emotion/react\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  addMarketProduct,\r\n  getMarketCategories,\r\n  getSubCategoriesByMarketId,\r\n  updateMarketProduct,\r\n} from \"../../../redux/services/branch_market_service\";\r\nimport { useState } from \"react\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n// ------------ Style --------------\r\n\r\nconst mainHolderSx = {\r\n  p: {\r\n    xs: \"30px 30px 48px 20px\",\r\n    sm: \"30px 42px 48px 42px\",\r\n  },\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"22px\",\r\n    color: \"#535353\",\r\n    paddingRight: \"30px\",\r\n    pr: \"5px!important\",\r\n    pl: \"3px\",\r\n  },\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"5px\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  paddingLeft: { lg: \"70px\", sm: \"70px\", xs: \"42px\" },\r\n  paddingRight: { lg: \"70px\", sm: \"70px\", xs: \"42px\" },\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"22px\",\r\n  color: \" #FFCC63\",\r\n  border: \"0.901691px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  paddingLeft: { lg: \"85px\", sm: \"85px\", xs: \"52px\" },\r\n  paddingRight: { lg: \"85px\", sm: \"85px\", xs: \"52px\" },\r\n  paddingTop: \"12px\",\r\n  paddingBottom: \"12px\",\r\n  borderRadius: \"8px\",\r\n  marginRight: \"18px\",\r\n  width: \"100%\",\r\n};\r\n\r\nexport default function EditMarketProduct() {\r\n  const navigate = useNavigate();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const theme = useTheme();\r\n\r\n  const [categoryId, setCategoryId] = useState(undefined);\r\n\r\n  const [marketSubCategoryId, setMarketSubCategoryId] = useState();\r\n\r\n  const [file, setFile] = useState(null);\r\n\r\n  const { branchId, productId, oldProductName } = useSelector(\r\n    (state) => state.control\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { marketCategory, subCategory, isLoadingAddMarketProduct } =\r\n    useSelector((state) => state.branchMarket);\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const ProductSchema = Yup.object().shape({\r\n    Name: Yup.string().required(translate(\"product_name_en_is_required\")),\r\n    SecondName: Yup.string()\r\n      .required(translate(\"arabic_product_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n    ImageUrl:\r\n      file !== null\r\n        ? \"\"\r\n        : Yup.string().required(translate(\"product_photo_is_required\")),\r\n\r\n    Description: Yup.string()\r\n      .required(translate(\"description_en_is_required\"))\r\n      .min(20),\r\n    SecondDescription: Yup.string()\r\n      .required(translate(\"description_ar_is_required\"))\r\n      .min(20),\r\n    categoryId:\r\n      categoryId !== undefined\r\n        ? \"\"\r\n        : Yup.string().required(translate(\"category_is_required\")),\r\n    MarketSubCategoryId: Yup.string().required(\r\n      translate(\"sub_category_name_is_required\")\r\n    ),\r\n    Unit: Yup.string().required(translate(\"unit_is_required\")),\r\n    Price: Yup.string().required(translate(\"minimum_order_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    Name: oldProductName,\r\n    SecondName: \"\",\r\n    ImageUrl: \"\",\r\n    Description: \"\",\r\n    SecondDescription: \"\",\r\n    categoryId: categoryId,\r\n    SubCategory: marketSubCategoryId,\r\n    Unit: \"\",\r\n    Price: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ProductSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const watchImageUrl = watch(\"ImageUrl\");\r\n\r\n  let formData = new FormData();\r\n\r\n  const addImageUrl = async (e) => {\r\n    setFile(e.target.files[0]);\r\n    formData.append(\"ImageUrl\", e.target.files[0]);\r\n  };\r\n  useEffect(() => {\r\n    dispatch(getMarketCategories(branchId));\r\n  }, [categoryId]);\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      dispatch(\r\n        updateMarketProduct({\r\n          data: {\r\n            name: data.Name,\r\n            secondName: data.SecondName,\r\n            description: data.Description,\r\n            secondDescription: data.SecondDescription,\r\n            price: data.Price,\r\n            supCategoryId: data.MarketSubCategoryId,\r\n            unit: data.Unit,\r\n            image: file,\r\n          },\r\n          id: productId,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/market-menu\"\r\n    >\r\n      {translate(`market_menu`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_product`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------- JSX Code --------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Market Product </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Box display=\"flex\" mb=\"24px\" alignItems=\"center\">\r\n            <IconButton\r\n              disableRipple\r\n              onClick={() => {\r\n                navigate(\"/employee/market-menu\");\r\n              }}\r\n              sx={{\r\n                width: \"25px\",\r\n                transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n              }}\r\n            >\r\n              <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n            </IconButton>\r\n            {/* ----- Title -----  */}\r\n            <Typography variant=\"h5\" color=\"#ffcc63\" ml=\"13px\">\r\n              {translate(`add_new_product`)}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* ************ Start Add New Product ************/}\r\n            <Grid container rowSpacing={2} columnSpacing={8}>\r\n              {/* ------------ Left Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2} columnSpacing=\"16px\">\r\n                  {/* product name en  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Name\"\r\n                      label={translate(\"product_name_en\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product name ar  input */}\r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"SecondName\"\r\n                      label={translate(\"product_name_ar\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product photo input */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"ImageUrl\"\r\n                      label={translate(\"product_photo\")}\r\n                      value={file?.name}\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: file ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"ImageUrl\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                                <input\r\n                                  hidden\r\n                                  accept=\"image/*\"\r\n                                  type=\"file\"\r\n                                  onChange={addImageUrl}\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*Category Select*/}\r\n\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"categoryId\"\r\n                      type=\"text\"\r\n                      label={translate(\"categories\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      // value={categoryId}\r\n                      onChange={(e) => {\r\n                        setCategoryId(e.target.value);\r\n                        dispatch(\r\n                          getSubCategoriesByMarketId({\r\n                            marketId: branchId,\r\n                            categoryId: e.target.value,\r\n                          })\r\n                        );\r\n                      }}\r\n                    >\r\n                      {marketCategory.map((option, index) => (\r\n                        <>\r\n                          <option hidden />\r\n                          <option key={index} value={option.id}>\r\n                            {option.name}\r\n                          </option>\r\n                        </>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/*Sub-Category Select*/}\r\n                  <Grid item xs={12}>\r\n                    <RHFSelect\r\n                      name=\"MarketSubCategoryId\"\r\n                      type=\"text\"\r\n                      label={translate(\"sub_category\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      /*  value={marketSubCategoryId}\r\n                      onChange={(e) => {\r\n                        setMarketSubCategoryId(e.target.value);\r\n                      }}*/\r\n                    >\r\n                      {subCategory.map((option, index) => (\r\n                        <>\r\n                          <option hidden />\r\n                          <option key={index} value={option.id}>\r\n                            {option.name}\r\n                          </option>\r\n                        </>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n\r\n                  {/* product  size  input \r\n                  <Grid item xs={12} md={6}>\r\n                    <RHFTextField\r\n                      name=\"Size\"\r\n                      type=\"text\"\r\n                      label={translate(\"size\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>*/}\r\n\r\n                  {/* product unit  input */}\r\n                  <Grid item xs={12} md={12}>\r\n                    <RHFTextField\r\n                      name=\"Unit\"\r\n                      type=\"text\"\r\n                      label={translate(\"unit_kg_litter\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product minimum order input*/}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"Price\"\r\n                      type=\"number\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      label={translate(`minmum_order`)}\r\n                      // placeholder={translate(`minmum_order`)}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <RHFSelect\r\n                            name=\"Currency\"\r\n                            sx={{\r\n                              ...transparentBorderTxtField,\r\n                              width: \"80px\",\r\n                            }}\r\n                            onChange={(e) =>\r\n                              setValue(\"Currency\", e.target.value, {\r\n                                shouldValidate: true,\r\n                              })\r\n                            }\r\n                          >\r\n                            <MenuItem value=\"AED\">AED</MenuItem>\r\n                            <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                          </RHFSelect>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/* product discount  input \r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      name=\"Discount\"\r\n                      type=\"text\"\r\n                      label={translate(\"discount\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>*/}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------------ Right Side Inputs ------- */}\r\n              <Grid item xs={12} md={6}>\r\n                <Grid container rowSpacing={2}>\r\n                  {/* Description En Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"Description\"\r\n                      label={translate(\"description_English\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#bcbcbc\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  {/* Description Ar Inputs */}\r\n                  <Grid item xs={12}>\r\n                    <RHFTextField\r\n                      multiline\r\n                      rows={3.9}\r\n                      name=\"SecondDescription\"\r\n                      label={translate(\"description_arabic\")}\r\n                      type=\"text\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-root\": {\r\n                          height: \"114px\",\r\n                          \"& fieldset\": {\r\n                            borderColor: \"#bcbcbc\",\r\n                          },\r\n                          \"&:hover fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                          \"&.Mui-focused fieldset\": {\r\n                            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* =========@@ Action Button @@========*/}\r\n            <Grid container columnSpacing={8}>\r\n              <Grid item xs={12} md={6} />\r\n\r\n              <Grid item xs={12} md={6}>\r\n                <Stack direction=\"row\" mt=\"48px\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    sx={outLinedButtonStyle}\r\n                    onClick={() => navigate(\"/employee/market-menu\")}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n\r\n                  <LoadingButton\r\n                    sx={{ ...containedButtonStyle }}\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingAddMarketProduct}\r\n                  >\r\n                    {translate(`preview`)}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ChangePasswordPage.js",["2859","2860"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  InputAdornment,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport { updateAdminPassword } from \"../../../redux/services/admin_profile_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// --------- Styles ------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 25px\", md: \"45px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function ChangePasswordPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingUpdatePassword } = useSelector(\r\n    (state) => state.adminProfile\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showOldPassword, setShowOldPassword] = useState(false);\r\n  const [showNewPassword, setShowNewPassword] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const ChangePasswordSchema = Yup.object().shape({\r\n    oldPassword: Yup.string().required(translate(\"old_password_is_required\")),\r\n    newPassword: Yup.string().required(translate(\"new_password_is_required\")),\r\n    ConfirmNewPassword: Yup.string()\r\n      .required(translate(\"confirm_new_password_is_requierd\"))\r\n      .oneOf([Yup.ref(\"newPassword\")], translate(\"passwords_do_not_match\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    oldPassword: \"\",\r\n    newPassword: \"\",\r\n    ConfirmNewPassword: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ChangePasswordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      // code here\r\n      dispatch(updateAdminPassword(data));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`change_password`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Change Password Page</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Typography variant=\"h5\" color=\"#121212\" mb=\"30px\">\r\n            {translate(`change_password`)}\r\n          </Typography>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Cahnge Password ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*====== Old Password Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"oldPassword\"\r\n                  placeholder={translate(\"enter_old_password\")}\r\n                  type={showOldPassword ? \"text\" : \"password\"}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() =>\r\n                            setShowOldPassword(\r\n                              (showOldPassword) => !showOldPassword\r\n                            )\r\n                          }\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showOldPassword\r\n                                ? \"eva:eye-off-outline\"\r\n                                : \"eva:eye-outline\"\r\n                            }\r\n                            color={showOldPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"22px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*====== New Password Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"newPassword\"\r\n                  placeholder={translate(\"enter_new_password\")}\r\n                  type={showNewPassword ? \"text\" : \"password\"}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() =>\r\n                            setShowNewPassword(\r\n                              (showNewPassword) => !showNewPassword\r\n                            )\r\n                          }\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showNewPassword\r\n                                ? \"eva:eye-off-outline\"\r\n                                : \"eva:eye-outline\"\r\n                            }\r\n                            color={showNewPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"22px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              {/*====== Confirm New Password Input ====== */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                <RHFTextField\r\n                  name=\"ConfirmNewPassword\"\r\n                  placeholder={translate(\"confirm_new_password\")}\r\n                  type={showNewPassword ? \"text\" : \"password\"}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword\r\n                                ? \"eva:eye-off-outline\"\r\n                                : \"eva:eye-outline\"\r\n                            }\r\n                            color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  inputProps={{\r\n                    sx: {\r\n                      \"&::placeholder\": {\r\n                        textAlign: \"left\",\r\n                        color: \"#9DA0A4\",\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"14px\",\r\n                        lineHeight: \"22px\",\r\n                      },\r\n                    },\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6} />\r\n\r\n              <Grid item xs={12} sm={6} md={6} mt=\"48px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      navigate(-1);\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingUpdatePassword}\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"confirm\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\contactUsPages\\ContactUsCPage.js",["2861"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Box, Container, CircularProgress } from \"@mui/material\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Main from \"../../../layouts/dashboard/Main\";\r\n// section components\r\nimport ContactUsHeader from \"../../../section/common/contactUsPages/details/ContactUsHeader\";\r\nimport InboxSection from \"../../../section/common/contactUsPages/InboxSection\";\r\nimport SendInquiry from \"../../../section/common/contactUsPages/SendInquiry\";\r\n\r\n// ----------------------------------------------------------------------------------------\r\n\r\nexport default function ContactUs() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const [currentTab, setCurrentTab] = useState(\"sendInquiry\");\r\n\r\n  const changeTabHandler = (newTab) => {\r\n    setCurrentTab(newTab);\r\n  };\r\n\r\n  const TABS = [\r\n    {\r\n      value: \"inbox\",\r\n      component: <InboxSection />,\r\n    },\r\n    {\r\n      value: \"sendInquiry\",\r\n      component: <SendInquiry />,\r\n    },\r\n  ];\r\n\r\n  // -------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Contact Us </title>\r\n      </Helmet>\r\n\r\n      {/* *********** Start Header  *************** */}\r\n      <Container\r\n        /* sx={{\r\n          px: { xs: \"15px\", lg: \"0px !important\" },\r\n        }}*/\r\n        maxWidth={themeStretch ? false : \"xl\"}\r\n      >\r\n        <ContactUsHeader\r\n          selectedTab={currentTab}\r\n          onChangeTab={changeTabHandler}\r\n        />\r\n\r\n        {/* *********** Start OutLet  *************** */}\r\n        <Main sx={{ width: \"100%\", pt: \"40px\" }}>\r\n          <Container\r\n            sx={{\r\n              px: { xs: \"15px\", lg: \"0px!important\" },\r\n            }}\r\n            maxWidth={themeStretch ? false : \"lg\"}\r\n          >\r\n            {TABS.map(\r\n              (tab) =>\r\n                tab.value === currentTab && (\r\n                  <Box key={tab.value}> {tab.component} </Box>\r\n                )\r\n            )}\r\n          </Container>\r\n        </Main>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\ProfileCPage.js",["2862","2863","2864","2865"],[],"import React, { useEffect, useState } from \"react\";\r\n// import { useTheme } from '@emotion/react';\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  Container,\r\n  Stack,\r\n  Typography,\r\n  Button,\r\n} from \"@mui/material\";\r\n// components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Image from \"../../../components/image/Image\";\r\n// Section Components\r\nimport ProfileInformationSection from \"../../../section/common/profilePages/ProfileInformationSection\";\r\nimport ProtectionSection from \"../../../section/common/profilePages/ProtectionSection\";\r\n//redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// urls\r\nimport * as URLS from \"../../../urls\";\r\n// slice\r\n// import { editMode } from '../../../redux/slices/adminProfile';\r\n// moments\r\n// import moment from 'moment/moment';\r\n//services\r\nimport {\r\n  getAdminProfileInfo,\r\n  updateAdminPhoto,\r\n} from \"../../../redux/services/admin_profile_service\";\r\nimport { getAdminQuestions } from \"../../../redux/services/admin_help_service\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog/ConfirmDialog\";\r\nimport tr from \"date-fns/esm/locale/tr/index.js\";\r\n\r\n// ------------------------------------------------------------------\r\n\r\n// ------------ Styles --------------\r\nconst mainTitleSx = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"25px\",\r\n  p: \"24px 40px\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n  alignItems: \"center\",\r\n  width: \"100%\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst avatarHolderSx = {\r\n  p: \"4px\",\r\n  borderRadius: \"50%\",\r\n  border: \"4px solid #FFCC63\",\r\n  width: \"138px\",\r\n  height: \"138px\",\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst avatarImgSx = {\r\n  ...avatarHolderSx,\r\n  mb: { xs: \"35px\", sm: \"0px\" },\r\n  mt: { xs: \"20px\", sm: \"0px\" },\r\n  \"& .wrapper\": {\r\n    display: \"block!important\",\r\n    height: \"100%\",\r\n    \"& >img\": {\r\n      borderRadius: \"50%\",\r\n      objectFit: \"fill\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleTextSx = {\r\n  fontWeight: 700,\r\n  fontSize: \"24px\",\r\n  lineHeight: \"20px\",\r\n  textTransform: \"capitalize\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTextSx = {\r\n  fontWeight: 500,\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  textTransform: \"capitalize\",\r\n  letterSpacing: \"0.435811px\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\n// // data\r\n// const protectionPoints = [\r\n//   {\r\n//     title: `point`,\r\n//     discription: `\r\n//                         Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n//                         Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n//                         when an unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n//                         It has survived not only five centuries but also the leap into electronic typesetting,\r\n//                         remaining essentially unchanged.  It was popularised in the 1960s with the release\r\n//                         of Letraset sheets containing\r\n//                     `,\r\n//   },\r\n//   {\r\n//     title: `point`,\r\n//     discription: `\r\n//                         Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n//                         Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n//                         when an unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n//                         It has survived not only five centuries but also the leap into electronic typesetting,\r\n//                         remaining essentially unchanged.  It was popularised in the 1960s with the release\r\n//                         of Letraset sheets containing\r\n//                     `,\r\n//   },\r\n//   {\r\n//     title: `point`,\r\n//     discription: `\r\n//                         Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n//                         Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n//                         when an unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n//                         It has survived not only five centuries but also the leap into electronic typesetting,\r\n//                         remaining essentially unchanged.  It was popularised in the 1960s with the release\r\n//                         of Letraset sheets containing\r\n//                     `,\r\n//   },\r\n//   {\r\n//     title: `point`,\r\n//     discription: `\r\n//                         Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n//                         Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n//                         when an unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n//                         It has survived not only five centuries but also the leap into electronic typesetting,\r\n//                         remaining essentially unchanged.  It was popularised in the 1960s with the release\r\n//                         of Letraset sheets containing\r\n//                     `,\r\n//   },\r\n// ];\r\n\r\nexport default function ProfileCPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const { isLoading, error, personalInfo, editIsSuccessful } = useSelector(\r\n    (state) => state.adminProfile\r\n  );\r\n\r\n  const { myQuestion } = useSelector((state) => state.adminHelp);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const logoutHandler = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.clear();\r\n    window.location.href = \"/auth/login\";\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  // const theme = useTheme()\r\n\r\n  // const { direction } = theme\r\n\r\n  // const [profilePic, setProfilePic] = useState();\r\n\r\n  let formData = new FormData();\r\n\r\n  const addProfilePic = async (e) => {\r\n    console.log(e.target.files[0]);\r\n    formData.append(\"file\", e.target.files[0]);\r\n    try {\r\n      dispatch(updateAdminPhoto(formData));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // console.log(profilePic)\r\n\r\n  useEffect(() => {\r\n    dispatch(getAdminProfileInfo(\"en-US\"));\r\n    dispatch(getAdminQuestions(\"en\"));\r\n  }, [dispatch, editIsSuccessful]);\r\n\r\n  // ----------- JSX Code ----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> My Profile </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {isLoading && (\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <CircularProgress />\r\n          </Box>\r\n        )}\r\n\r\n        {!isLoading && (\r\n          <>\r\n            {/* **************** Profile Page Title ************** */}\r\n            <Typography sx={{ ...mainTitleSx, mb: \"30px\" }} variant=\"h5\">\r\n              {translate(\"my_profile\")}\r\n            </Typography>\r\n\r\n            {/* **************** Admin Hearder Card ************** */}\r\n            <Stack sx={{ ...mainHolderSx, mb: \"49px\" }}>\r\n              {/* ------------- Profile Image-------------*/}\r\n              <Box position=\"relative\">\r\n                <Image\r\n                  sx={{ ...avatarImgSx }}\r\n                  src={\r\n                    personalInfo?.profilePictureUrl !== null\r\n                      ?URLS.baseImageURL + `user/${userInfo?.profilePictureUrl}`\r\n                      : \"/assets/images/dashboard/admin.png\"\r\n                  }\r\n                />\r\n\r\n                <Box\r\n                  sx={{\r\n                    position: \"absolute\",\r\n                    top: { xs: \"125px\", sm: \"105px\" },\r\n                    left: \"85px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  aria-label=\"upload picture\"\r\n                  component=\"label\"\r\n                >\r\n                  <input\r\n                    hidden\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    onChange={addProfilePic}\r\n                  />\r\n                  <img src=\"/assets/icons/dashboard/ic_edit.svg\" alt=\"edit\" />\r\n                </Box>\r\n              </Box>\r\n\r\n              {/* ----------- Profile Brief ---------- */}\r\n              <Box ml={{ xs: \"0px\", sm: \"32px\" }} flexGrow={1}>\r\n                <Stack\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"end\"\r\n                  sx={{\r\n                    position: \"absolute\",\r\n                    top: \"32px\",\r\n                    right: \"35px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={logoutHandler}\r\n                >\r\n                  <img src=\"/assets/icons/dashboard/ic_logout.svg\" alt=\"\" />\r\n                  <Typography ml=\"12px\" sx={{ ...subTextSx, fontSize: \"16px\" }}>\r\n                    {translate(`logout`)}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                <Typography sx={{ ...titleTextSx, mb: \"12px\" }}>\r\n                  {`${personalInfo?.firstName}  ${personalInfo?.lastName}`}\r\n                </Typography>\r\n\r\n                <Typography sx={{ ...subTextSx, mb: \"12px\" }}>\r\n                  {personalInfo?.email}\r\n                </Typography>\r\n\r\n                <Typography sx={{ ...subTextSx }}>\r\n                  {translate(`admin`)}\r\n                </Typography>\r\n              </Box>\r\n            </Stack>\r\n\r\n            {/* **************** Admin Profile Information ************** */}\r\n            <ProfileInformationSection personalInfo={personalInfo} />\r\n\r\n            {/* **************** Admin Protection Points  ************** \r\n            <ProtectionSection myQuestion={myQuestion} />*/}\r\n          </>\r\n        )}\r\n      </Container>\r\n\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"logout\")}\r\n        content={<>{translate(\"are_you_sure_want_to_ogout\")}?</>}\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              handleLogout();\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            {translate(\"yes\")}\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\profilePages\\EditProfileInfoPage.js",["2866","2867","2868"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n} from \"../../../components/hook-form\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getAdminProfileInfo,\r\n  editAdminProfileInfo,\r\n} from \"../../../redux/services/admin_profile_service\";\r\nimport moment from \"moment\";\r\n// -------------------------------------------------------------------------------------\r\n\r\n// --------------- Styles --------------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 25px\", md: \"45px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\nexport default function EditProfileInfoPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [ProfilePhoto, setImageUrl] = useState(null);\r\n\r\n  var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  var AdminId = userInfo?.id;\r\n\r\n  const { isLoading, personalInfo } = useSelector(\r\n    (state) => state?.adminProfile\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const EditProfileInfoSchema = Yup.object().shape({\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Address: Yup.string().required(translate(\"address_is_required\")),\r\n    DateOfBirth: Yup.string()\r\n      .required(translate(\"date_of_birth_is_required\"))\r\n      .nullable(),\r\n    Gender: Yup.number().required(translate(\"gender_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: personalInfo?.firstName,\r\n    LastName: personalInfo?.lastName,\r\n    PhoneNumber: personalInfo?.phoneNumber,\r\n    gender: personalInfo?.gender,\r\n    Address: personalInfo?.addressName,\r\n    DateOfBirth: personalInfo?.dateOfBirth,\r\n    Gender: personalInfo?.gender ? personalInfo?.gender : 0,\r\n    AdminId: userInfo?.id,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(EditProfileInfoSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  let formData = new FormData();\r\n\r\n  const onSubmit = async (data) => {\r\n    let { DateOfBirth } = data;\r\n    DateOfBirth = convertDateFormat(DateOfBirth);\r\n    console.log(\"data =\", data);\r\n    formData.append(\"ProfilePhoto\", ProfilePhoto);\r\n    formData.append(\"FirstName\", data.FirstName);\r\n    formData.append(\"LastName\", data.LastName);\r\n    formData.append(\"PhoneNumber\", data.PhoneNumber);\r\n    formData.append(\"Gender\", data.Gender);\r\n    formData.append(\"Address\", data.Address);\r\n    formData.append(\"Role\", 1);\r\n    formData.append(\"FacilityIds\", branchId);\r\n    formData.append(\"AdminId\", AdminId);\r\n    formData.append(\"DateOfBirth\", DateOfBirth);\r\n    try {\r\n      // code here\r\n\r\n      dispatch(editAdminProfileInfo(formData));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAdminProfileInfo(\"en-US\"));\r\n    console.log(\"(AdminId)\", AdminId);\r\n  }, [dispatch]);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  // console.log(layoutPath);\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_profile_information`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------------ JSX Code ------------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Profile Info </title>\r\n      </Helmet>\r\n\r\n      <Container\r\n        sx={{\r\n          px: { xs: \"15px\", lg: \"0px!important\" },\r\n        }}\r\n        maxWidth={themeStretch ? false : \"lg\"}\r\n      >\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {isLoading && Spinner}\r\n\r\n        {!isLoading && (\r\n          <Box sx={{ ...mainHolderSx }}>\r\n            <Typography variant=\"h5\" color=\"#121212\" mb=\"30px\">\r\n              {translate(`edit_personal_information`)}\r\n            </Typography>\r\n\r\n            {/* ***************** Form **************** */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {/* *********** Edit Information ********** */}\r\n\r\n              <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                {/* ******** Left Side Inputs ******* */}\r\n                <Grid item xs={12} sm={6} md={6}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*---  first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"FirstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*---  second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"LastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={12} md={12} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"ProfilePhoto\"\r\n                      label={translate(\"Profile Photo\")}\r\n                      type=\"file\"\r\n                      onChange={(event) => {\r\n                        setImageUrl(event.target.files[0]);\r\n                        setValue(\"ProfilePhoto\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      id=\"branchLogo\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: ProfilePhoto ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                              sx={{ p: \"0px\" }}\r\n                            >\r\n                              <label htmlFor=\"branchLogo\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*====== date of birth ======= */}\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <CustomDataPicker\r\n                      name=\"DateOfBirth\"\r\n                      textLabel=\"date_of_birth\"\r\n                      //  onChange={(e) => {\r\n                      //     setValue('dateOfBirth', e.target.value['$d'], { shouldValidate: true })\r\n                      //      console.log(e.target.value)\r\n                      //   }}\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"PhoneNumber\"\r\n                      label={translate(\"phoneNumber\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Stack\r\n                    sx={{ ...genderHolderSx, position: \"relative\", ml: \"14px\" }}\r\n                  >\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      //  placeholder={Gender}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n\r\n                {/* ************* Right Side Inputs ************ */}\r\n                {/*======  Address  ====== */}\r\n                <Grid item xs={12} sm={6} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Address\"\r\n                    label={translate(\"address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                <Grid item xs={12} sm={6} md={6} />\r\n\r\n                <Grid item xs={12} sm={6} md={6} mt=\"8px\">\r\n                  <Stack direction=\"row\">\r\n                    <Button\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                      onClick={() => {\r\n                        navigate(-1);\r\n                      }}\r\n                    >\r\n                      {translate(\"back\")}\r\n                    </Button>\r\n                    <LoadingButton\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                    >\r\n                      {translate(\"confirm\")}\r\n                    </LoadingButton>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </FormProvider>\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\userPages\\UsersCPage.js",["2869","2870","2871","2872"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Mui\r\nimport { Box, Container, Typography, IconButton } from \"@mui/material\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n// Section Components\r\nimport UserList from \"../../../section/common/userPages/UserList\";\r\nimport AddUserModal from \"../../../section/@dashboard/users/detailes/AddUserModal\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { getRestaurantAdmins } from \"../../../redux/services/restaurant_service\";\r\nimport { getMarketAdmins } from \"../../../redux/services/markets_service\";\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n// ---------------- Styles ---------------\r\nconst titleStyle = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n};\r\n\r\nconst typoStyle = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"16px\",\r\n  paddingLeft: \"16px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst imgStyle = {\r\n  margin: \"auto\",\r\n};\r\n\r\nconst boxTitleStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"28px\",\r\n};\r\n\r\nconst buttonStyle = {\r\n  borderRadius: \"5px\",\r\n  background: \"#FFCC63\",\r\n  alignItems: \"center\",\r\n  width: \"34px\",\r\n  height: \"34px\",\r\n};\r\n\r\nexport default function UsersCPage() {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurantAdmins({ pageNumber: 1 }));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketAdmins({ pageNumber: 1 }));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // ---------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Users </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <Box sx={boxTitleStyle}>\r\n          <Typography sx={titleStyle} variant=\"h5\">\r\n            {translate(\"employees\")}\r\n          </Typography>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <Box sx={buttonStyle}>\r\n              <IconButton onClick={() => navigate(\"add-new-user\")}>\r\n                <img\r\n                  src=\"/assets/icons/arrow/plus.svg\"\r\n                  alt=\"\"\r\n                  style={imgStyle}\r\n                />\r\n              </IconButton>\r\n            </Box>\r\n            <Typography sx={typoStyle} onClick={() => navigate(\"add-new-user\")}>\r\n              {translate(\"add_new_employee\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <UserList />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\userPages\\EditUserInfoCPage.js",["2873","2874","2875","2876","2877","2878","2879","2880","2881","2882","2883","2884","2885","2886"],[],"import React, { useState, useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n  OutlinedInput,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport {\r\n  addFacilityAdmin,\r\n  updateFacilityProfile,\r\n} from \"../../../redux/services/get_resturant_admins_service\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  getAllBranches,\r\n  getAllBranchesMarket,\r\n  getEmployeeData,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport moment from \"moment\";\r\nimport { setEmployeeData } from \"../../../redux/slices/control\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    height: \"auto\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"& .MuiSvgIcon-root\": {\r\n      right: \"12px\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst positions = [\r\n  {\r\n    name: \"regional_manager\",\r\n    Role: 1,\r\n  },\r\n  {\r\n    name: \"branch_manager\",\r\n    Role: 2,\r\n  },\r\n  {\r\n    name: \"chasher\",\r\n    Role: 3,\r\n  },\r\n];\r\n\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  // mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\n\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nexport default function EditUserInfoCPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { AdminId, employeeInfo } = useSelector((state) => state.control);\r\n\r\n  const { employeeData } = useSelector((state) => state.branches);\r\n\r\n  console.log(employeeInfo);\r\n\r\n  const [allBranches, setAllBranches] = useState([]);\r\n\r\n  const { branches, postIsSuccessful, isLoading } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { branchesMarket } = useSelector((state) => state.market);\r\n\r\n  useEffect(() => {\r\n    setAllBranches(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [branches, branchesMarket]);\r\n\r\n  const [ProfilePicture, setSelectedFile] = React.useState(null);\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [selectedNames, setSelectedNames] = useState(employeeInfo?.facilityIds);\r\n\r\n  const [valueType, setValueType] = useState(false);\r\n  // console.log(valueType);\r\n\r\n  const AddEmployeeSchema = Yup.object().shape({\r\n    Gender: Yup.string().required(translate(\"gender_name_is_required\")),\r\n    //  ProfilePicture: Yup.string().required(\r\n    //     translate(\"profile_picture_name_is_required\")\r\n    //   ),\r\n    DateOfBirth: Yup.string().required(\r\n      translate(\"date_of_birth_is_required\")\r\n    ).nullable(),\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Email: Yup.string()\r\n      .required(translate(\"email_is_required\"))\r\n      .email(\"email_must_be_a_valid_email_address\"),\r\n    Address: Yup.string().required(translate(\"address_is_required\")),\r\n    ProfilePicture: Yup.string().required(\r\n      translate(\"profile_picture_is_required\")\r\n    ),\r\n    PhoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    Role: Yup.string().required(translate(\"position_is_required\")),\r\n    countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n    Password: Yup.string().required(translate(\"password_is_required\")),\r\n    ConfirmPassword: Yup.string()\r\n      .required(translate(\"confirm_password_is_required\"))\r\n      .oneOf([Yup.ref(\"Password\")], translate(\"passwords_do_not_match\")),\r\n    // FacilityIds: \r\n    //   Yup.array().required(translate(\"branch_is_required\")).nullable()\r\n    FacilityIds:\r\n      Yup.array().of(Yup.string().required(translate(\"branch_is_required\")))\r\n\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: employeeInfo?.firstName,\r\n    LastName: employeeInfo?.lastName,\r\n    Email: employeeInfo?.email,\r\n    Address: employeeInfo?.addressName || \"\",\r\n    PhoneNumber: employeeInfo?.phoneNumber,\r\n    Role: employeeInfo?.type,\r\n    // FacilityIds: branchId,\r\n    FacilityIds: employeeInfo?.facilityIds,\r\n    countryCode: \"+02\",\r\n    Password: \"\",\r\n    ConfirmPassword: \"\",\r\n    Gender: employeeInfo?.gender,\r\n    ProfilePicture: \"\",\r\n    DateOfBirth: employeeInfo?.dateOfBirth,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddEmployeeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const watchRole = watch(\"Role\");\r\n\r\n  const onSubmit = async (data) => {\r\n\r\n    console.log(data)\r\n    let { FacilityIds, DateOfBirth } = data;\r\n    DateOfBirth = convertDateFormat(DateOfBirth);\r\n\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"AdminId\", AdminId);\r\n\r\n    formData.append(\"ProfilePicture\", ProfilePicture);\r\n\r\n    // formData.append(\"DateOfBirth\", data.DateOfBirth);\r\n    formData.append(\"DateOfBirth\", DateOfBirth);\r\n\r\n    formData.append(\"Password\", data.Password);\r\n\r\n    formData.append(\"Email\", data.Email);\r\n\r\n    formData.append(\"Gender\", data.Gender);\r\n\r\n    formData.append(\"PhoneNumber\", data.PhoneNumber);\r\n\r\n    formData.append(\"LastName\", data.LastName);\r\n\r\n    formData.append(\"FirstName\", data.FirstName);\r\n\r\n    formData.append(\"Address\", data.Address);\r\n\r\n    formData.append(\"Role\", data.Role);\r\n\r\n    // formData.append(\"FacilityIds\", branchId);\r\n\r\n    for (let i = 0; i < data.FacilityIds.length; i++) {\r\n      formData.append(\"FacilityIds\", data.FacilityIds[i]);\r\n    }\r\n\r\n    try {\r\n      dispatch(updateFacilityProfile(formData))\r\n        .unwrap()\r\n        .then((_) => alert(\"User UPDATED Successfuly !!\"))\r\n        .catch((_) => alert(\"Failed\"));\r\n\r\n      // if (!postIsSuccessful === true) {\r\n      //   console.log(\"You Added User Successfuly !!\");\r\n      // } else {\r\n      //   alert(\"Failed !!\");\r\n      //   console.log(\"Failed !!\");\r\n      // }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/users\"\r\n    >\r\n      {translate(`employees`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_employee_information`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getEmployeeData({\r\n        Id: AdminId,\r\n      })\r\n    );\r\n    // dispatch(setEmployeeData(employeeData))\r\n\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllBranches(1));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket(1));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setAllBranches(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [branches, branchesMarket]);\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Employee Information </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`edit_employee_information`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add New Employee ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/* ******** Left Side Inputs ******* */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== employee name ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- employee first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"FirstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- employee second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"LastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== employee email ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Email\"\r\n                    type=\"email\"\r\n                    label={translate(\"email\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Phone ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNumber\"\r\n                    type=\"number\"\r\n                    label={translate(\"employee_phone\")}\r\n                    placeholder={translate(\"add_phone\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        fontSize: \"16px\",\r\n                        fontWeight: 400,\r\n                        lineHeight: \"16px\",\r\n                        color: \"#121212\",\r\n                        pl: \"10px\",\r\n                      },\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        height: \"50px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"countryCode\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            \"& .MuiSvgIcon-root\": {\r\n                              right: '-6px!important',\r\n                              top: '0%'\r\n                            },\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            // IconComponent: () => (\r\n                            // //   <svg width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            // //     <path d=\"M1 1L7 7L13 1\" stroke=\"#121212\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                            // //   </svg>\r\n                            // // ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"countryCode\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                          <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Position  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"Role\"\r\n                    type=\"text\"\r\n                    label={translate(\"employee_position\")}\r\n                    placeholder={translate(\"select_employee_position\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"Role\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                      e.target.value === 1\r\n                        ? setValueType(true)\r\n                        : setValueType(false);\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      // IconComponent: () => (\r\n                      //   <img\r\n                      //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                      //     alt=\"\"\r\n                      //   />\r\n                      // ),\r\n                    }}\r\n                  >\r\n                    {positions.map((row, index) => (\r\n                      <MenuItem value={row?.Role} key={index}>\r\n                        {translate(`${row?.name}`)}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </RHFSelect>\r\n                </Grid>\r\n\r\n                {/*======= employee Branch case(Regional Manager)  ======= */}\r\n                {watchRole === 1 && (\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <RHFSelect\r\n                      multiple\r\n                      name=\"FacilityIds\"\r\n                      type=\"text\"\r\n                      label={translate(\"employee_branch\")}\r\n                      placeholder={translate(\"select_branch\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(\"FacilityIds\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                        setSelectedNames(e.target.value);\r\n                      }}\r\n                      SelectProps={{\r\n                        multiple: true,\r\n                        native: false,\r\n                        value: selectedNames,\r\n                        // IconComponent: () => (\r\n                        //   <img\r\n                        //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                        //     alt=\"\"\r\n                        //   />\r\n                        // ),\r\n                        // InputProbs: <OutlinedInput label=\"Multiple Select\" />\r\n                      }}\r\n                    >\r\n                      {allBranches?.map((row, index) => (\r\n                        <MenuItem value={row?.id} key={index}>\r\n                          {translate(`${row?.name}`)}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n                )}\r\n\r\n                {/*======= employee Branch case(any Position)  ======= */}\r\n                {watchRole !== 1 && (\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <RHFSelect\r\n                      name=\"FacilityIds\"\r\n                      type=\"text\"\r\n                      label={translate(\"employee_branch\")}\r\n                      placeholder={translate(\"select_branch\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(`FacilityIds[${0}]`, e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      SelectProps={{\r\n                        multiple: false,\r\n                        native: false,\r\n                        // IconComponent: () => (\r\n                        //   <img\r\n                        //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                        //     alt=\"\"\r\n                        //   />\r\n                        // ),\r\n                      }}\r\n                    >\r\n                      {allBranches?.map((row, index) => (\r\n                        <MenuItem value={row?.id} key={index}>\r\n                          {translate(`${row?.name}`)}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n                )}\r\n\r\n              </Grid>\r\n\r\n              {/* ************* Right Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== emplyee Address  ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Address\"\r\n                    label={translate(\"employee_address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Password\"\r\n                    label={translate(\"password\")}\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Confirm Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ConfirmPassword\"\r\n                    label={translate(\"confirm_password\")}\r\n                    type={showConfirmPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() =>\r\n                              setShowConfirmPassword(!showConfirmPassword)\r\n                            }\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showConfirmPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={\r\n                                showConfirmPassword ? \"#FFCC63\" : \"#BCBCBC\"\r\n                              }\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Date of birth   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <CustomDataPicker\r\n                    name=\"DateOfBirth\"\r\n                    textLabel=\"date_of_birth\"\r\n                    sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee picture   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ProfilePicture\"\r\n                    label={translate(\"profile_picture\")}\r\n                    type=\"file\"\r\n                    onChange={(event) => {\r\n                      console.log(event.target.files[0]);\r\n                      setSelectedFile(event.target.files[0]);\r\n                      setValue(\"ProfilePicture\", event.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    // label={translate(\"user image\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color: ProfilePicture ? \"#535353\" : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    inputProps={{\r\n                      sx: {\r\n                        \"&::placeholder\": {\r\n                          textAlign: \"left\",\r\n                          color: \"#BCBCBC\",\r\n                          fontWeight: \"400\",\r\n                          fontSize: \"14px\",\r\n                          lineHeight: \"22px\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                          >\r\n                            <label htmlFor=\"licenses\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee gender   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Stack sx={{ ...genderHolderSx, position: \"relative\" }}>\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                    //  placeholder={Gender}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/users\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"confirm\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\common\\userPages\\AddNewUserCPage.js",["2887","2888","2889","2890","2891","2892","2893"],[],"import React, { useState, useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n  OutlinedInput,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport { addFacilityAdmin } from \"../../../redux/services/get_resturant_admins_service\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  getAllBranches,\r\n  getAllBranchesMarket,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport moment from \"moment\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst positions = [\r\n  {\r\n    name: \"regional_manager\",\r\n    Role: 1,\r\n  },\r\n  {\r\n    name: \"branch_manager\",\r\n    Role: 2,\r\n  },\r\n  {\r\n    name: \"chasher\",\r\n    Role: 3,\r\n  },\r\n];\r\n\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  // mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\n\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nexport default function AddNewBranchPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllBranches(1));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket(1));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const [allBranches, setAllBranches] = useState([]);\r\n\r\n  const { branches } = useSelector((state) => state.branches);\r\n\r\n  const { isAdded, isLoadingFacilityAdmin } = useSelector(\r\n    (state) => state.employees\r\n  );\r\n\r\n  const { branchesMarket } = useSelector((state) => state.market);\r\n\r\n  useEffect(() => {\r\n    setAllBranches(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [branches, branchesMarket]);\r\n\r\n  const [ProfilePicture, setSelectedFile] = React.useState(null);\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [selectedNames, setSelectedNames] = useState([]);\r\n\r\n  const [valueType, setValueType] = useState(false);\r\n  console.log(valueType);\r\n\r\n  const AddEmployeeSchema = Yup.object().shape({\r\n    Gender: Yup.string().required(translate(\"gender_is_required\")),\r\n    //  ProfilePicture: Yup.string().required(\r\n    //     translate(\"profile_picture_name_is_required\")\r\n    //   ),\r\n    DateOfBirht: Yup.string()\r\n      .required(translate(\"date_of_birth_is_required\"))\r\n      .nullable(),\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Email: Yup.string()\r\n      .required(translate(\"email_is_required\"))\r\n      .email(\"email_must_be_a_valid_email_address\"),\r\n    Address: Yup.string().required(translate(\"address_is_required\")),\r\n    ProfilePicture: Yup.string().required(\r\n      translate(\"profile_picture_is_required\")\r\n    ),\r\n    PhoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    Role: Yup.string().required(translate(\"position_is_required\")),\r\n    FacilityIds: valueType\r\n      ? Yup.array().required(translate(\"branch_is_required\")).nullable()\r\n      : Yup.string().required(translate(\"branch_is_required\")),\r\n    countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n    Password: Yup.string().required(translate(\"password_is_required\")),\r\n    ConfirmPassword: Yup.string()\r\n      .required(translate(\"confirm_password_is_required\"))\r\n      .oneOf([Yup.ref(\"Password\")], translate(\"passwords_do_not_match\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    Email: \"\",\r\n    Address: \"\",\r\n    PhoneNumber: \"\",\r\n    Role: \"\",\r\n    FacilityIds: valueType ? [] : \"\",\r\n    countryCode: \"+02\",\r\n    Password: \"\",\r\n    ConfirmPassword: \"\",\r\n    Gender: \"\",\r\n    ProfilePicture: \"\",\r\n    DateOfBirht: new Date(),\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddEmployeeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const watchRole = watch(\"Role\");\r\n\r\n  const onSubmit = async (data) => {\r\n    let { FacilityIds, DateOfBirht } = data;\r\n    DateOfBirht = convertDateFormat(DateOfBirht);\r\n    data = {\r\n      ...data,\r\n      FacilityIds: valueType ? FacilityIds : [FacilityIds],\r\n    };\r\n\r\n    let formData = new FormData();\r\n    formData.append(\"ProfilePicture\", ProfilePicture);\r\n\r\n    formData.append(\"DateOfBirht\", data.DateOfBirht);\r\n\r\n    formData.append(\"Password\", data.Password);\r\n\r\n    formData.append(\"Email\", data.Email);\r\n\r\n    formData.append(\"Gender\", data.Gender);\r\n\r\n    formData.append(\"PhoneNumber\", data.PhoneNumber);\r\n\r\n    formData.append(\"LastName\", data.LastName);\r\n\r\n    formData.append(\"FirstName\", data.FirstName);\r\n\r\n    formData.append(\"Address\", data.Address);\r\n\r\n    formData.append(\"Role\", data.Role);\r\n\r\n    for (let i = 0; i < data.FacilityIds.length; i++) {\r\n      formData.append(\"FacilityIds\", data.FacilityIds[i]);\r\n    }\r\n\r\n    try {\r\n      // code here\r\n\r\n      dispatch(addFacilityAdmin(formData));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/users\"\r\n    >\r\n      {translate(`employees`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_employee`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add Employee Information </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`add_new_employee`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            {/* *********** Add New Employee ********** */}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/* ******** Left Side Inputs ******* */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== employee name ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- employee first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"FirstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- employee second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"LastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== employee email ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Email\"\r\n                    type=\"email\"\r\n                    label={translate(\"email\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Phone ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNumber\"\r\n                    type=\"number\"\r\n                    label={translate(\"employee_phone\")}\r\n                    placeholder={translate(\"add_phone\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        fontSize: \"16px\",\r\n                        fontWeight: 400,\r\n                        lineHeight: \"16px\",\r\n                        color: \"#121212\",\r\n                        pl: \"10px\",\r\n                      },\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"countryCode\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            \"& .MuiSvgIcon-root\": {\r\n                              right: \"-6px!important\",\r\n                              top: \"0%\",\r\n                            },\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            // IconComponent: () => (\r\n                            //   <img\r\n                            //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                            //     alt=\"\"\r\n                            //   />\r\n                            // ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"countryCode\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                          <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Position  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"Role\"\r\n                    type=\"text\"\r\n                    label={translate(\"employee_position\")}\r\n                    placeholder={translate(\"select_employee_position\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"Role\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                      e.target.value === 1\r\n                        ? setValueType(true)\r\n                        : setValueType(false);\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      // IconComponent: () => (\r\n                      //   <img\r\n                      //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                      //     alt=\"\"\r\n                      //   />\r\n                      // ),\r\n                    }}\r\n                  >\r\n                    {positions.map((row, index) => (\r\n                      <MenuItem value={row?.Role} key={index}>\r\n                        {translate(`${row?.name}`)}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </RHFSelect>\r\n                </Grid>\r\n\r\n                {/*======= employee Branch case(Regional Manager)  ======= */}\r\n                {watchRole === 1 && (\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <RHFSelect\r\n                      multiple\r\n                      name=\"FacilityIds\"\r\n                      type=\"text\"\r\n                      label={translate(\"employee_branch\")}\r\n                      placeholder={translate(\"select_branch\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(\"FacilityIds\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                        setSelectedNames(e.target.value);\r\n                      }}\r\n                      SelectProps={{\r\n                        multiple: true,\r\n                        native: false,\r\n                        value: selectedNames,\r\n                        // IconComponent: () => (\r\n                        //   <img\r\n                        //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                        //     alt=\"\"\r\n                        //   />\r\n                        // ),\r\n                        // InputProbs: <OutlinedInput label=\"Multiple Select\" />\r\n                      }}\r\n                    >\r\n                      {allBranches?.map((row, index) => (\r\n                        <MenuItem value={row?.id} key={index}>\r\n                          {translate(`${row?.name}`)}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n                )}\r\n\r\n                {/*======= employee Branch case(any Position)  ======= */}\r\n                {watchRole !== 1 && (\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <RHFSelect\r\n                      name=\"FacilityIds\"\r\n                      type=\"text\"\r\n                      label={translate(\"employee_branch\")}\r\n                      placeholder={translate(\"select_branch\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(`FacilityIds`, e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      SelectProps={{\r\n                        multiple: false,\r\n                        native: false,\r\n                        // IconComponent: () => (\r\n                        //   <img\r\n                        //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                        //     alt=\"\"\r\n                        //   />\r\n                        // ),\r\n                      }}\r\n                    >\r\n                      {allBranches?.map((row, index) => (\r\n                        <MenuItem value={row?.id} key={index}>\r\n                          {translate(`${row?.name}`)}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n\r\n              {/* ************* Right Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== emplyee Address  ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Address\"\r\n                    label={translate(\"employee_address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Password\"\r\n                    label={translate(\"password\")}\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() => setShowPassword(!showPassword)}\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== employee Confirm Password ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ConfirmPassword\"\r\n                    label={translate(\"confirm_password\")}\r\n                    type={showConfirmPassword ? \"text\" : \"password\"}\r\n                    sx={txtFieldBorderStyle}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            onClick={() =>\r\n                              setShowConfirmPassword(!showConfirmPassword)\r\n                            }\r\n                            edge=\"end\"\r\n                          >\r\n                            <Iconify\r\n                              icon={\r\n                                showConfirmPassword\r\n                                  ? \"eva:eye-outline\"\r\n                                  : \"eva:eye-off-outline\"\r\n                              }\r\n                              color={\r\n                                showConfirmPassword ? \"#FFCC63\" : \"#BCBCBC\"\r\n                              }\r\n                            />\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee Date of birth   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <CustomDataPicker\r\n                    name=\"DateOfBirht\"\r\n                    textLabel=\"date_of_birth\"\r\n                    sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee picture   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ProfilePicture\"\r\n                    label={translate(\"profile_picture\")}\r\n                    type=\"file\"\r\n                    onChange={(event) => {\r\n                      console.log(event.target.files[0]);\r\n                      setSelectedFile(event.target.files[0]);\r\n                      setValue(\"ProfilePicture\", event.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    // label={translate(\"user image\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color: ProfilePicture ? \"#535353\" : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    inputProps={{\r\n                      sx: {\r\n                        \"&::placeholder\": {\r\n                          textAlign: \"left\",\r\n                          color: \"#BCBCBC\",\r\n                          fontWeight: \"400\",\r\n                          fontSize: \"14px\",\r\n                          lineHeight: \"22px\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                          >\r\n                            <label htmlFor=\"licenses\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= employee gender   ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Stack sx={{ ...genderHolderSx, position: \"relative\" }}>\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      //  placeholder={Gender}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/users\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingFacilityAdmin}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"add_employee\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\TransFerCashPage.js",["2894","2895","2896"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\n\r\n// ----------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst FormHolderSx = {\r\n  p: \"40px\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1.5px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst avatarStyle = {\r\n  width: \"32px\",\r\n  height: \"32px\",\r\n  borderRadius: \"50%\",\r\n  filter: \"drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.25))\",\r\n  marginRight: \"16px\",\r\n  marginLeft: \"16px\",\r\n};\r\n\r\nexport default function TransFerCashPage() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const [addNewCard, setAddNewCard] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const WithdrawSchema = Yup.object().shape({\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n    Currency: Yup.string().required(translate(\"currency_is_required\")),\r\n    amount: Yup.string().required(translate(\"amount_is_required\")),\r\n    Card: Yup.string().required(translate(\"card_is_required\")),\r\n\r\n    NameOnCard: addNewCard\r\n      ? Yup.string().required(translate(\"name_on_card_is_required\"))\r\n      : Yup.string(),\r\n    CardNumber: addNewCard\r\n      ? Yup.string().required(translate(\"card_number_is_required\"))\r\n      : Yup.string(),\r\n    ExpireDate: addNewCard\r\n      ? Yup.string().required(translate(\"expiry_date_is_required\"))\r\n      : Yup.string(),\r\n    CvvCode: addNewCard\r\n      ? Yup.string().required(translate(\"cvv_code_is_required\"))\r\n      : Yup.string(),\r\n  });\r\n\r\n  const defaultValues = {\r\n    password: \"\",\r\n    Currency: \"AED\",\r\n    amount: \"\",\r\n    Card: \"master_card\",\r\n    NameOnCard: \"\",\r\n    CardNumber: \"\",\r\n    ExpireDate: \"\",\r\n    CvvCode: \"\",\r\n    facilityId: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(WithdrawSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/financial\"\r\n    >\r\n      {translate(`Financial`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`transfer_money`)}\r\n    </Typography>,\r\n  ];\r\n  // --------------- JSX Code --------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Transfer Cash </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...FormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"40px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`transfer_money`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*======  Password Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword\r\n                                ? \"eva:eye-outline\"\r\n                                : \"eva:eye-off-outline\"\r\n                            }\r\n                            color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======  Amount Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  label={translate(\"the_amount\")}\r\n                  placeholder={translate(\"the_amount\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      pr: \"20px\",\r\n                      height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#9DA0A4\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"Currency\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          width: \"80px\",\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"Currency\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"AED\">AED</MenuItem>\r\n                        <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======= Select Card Input ======= */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"Card\"\r\n                  type=\"text\"\r\n                  label={translate(\"select_card\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiSelect-select.MuiSelect-outlined\": {\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    },\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setValue(\"Card\", e.target.value, { shouldValidate: true });\r\n                  }}\r\n                  SelectProps={{\r\n                    native: false,\r\n                    IconComponent: () => (\r\n                      <img\r\n                        src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                        alt=\"\"\r\n                      />\r\n                    ),\r\n                  }}\r\n                >\r\n                  <MenuItem\r\n                    sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                    value=\"master_card\"\r\n                    onClick={() => setAddNewCard(false)}\r\n                  >\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_masterCard.svg\"\r\n                      alt=\"upload_icon\"\r\n                      style={{ ...avatarStyle }}\r\n                    />\r\n                    master card\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                    value=\"null\"\r\n                    onClick={() => setAddNewCard(true)}\r\n                  >\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_addPlus.svg\"\r\n                      alt=\"upload_icon\"\r\n                      style={{\r\n                        width: \"20px\",\r\n                        height: \"20px\",\r\n                        marginRight: \"22px\",\r\n                        marginLeft: \"22px\",\r\n                      }}\r\n                    />\r\n                    {translate(`add_new_card`)}\r\n                  </MenuItem>\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} />\r\n            </Grid>\r\n\r\n            {/* ********* Add New Card Form ******** */}\r\n            {addNewCard && (\r\n              <>\r\n                <Box\r\n                  sx={{\r\n                    height: \"2px\",\r\n                    bgcolor: \"#ECECEC\",\r\n                    mb: \"24px\",\r\n                    mt: \"8px\",\r\n                  }}\r\n                />\r\n\r\n                <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                  {/*====== name on Card  ====== */}\r\n                  <Grid item xs={12} md={6} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"NameOnCard\"\r\n                      type=\"text\"\r\n                      placeholder={translate(\"enter_name_on_the_card\")}\r\n                      sx={txtFieldBorderStyle}\r\n                      inputProps={{\r\n                        sx: {\r\n                          \"&::placeholder\": {\r\n                            textAlign: \"left\",\r\n                            color: \"#9DA0A4\",\r\n                            fontWeight: \"400\",\r\n                            fontSize: \"14px\",\r\n                            lineHeight: \"22px\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6} />\r\n\r\n                  {/*======  Card Number ====== */}\r\n                  <Grid item xs={12} md={6} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"CardNumber\"\r\n                      type=\"text\"\r\n                      placeholder={translate(\"enter_card_number\")}\r\n                      sx={txtFieldBorderStyle}\r\n                      inputProps={{\r\n                        sx: {\r\n                          \"&::placeholder\": {\r\n                            textAlign: \"left\",\r\n                            color: \"#9DA0A4\",\r\n                            fontWeight: \"400\",\r\n                            fontSize: \"14px\",\r\n                            lineHeight: \"22px\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6} />\r\n\r\n                  {/*=========== expiry date and Cvv code =========== */}\r\n                  <Grid item xs={12} sm={12} md={6}>\r\n                    <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                      <Grid container columnSpacing={2}>\r\n                        {/*---  Expiry Date  --- */}\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name=\"ExpireDate\"\r\n                            type=\"text\"\r\n                            placeholder={translate(\"MM / YY\")}\r\n                            sx={txtFieldBorderStyle}\r\n                            inputProps={{\r\n                              sx: {\r\n                                \"&::placeholder\": {\r\n                                  textAlign: \"left\",\r\n                                  color: \"#9DA0A4\",\r\n                                  fontWeight: \"400\",\r\n                                  fontSize: \"14px\",\r\n                                  lineHeight: \"22px\",\r\n                                },\r\n                              },\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n\r\n                        {/*--- Cvv Code  --- */}\r\n                        <Grid item xs={12} sm={6}>\r\n                          <RHFTextField\r\n                            name=\"CvvCode\"\r\n                            type=\"text\"\r\n                            placeholder={translate(\"CVV\")}\r\n                            sx={txtFieldBorderStyle}\r\n                            InputProps={{\r\n                              endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                  <img\r\n                                    src=\"/assets/icons/dashboard/point.svg\"\r\n                                    style={{\r\n                                      width: \"20px\",\r\n                                      height: \"20px\",\r\n                                    }}\r\n                                    alt=\"\"\r\n                                  />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            inputProps={{\r\n                              sx: {\r\n                                \"&::placeholder\": {\r\n                                  textAlign: \"left\",\r\n                                  color: \"#9DA0A4\",\r\n                                  fontWeight: \"400\",\r\n                                  fontSize: \"14px\",\r\n                                  lineHeight: \"22px\",\r\n                                },\r\n                              },\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6} />\r\n                </Grid>\r\n              </>\r\n            )}\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} />\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <Stack direction=\"row\" mt=\"32px\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/employee/financial\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"confirm\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\WithdrawCashPage.js",["2897","2898","2899"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\n\r\n// ------------------------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst FormHolderSx = {\r\n  p: \"40px\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1.5px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function WithdrawCashPage() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const WithdrawSchema = Yup.object().shape({\r\n    currency: Yup.string().required(translate(\"currency_is_required\")),\r\n    location: Yup.string().required(translate(\"location_is_required\")),\r\n    phoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n    amount: Yup.string().required(translate(\"amount_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    currency: \"AED\",\r\n    location: \"\",\r\n    phoneNumber: \"\",\r\n    countryCode: \"+02\",\r\n    password: \"\",\r\n    amount: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(WithdrawSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      // code here\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/employee/financial\"\r\n    >\r\n      {translate(`Financial`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`withdraw_cash`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ---------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Withdraw Cash </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...FormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"40px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`withdraw_by_cash`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*======  Phone Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"phoneNumber\"\r\n                  type=\"number\"\r\n                  label={translate(\"phone\")}\r\n                  placeholder={translate(\"add_phone\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      pr: \"20px\",\r\n                      height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#D8D8D8\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"countryCode\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          width: \"80px\",\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"countryCode\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                        <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======  Password Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword\r\n                                ? \"eva:eye-outline\"\r\n                                : \"eva:eye-off-outline\"\r\n                            }\r\n                            color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======  Location Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"location\"\r\n                  type=\"text\"\r\n                  label={translate(\"location\")}\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  onChange={(e) => {\r\n                    setValue(\"location\", e.target.value, {\r\n                      shouldValidate: true,\r\n                    });\r\n                  }}\r\n                  SelectProps={{\r\n                    native: false,\r\n                    IconComponent: () => (\r\n                      <img\r\n                        src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                        alt=\"\"\r\n                      />\r\n                    ),\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"dubai\" selected>\r\n                    Dubai\r\n                  </MenuItem>\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              {/*======  Amount Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  label={translate(\"the_amount\")}\r\n                  placeholder={translate(\"the_amount\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      pr: \"20px\",\r\n                      height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#D8D8D8\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"currency\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          width: \"80px\",\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          IconComponent: () => (\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                          ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"currency\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"AED\">AED</MenuItem>\r\n                        <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} />\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Grid item xs={12} md={6}>\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/employee/financial\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"confirm\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\FinanceInvoicesPage.js",["2900","2901","2902"],[],"import React, { useEffect } from \"react\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n// import { useLocales } from \"../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport { Container, Grid, Box } from \"@mui/material\";\r\n// components\r\nimport FinanceListInvoices from \"../../../section/@dashboard/finacial/FinanceListInvoices\";\r\nimport RatedFinanceCard from \"../../../components/cards/finance/RatedFinanceCard\";\r\nimport NetBalanceCard from \"../../../components/cards/finance/NetBalanceCard\";\r\nimport ProfileCard from \"../../../components/cards/profile/ProfileCard\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { getFacilityWalletBalance } from \"../../../redux/services/finance_service\";\r\n//-------------------------------------------------------------------------------------\r\n\r\n// data\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst LineChartData = [\r\n  {\r\n    name: months[new Date().getMonth()],\r\n    data: [234, 45, 67, 987, 345, 456, 87, 321, 45, 30, 569, 76, 890, 234, 45],\r\n  },\r\n  {\r\n    name: months[new Date().getMonth() - 1],\r\n    data: [562, 145, 267, 97, 45, 156, 87, 321, 30, 10, 845, 969, 706, 20, 562],\r\n  },\r\n];\r\n\r\nconst adminData = {\r\n  name: \"Adam Smith\",\r\n  imgUrl: \"/assets/images/dashboard/Avatar.png\",\r\n  role: \"admin\",\r\n  restaurant: \"kfc\",\r\n};\r\n\r\nexport default function FinanceInvoicesPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getFacilityWalletBalance());\r\n    console.log('employee')\r\n  }, [dispatch]);\r\n\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Finance Invoices Page </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <Box mb=\"44px\">\r\n          <Grid container spacing=\"24px\">\r\n            <Grid item xs={12} sm={6} md={6} lg={4}>\r\n              <ProfileCard />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6} md={6} lg={4}>\r\n              <RatedFinanceCard />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={6} lg={4}>\r\n              <NetBalanceCard />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n\r\n        <FinanceListInvoices />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\performance\\PerformancePage.js",["2903"],[],"import React, { useEffect } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport { Box, Container, Typography } from \"@mui/material\";\r\n// components\r\nimport PerformanceChartsSection from \"../../../section/@employee/performance/PerformanceChartsSection\";\r\nimport MealsAndReviewsSection from \"../../../section/@employee/branchDashboard/MealsAndReviewsSection\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  getMarketOrdersNumber,\r\n  getRestaurentOrdersNumberEmployee,\r\n  getResturantReviewsNumberEmployee,\r\n  getMarketReviewsEmployee,\r\n  getRestaurantReviewsAnalysis,\r\n  getMarketReviewsAnalysis,\r\n} from \"../../../redux/services/orders_service\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n// ------------------------------------------------------------------------------------------------------------------\r\n\r\n// ----------- Styles ----------\r\n\r\nconst mainTitleSx = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  mb: \"26px\",\r\n};\r\n\r\nexport default function PerformancePage() {\r\n  const { translate } = useLocales();\r\n\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const currentDate = `${new Date().getFullYear()}-${new Date().getMonth() + 1}-1`;\r\n\r\n  //\r\n  useEffect(() => {\r\n    // this is for restaurent\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurentOrdersNumberEmployee(branchId));\r\n      dispatch(getResturantReviewsNumberEmployee(branchId));\r\n      dispatch(getRestaurantReviewsAnalysis({\r\n        facilityId: branchId,\r\n        date: currentDate\r\n      }));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketOrdersNumber(branchId));\r\n      dispatch(getMarketReviewsEmployee(branchId));\r\n      dispatch(getMarketReviewsAnalysis({\r\n        facilityId: branchId,\r\n        date: currentDate\r\n      }));\r\n    }\r\n  }, [dispatch]);\r\n  // ------------- JSX Code ----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Performance Page </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <Typography sx={{ ...mainTitleSx }} variant=\"h5\">\r\n          {translate(\"over_view\")}\r\n        </Typography>\r\n\r\n        {/* ******* Start  Performance Charts Section ******** */}\r\n\r\n        <PerformanceChartsSection  />\r\n\r\n        {/* *************** Highest Selling Meals and reviews ************* */}\r\n        <Box mt=\"38px\">\r\n          <MealsAndReviewsSection />\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-dashboard\\NewBranchStatusPage.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\order\\OrderPage.js",["2904","2905","2906","2907"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport { Box, Container, Stack, Switch, Typography } from \"@mui/material\";\r\n// components\r\nimport Image from \"../../../components/image/Image\";\r\nimport OrdersChartsSection from \"../../../section/@employee/orders/OrdersChartsSection\";\r\nimport OrdersListSection from \"../../../section/@employee/orders/OrdersListSection\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n// Service\r\nimport { getTotalOrdersNumInDetails } from \"../../../redux/services/employee_pending_orders_service\";\r\nimport CollapsibleTable from \"../../../section/@employee/orders/OrderDetailTable\";\r\n\r\nimport {\r\n  getMarketOrdersNumber,\r\n  getRestaurentOrdersNumberEmployee,\r\n  getResturantReviewsNumberEmployee,\r\n  getMarketReviewsEmployee,\r\n  getAllOrdersMarket,\r\n  getAllOrders,\r\n  getRestaurantOrderAnalysis,\r\n  getMarketOrderAnalysis,\r\n} from \"../../../redux/services/orders_service\";\r\nimport { updateCurrentStatus } from \"../../../redux/services/menu_restaurant_service\";\r\nimport { getRestaurantMinimalInfo } from \"../../../redux/services/restaurant_service\";\r\nimport * as URLS from \"../../../urls\";\r\n// ----------------------------------------------------------------------\r\n\r\n// ----------- Styles ----------\r\nconst headerContainerSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  flexDirection: \"row\",\r\n  // justifyContent: 'space-between',\r\n  alignItems: \"center\",\r\n  px: { xs: \"15px\", sm: \"32px\" },\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"#4EE476\",\r\n};\r\n\r\nconst switchSx = {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  padding: \"9px 13px 25px 12px\",\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-2px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(25px)\",\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#FFCC63\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\nconst busySx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"red\",\r\n};\r\n\r\nexport default function OrderPage() {\r\n  // get order datails\r\n  const { ordersDetails } = useSelector((state) => state.employeeOrders);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { restaurantInfo } = useSelector((state) => state.branches);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId, branchName } = useSelector((state) => state.control);\r\n\r\n  const { restStatus } = useSelector((state) => state.branches);\r\n\r\n  const [availableChecked, setAvailableChecked] = useState(\"\");\r\n\r\n  const currentDate = `${new Date().getFullYear()}-${\r\n    new Date().getMonth() + 1\r\n  }-1`;\r\n\r\n  console.log(currentDate);\r\n\r\n  //\r\n  useEffect(() => {\r\n    // this is for restaurent\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurentOrdersNumberEmployee(branchId));\r\n      dispatch(getResturantReviewsNumberEmployee(branchId));\r\n      dispatch(getAllOrders({ pageNumber: 1, resturantId: branchId }));\r\n      dispatch(\r\n        getRestaurantOrderAnalysis({\r\n          facilityId: branchId,\r\n          date: currentDate,\r\n        })\r\n      );\r\n      dispatch(getRestaurantMinimalInfo({ Id: branchId }))\r\n        .unwrap()\r\n        .then((result) => {\r\n          setAvailableChecked(result.data.status);\r\n        });\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketOrdersNumber(branchId));\r\n      dispatch(getMarketReviewsEmployee(branchId));\r\n      dispatch(getAllOrdersMarket({ pageNumber: 1, marketId: branchId }));\r\n      dispatch(\r\n        getMarketOrderAnalysis({\r\n          facilityId: branchId,\r\n          date: currentDate,\r\n        })\r\n      );\r\n      dispatch(getRestaurantMinimalInfo({ Id: branchId }))\r\n        .unwrap()\r\n        .then((result) => {\r\n          setAvailableChecked(result.data.status);\r\n        });\r\n    }\r\n  }, [dispatch, availableChecked]);\r\n  const handleChange = (e) => {\r\n    dispatch(\r\n      updateCurrentStatus({\r\n        restaurantId: branchId,\r\n        currentstatus: availableChecked ? 0 : 1,\r\n      })\r\n    )\r\n      .unwrap()\r\n      .then(() => setAvailableChecked(!availableChecked));\r\n  };\r\n  // -------- JSX Code -------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Orders Page </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* **************** Start Page Header *********** */}\r\n        <Stack sx={{ ...headerContainerSx, mb: \"44px\" }}>\r\n          {/* ------- Branch Logo ------- */}\r\n          <Box display=\"flex\" alignItems=\"center\" my=\"12px\">\r\n            <Image\r\n              src={\r\n                localStorage.getItem(\"facilityType\") === \"1\"\r\n                  ? URLS.baseImageURL + `market/${restStatus?.imgUrl}`\r\n                  : URLS.baseImageURL + `resturant/${restStatus?.imgUrl}`\r\n              }\r\n              sx={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          {/* ------- title and status ------- */}\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            flexGrow={1}\r\n          >\r\n            <Typography ml={{ xs: \"5px\", sm: \"20px\" }} variant=\"h5\">\r\n              {restaurantInfo.name}\r\n              <span>{branchName} </span> {translate(`overview`)}\r\n            </Typography>\r\n\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              flexDirection={{ xs: \"column\", sm: \"row\" }}\r\n            >\r\n              {availableChecked ? (\r\n                <Typography\r\n                  sx={{ ...highLightTextSx, mr: { xs: \"0px\", sm: \"20px\" } }}\r\n                >\r\n                  {translate(`available`)}\r\n                </Typography>\r\n              ) : (\r\n                <Typography sx={{ ...busySx, mr: { xs: \"0px\", sm: \"20px\" } }}>\r\n                  {translate(`busy`)}\r\n                </Typography>\r\n              )}\r\n\r\n              <Switch\r\n                sx={{ ...switchSx }}\r\n                checked={restStatus?.status}\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Stack>\r\n\r\n        {/* ******* Start  Orders Charts Section ******** */}\r\n        <OrdersChartsSection />\r\n\r\n        {/* ******* Start  OrdersList Section ******** */}\r\n        <Box mt=\"44px\">\r\n          <Typography variant=\"h5\" mb=\"24px\" color=\"#333333\">\r\n            {translate(`all_orders`)}\r\n          </Typography>\r\n\r\n          <OrdersListSection />\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-dashboard\\BranchDashboardPage.js",["2908","2909","2910","2911","2912","2913","2914","2915","2916"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Stack, Container, Box, Typography, Switch, Grid } from \"@mui/material\";\r\n//component\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport DountChartCard2 from \"../../../components/cards/DountChartCard/DountChartCard2\";\r\nimport ProfileCard from \"../../../components/cards/profile/ProfileCard\";\r\n// Section Components\r\nimport PendingOrdersList from \"../../../section/@employee/branchDashboard/PendingOrdersList\";\r\nimport BranchLineChartSection from \"../../../section/@employee/branchDashboard/BranchLineChartSection\";\r\nimport MealsAndReviewsSection from \"../../../section/@employee/branchDashboard/MealsAndReviewsSection\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"../../../redux/store\";\r\nimport {\r\n  getResturantOrdersNumber,\r\n  getMarketOrdersNumber,\r\n  getRestaurantPendingOrder,\r\n  getMarketPendingOrder,\r\n  getRestaurantHighestSellingMeals,\r\n  getMarketHighestSellingMeals,\r\n  getResturantReviews,\r\n  getMarketReviews,\r\n  getResturantMonthlyEarnings,\r\n} from \"../../../redux/services/orders_service\";\r\nimport { updateCurrentStatus } from \"../../../redux/services/menu_restaurant_service\";\r\nimport { getRestaurantMinimalInfo } from \"../../../redux/services/restaurant_service\";\r\nimport * as URLS from \"../../../urls\";\r\nimport LoadingCards from \"../../../components/loadingSkeleton/LoadingCards\";\r\n// -------------------------------------------------------------------------------------------------------\r\n\r\n// ----------- Styles ----------\r\nconst headerContainerSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  flexDirection: \"row\",\r\n  // justifyContent: 'space-between',\r\n  alignItems: \"center\",\r\n  px: { xs: \"15px\", sm: \"32px\" },\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"#4EE476\",\r\n};\r\nconst busySx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"red\",\r\n};\r\n\r\nconst switchSx = {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-2px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(25px)\",\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#FFCC63\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\n\r\nexport default function BranchDashboardPage() {\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { restStatus } = useSelector((state) => state.branches);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId, branchName } = useSelector((state) => state.control);\r\n  const { orderStatusIsUpdated } = useSelector((state) => state.orders);\r\n\r\n  const {\r\n    isLoadingOrderNumber,\r\n    orderNumber,\r\n    pendingOrder,\r\n    isLoadingPendingOrder,\r\n    mostSelling,\r\n    isLoadingmostSelling,\r\n    resturantReview,\r\n    isLoadingresturantReview,\r\n  } = useSelector((state) => state.orders);\r\n  //\r\n  var resturantId = branchId;\r\n  var restaurantId = branchId;\r\n  var marketId = branchId;\r\n  var MarketId = branchId;\r\n\r\n  //\r\n\r\n  const [availableChecked, setAvailableChecked] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // this is for restaurent\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getResturantOrdersNumber(resturantId));\r\n      dispatch(getRestaurantPendingOrder({ pageNumber: 1, resturantId }));\r\n      dispatch(\r\n        getRestaurantHighestSellingMeals({ pageNumber: 1, restaurantId: resturantId })\r\n      );\r\n      dispatch(getResturantReviews({ pageNumber: 1, resturantId }));\r\n\r\n      dispatch(getRestaurantMinimalInfo({ Id: branchId }))\r\n        .unwrap()\r\n        .then((result) => {\r\n          setAvailableChecked(result.data.status);\r\n        });\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      // this is for market\r\n      dispatch(getMarketOrdersNumber(marketId));\r\n      dispatch(getMarketPendingOrder({ pageNumber: 1, marketId }));\r\n      dispatch(getMarketReviews({ pageNumber: 1, MarketId }));\r\n      dispatch(getMarketHighestSellingMeals({ pageNumber: 1, marketId }));\r\n      dispatch(getRestaurantMinimalInfo({ Id: branchId }))\r\n        .unwrap()\r\n        .then((result) => {\r\n          setAvailableChecked(result.data.status);\r\n        });\r\n    }\r\n  }, [dispatch, orderStatusIsUpdated, availableChecked]);\r\n\r\n  const handleChange = (e) => {\r\n    dispatch(\r\n      updateCurrentStatus({\r\n        restaurantId: branchId,\r\n        currentstatus: availableChecked ? 0 : 1,\r\n      })\r\n    )\r\n      .unwrap()\r\n      .then(() => setAvailableChecked(!availableChecked));\r\n  };\r\n\r\n  // ---------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Branch Dashboard Page </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* ************************** Start Page Header ************************* */}\r\n        <Stack sx={{ ...headerContainerSx, mb: \"32px\" }}>\r\n          {/* ------- Branch Logo ------- */}\r\n          <Box display=\"flex\" alignItems=\"center\" my=\"12px\" mb=\"14px\">\r\n            <Image\r\n              src={\r\n                localStorage.getItem(\"facilityType\") === \"1\"\r\n                  ? URLS.baseImageURL + `market/${restStatus?.imgUrl}`\r\n                  : URLS.baseImageURL + `resturant/${restStatus?.imgUrl}`\r\n              }\r\n              sx={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n              }}\r\n            />\r\n          </Box>\r\n\r\n          {/* ------- title and status ------- */}\r\n          <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            flexGrow={1}\r\n          >\r\n            <Typography ml={{ xs: \"5px\", sm: \"20px\" }} variant=\"h5\">\r\n              {branchName}\r\n              <span> </span> {translate(`overview`)}\r\n            </Typography>\r\n\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"center\"\r\n              flexDirection={{ xs: \"column\", sm: \"row\" }}\r\n            >\r\n              {availableChecked ? (\r\n                <Typography\r\n                  sx={{ ...highLightTextSx, mr: { xs: \"0px\", sm: \"20px\" } }}\r\n                >\r\n                  {translate(`available`)}\r\n                </Typography>\r\n              ) : (\r\n                <Typography sx={{ ...busySx, mr: { xs: \"0px\", sm: \"20px\" } }}>\r\n                  {translate(`busy`)}\r\n                </Typography>\r\n              )}\r\n\r\n              <Switch\r\n                sx={{ ...switchSx }}\r\n                checked={restStatus?.status}\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Stack>\r\n\r\n        {/* ****************** Start Cards Row ************** */}\r\n        <Grid container spacing=\"20px\">\r\n          <Grid item xs={12} sm={6} md={6}>\r\n            <ProfileCard />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={6}>\r\n            {\r\n              !isLoadingOrderNumber ?\r\n                <DountChartCard2\r\n                  title=\"total_number_of_orders\"\r\n                  data={orderNumber}\r\n                />\r\n                :\r\n                <LoadingCards />\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* ************* Pending Orders Sections *************** */}\r\n        <Box my=\"40px\">\r\n          <Typography variant=\"h5\" mb=\"24px\">\r\n            {translate(`pending_ordrers`)}\r\n          </Typography>\r\n\r\n          <PendingOrdersList resturantId={resturantId} />\r\n        </Box>\r\n\r\n        {/* ************** Branch Chart Sections ***************** */}\r\n        <Box mb=\"40px\">\r\n          <BranchLineChartSection />\r\n        </Box>\r\n\r\n        {/* *************** Highest Selling Meals and reviews ************* */}\r\n        <MealsAndReviewsSection />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-info\\EditBranchInfoPage.js",["2917","2918","2919","2920","2921","2922","2923","2924","2925","2926","2927"],[],"import React, { useState } from \"react\";\r\n// react-router-dom\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport EditConfirmDialog from \"../../../components/confirm-dialog/EditConfirmDialog\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport {\r\n  updateResturant,\r\n  getResturantInfo,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  updateMarket,\r\n  getMarketBasicInfo,\r\n} from \"../../../redux/services/markets_service\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport * as URLS from \"../../../urls\";\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\n//\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#535353\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"10px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst continuBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#ffcc63\",\r\n  border: \"0.75px solid #ffcc63\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"600\",\r\n  width: \"100%\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  height: \"33px\",\r\n};\r\n\r\nconst backBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"600\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  width: \"100%\",\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  height: \"33px\",\r\n};\r\n\r\nconst avatarStyle = {\r\n  width: \"32px\",\r\n  height: \"32px\",\r\n  borderRadius: \"50%\",\r\n  filter: \"drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.25))\",\r\n  marginRight: \"16px\",\r\n  marginLeft: \"16px\",\r\n};\r\n\r\nexport default function EditBranchInfoPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const theme = useTheme();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId, branchInfo } = useSelector((state) => state.control);\r\n\r\n  const { state } = useLocation();\r\n\r\n  console.log(state?.id)\r\n  const { isLoadingUpdateMarket, marketInfo } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const { isLoadingUpdateRestaurant, restaurantInfo, isLoadingRestaurantInfo } =\r\n    useSelector((state) => state.branches);\r\n\r\n  const [logoFile, setLogoFile] = useState(null);\r\n\r\n  const [coverFile, setCoverFile] = useState(null);\r\n\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const EditBranchSchema = Yup.object().shape({\r\n    Name: Yup.string().required(translate(\"branch_name_is_required\")),\r\n    SecondName: Yup.string()\r\n      .required(translate(\"arabic_branch_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n    Image: Yup.string().required(translate(\"branch_logo_is_required\")),\r\n    CoverImage: Yup.string().required(translate(\"branch_cover_is_required\")),\r\n    PhoneNo1: Yup.string().required(translate(\"PhoneNo1_is_required\")),\r\n    PhoneNo2: Yup.string().required(translate(\"PhoneNo2_is_required\")),\r\n    MinimumOrderPrice: Yup.string().required(\r\n      translate(\"minimum_order_is_required\")\r\n    ),\r\n    ServiceDesc: Yup.string().required(\r\n      translate(\"en_service_desc_is_required\")\r\n    ),\r\n    SecondServiceDesc: Yup.string().required(\r\n      translate(\"ar_service_desc_is_required\")\r\n    ),\r\n  });\r\n\r\n  const defaultRestaurantValues = {\r\n    Name: branchInfo?.name,\r\n    SecondName: branchInfo?.secondName,\r\n    Image: \"\",\r\n    CoverImage: \"\",\r\n    PhoneNo1: branchInfo?.phoneNo1,\r\n    PhoneNo2: branchInfo?.phoneNo2,\r\n    MinimumOrderPrice: branchInfo?.minimumOrderPrice,\r\n    ServiceDesc: branchInfo?.serviceDesc,\r\n    SecondServiceDesc: branchInfo?.secondServiceDesc,\r\n    Currency: 'AED',\r\n  };\r\n\r\n  const defaultMarketValues = {\r\n    Name: branchInfo?.name,\r\n    SecondName: branchInfo?.secondName,\r\n    Image: \"\",\r\n    CoverImage: \"\",\r\n    PhoneNo1: branchInfo?.phoneNo1,\r\n    PhoneNo2: branchInfo?.phoneNo2,\r\n    MinimumOrderPrice: branchInfo?.minimumOrderPrice,\r\n    ServiceDesc: branchInfo?.serviceDesc,\r\n    SecondServiceDesc: branchInfo?.secondServiceDesc,\r\n    Currency: 'AED',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(EditBranchSchema),\r\n    defaultValues:\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? defaultRestaurantValues\r\n        : defaultMarketValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  // watch branch logo Photo if value changed\r\n  const watchBranchlogo = watch(\"Image\");\r\n  const watchBranchCover = watch(\"CoverImage\");\r\n\r\n  let formData = new FormData();\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    formData.append(\"Name\", data.Name);\r\n    formData.append(\"SecondName\", data.secondName);\r\n    formData.append(\"Image\", logoFile);\r\n    formData.append(\"CoverImage\", coverFile);\r\n    formData.append(\"PhoneNo1\", data.PhoneNo1);\r\n    formData.append(\"PhoneNo2\", data.PhoneNo2);\r\n    formData.append(\"MinimumOrderPrice\", data.MinimumOrderPrice);\r\n    formData.append(\"ServiceDesc\", data.ServiceDesc);\r\n    formData.append(\"SecondServiceDesc\", data.SecondServiceDesc);\r\n    try {\r\n      if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n        dispatch(updateResturant({ id: branchId, data: formData }));\r\n      }\r\n      if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n        dispatch(updateMarket({ id: branchId, data: formData }));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      onClick={() => navigate(-1)}\r\n    >\r\n      {translate(`branch_information`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_branch_information`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Branch Info</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* *************** Title ******************* */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <IconButton\r\n              disableRipple\r\n              onClick={() => {\r\n                navigate(\"/dashboard/branches\");\r\n              }}\r\n              sx={{\r\n                transform: theme.direction === \"rtl\" ? \"rotate(180deg)\" : \"\",\r\n              }}\r\n            >\r\n              <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography variant=\"h5\" sx={{ ...titleSx, ml: \"17px\" }}>\r\n              {translate(`edit_branch_info`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/* ************* Left Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== Branch name  ar and en ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- branch name (en) --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"Name\"\r\n                        label={translate(\"branch_name_en\")}\r\n                        //  placeholder={\"KFC - branch1\"}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- branch name (ar) --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"SecondName\"\r\n                        label={translate(\"branch_name_ar\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== branch logo and cover ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Grid container spacing={2}>\r\n                    {/*=======branch logo Input  ======= */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"Image\"\r\n                        label={translate(\"branch_logo\")}\r\n                        type=\"file\"\r\n                        hidden\r\n                        id=\"Image\"\r\n                        sx={{\r\n                          ...txtFieldBorderStyle,\r\n                          \"& .MuiOutlinedInput-input\": {\r\n                            color: watchBranchlogo ? \"#535353\" : \"transparent\",\r\n                            fontSize: \"14px\",\r\n                          },\r\n                        }}\r\n                        onChange={(e) => {\r\n                          setLogoFile(e.target.files[0]);\r\n                          setValue(\"Image\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          });\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"Image\">\r\n                                  <img\r\n                                    src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                      {\r\n                        branchInfo?.imageUrl !== null &&\r\n                        <Box\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            mt: \"12px\",\r\n                            p: '8px',\r\n                            background: '#e1e1e1',\r\n                            borderRadius: '10px',\r\n                            width: 'fit-content',\r\n                            mx: 'auto'\r\n                          }}\r\n                        >\r\n                          <Image\r\n                            src={\r\n                              localStorage.getItem(\"facilityType\") === \"1\"\r\n                                ? URLS.baseImageURL + `market/${branchInfo?.imageUrl}`\r\n                                : URLS.baseImageURL + `resturant/${branchInfo?.imageUrl}`\r\n                            }\r\n                            sx={{\r\n                              width: \"90px\",\r\n                              height: \"90px\",\r\n                              borderRadius: '10px',\r\n                            }}\r\n                          />\r\n                        </Box>\r\n                      }\r\n\r\n                    </Grid>\r\n\r\n                    {/*======= branch cover Input  ======= */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"CoverImage\"\r\n                        label={translate(\"branch_cover\")}\r\n                        type=\"file\"\r\n                        hidden\r\n                        id=\"CoverImage\"\r\n                        sx={{\r\n                          ...txtFieldBorderStyle,\r\n                          \"& .MuiOutlinedInput-input\": {\r\n                            color: watchBranchCover ? \"#535353\" : \"transparent\",\r\n                            fontSize: \"14px\",\r\n                          },\r\n                        }}\r\n                        onChange={(e) => {\r\n                          setCoverFile(e.target.files[0]);\r\n                          setValue(\"CoverImage\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          });\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"CoverImage\">\r\n                                  <img\r\n                                    src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                      {\r\n                        branchInfo?.coverImageUrl !== null &&\r\n                        <Box\r\n                          sx={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            mt: \"12px\",\r\n                            p: '8px',\r\n                            background: '#e1e1e1',\r\n                            borderRadius: '10px',\r\n                            width: 'fit-content',\r\n                              mx: 'auto'\r\n                          }}\r\n                        >\r\n                          <Image\r\n                            src={\r\n                              localStorage.getItem(\"facilityType\") === \"1\"\r\n                                ? URLS.baseImageURL + `market/${branchInfo?.coverImageUrl}`\r\n                                : URLS.baseImageURL + `resturant/${branchInfo?.coverImageUrl}`\r\n                            }\r\n                            sx={{\r\n                              width: \"90px\",\r\n                              height: \"90px\",\r\n                              borderRadius: '10px',\r\n                            }}\r\n                          />\r\n                        </Box>\r\n                      }\r\n\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*======= branch categories Input (en)  ======= \r\n              \r\n                   {/*------ PhoneNo1 input -------- */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNo1\"\r\n                    label={translate(\"first_phone_number\")}\r\n                    type=\"number\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNo2\"\r\n                    label={translate(\"second_phone_number\")}\r\n                    type=\"number\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch categories Input (ar)  ======= \r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"branchCategoryAr\"\r\n                    type=\"text\"\r\n                    label={translate(\"branch_categories_ar\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"branchCategoryAr\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    <MenuItem value={\"فراخ_بيتزا_مشويات\"} selected>\r\n                      {translate(`فراخ_بيتزا_مشويات`)}\r\n                    </MenuItem>\r\n                  </RHFSelect>\r\n                </Grid>*/}\r\n\r\n                {/*======= Select branch Manager Input ======= \r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"branchManager\"\r\n                    type=\"text\"\r\n                    label={translate(\"branch_manager\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiSelect-select.MuiSelect-outlined\": {\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                      },\r\n                    }}\r\n                    onChange={(e) => {\r\n                      setValue(\"branchManager\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    <MenuItem\r\n                      sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                      value=\"mahmoud_sabri\"\r\n                      selected\r\n                    >\r\n                      <img\r\n                        src=\"/assets/images/dashboard/avatar2.png\"\r\n                        alt=\"upload_icon\"\r\n                        style={{ ...avatarStyle }}\r\n                      />\r\n                      Mahmoud Sabri\r\n                    </MenuItem>\r\n                  </RHFSelect>\r\n                </Grid>*/}\r\n              </Grid>\r\n\r\n              {/* **************************** Right Side Inputs ************************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== Minimum Order Amount Input ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"MinimumOrderPrice\"\r\n                    type=\"number\"\r\n                    label={translate(\"minimum_order\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        height: \"50px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"Currency\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                                alt=\"\"\r\n                              />\r\n                            ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"Currency\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"AED\">AED</MenuItem>\r\n                          <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== branch Location Input ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"ServiceDesc\"\r\n                    label={translate(\"service_desc\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch license Input  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"SecondServiceDesc\"\r\n                    label={translate(\"ar_service_desc_is_required\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch social page Input ======== \r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"branchSocialPage\"\r\n                    label={translate(\"social_media_page_optional\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>*/}\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      handleOpenConfirm();\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={\r\n                      localStorage.getItem(\"facilityType\") === \"0\"\r\n                        ? isLoadingUpdateRestaurant\r\n                        : isLoadingUpdateMarket\r\n                    }\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"edit_branch\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n\r\n        {/*======= Dialog ======== */}\r\n        <EditConfirmDialog\r\n          open={openConfirm}\r\n          onClose={handleCloseConfirm}\r\n          title={translate(\"delete_item\")}\r\n          content={\r\n            <>\r\n              <Typography\r\n                fontSize=\"13.5px\"\r\n                lineHeight=\"21px\"\r\n                sx={{\r\n                  overflowWrap: \"break-word\",\r\n                }}\r\n                component=\"div\"\r\n              >\r\n                {translate(\r\n                  \"if_you_press_back_the_changes_you_have_made_will_be\"\r\n                )}\r\n                {translate(\"canceled_are_you_sure\")}\r\n                <Typography\r\n                  fontSize=\"13.5px\"\r\n                  lineHeight=\"21px\"\r\n                  sx={{\r\n                    overflowWrap: \"break-word\",\r\n                  }}\r\n                >\r\n                  {translate(\"about_this_step\")}\r\n                </Typography>\r\n              </Typography>\r\n            </>\r\n          }\r\n          action={\r\n            <Stack direction=\"row\" spacing=\"9px\" width=\"100%\">\r\n              <LoadingButton\r\n                loading={isLoadingUpdateRestaurant}\r\n                sx={continuBtnSx}\r\n                onClick={() => {\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"continue_editing\")}\r\n              </LoadingButton>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={backBtnSx}\r\n                onClick={() => {\r\n                  // handleCloseConfirm();\r\n                  navigate(\"/employee/branch-info\");\r\n                }}\r\n              >\r\n                {translate(\"back\")}\r\n              </Button>\r\n            </Stack>\r\n          }\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\branch-info\\BranchInformationPage.js",["2928","2929"],[],"import React, { useEffect, useState } from \"react\";\r\n// react-router-dom\r\nimport { useLocation } from \"react-router-dom\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Box, Container } from \"@mui/material\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n// section components\r\nimport BranchInfoSection from \"../../../section/@employee/branch-info/BranchInfoSection\";\r\nimport BranchReviewsSection from \"../../../section/@employee/branch-info/BranchReviewsSection\";\r\nimport BranchInfoHeader from \"../../../section/@employee/branch-info/details/BranchInfoHeader\";\r\nimport BranchAnalysisSection from \"../../../section/@employee/branch-info/BranchAnalysisSection\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getRestaurantDetailsById,\r\n  getRestaurantOrderNumber,\r\n  getRestaurantReview,\r\n  getRestaurantReviewNumber,\r\n  getResturantInfo,\r\n  getResturantWorkTimes,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport {\r\n  getMarketBasicInfo,\r\n  getMarketDetailsById,\r\n  getMarketOrdersNumber,\r\n  getMarketReview,\r\n  getMarketReviewNumber,\r\n  getMarketWorkTimes,\r\n} from \"../../../redux/services/markets_service\";\r\nimport { getRestaurantHighestRatedMeal } from \"../../../redux/services/employee_facility_service\";\r\n\r\n//-----------------------------------------------------------------------------------------------------\r\n\r\nexport default function BranchInformationPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurantOrderNumber(branchId));\r\n      dispatch(getRestaurantReviewNumber(branchId));\r\n      dispatch(getRestaurantHighestRatedMeal(branchId));\r\n      dispatch(getResturantInfo(branchId));\r\n      dispatch(getResturantWorkTimes(branchId));\r\n      dispatch(getRestaurantDetailsById(branchId));\r\n      dispatch(\r\n        getRestaurantReview({\r\n          resturantId: branchId,\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketOrdersNumber(branchId));\r\n      dispatch(getMarketReviewNumber(branchId));\r\n      dispatch(getMarketBasicInfo(branchId));\r\n      dispatch(getMarketWorkTimes(branchId));\r\n      dispatch(getMarketDetailsById(branchId));\r\n      dispatch(getMarketReview({ MarketId: branchId, pageNumber: 1 }));\r\n    }\r\n  }, []);\r\n\r\n  const [currentTab, setCurrentTab] = useState(\"analysis\");\r\n\r\n  const TABS = [\r\n    {\r\n      value: \"analysis\",\r\n      component: <BranchAnalysisSection />,\r\n    },\r\n    {\r\n      value: \"info\",\r\n      component: <BranchInfoSection />,\r\n    },\r\n    {\r\n      value: \"reviews\",\r\n      component: <BranchReviewsSection />,\r\n    },\r\n  ];\r\n\r\n  const changeTabHandler = (newTab) => {\r\n    setCurrentTab(newTab);\r\n  };\r\n\r\n  // ----------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Employee Branch-info </title>\r\n      </Helmet>\r\n\r\n      {/* *********** Start Header  *************** */}\r\n      <BranchInfoHeader\r\n        selectedTab={currentTab}\r\n        onChangeTab={changeTabHandler}\r\n      />\r\n\r\n      {/* *********** Start OutLet  *************** */}\r\n      {/* <Main sx={{ width: '100%', pt: '44px' }}> */}\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/*----------- Outlet Of Tabs --------*/}\r\n        {TABS.map(\r\n          (tab) =>\r\n            tab.value === currentTab && (\r\n              <Box key={tab.value}> {tab.component} </Box>\r\n            )\r\n        )}\r\n      </Container>\r\n      {/* </Main> */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\finance\\EmployeeFinancePage.js",["2930","2931","2932"],[],"import React, { useEffect } from \"react\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport { Container, Grid, Stack, Typography, Box } from \"@mui/material\";\r\n// components\r\nimport FinanceList from \"../../../section/@employee/finance/FinanceList\";\r\nimport ChartFinance from \"../../../section/@employee/finance/ChartFinance\";\r\nimport ProfileCard from \"../../../components/cards/profile/ProfileCard\";\r\nimport RatedFinanceCard from \"../../../components/cards/finance/RatedFinanceCard\";\r\nimport NetBalanceCard from \"../../../components/cards/finance/NetBalanceCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getRestaurantAnnualEarnings } from \"../../../redux/services/restaurant_service\";\r\n//-------------------------------------------------------------------\r\n\r\nconst mainTitleSx = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  mb: \"26px\",\r\n};\r\n\r\nconst mainConatinerStyle = {\r\n  px: { xs: \"15px\", lg: \"0px!important\" },\r\n};\r\n\r\nexport default function Finance() {\r\n  const { translate } = useLocales();\r\n\r\n  const currentDate = `${new Date().getFullYear()}-0${new Date().getMonth() + 1}-01`;\r\n  const previoustDate = `${new Date().getFullYear()}-0${new Date().getMonth()}-01`;\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurantAnnualEarnings({\r\n        branchId: branchId,\r\n        date: currentDate,\r\n        date2: previoustDate\r\n      }))\r\n    }\r\n  }, [dispatch])\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Finance Page </title>\r\n      </Helmet>\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <Typography sx={{ ...mainTitleSx }} variant=\"h5\">\r\n          {translate(\"over_view\")}\r\n        </Typography>\r\n\r\n        <Box mb=\"44px\">\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={6} md={6} lg={4}>\r\n              <ProfileCard />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6} md={6} lg={4}>\r\n              <RatedFinanceCard />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={6} lg={4}>\r\n              <NetBalanceCard />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n\r\n        <ChartFinance />\r\n\r\n        <Box mt=\"44px\" mb=\"44px\">\r\n          <FinanceList />\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\rank\\RankPage.js",["2933","2934","2935","2936","2937","2938","2939"],[],"import React from \"react\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport { Container, Grid, Stack, Typography, Button } from \"@mui/material\";\r\n// components\r\nimport AdminCard from \"../../../section/@dashboard/finacial/AdminCard\";\r\nimport RatedBranchCard from \"../../../components/cards/rank/RatedBranchCard\";\r\nimport RankingBranchesList from \"../../../section/@dashboard/rank/RankingBranchesList\";\r\nimport LowestRate from \"../../../section/@dashboard/rank/details/LowestRate\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n\r\n//service\r\nimport {\r\n  getHighestRatedBranchRestaurant,\r\n  getHighestRatedBranchMarket,\r\n  getRestaurantHighestIncomeBranch,\r\n  getMarketHighestIncomeBranch,\r\n} from \"../../../redux/services/rank_service\";\r\nimport { adminLowestRatedBranch } from \"../../../redux/services/admin_lowest_rated_branch_service\";\r\nimport { getRestaurantChainReview } from \"../../../redux/services/admin_restaurant_chain_review_service\";\r\n\r\n// useEffect\r\nimport { useEffect } from \"react\";\r\nimport ProfileCard from \"../../../components/cards/profile/ProfileCard\";\r\nimport LoadingCards from \"../../../components/loadingSkeleton/LoadingCards\";\r\n\r\n//-------------------------------------------------------------------\r\n\r\n// ------------ Styles --------------\r\nconst mainTitleSx = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  mb: \"21px\",\r\n};\r\n\r\nexport default function RankPage() {\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getHighestRatedBranchRestaurant());\r\n      dispatch(getRestaurantHighestIncomeBranch());\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getHighestRatedBranchMarket());\r\n      dispatch(getMarketHighestIncomeBranch());\r\n    }\r\n\r\n    //  dispatch(adminLowestRatedBranch(storeId));\r\n  }, [dispatch]);\r\n\r\n  // get highest rated branch\r\n  const {\r\n    highestRatedBranch,\r\n    isLoadingHighestRatedBranch,\r\n    highestIncomeBranch,\r\n    isLoadingHighestIncomeBranch\r\n  } = useSelector((state) => state.rank);\r\n\r\n  const { lowestRateBransh } = useSelector((state) => state.resturants);\r\n\r\n  // get highest rated branch\r\n  const HighestValues = {\r\n    id: highestRatedBranch?.id,\r\n    name: highestRatedBranch?.name,\r\n    imgUrl: highestRatedBranch?.imgUrl,\r\n    rate: highestRatedBranch?.rate,\r\n  };\r\n\r\n  // get highest income branch\r\n  // const IncomeValues = {\r\n  //   id: highestIncomeBranch?.id,\r\n  //   name: highestIncomeBranch?.name,\r\n  //   imgUrl: highestIncomeBranch?.imgUrl,\r\n  //   rate: highestIncomeBranch?.rate,\r\n  // };\r\n\r\n  // get highest rated branch\r\n  // const LowestValues = {\r\n  //   id: lowestRateBransh.id,\r\n  //   name: lowestRateBransh.name,\r\n  //   imgUrl: lowestRateBransh.imgUrl,\r\n  //   rate: lowestRateBransh.rate,\r\n  // };\r\n\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Rank </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* **************** Start Title ************** */}\r\n        <Typography sx={{ ...mainTitleSx }} variant=\"h5\">\r\n          {translate(\"over_view\")}\r\n        </Typography>\r\n\r\n        {/* *************  Start Cards Row *********** */}\r\n        <Grid container spacing=\"20px\" mb=\"30px\">\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <ProfileCard />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            {\r\n              !isLoadingHighestRatedBranch ?\r\n                <RatedBranchCard\r\n                  title=\"the_highest_rated_branch\"\r\n                  data={HighestValues}\r\n                />\r\n                :\r\n                <LoadingCards />\r\n            }\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            {\r\n              !isLoadingHighestIncomeBranch ?\r\n                <RatedBranchCard\r\n                  title=\"the_highest_income_branch\"\r\n                  data={highestIncomeBranch}\r\n                />\r\n                :\r\n                <LoadingCards />\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* *************  Start Ranking Branches *********** */}\r\n        <RankingBranchesList />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\finance\\WithdrawCashPage.js",["2940","2941","2942","2943","2944"],[],"import React, { useState, useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n// service\r\nimport {\r\n  addWithdrawMeeting,\r\n  getUserWallets,\r\n} from \"../../../redux/services/add_withdraw_meeting_service\";\r\n\r\n// ------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst FormHolderSx = {\r\n  p: \"40px\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1.5px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function TransferCashPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, error, userWallets, isLoadingaddWithdrawMeeting } =\r\n    useSelector((state) => state.withdrawMeeting);\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate, currentLang } = useLocales();\r\n  console.log(currentLang);\r\n  const navigate = useNavigate();\r\n\r\n  const WithdrawSchema = Yup.object().shape({\r\n    currency: Yup.string().required(translate(\"currency_is_required\")),\r\n    location: Yup.string().required(translate(\"location_is_required\")),\r\n    phoneNumber: Yup.string().required(translate(\"phone_is_required\")),\r\n    countryCode: Yup.string().required(translate(\"country_code_is_required\")),\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n    amount: Yup.string().required(translate(\"amount_is_required\")),\r\n    walletId: Yup.string().required(translate(\"wallet_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    currency: \"AED\",\r\n    location: \"\",\r\n    phoneNumber: \"\",\r\n    countryCode: \"+02\",\r\n    password: \"\",\r\n    amount: \"\",\r\n    walletId: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(WithdrawSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    //console.log(\"data is\", data);\r\n    try {\r\n      dispatch(addWithdrawMeeting(data));\r\n      // code here\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/financial\"\r\n    >\r\n      {translate(`Financial`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`withdraw_cash`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getUserWallets({\r\n        lang: currentLang.value,\r\n      })\r\n    );\r\n  }, [dispatch, currentLang]);\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Withdraw Cash </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...FormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"40px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`withdraw_by_cash`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*======  Phone Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"phoneNumber\"\r\n                  type=\"number\"\r\n                  label={translate(\"phone\")}\r\n                  placeholder={translate(\"add_phone\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      // pr: \"20px\",\r\n                      // height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#D8D8D8\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"countryCode\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          \"& .MuiSvgIcon-root\": {\r\n                            top: \"-5%\",\r\n                            width: \"20px\",\r\n                            height: \"20px\",\r\n                            right: \"0px\",\r\n                          },\r\n                          width: \"80px\",\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          // IconComponent: () => (\r\n                          //   <img\r\n                          //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          //     alt=\"\"\r\n                          //   />\r\n                          // ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"countryCode\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"+02\">+02 EG</MenuItem>\r\n                        <MenuItem value=\"+03\">+03 US</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======  Password Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword\r\n                                ? \"eva:eye-off-outline\"\r\n                                : \"eva:eye-outline\"\r\n                            }\r\n                            color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======  Location Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"location\"\r\n                  type=\"text\"\r\n                  label={translate(\"location\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiSvgIcon-root\": {\r\n                      width: \"20px\",\r\n                      height: \"20px\",\r\n                    },\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setValue(\"location\", e.target.value, {\r\n                      shouldValidate: true,\r\n                    });\r\n                  }}\r\n                  SelectProps={{\r\n                    native: false,\r\n                    // IconComponent: () => (\r\n                    //   <img\r\n                    //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                    //     alt=\"\"\r\n                    //   />\r\n                    // ),\r\n                  }}\r\n                >\r\n                  <MenuItem value=\"dubai\" selected>\r\n                    Dubai\r\n                  </MenuItem>\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              {/*======  Amount Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  label={translate(\"the_amount\")}\r\n                  placeholder={translate(\"the_amount\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      // pr: \"20px\",\r\n                      // height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#D8D8D8\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"currency\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          width: \"80px\",\r\n                          \"& .MuiSvgIcon-root\": {\r\n                            top: \"-5%\",\r\n                            width: \"20px\",\r\n                            height: \"20px\",\r\n                            right: \"15px\",\r\n                          },\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          // IconComponent: () => (\r\n                          //   <img\r\n                          //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          //     alt=\"\"\r\n                          //   />\r\n                          // ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"currency\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"AED\">AED</MenuItem>\r\n                        <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"walletId\"\r\n                  type=\"text\"\r\n                  label={translate(\"wallet\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiSvgIcon-root\": {\r\n                      width: \"20px\",\r\n                      height: \"20px\",\r\n                    },\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setValue(\"walletId\", e.target.value, {\r\n                      shouldValidate: true,\r\n                    });\r\n                  }}\r\n                  SelectProps={{\r\n                    native: false,\r\n                    // IconComponent: () => (\r\n                    //   <img\r\n                    //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                    //     alt=\"\"\r\n                    //   />\r\n                    // ),\r\n                  }}\r\n                >\r\n                  {userWallets.map((row, index) => (\r\n                    <MenuItem value={row?.id} key={index}>\r\n                      {translate(`${row?.value}`)} {}\r\n                      {translate(`${row?.currency}`)}\r\n                    </MenuItem>\r\n                  ))}\r\n                  <MenuItem value=\"dubai\" selected>\r\n                    Dubai\r\n                  </MenuItem>\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Grid mt={\"70px\"} item xs={12} md={6}>\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/financial\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    // loading={isLoading}\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={isLoadingaddWithdrawMeeting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"confirm\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\finance\\TransferCashPage.js",["2945","2946","2947","2948"],[],"import React, { useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n// service\r\nimport { transferMoneyToAdminWallet } from \"../../../redux/services/finance_service\";\r\n// ------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst FormHolderSx = {\r\n  p: \"40px\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1.5px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst avatarStyle = {\r\n  width: \"32px\",\r\n  height: \"32px\",\r\n  borderRadius: \"50%\",\r\n  filter: \"drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.25))\",\r\n  marginRight: \"16px\",\r\n  marginLeft: \"16px\",\r\n};\r\n\r\nexport default function TransferCashPage() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const [addNewCard, setAddNewCard] = useState(false);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const WithdrawSchema = Yup.object().shape({\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n    Currency: Yup.string().required(translate(\"currency_is_required\")),\r\n    amount: Yup.string().required(translate(\"amount_is_required\")),\r\n    Card: Yup.string().required(translate(\"card_is_required\")),\r\n\r\n    NameOnCard: addNewCard\r\n      ? Yup.string().required(translate(\"name_on_card_is_required\"))\r\n      : Yup.string(),\r\n    CardNumber: addNewCard\r\n      ? Yup.string().required(translate(\"card_number_is_required\"))\r\n      : Yup.string(),\r\n    ExpireDate: addNewCard\r\n      ? Yup.string().required(translate(\"expiry_date_is_required\"))\r\n      : Yup.string(),\r\n    CvvCode: addNewCard\r\n      ? Yup.string().required(translate(\"cvv_code_is_required\"))\r\n      : Yup.string(),\r\n  });\r\n\r\n  const defaultValues = {\r\n    password: \"\",\r\n    Currency: \"AED\",\r\n    amount: \"\",\r\n    Card: \"master_card\",\r\n    NameOnCard: \"\",\r\n    CardNumber: \"\",\r\n    ExpireDate: \"\",\r\n    CvvCode: \"\",\r\n    facilityId: \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(WithdrawSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      dispatch(transferMoneyToAdminWallet(data));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/financial\"\r\n    >\r\n      {translate(`Financial`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`transfer_money`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Transfer Cash </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...FormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"40px\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`transfer_money`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/*======  Password Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword\r\n                                ? \"eva:eye-off-outline\"\r\n                                : \"eva:eye-outline\"\r\n                            }\r\n                            color={showPassword ? \"#FFCC63\" : \"#BCBCBC\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======  Amount Input ====== */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFTextField\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  label={translate(\"the_amount\")}\r\n                  placeholder={translate(\"the_amount\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiOutlinedInput-input\": {\r\n                      fontSize: \"16px\",\r\n                      fontWeight: 400,\r\n                      lineHeight: \"16px\",\r\n                      color: \"#121212\",\r\n                      pl: \"10px\",\r\n                    },\r\n                    \"& .MuiOutlinedInput-root\": {\r\n                      // pr: \"20px\",\r\n                      // height: \"50px\",\r\n                      alignItems: \"baseline\",\r\n                      \"& fieldset\": {\r\n                        borderColor: \"#9DA0A4\",\r\n                      },\r\n                      \"&:hover fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                      \"&.Mui-focused fieldset\": {\r\n                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                      },\r\n                    },\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <RHFSelect\r\n                        name=\"Currency\"\r\n                        sx={{\r\n                          ...transparentBorderTxtField,\r\n                          width: \"80px\",\r\n                          \"& .MuiSvgIcon-root\": {\r\n                            top: '-5%',\r\n                            width: '20px',\r\n                            height: '20px'\r\n                          },\r\n                        }}\r\n                        SelectProps={{\r\n                          native: false,\r\n                          // IconComponent: () => (\r\n                          //   <img\r\n                          //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          //     alt=\"\"\r\n                          //   />\r\n                          // ),\r\n                        }}\r\n                        onChange={(e) =>\r\n                          setValue(\"Currency\", e.target.value, {\r\n                            shouldValidate: true,\r\n                          })\r\n                        }\r\n                      >\r\n                        <MenuItem value=\"AED\">AED</MenuItem>\r\n                        <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                      </RHFSelect>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              {/*======= Select Card Input ======= */}\r\n              <Grid item xs={12} md={6} mb=\"16px\">\r\n                <RHFSelect\r\n                  name=\"Card\"\r\n                  type=\"text\"\r\n                  label={translate(\"select_card\")}\r\n                  sx={{\r\n                    ...txtFieldBorderStyle,\r\n                    \"& .MuiSelect-select.MuiSelect-outlined\": {\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    },\r\n                    \"& .MuiSvgIcon-root\": {\r\n                      width: '20px',\r\n                      height: '20px'\r\n                    },\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setValue(\"Card\", e.target.value, { shouldValidate: true });\r\n                  }}\r\n                  SelectProps={{\r\n                    native: false,\r\n                    // IconComponent: () => (\r\n                    //   <img\r\n                    //     src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                    //     alt=\"\"\r\n                    //   />\r\n                    // ),\r\n                  }}\r\n                >\r\n                  <MenuItem\r\n                    sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                    value=\"master_card\"\r\n                    onClick={() => setAddNewCard(false)}\r\n                  >\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_masterCard.svg\"\r\n                      alt=\"upload_icon\"\r\n                      style={{ ...avatarStyle }}\r\n                    />\r\n                    master card\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                    value=\"null\"\r\n                    onClick={() => setAddNewCard(true)}\r\n                  >\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_addPlus.svg\"\r\n                      alt=\"upload_icon\"\r\n                      style={{\r\n                        width: \"20px\",\r\n                        height: \"20px\",\r\n                        marginRight: \"22px\",\r\n                        marginLeft: \"22px\",\r\n                      }}\r\n                    />\r\n                    {translate(`add_new_card`)}\r\n                  </MenuItem>\r\n                </RHFSelect>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} />\r\n            </Grid>\r\n\r\n            {/* ********* Add New Card Form ******** */}\r\n            {addNewCard && (\r\n              <>\r\n                <Box\r\n                  sx={{\r\n                    height: \"2px\",\r\n                    bgcolor: \"#ECECEC\",\r\n                    mb: \"24px\",\r\n                    mt: \"8px\",\r\n                  }}\r\n                />\r\n\r\n                <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                  {/*====== name on Card  ====== */}\r\n                  <Grid item xs={12} md={6} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"NameOnCard\"\r\n                      type=\"text\"\r\n                      placeholder={translate(\"enter_name_on_the_card\")}\r\n                      sx={txtFieldBorderStyle}\r\n                      inputProps={{\r\n                        sx: {\r\n                          \"&::placeholder\": {\r\n                            textAlign: \"left\",\r\n                            color: \"#9DA0A4\",\r\n                            fontWeight: \"400\",\r\n                            fontSize: \"14px\",\r\n                            lineHeight: \"22px\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6} />\r\n\r\n                  {/*======  Card Number ====== */}\r\n                  <Grid item xs={12} md={6} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"CardNumber\"\r\n                      type=\"text\"\r\n                      placeholder={translate(\"enter_card_number\")}\r\n                      sx={txtFieldBorderStyle}\r\n                      inputProps={{\r\n                        sx: {\r\n                          \"&::placeholder\": {\r\n                            textAlign: \"left\",\r\n                            color: \"#9DA0A4\",\r\n                            fontWeight: \"400\",\r\n                            fontSize: \"14px\",\r\n                            lineHeight: \"22px\",\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6} />\r\n\r\n                  {/*=========== expiry date and Cvv code =========== */}\r\n                  <Grid item xs={12} sm={12} md={6}>\r\n                    <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                      <Grid container columnSpacing={2}>\r\n                        {/*---  Expiry Date  --- */}\r\n                        <Grid item xs={12} sm={6} mb=\"16px\">\r\n                          <RHFTextField\r\n                            name=\"ExpireDate\"\r\n                            type=\"text\"\r\n                            placeholder={translate(\"MM / YY\")}\r\n                            sx={txtFieldBorderStyle}\r\n                            inputProps={{\r\n                              sx: {\r\n                                \"&::placeholder\": {\r\n                                  textAlign: \"left\",\r\n                                  color: \"#9DA0A4\",\r\n                                  fontWeight: \"400\",\r\n                                  fontSize: \"14px\",\r\n                                  lineHeight: \"22px\",\r\n                                },\r\n                              },\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n\r\n                        {/*--- Cvv Code  --- */}\r\n                        <Grid item xs={12} sm={6}>\r\n                          <RHFTextField\r\n                            name=\"CvvCode\"\r\n                            type=\"text\"\r\n                            placeholder={translate(\"CVV\")}\r\n                            sx={txtFieldBorderStyle}\r\n                            InputProps={{\r\n                              endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                  <img\r\n                                    src=\"/assets/icons/dashboard/point.svg\"\r\n                                    style={{\r\n                                      width: \"20px\",\r\n                                      height: \"20px\",\r\n                                    }}\r\n                                    alt=\"\"\r\n                                  />\r\n                                </InputAdornment>\r\n                              ),\r\n                            }}\r\n                            inputProps={{\r\n                              sx: {\r\n                                \"&::placeholder\": {\r\n                                  textAlign: \"left\",\r\n                                  color: \"#9DA0A4\",\r\n                                  fontWeight: \"400\",\r\n                                  fontSize: \"14px\",\r\n                                  lineHeight: \"22px\",\r\n                                },\r\n                              },\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} md={6} />\r\n                </Grid>\r\n              </>\r\n            )}\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} sm={6} />\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <Stack direction=\"row\" mt=\"32px\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/financial\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"confirm\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@employee\\profile\\EditEmployeeProfile.js",["2949","2950","2951","2952","2953"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  MenuItem,\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n  RHFSelect,\r\n} from \"../../../components/hook-form\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getAdminProfileInfo,\r\n  editAdminProfileInfo,\r\n} from \"../../../redux/services/admin_profile_service\";\r\nimport moment from \"moment\";\r\nimport { getAllBranches } from \"../../../redux/services/restaurant_service\";\r\nimport { getAllBranchesMarket } from \"../../../redux/services/markets_service\";\r\n// -------------------------------------------------------------------------------------\r\n\r\n// --------------- Styles --------------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 25px\", md: \"45px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nconst positions = [\r\n  {\r\n    name: \"regional_manager\",\r\n    Role: 1,\r\n  },\r\n  {\r\n    name: \"branch_manager\",\r\n    Role: 2,\r\n  },\r\n  {\r\n    name: \"chasher\",\r\n    Role: 3,\r\n  },\r\n];\r\nexport default function EditEmployeeProfile() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [ProfilePhoto, setImageUrl] = useState(null);\r\n\r\n  const [valueType, setValueType] = useState(false);\r\n\r\n  var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  var AdminId = userInfo?.id;\r\n\r\n  const { isLoading, personalInfo } = useSelector(\r\n    (state) => state?.adminProfile\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllBranches(1));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket(1));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const [allBranches, setAllBranches] = useState([]);\r\n\r\n  const [selectedNames, setSelectedNames] = useState([]);\r\n\r\n  const { branches, postIsSuccessful } = useSelector((state) => state.branches);\r\n\r\n  const { branchesMarket } = useSelector((state) => state.market);\r\n\r\n  useEffect(() => {\r\n    setAllBranches(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [branches, branchesMarket]);\r\n\r\n  const EditProfileInfoSchema = Yup.object().shape({\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    Address: Yup.string().required(translate(\"address_is_required\")),\r\n    DateOfBirth: Yup.string()\r\n      .required(translate(\"date_of_birth_is_required\"))\r\n      .nullable(),\r\n    Gender: Yup.number().required(translate(\"gender_is_required\")),\r\n    FacilityIds: valueType\r\n      ? Yup.array().required(translate(\"branch_is_required\")).nullable()\r\n      : Yup.string().required(translate(\"branch_is_required\")),\r\n    Role: Yup.string().required(translate(\"position_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: personalInfo?.firstName,\r\n    LastName: personalInfo?.lastName,\r\n    PhoneNumber: personalInfo?.phoneNumber,\r\n    gender: personalInfo?.gender,\r\n    Address: personalInfo?.addressName,\r\n    DateOfBirth: personalInfo?.dateOfBirth,\r\n    Gender: personalInfo?.gender ? personalInfo?.gender : 0,\r\n    AdminId: userInfo?.id,\r\n    FacilityIds: valueType ? [] : \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(EditProfileInfoSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  let formData = new FormData();\r\n\r\n  const onSubmit = async (data) => {\r\n    let { DateOfBirth, FacilityIds } = data;\r\n    DateOfBirth = convertDateFormat(DateOfBirth);\r\n    data = {\r\n      ...data,\r\n      FacilityIds: valueType ? FacilityIds : [FacilityIds],\r\n    };\r\n\r\n    console.log(\"data =\", data);\r\n    formData.append(\"ProfilePhoto\", ProfilePhoto);\r\n    formData.append(\"FirstName\", data.FirstName);\r\n    formData.append(\"LastName\", data.LastName);\r\n    formData.append(\"PhoneNumber\", data.PhoneNumber);\r\n    formData.append(\"Gender\", data.Gender);\r\n    formData.append(\"Address\", data.Address);\r\n    formData.append(\"Role\", data.Role);\r\n\r\n    for (let i = 0; i < data.FacilityIds.length; i++) {\r\n      formData.append(\"FacilityIds\", data.FacilityIds[i]);\r\n    }\r\n\r\n    formData.append(\"AdminId\", AdminId);\r\n\r\n    formData.append(\"DateOfBirth\", DateOfBirth);\r\n    try {\r\n      // code here\r\n\r\n      dispatch(editAdminProfileInfo(formData));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAdminProfileInfo(\"en-US\"));\r\n    console.log(\"(AdminId)\", AdminId);\r\n  }, [dispatch]);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  // console.log(layoutPath);\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_personal_information`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // ------------------ JSX Code ------------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Profile Info </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {isLoading && Spinner}\r\n\r\n        {!isLoading && (\r\n          <Box sx={{ ...mainHolderSx }}>\r\n            <Typography variant=\"h5\" color=\"#121212\" mb=\"30px\">\r\n              {translate(`edit_personal_information`)}\r\n            </Typography>\r\n\r\n            {/* ***************** Form **************** */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {/* *********** Edit Information ********** */}\r\n\r\n              <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                {/* ******** Left Side Inputs ******* */}\r\n                <Grid item xs={12} sm={6} md={6}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*---  first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"FirstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*---  second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"LastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={12} md={12} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"ProfilePhoto\"\r\n                      label={translate(\"Profile Photo\")}\r\n                      type=\"file\"\r\n                      onChange={(event) => {\r\n                        setImageUrl(event.target.files[0]);\r\n                        setValue(\"ProfilePhoto\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      id=\"branchLogo\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: ProfilePhoto ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                              sx={{ p: \"0px\" }}\r\n                            >\r\n                              <label htmlFor=\"branchLogo\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*====== date of birth ======= */}\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <CustomDataPicker\r\n                      name=\"DateOfBirth\"\r\n                      textLabel=\"date_of_birth\"\r\n                      //  onChange={(e) => {\r\n                      //     setValue('dateOfBirth', e.target.value['$d'], { shouldValidate: true })\r\n                      //      console.log(e.target.value)\r\n                      //   }}\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12} md={12} mb=\"16px\">\r\n                    <RHFTextField\r\n                      name=\"PhoneNumber\"\r\n                      label={translate(\"phoneNumber\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Stack\r\n                    sx={{ ...genderHolderSx, position: \"relative\", ml: \"14px\" }}\r\n                  >\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      //  placeholder={Gender}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n\r\n                {/* ************* Right Side Inputs ************ */}\r\n                {/*======  Address  ====== */}\r\n                <Grid item xs={12} sm={6} md={6} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"Address\"\r\n                    label={translate(\"address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n\r\n                  <Stack height=\"16px\" />\r\n\r\n                  <RHFSelect\r\n                    name=\"Role\"\r\n                    type=\"text\"\r\n                    label={translate(\"employee_position\")}\r\n                    placeholder={translate(\"select_employee_position\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"Role\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                      e.target.value === 1\r\n                        ? setValueType(true)\r\n                        : setValueType(false);\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    {positions.map((row, index) => (\r\n                      <MenuItem value={row?.Role} key={index}>\r\n                        {translate(`${row?.name}`)}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </RHFSelect>\r\n\r\n                  <Stack height=\"16px\" />\r\n\r\n                  {localStorage.getItem(\"role\") === \"Owner\" ||\r\n                  localStorage.getItem(\"role\") === \"RegionalManager\" ? (\r\n                    <RHFSelect\r\n                      multiple\r\n                      name=\"FacilityIds\"\r\n                      type=\"text\"\r\n                      label={translate(\"employee_branch\")}\r\n                      placeholder={translate(\"select_branch\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(\"FacilityIds\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                        setSelectedNames(e.target.value);\r\n                      }}\r\n                      SelectProps={{\r\n                        multiple: true,\r\n                        native: false,\r\n                        value: selectedNames,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        ),\r\n                        // InputProbs: <OutlinedInput label=\"Multiple Select\" />\r\n                      }}\r\n                    >\r\n                      {allBranches?.map((row, index) => (\r\n                        <MenuItem value={row?.id} key={index}>\r\n                          {translate(`${row?.name}`)}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </RHFSelect>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                <Grid item xs={12} sm={6} md={6} />\r\n\r\n                <Grid item xs={12} sm={6} md={6} mt=\"8px\">\r\n                  <Stack direction=\"row\">\r\n                    <Button\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                      onClick={() => {\r\n                        navigate(-1);\r\n                      }}\r\n                    >\r\n                      {translate(\"back\")}\r\n                    </Button>\r\n                    <LoadingButton\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                    >\r\n                      {translate(\"confirm\")}\r\n                    </LoadingButton>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </FormProvider>\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\finance\\FinancePage.js",["2954"],[],"import React from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n//mui\r\nimport { Container, Grid, Box, Typography } from \"@mui/material\";\r\n// components\r\nimport RatedFinanceCard from \"../../../components/cards/finance/RatedFinanceCard\";\r\nimport FinanceList from \"../../../section/@dashboard/finacial/FinanceList\";\r\nimport ChartFinance from \"../../../section/@dashboard/finacial/ChartFinance\";\r\nimport NetBalanceCard from \"../../../components/cards/finance/NetBalanceCard\";\r\nimport ProfileCard from \"../../../components/cards/profile/ProfileCard\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { useEffect } from \"react\";\r\nimport { getFacilityWalletBalance } from \"../../../redux/services/finance_service\";\r\nimport { useDispatch } from \"react-redux\";\r\n//-------------------------------------------------------------------------------------\r\n\r\n// ------------- Style ----------------\r\nconst mainTitleSx = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  mb: \"21px\",\r\n};\r\n\r\n// data\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst LineChartData = [\r\n  {\r\n    name: months[new Date().getMonth()],\r\n    data: [234, 45, 67, 987, 345, 456, 87, 321, 45, 30, 569, 76, 890, 234, 45],\r\n  },\r\n  {\r\n    name: months[new Date().getMonth() - 1],\r\n    data: [562, 145, 267, 97, 45, 156, 87, 321, 30, 10, 845, 969, 706, 20, 562],\r\n  },\r\n];\r\n\r\nexport default function RankPage() {\r\n  const dispatch = useDispatch()\r\n  const { themeStretch } = useSettingsContext();\r\n  const { translate } = useLocales();\r\n\r\n  useEffect(() => {\r\n    dispatch(getFacilityWalletBalance());\r\n  }, [dispatch]);\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Admin Finance Page </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"} sx={{ p: { lg: '0px' } }}>\r\n        {/* **************** Start Title ************** */}\r\n        <Typography sx={{ ...mainTitleSx }} variant=\"h5\">\r\n          {translate(\"over_view\")}\r\n        </Typography>\r\n\r\n        <Box mb=\"44px\">\r\n          <Grid container spacing=\"24px\">\r\n            <Grid item xs={12} sm={6} md={6} lg={4}>\r\n              <ProfileCard />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={6} md={6} lg={4}>\r\n              <RatedFinanceCard />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={6} lg={4}>\r\n              <NetBalanceCard />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n\r\n        <Box mt=\"48px\" mb=\"48px\">\r\n          <ChartFinance />\r\n        </Box>\r\n\r\n        <FinanceList />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\performance\\MostSellingCitiesPage.js",["2955","2956","2957","2958","2959"],[],"import React, { useEffect } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n// @ Mui\r\nimport { Box, Container, Grid, Stack, Typography } from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport LinearProgress, {\r\n  linearProgressClasses,\r\n} from \"@mui/material/LinearProgress\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n// Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// Services\r\nimport { getResturantChainSales } from \"../../../redux/services/performance_service\";\r\nimport { getMarketMostSellingCities, getRestaurantMostSellingCities } from \"../../../redux/services/restaurant_service\";\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\n// ---------- Styles -------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"40px 15px\", md: \"40px 84px\" },\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n  justifyContent: \"space-between\",\r\n  minHeight: \"450px\",\r\n};\r\n\r\nconst titleHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"18px\",\r\n};\r\n\r\nconst mainTitleSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n};\r\n\r\nconst BorderLinearProgress1 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"10px\",\r\n  borderRadius: 8,\r\n  width: \"100%\",\r\n  // marginBottom: \"37px\", //59\r\n  // marginTop: \"5px\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n      theme.palette.mode === \"light\"\r\n        ? \"rgba(255, 204, 99, 0.3)\"\r\n        : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#4E6FE4\" : \"#4E6FE4\",\r\n  },\r\n}));\r\n\r\nconst BorderLinearProgress2 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"8px\",\r\n  // marginTop: \"5px\",\r\n  borderRadius: 8,\r\n  width: \"80%\",\r\n  // marginBottom: \"35px\", //53\r\n\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n      theme.palette.mode === \"light\"\r\n        ? \"rgba(255, 204, 99, 0.3)\"\r\n        : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#4EE476\" : \"#4EE476\",\r\n  },\r\n}));\r\n\r\nconst BorderLinearProgress3 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"6px\",\r\n  borderRadius: 8,\r\n  // marginTop: \"5px\",\r\n  width: \"60%\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n      theme.palette.mode === \"light\"\r\n        ? \"rgba(255, 204, 99, 0.3)\"\r\n        : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#FFCC63\" : \"#FFCC63\",\r\n  },\r\n}));\r\n\r\nconst flagIconSx = {\r\n  width: \"18px\",\r\n  height: \"21.23px\",\r\n  margin: \"auto\",\r\n  marginRight: \"16px\",\r\n};\r\n\r\nconst locationIconSx = {\r\n  margin: \"auto\",\r\n};\r\n\r\nconst numberTextSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"24px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  lineHeight: \"20px\",\r\n  mb: \"65px\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n};\r\n\r\nexport default function MostSellingCitiesPage() {\r\n  const dispatch = useDispatch();\r\n  // const { restaurantsMostSelling } = useSelector(\r\n  //   (state) => state.adminPerformance\r\n  // );\r\n\r\n  const { branchesMostSellingCities, isLoadingMostSellingCities } = useSelector((state) => state.resturants);\r\n  const { restaurantsMostSelling } = useSelector((state) => state.performance);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n  const { translate } = useLocales();\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/performance\"\r\n    >\r\n      {translate(`performance`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`most_selling_cities`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    // dispatch(getResturantChainSales(URLS.restaurantId));\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurantMostSellingCities({ pageNumber: 1, pageSize: 10 }));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketMostSellingCities({ pageNumber: 1, pageSize: 10 }));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // ----------- JSX Code --------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Most Selling Icome Branches </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {/* ******************** Start Most Selling Cities ********************* */}\r\n        <Grid item xs={12} sm={12} md={6}>\r\n          <Box sx={{ ...mainHolderSx }}>\r\n            {/* ----- main Tilte of Highest incoming of branches ------ */}\r\n            <Stack sx={{ ...titleHolderSx, mb: \"30px\" }}>\r\n              <Box display=\"flex\">\r\n                <img\r\n                  src=\"/assets/icons/flags/auth/ar_flagXS.svg\"\r\n                  alt=\"arrow\"\r\n                  style={flagIconSx}\r\n                />\r\n                <Typography sx={{ ...mainTitleSx }}>\r\n                  {translate(\"most_selling_cities\")}\r\n                </Typography>\r\n              </Box>\r\n            </Stack>\r\n\r\n            {/* ----- Highest Selling City ------ */}\r\n            <Stack justifyContent=\"center\" alignItems=\"center\">\r\n              <img\r\n                src=\"/assets/icons/dashboard/ic_locationPin2.svg\"\r\n                alt=\"arrow\"\r\n                style={locationIconSx}\r\n              />\r\n              <Box display=\"flex\" alignItems=\"center\" pt=\"18px\" mb=\"18px\">\r\n                <Typography sx={{ ...numberTextSx }}>\r\n                  {branchesMostSellingCities[0]?.sales}\r\n                </Typography>\r\n\r\n                <Typography\r\n                  sx={{ ...numberTextSx, color: \"#9DA0A4\", ml: \"11px\" }}\r\n                >\r\n                  <Typography component='span' variant=\"h4\" color='#121212' mr='11px'>\r\n                    {branchesMostSellingCities[0]?.noOfOrders}\r\n                  </Typography>\r\n                  {translate(`order`)}\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Typography sx={{ ...subTitleSx, mb: \"65px\", fontSize: \"40px\" }}>\r\n                {branchesMostSellingCities[0]?.cityName}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/* ----- Three Highest Selling City ------ */}\r\n            <Grid container columnSpacing={2}>\r\n              <Grid item xs={4} sm={2}>\r\n                {/* ---- cities ---- */}\r\n                <Stack>\r\n                  {Array.isArray(restaurantsMostSelling) &&\r\n                    restaurantsMostSelling?.map((row, index) => (\r\n                      <Stack\r\n                        key={index}\r\n                        direction=\"row\"\r\n                        justifyContent={{ xs: \"flex-start\" }}\r\n                      >\r\n                        <Typography\r\n                          sx={{\r\n                            ...subTitleSx,\r\n                            color: \"#121212\",\r\n                            mb: { xs: \"10px\", sm: \"10px\" },\r\n                          }}\r\n                          variant=\"h5\"\r\n                        >\r\n                          {row?.cityName}\r\n                          {/* Dubai */}\r\n                        </Typography>\r\n                        <Typography\r\n                          sx={{ ...smallTextSx, mb: { xs: \"10px\" } }}\r\n                          ml={{ xs: \"10px\", sm: \"30px\" }}\r\n                          variant=\"h5\"\r\n                          color=\"#121212\"\r\n                        >\r\n                          {row?.noOfOrders}\r\n                        </Typography>\r\n                      </Stack>\r\n                    ))}\r\n                </Stack>\r\n              </Grid>\r\n\r\n              <Grid item sx={{ display: { sm: \"block\" } }} xs={8} sm={10}>\r\n                {/* ---- progress Bar ---- */}\r\n                <Stack justifyContent={{ xs: \"start\", sm: \"start\" }}>\r\n                  {Array.isArray(restaurantsMostSelling) &&\r\n                    restaurantsMostSelling?.map((row, index) => (\r\n                      <Box mt=\"5px\" mb=\"24px\">\r\n                        <BorderLinearProgress1\r\n                          variant=\"determinate\"\r\n                          value={100}\r\n                        />\r\n                      </Box>\r\n                    ))}\r\n                  {/**     <Box mb='24px'>\r\n                                        <BorderLinearProgress2 variant=\"determinate\" value={100} />\r\n                                    </Box>\r\n\r\n                                    <Box>\r\n                                        <BorderLinearProgress3 variant=\"determinate\" value={100} />\r\n                                    </Box> */}\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\cssStyles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\RestaurantFormPage.js",["2960","2961","2962","2963","2964","2965","2966","2967","2968","2969"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react router\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Link,\r\n  Alert,\r\n  Box,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  Grid,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// routes\r\nimport { PATH_AUTH } from \"../../routes/paths\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../components/hook-form\";\r\nimport CustomStepper from \"../../components/custom-stepper\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\nimport {\r\n  getPlatforms,\r\n  getStoreTypes,\r\n} from \"../../redux/services/countries_service\";\r\nimport { setRestaurantInfo } from \"../../redux/slices/authentication\";\r\n\r\n// -----------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"18px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst subTitleSocialSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 500,\r\n  color: \"#121212\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  mb: \"23px\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"14px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"16px\",\r\n    top: \"-3px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    textAlign: \"left\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      // border: \"1.5px solid rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: \"#FFFFFF\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  \"&:focus\": {\r\n    bgcolor: \"#fba900\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst signupLinkStyle = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"16px\",\r\n  textDecoration: \"none\",\r\n  fontWeight: 400,\r\n  ml: \"8px\",\r\n  \"&:hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"50px 0px\",\r\n    sm: \"50px 0px\",\r\n    md: \"50px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontWeight: 500,\r\n  fontSize: \"14.12px\",\r\n  lineHeight: \"22px\",\r\n  textDecoration: \"underline\",\r\n  color: \"#8AC185\",\r\n};\r\n\r\n//store type\r\nvar FacilityTypes = [\r\n  { id: 0, label: \"Restaurant\" },\r\n  { id: 1, label: \"Market\" },\r\n];\r\n\r\nexport default function RestaurantFormPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    Brand,\r\n    FacilityType,\r\n    StoreTypeId,\r\n    PhotoName,\r\n    CoverPhotoName,\r\n    CommercialRegisterName,\r\n    TaxLicenseName,\r\n    SocialMediaAccounts,\r\n    Photo,\r\n    CoverPhoto,\r\n    CommercialRegister,\r\n    TaxLicense,\r\n  } = useSelector((state) => state.authentication);\r\n\r\n  const initialState = {\r\n    accounts: [...Array(1)],\r\n  };\r\n\r\n  const [socialMedia, setSocialMedia] = useState(initialState);\r\n\r\n  // to add select item for first meal\r\n  const addSocialMediaHandler = () => {\r\n    setSocialMedia((socialMedia) => ({\r\n      ...socialMedia,\r\n      accounts: [...socialMedia.accounts, socialMedia.accounts.push()],\r\n    }));\r\n  };\r\n\r\n  // to remove social media\r\n  const removeSocialMediaHandler = () => {\r\n    let { accounts } = socialMedia;\r\n\r\n    let newArr = accounts.slice(1);\r\n\r\n    setSocialMedia((socialMedia) => ({\r\n      ...socialMedia,\r\n      accounts: [...newArr],\r\n    }));\r\n  };\r\n\r\n  const { platforms, storeTypes } = useSelector((state) => state.countries);\r\n\r\n  const [photoImg, setPhotoImg] = useState(Photo);\r\n\r\n  const [coverImg, setCoverImg] = useState(CoverPhoto);\r\n\r\n  const [commercialRegisterImg, setCommercialRegisterImg] =\r\n    useState(CommercialRegister);\r\n\r\n  const [taxLicenseImg, setTaxLicenseImg] = useState(TaxLicense);\r\n\r\n  const [mealItems, setMealItems] = useState(initialState);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [FacilityTypeComponent, setFacilityTypeComponent] =\r\n    useState(StoreTypeId);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const RestaurantFormSchema = Yup.object().shape({\r\n    WebsiteUrl: Yup.string()\r\n      .required(translate(\"website_is_required\"))\r\n      .nullable(),\r\n    Name: Yup.string().required(translate(\"en_istore_name_is_required\")),\r\n    /* SocialMediaAccounts:\r\n      mealItems.accounts.length > -1\r\n        ? Yup.array().of(\r\n            Yup.object().shape({\r\n              platformId: Yup.string().required(\r\n                translate(\"platformId_is_Required\")\r\n              ),\r\n              accountUrl: Yup.string().required(\r\n                translate(\"accountUrl_is_Required\")\r\n              ),\r\n            })\r\n          )\r\n        : \"\",*/\r\n    SecondName: Yup.string()\r\n      .required(translate(\"ar_store_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n    Photo: Yup.string().required(translate(\"store_logo_is_required\")),\r\n    TaxLicense: Yup.string().required(translate(\"store_licenses_is_required\")),\r\n    CoverPhoto: Yup.string().required(translate(\"coverPhoto_is_required\")),\r\n    CommercialRegister: Yup.string().required(\r\n      translate(\"commercialregister_is_required\")\r\n    ),\r\n  });\r\n\r\n  const defaultValues = {\r\n    StoreTypeId: StoreTypeId,\r\n    Name: Brand.Name,\r\n    SecondName: Brand.SecondName,\r\n    WebsiteUrl: Brand.WebsiteUrl,\r\n    SocialMediaAccounts: JSON.parse(SocialMediaAccounts),\r\n    /* Photo: PhotoName,\r\n    CoverPhoto: CoverPhotoName,\r\n    CommercialRegister: CommercialRegisterName,\r\n    TaxLicense: TaxLicenseName,*/\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(RestaurantFormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const watchPhotoLicenses = watch(\"Photo\");\r\n\r\n  const watchCoverPhoto = watch(\"CoverPhoto\");\r\n\r\n  const watchCommercialRegisterLogo = watch(\"CommercialRegister\");\r\n\r\n  const watchTaxLicense = watch(\"TaxLicense\");\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const arrayOfSocials = JSON.stringify(data.SocialMediaAccounts);\r\n      dispatch(\r\n        setRestaurantInfo({\r\n          Name: data.Name,\r\n          SecondName: data.SecondName,\r\n          WebsiteUrl: data.WebsiteUrl,\r\n          StoreTypeId: FacilityTypeComponent,\r\n          SocialMediaAccounts:\r\n            data.SocialMediaAccounts !== undefined ? arrayOfSocials : null,\r\n          Photo: photoImg,\r\n          CoverPhoto: coverImg,\r\n          CommercialRegister: commercialRegisterImg,\r\n          TaxLicense: taxLicenseImg,\r\n        })\r\n      );\r\n\r\n      navigate(\"/auth/admin-form\");\r\n    } catch (error) {\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getPlatforms());\r\n    dispatch(getStoreTypes());\r\n  }, []);\r\n\r\n  useEffect(() => {}, [storeTypes]);\r\n\r\n  // --------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Restaurant Form Page</title>\r\n      </Helmet>\r\n\r\n      <Grid container>\r\n        {/* ********************* Register Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          <Stack sx={{ ...holder, justifyContent: \"center\" }}>\r\n            {/*----------------- Head of reatuarant form page -------------- */}\r\n            <Stack mb=\"22px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\">\r\n                <img src=\"/assets/images/logo/logo.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <Typography sx={{ ...titleSx }}>\r\n                  {translate(`create_account`)}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              {/*---------- Stepper  ------- */}\r\n              <CustomStepper activeStep={1} />\r\n\r\n              {/*---------- instruction message  ------- */}\r\n              <Typography sx={{ ...subTitleSx, mt: \"23px\" }}>\r\n                {translate(\r\n                  `enter_your_restaurant_information_to_create_your_account`\r\n                )}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of Restaurant page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n                {/*------ Store Name  -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  <Grid item xs={6}>\r\n                    {/*------ Store Name input en -------- */}\r\n                    <RHFTextField\r\n                      name=\"Name\"\r\n                      label={translate(\"store_name\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                    {/*------ Second Store Name input en -------- */}{\" \"}\r\n                  </Grid>{\" \"}\r\n                  <Grid item xs={6}>\r\n                    {\" \"}\r\n                    <RHFTextField\r\n                      name=\"SecondName\"\r\n                      label={translate(\"arabic_store_name\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*------ Store Type -------- */}\r\n                <RHFSelect\r\n                  name=\"StoreTypeId\"\r\n                  label={translate(\"store_type\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  SelectProps={{\r\n                    native: false,\r\n                    // IconComponent: () => <img src='/assets/icons/dashboard/ic_expandMore.svg' alt='' />\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setFacilityTypeComponent(e.target.value);\r\n                    setValue(\"StoreTypeId\", e.target.value, {\r\n                      shouldValidate: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  {storeTypes.map((option, index) => (\r\n                    <MenuItem key={index} value={option.id}>\r\n                      {option.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </RHFSelect>\r\n\r\n                {/*------ website-------- */}\r\n                <RHFTextField\r\n                  name=\"WebsiteUrl\"\r\n                  label={translate(\"website\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />\r\n\r\n                <Grid container columnSpacing={\"23px\"}>\r\n                  <Grid item xs={12} sm={12} md={12}>\r\n                    {/* --- meal title and action -- */}\r\n                    <Stack\r\n                      direction=\"row\"\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"space-between\"\r\n                      mb=\"16px\"\r\n                    >\r\n                      <Typography sx={{ ...subTitleSocialSx }}>\r\n                        {translate(`social_media_page_optional`)}\r\n                      </Typography>\r\n\r\n                      <Typography\r\n                        sx={{ ...highLightTextSx, cursor: \"pointer\" }}\r\n                        onClick={addSocialMediaHandler}\r\n                      >\r\n                        {translate(`add_social_contact`)}\r\n                      </Typography>\r\n                    </Stack>\r\n                    {socialMedia.accounts.map((e, index) => (\r\n                      <Grid\r\n                        container\r\n                        columnSpacing={2}\r\n                        key={index}\r\n                        position=\"relative\"\r\n                      >\r\n                        <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                          <RHFSelect\r\n                            name={`SocialMediaAccounts[${index}][platformId]`}\r\n                            label={translate(\"add_social_media\")}\r\n                            type=\"text\"\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                            SelectProps={{\r\n                              native: false,\r\n                              // IconComponent: () => <img src='/assets/icons/dashboard/ic_expandMore.svg' alt='' />\r\n                            }}\r\n                            onChange={(e) => {\r\n                              setValue(\r\n                                `SocialMediaAccounts[${index}][platformId]`,\r\n                                e.target.value,\r\n                                {\r\n                                  shouldValidate: true,\r\n                                }\r\n                              );\r\n                            }}\r\n                          >\r\n                            {platforms.map((option, index) => (\r\n                              <MenuItem key={index} value={option.id}>\r\n                                {translate(option.name)}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </RHFSelect>\r\n                        </Grid>\r\n\r\n                        {/* Account Url  */}\r\n                        <Grid item xs={12} mb=\"16px\" sm={6}>\r\n                          <RHFTextField\r\n                            name={`SocialMediaAccounts[${index}][accountUrl]`}\r\n                            label={translate(`accountUrl`)}\r\n                            type=\"text\"\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                          />\r\n                        </Grid>\r\n\r\n                        <IconButton\r\n                          sx={{\r\n                            position: \"absolute\",\r\n                            right: { xs: \"-30px\", md: \"-35px\" },\r\n                            top: { xs: \"-15px\", sm: \"10px\" },\r\n                          }}\r\n                          onClick={removeSocialMediaHandler}\r\n                        >\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_minus.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </IconButton>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*------ store licenses and logo image holder -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  {/*------ Store logo Input -------- */}\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"Photo\"\r\n                      label={translate(\"logo\")}\r\n                      type=\"file\"\r\n                      onChange={(event) => {\r\n                        setPhotoImg(event.target.files[0]);\r\n                        setValue(\"Photo\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      hidden\r\n                      id=\"Photo\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchPhotoLicenses ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"Photo\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*------ Store licenses Input -------- */}\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"CommercialRegister\"\r\n                      label={translate(\"store_licenses\")}\r\n                      type=\"file\"\r\n                      onChange={(event) => {\r\n                        setCommercialRegisterImg(event.target.files[0]);\r\n                        setValue(\"CommercialRegister\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      id=\"CommercialRegister\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchCommercialRegisterLogo\r\n                            ? \"#535353\"\r\n                            : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"CommercialRegister\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*------ store licenses and logo image holder -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  {/*------ Store licenses Input -------- */}\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"CoverPhoto\"\r\n                      label={translate(\"cover_img\")}\r\n                      type=\"file\"\r\n                      id=\"CoverPhoto\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchCoverPhoto ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"CoverPhoto\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      onChange={(event) => {\r\n                        setCoverImg(event.target.files[0]);\r\n                        setValue(\"CoverPhoto\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*------ Store logo Input -------- */}\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"TaxLicense\"\r\n                      label={translate(\"license_img\")}\r\n                      type=\"file\"\r\n                      hidden\r\n                      id=\"TaxLicense\"\r\n                      sx={{\r\n                        ...txtFieldBorderStyle,\r\n                        \"& .MuiOutlinedInput-input\": {\r\n                          color: watchTaxLicense ? \"#535353\" : \"transparent\",\r\n                          fontSize: \"14px\",\r\n                        },\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                            >\r\n                              <label htmlFor=\"TaxLicense\">\r\n                                <img\r\n                                  src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      onChange={(event) => {\r\n                        setTaxLicenseImg(event.target.files[0]);\r\n                        setValue(\"TaxLicense\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  disableRipple\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...loadingButtonStyle }}\r\n                >\r\n                  {translate(\"next\")}\r\n                </LoadingButton>\r\n\r\n                {/*--- Sign in Link --- */}\r\n                <Typography\r\n                  color=\"#535353\"\r\n                  fontWeight={400}\r\n                  fontSize=\"16px\"\r\n                  textAlign=\"center\"\r\n                >\r\n                  {translate(\"you_have_an_account_already\")}\r\n                  <Link\r\n                    to=\"/auth/login\"\r\n                    component={RouterLink}\r\n                    sx={{ ...signupLinkStyle }}\r\n                  >\r\n                    {translate(\"sign_in\")}\r\n                  </Link>\r\n                </Typography>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ************* image Section ***************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={1000} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\AddWorkingDaysPage.js",["2970","2971","2972","2973","2974","2975"],[],"import React, { useEffect, useState } from \"react\";\r\n// Helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Locale\r\nimport { useLocales } from \"../../../locales\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  Switch,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// components\r\nimport { RHFTextField } from \"../../../components/hook-form\";\r\nimport FormProvider from \"../../../components/hook-form/FormProvider\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport Spinner from \"../../../components/spinner/Spinner\";\r\n//Services\r\nimport {\r\n  setResturantWorkTimes,\r\n  getWorkingDays,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMarketWorkTimes } from \"../../../redux/services/markets_service\";\r\n// -------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"193px\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    width: \"193px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst holderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  p: { xs: \"25px\", sm: \"40px\" },\r\n  mx: { xs: \"0px\", lg: \"70px\" },\r\n};\r\n\r\nconst dayHolderSx = {\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst dayInfoHolderSx = {\r\n  \"> label\": {\r\n    mr: \"0px\",\r\n    ml: \"0px\",\r\n  },\r\n  flexDirection: { xs: \"row-reverse\", sm: \"row\" },\r\n  width: { xs: \"100%\", sm: \"auto\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst disabledTextSx = {\r\n  ...subTitleSx,\r\n  opacity: \".5\",\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst activeSwitchSx = {\r\n  // '& .MuiSwitch-root': {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  p: \"9px -1px 9px 0px\",\r\n  // },\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-5px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(28px)\",\r\n    \"& .MuiSwitch-thumb\": {\r\n      background: \"#ffcc63\",\r\n    },\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#fff\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\n\r\nconst disabledLinkSx = {\r\n  fontWeight: 400,\r\n  fontSize: \"12px\",\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst activeLinkSx = {\r\n  fontWeight: \"700 !important\",\r\n  fontSize: \"12px !important\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst dividerSx = {\r\n  display: { xs: \"block\", md: \"none\" },\r\n  height: \"1px\",\r\n  my: \"16px\",\r\n  background: \"#bcbcbc\",\r\n};\r\n\r\n// array of working day\r\nconst workingDays = [\r\n  {\r\n    dayName: \"saturday\",\r\n    controlName: \"saturdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"sunday\",\r\n    controlName: \"sundayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"monday\",\r\n    controlName: \"mondayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"tuesday\",\r\n    controlName: \"thusdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"wednesday\",\r\n    controlName: \"wendnesdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"thursday\",\r\n    controlName: \"thursdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"friday\",\r\n    controlName: \"firdayIsOpen\",\r\n    isOpened: false,\r\n  },\r\n];\r\n\r\nexport default function AddWorkingDaysPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, days } = useSelector((state) => state.branches);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const facilityType = localStorage.getItem(\"facilityType\");\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const initialState = {\r\n    SaturdayIsOpen: false,\r\n    SundayIsOpen: false,\r\n    MondayIsOpen: false,\r\n    TuesdayIsOpen: false,\r\n    WednesdayIsOpen: false,\r\n    ThursdayIsOpen: false,\r\n    FridayIsOpen: false,\r\n  };\r\n\r\n  const [dayIsOpen, setDayIsOpen] = useState(initialState);\r\n\r\n  const TimeRangRegEx =\r\n    /^((?:[01]\\d:[0-5][0-9]|2[0-3]:[0-5][0-9])(?:\\s?)-(?:\\s?)(?:[01]\\d:[0-5][0-9]|2[0-3]:[0-5][0-9])(?:\\s?,\\s?)?)+$/g;\r\n\r\n  const WorkingDaysSchema = Yup.object().shape({\r\n    Saturday: dayIsOpen[\"SaturdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Sunday: dayIsOpen[\"SundayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Monday: dayIsOpen[\"MondayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Tuesday: dayIsOpen[\"TuesdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Wednesday: dayIsOpen[\"WednesdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Thursday: dayIsOpen[\"ThursdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Friday: dayIsOpen[\"FridayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n  });\r\n\r\n  const defaultValues = {\r\n    Saturday: \"\",\r\n    Sunday: \"\",\r\n    Monday: \"\",\r\n    Tuesday: \"\",\r\n    Wednesday: \"\",\r\n    Thursday: \"\",\r\n    Friday: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(WorkingDaysSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const getOpenHour = (str) => (str ? +str.split(\"-\")[0].split(\":\")[0] : 0);\r\n\r\n  const getOpenMinte = (str) => (str ? +str?.split(\"-\")[0].split(\":\")[1] : 0);\r\n\r\n  const getCloseHour = (str) => (str ? +str?.split(\"-\")[1].split(\":\")[0] : 0);\r\n\r\n  const getCloseMinte = (str) => (str ? +str?.split(\"-\")[1].split(\":\")[1] : 0);\r\n\r\n  // to convertDate after validation to array of objects then send to database\r\n  const convertToSend = (obj, days) => {\r\n    let result = [];\r\n    let daysName = days.map((day) => day.enName);\r\n    for (let i = 0; i < daysName.length; i++) {\r\n      if (obj.hasOwnProperty(daysName[i])) {\r\n        result.push({\r\n          dayId: days.find((e) => e.enName === `${daysName[i]}`)?.id,\r\n          openTime: {\r\n            hour: getOpenHour(obj[`${daysName[i]}`]),\r\n            minute: getOpenMinte(obj[`${daysName[i]}`]),\r\n          },\r\n          closeTime: {\r\n            hour: getCloseHour(obj[`${daysName[i]}`]),\r\n            minute: getCloseMinte(obj[`${daysName[i]}`]),\r\n          },\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const onSubmit = async (data, event) => {\r\n    const workingDays = convertToSend(data, days);\r\n    try {\r\n      if (facilityType === \"0\") {\r\n        dispatch(setResturantWorkTimes(workingDays)).then(() => {\r\n          navigate(\"/dashboard/branches\");\r\n        });\r\n      }\r\n      if (facilityType === \"1\") {\r\n        dispatch(setMarketWorkTimes(workingDays));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{ ...disabledLinkSx }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/branches\"\r\n    >\r\n      {translate(`branches`)}\r\n    </Link>,\r\n\r\n    <Link\r\n      sx={{ ...disabledLinkSx }}\r\n      underline=\"hover\"\r\n      key=\"2\"\r\n      component={RouterLink}\r\n      to={\"/dashboard/branches/add-branch\"}\r\n    >\r\n      {translate(`add_new_branch`)}\r\n    </Link>,\r\n\r\n    <Typography sx={{ ...activeLinkSx }} key=\"2\">\r\n      {translate(`add_working_days`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkingDays());\r\n  }, [dispatch]);\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add Working Days</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/* ******************* Start BreadCrambs  ******************* */}\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {isLoading && <Spinner />}\r\n\r\n        {!isLoading && (\r\n          <Box sx={{ ...holderSx }}>\r\n            <Typography mb=\"24px\" variant=\"h5\" color=\"#535353\">\r\n              {translate(`add_working_days`)}\r\n            </Typography>\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid container columnSpacing=\"72px\">\r\n                {/* ------- day Holder -----*/}\r\n                {days?.map((day, index) => (\r\n                  <Grid item xs={12} sm={12} md={6} key={index}>\r\n                    <Stack sx={{ ...dayHolderSx }} mb=\"16px\">\r\n                      <Stack sx={{ ...dayInfoHolderSx }}>\r\n                        {/*--- Day Status --- */}\r\n\r\n                        <Switch\r\n                          sx={{ ...activeSwitchSx }}\r\n                          onChange={(e) => {\r\n                            setDayIsOpen((prev) => ({\r\n                              ...prev,\r\n                              [`${day.enName}IsOpen`]: e.target.checked,\r\n                            }));\r\n                          }}\r\n                        />\r\n\r\n                        {/*--- Day Name --- */}\r\n                        <Typography\r\n                          ml=\"20px\"\r\n                          sx={\r\n                            dayIsOpen[`${day.enName}IsOpen`]\r\n                              ? { ...subTitleSx }\r\n                              : { ...disabledTextSx }\r\n                          }\r\n                        >\r\n                          {translate(`${day.enName}`)}\r\n                        </Typography>\r\n                      </Stack>\r\n\r\n                      <RHFTextField\r\n                        name={`${day.enName}`}\r\n                        label={\"from(08:00) - to(22:00)\"}\r\n                        disabled={!dayIsOpen[`${day.enName}IsOpen`]}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"branchLogo\">\r\n                                  <img\r\n                                    src=\"/assets/icons/dashboard/ic_grayTimer.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                    {index < workingDays.length - 1 && (\r\n                      <Box sx={{ ...dividerSx }} />\r\n                    )}\r\n                  </Grid>\r\n                ))}\r\n\r\n                <Grid item xs={12} sm={6} />\r\n                <Grid item xs={12} sm={6} />\r\n\r\n                {/* ==============@@ Actions Button Button  @@=============*/}\r\n                <Grid item xs={12} sm={12} md={6}>\r\n                  <Stack direction=\"row\" mt=\"24px\">\r\n                    <Button\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                      onClick={() => {\r\n                        navigate(-1);\r\n                      }}\r\n                    >\r\n                      {translate(\"back\")}\r\n                    </Button>\r\n                    <LoadingButton\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                    >\r\n                      {translate(\"confirm\")}\r\n                    </LoadingButton>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </FormProvider>\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\performance\\HighestIcomeBranchesPage.js",["2976","2977","2978","2979","2980","2981","2982","2983","2984","2985","2986","2987","2988","2989","2990"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n// @ Mui\r\nimport {\r\n  Box,\r\n  Container,\r\n  Pagination,\r\n  PaginationItem,\r\n  Stack,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Link from \"@mui/material/Link\";\r\n// Components\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n// Section Components\r\nimport HighestIcomeChart from \"../../../section/@dashboard/performance/HighestIcomeChart\";\r\nimport BranchIncomingCard2 from \"../../../section/@dashboard/performance/details/BranchIcomIngCard2\";\r\n// Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// Services\r\nimport {\r\n  getHighestRestaurentsBranchesSales,\r\n  getHighestBranchesSales,\r\n  getRestaurantAnnualEarningsAnalysis,\r\n  getMarketAnnualEarningsAnalysis,\r\n  getMarketHighestBranchesSales,\r\n} from \"../../../redux/services/performance_service\";\r\nimport HighestIncomBranch from \"../../../components/pagination/HighestIncomBranch\";\r\nimport Spinner from \"../../../components/spinner/Spinner\";\r\nimport { getAnnualEarningsAnalysis } from \"../../../redux/services/restaurant_service\";\r\n\r\n// ------------------------------------------------------------------------------------------\r\n\r\n// ---------- Styles -------------\r\nconst mainHolderSx = {\r\n  p: \"40px 24px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n  justifyContent: \"space-between\",\r\n  // minHeight: \"450px\",\r\n};\r\n\r\nconst titleHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"18px\",\r\n};\r\n\r\nconst mainTitleSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function HighestIcomeBranchesPage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    highestIncomeBranchesSales,\r\n    isLoadingHighestIncomeBranchesSales,\r\n    isLoadingRestaurentsHighestIncome,\r\n    restaurantBranchesIncome,\r\n    highestRestaurentsBranchesSales,\r\n    isLoadingHighestRestaurentsBranchesSales,\r\n    HighestBranchesSales,\r\n    isLoading,\r\n  } = useSelector((state) => state.performance);\r\n\r\n  const initialBranch = JSON.parse(localStorage.getItem(\"initialBranch\"));\r\n  const [selectedBranch, setSelectedBranch] = useState(initialBranch);\r\n\r\n  const currentYear = new Date().getFullYear();\r\n  const currentMonth = new Date().getMonth() + 1; //   5 may\r\n  const previousMonth = new Date().getMonth(); //   4 april\r\n\r\n  const currentYearDate = `${currentYear}-${currentMonth}-1`;\r\n  const previousYearDate = `${currentYear - 1}-${previousMonth}-1`;\r\n\r\n  // console.log(currentYearDate, previousYearDate)\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const classes = useStyles();\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/performance\"\r\n    >\r\n      {translate(`performance`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`most_selling_income`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getHighestRestaurentsBranchesSales({ pageNumber: 1 }));\r\n      dispatch(\r\n        getRestaurantAnnualEarningsAnalysis({\r\n          branchId: initialBranch?.id,\r\n          date: currentYearDate,\r\n          date2: previousYearDate,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getHighestBranchesSales(1));\r\n      dispatch(\r\n        getMarketAnnualEarningsAnalysis({\r\n          branchId: initialBranch?.id,\r\n          date: currentYearDate,\r\n          date2: previousYearDate,\r\n        })\r\n      );\r\n    }\r\n  }, [dispatch, currentYearDate, previousYearDate]);\r\n\r\n  // --------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Most Selling Icome Branches </title>\r\n      </Helmet>\r\n\r\n      <Container\r\n        /* sx={{\r\n          px: { xs: \"15px\", lg: \"0px!important\" },\r\n        }}*/\r\n        maxWidth={themeStretch ? false : \"xl\"}\r\n      >\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {/* ---------- Start Bar  Chart ----------- */}\r\n        <Box>\r\n          <HighestIcomeChart selectedBranch={selectedBranch} />\r\n        </Box>\r\n\r\n        <Box sx={{ position: \"relative\", minHeight: \"200px\" }}>\r\n          <Box sx={{ ...mainHolderSx, mt: \"48px\" }}>\r\n            {/* --- main Tilte of Highest incoming of branches --- */}\r\n            <Stack sx={{ ...titleHolderSx }}>\r\n              <Typography sx={{ ...mainTitleSx }}>\r\n                {translate(\"the_highest_income_branches\")}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/* -----  Highest Incoming Card of Branches --- */}\r\n            {Array.isArray(highestIncomeBranchesSales) &&\r\n              highestIncomeBranchesSales.map((row, index) => (\r\n                <Box\r\n                  mb=\"16px\"\r\n                  key={index}\r\n                  onClick={() => {\r\n                    setSelectedBranch(highestIncomeBranchesSales[index]);\r\n                    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n                      localStorage.setItem(\r\n                        \"initialBranch\",\r\n                        JSON.stringify(highestIncomeBranchesSales[index])\r\n                      );\r\n                      dispatch(\r\n                        getRestaurantAnnualEarningsAnalysis({\r\n                          branchId: highestIncomeBranchesSales[index]?.id,\r\n                          date: currentYearDate,\r\n                          date2: previousYearDate,\r\n                        })\r\n                      );\r\n                    }\r\n                    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n                      localStorage.setItem(\r\n                        \"initialBranch\",\r\n                        JSON.stringify(highestIncomeBranchesSales[index])\r\n                      );\r\n                      dispatch(\r\n                        getMarketAnnualEarningsAnalysis({\r\n                          branchId: highestIncomeBranchesSales[index]?.id,\r\n                          date: currentYearDate,\r\n                          date2: previousYearDate,\r\n                        })\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  <BranchIncomingCard2 row={row} />\r\n                </Box>\r\n              ))}\r\n            <HighestIncomBranch />\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\performance\\PerformancePage.js",["2991","2992","2993","2994","2995","2996","2997","2998","2999","3000","3001","3002","3003"],[],"import React, { useEffect } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Container, Box, CircularProgress, Typography } from \"@mui/material\";\r\n// component\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport PerformanceChartsSection from \"../../../section/@dashboard/performance/PerformanceChartsSection\";\r\nimport BestSellingBranchesSection from \"../../../section/@dashboard/performance/BestSellingBranchesSection\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// services\r\nimport {\r\n  getRestaurantBranchesIncome,\r\n  getResturantChainSales,\r\n  getMarketMostSales,\r\n  getHighestBranchesSales,\r\n  getMarketHighestIncome,\r\n  getHighestRestaurentsBranchesSales,\r\n  getAllRestaurantOrdersNumber,\r\n  getAllMarketsOrdersNumber,\r\n  getAllResturantsReviewsNumber,\r\n  getAllMarketsReviewsNumber,\r\n} from \"../../../redux/services/performance_service\";\r\nimport {\r\n  getRestaurantCustomerNumber,\r\n  getRestaurantMostSellingCities,\r\n  getRestaurantReviewNumber,\r\n} from \"../../../redux/services/restaurant_service\";\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n\r\n//  ------------- Style -----------\r\n\r\nconst titleStyle = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  paddingBottom: \"24px\",\r\n};\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\n// const LineChartData = [\r\n//   {\r\n//     name: months[new Date().getMonth()],\r\n//     data: [234, 45, 67, 987, 345, 456, 87, 321, 45, 30, 569, 76, 890, 234, 45],\r\n//   },\r\n//   {\r\n//     name: months[new Date().getMonth() - 1],\r\n//     data: [562, 145, 267, 97, 45, 156, 87, 321, 30, 10, 845, 969, 706, 20, 562],\r\n//   },\r\n// ];\r\n\r\nexport default function PerformancePage() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, error, orderNumbers, reviewNumbers } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllRestaurantOrdersNumber());\r\n      dispatch(getAllResturantsReviewsNumber());\r\n      dispatch(getHighestRestaurentsBranchesSales({ pageNumber: 1 }));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllMarketsOrdersNumber());\r\n      dispatch(getAllMarketsReviewsNumber());\r\n      dispatch(getHighestBranchesSales({ pageNumber: 1 }));\r\n      dispatch(getMarketMostSales());\r\n    }\r\n\r\n    //dispatch(getRestaurantCustomerNumber(URLS.restaurantId));\r\n    //dispatch(getRestaurantBranchesIncome(URLS.restaurantId));\r\n    // dispatch(getResturantChainSales(URLS.restaurantId));\r\n    // dispatch(getMarketMostSales());\r\n    // dispatch(getMarketBranchesIncome(URLS.marketId));\r\n\r\n    // dispatch(getMarketHighestIncome(URLS.marketId));\r\n\r\n    // dispatch(getHighestRestaurentsBranchesSales(1));\r\n  }, [dispatch]);\r\n  // ---------- JSX Code ----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Performance Page </title>\r\n      </Helmet>\r\n\r\n      <Container\r\n        /*  sx={{\r\n          px: { xs: \"15px\", lg: \"0px!important\" },\r\n        }}*/\r\n        maxWidth={themeStretch ? false : \"xl\"}\r\n      >\r\n        <Typography sx={{ ...titleStyle }} variant=\"h5\">\r\n          {translate(\"performance\")}\r\n        </Typography>\r\n\r\n        {/* ******* Start  Performance Charts Section ******** */}\r\n        <Box mb=\"44px\">\r\n          <PerformanceChartsSection />\r\n        </Box>\r\n\r\n        {/* ******* Start  Highest Incoming Branch and Most Selling ******** */}\r\n        <BestSellingBranchesSection />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\BranchInformationForAdminPage.js",["3004","3005"],[],"import React, { useEffect, useState } from \"react\";\r\n// react-router-dom\r\nimport { useLocation } from \"react-router-dom\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Box, Container } from \"@mui/material\";\r\n// Components\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n// section components\r\nimport BranchInfoSection from \"../../../section/@employee/branch-info/BranchInfoSection\";\r\nimport BranchReviewsSection from \"../../../section/@employee/branch-info/BranchReviewsSection\";\r\nimport BranchInfoHeader from \"../../../section/@employee/branch-info/details/BranchInfoHeader\";\r\nimport BranchAnalysisSection from \"../../../section/@employee/branch-info/BranchAnalysisSection\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  getRestaurantDetailsById,\r\n  getRestaurantHighestRatedMeal,\r\n  getRestaurantOrderNumber,\r\n  getRestaurantReview,\r\n  getRestaurantReviewNumber,\r\n  getResturantInfo,\r\n  getResturantWorkTimes,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport {\r\n  getMarketBasicInfo,\r\n  getMarketDetailsById,\r\n  getMarketOrdersNumber,\r\n  getMarketReview,\r\n  getMarketReviewNumber,\r\n  getMarketWorkTimes,\r\n} from \"../../../redux/services/markets_service\";\r\n\r\n//-----------------------------------------------------------------------------------------------------\r\n\r\nexport default function BranchInformationPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurantOrderNumber(branchId));\r\n      dispatch(getRestaurantReviewNumber(branchId));\r\n      dispatch(getRestaurantHighestRatedMeal(branchId));\r\n      dispatch(getResturantInfo(branchId));\r\n      dispatch(getResturantWorkTimes(branchId));\r\n      dispatch(getRestaurantDetailsById(branchId));\r\n      dispatch(\r\n        getRestaurantReview({\r\n          resturantId: branchId,\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketOrdersNumber(branchId));\r\n      dispatch(getMarketReviewNumber(branchId));\r\n      dispatch(getMarketBasicInfo(branchId));\r\n      dispatch(getMarketWorkTimes(branchId));\r\n      dispatch(getMarketDetailsById(branchId));\r\n      dispatch(getMarketReview({ MarketId: branchId, pageNumber: 1 }));\r\n    }\r\n  }, []);\r\n\r\n  const [currentTab, setCurrentTab] = useState(\"info\");\r\n\r\n  const TABS = [\r\n    {\r\n      value: \"analysis\",\r\n      component: <BranchAnalysisSection />,\r\n    },\r\n    {\r\n      value: \"info\",\r\n      component: <BranchInfoSection />,\r\n    },\r\n    {\r\n      value: \"reviews\",\r\n      component: <BranchReviewsSection />,\r\n    },\r\n  ];\r\n\r\n  const changeTabHandler = (newTab) => {\r\n    setCurrentTab(newTab);\r\n  };\r\n\r\n  // ----------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Branch-info </title>\r\n      </Helmet>\r\n\r\n      {/* *********** Start Header  *************** */}\r\n      <BranchInfoHeader\r\n        selectedTab={currentTab}\r\n        onChangeTab={changeTabHandler}\r\n      />\r\n\r\n      {/* *********** Start OutLet  *************** */}\r\n      {/* <Main sx={{ width: '100%', pt: '44px' }}> */}\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        {/*----------- Outlet Of Tabs --------*/}\r\n        {TABS.map(\r\n          (tab) =>\r\n            tab.value === currentTab && (\r\n              <Box key={tab.value}> {tab.component} </Box>\r\n            )\r\n        )}\r\n      </Container>\r\n      {/* </Main> */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\overview\\OverViewPageTwo.js",["3006","3007","3008","3009","3010","3011","3012","3013","3014"],[],"import { Helmet } from \"react-helmet-async\";\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Box,\r\n  Divider,\r\n  Button,\r\n  Container,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport ChartsRow from \"../../../section/@dashboard/overview/detailes/ChartsRow\";\r\nimport PendingBranchesList from \"../../../section/@dashboard/overview/list/pending/AllBranchesSection\";\r\nimport PendingBranchesList2 from \"../../../section/@dashboard/overview/list/pending/NewBranchwsSection\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport LinearProgress, {\r\n  linearProgressClasses,\r\n} from \"@mui/material/LinearProgress\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport AllBranchesSection from \"../../../section/@dashboard/overview/list/pending/AllBranchesSection\";\r\nimport NewBranchesSection from \"../../../section/@dashboard/branches/NewBranchesSection\";\r\nimport BestSellingBranchesSection from \"../../../section/@dashboard/performance/BestSellingBranchesSection\";\r\nimport { useEffect } from \"react\";\r\nimport { dispatch } from \"../../../redux/store\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\nimport { getAllBranches, getMarketMostSellingCities, getRestaurantMostSellingCities } from \"../../../redux/services/restaurant_service\";\r\nimport { getAllBranchesMarket } from \"../../../redux/services/markets_service\";\r\n// Services\r\nimport {\r\n  getHighestRestaurentsBranchesSales,\r\n  getHighestBranchesSales,\r\n} from \"../../../redux/services/performance_service\";\r\nimport BranchesSection from \"../../../section/@dashboard/branches/BranchesSection\";\r\n//url\r\n//__________________________________________________________________________\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n  height: 11,\r\n  borderRadius: 8,\r\n  width: \"167px\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n        theme.palette.mode === \"light\"\r\n          ? \"rgba(255, 204, 99, 0.3)\"\r\n          : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#FFCC63\" : \"#FFCC63\",\r\n  },\r\n}));\r\n\r\nconst titleStyle = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  paddingBottom: \"24px\",\r\n};\r\n\r\nexport default function OverViewPageTwo() {\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllBranches({ pageNumber: 1 }));\r\n      dispatch(getHighestRestaurentsBranchesSales({ pageNumber: 1 }));\r\n      dispatch(getRestaurantMostSellingCities({ pageNumber: 1, pageSize :3}));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket(1));\r\n      dispatch(getHighestBranchesSales(1));\r\n      dispatch(getMarketMostSellingCities({ pageNumber: 1, pageSize: 3 }));\r\n\r\n    }\r\n  }, [dispatch]);\r\n  //_____________________________________________________________________\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Overview </title>\r\n      </Helmet>\r\n\r\n      <Container\r\n        /* sx={{\r\n          px: { xs: \"15px\", lg: \"0px !important\" },\r\n        }}*/\r\n        maxWidth={themeStretch ? false : \"xl\"}\r\n      >\r\n        <Typography sx={titleStyle} variant=\"h5\">\r\n          {translate(\"over_view\")}\r\n        </Typography>\r\n\r\n        <ChartsRow />\r\n        \r\n        <Stack height=\"69px\" />\r\n        <Box>\r\n          <BranchesSection />\r\n        </Box>\r\n\r\n        <Box mt=\"53px\">\r\n          <NewBranchesSection />\r\n        </Box>\r\n\r\n        {/* ******* Start  Highest Incoming Branch and Most Selling ******** */}\r\n        <Box mt=\"48px\">\r\n          <BestSellingBranchesSection />\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\AddNewBranchPage.js",["3015","3016","3017","3018","3019"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport Iconify from \"../../../components/iconify/Iconify\";\r\nimport { addNewRestaurantBranch } from \"../../../redux/services/restaurant_service\";\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport { addNewMarketBranch } from \"../../../redux/services/markets_service\";\r\n\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"0px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function AddNewBranchPage() {\r\n  const { newRestaurantId, isLoadingAddNewBranch } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n  const { newMarketId, isLoadingAddMarket } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const facilityType = localStorage.getItem(\"facilityType\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [ImageUrl, setImageUrl] = useState(null);\r\n\r\n  const [License, setLicense] = useState(null);\r\n\r\n  const [TaxCard, setTaxCard] = useState(null);\r\n\r\n  const [CoverImageUrl, setCoverImageUrl] = useState(null);\r\n\r\n  const [CommercialRegister, setCommercialRegister] = useState(null);\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n  const theme = useTheme();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const AddNewBranchSchema = Yup.object().shape({\r\n    License:\r\n      facilityType === \"0\"\r\n        ? Yup.string().required(translate(\"branch_license_is_required\"))\r\n        : Yup.string(),\r\n\r\n    CommercialRegister:\r\n      facilityType === \"1\"\r\n        ? Yup.string().required(translate(\"commercial_register_is_required\"))\r\n        : Yup.string(),\r\n\r\n    Type:\r\n      facilityType === \"1\"\r\n        ? Yup.string().required(translate(\"type_is_required\"))\r\n        : Yup.string(),\r\n\r\n    TaxCard: Yup.string().required(translate(\"branch_tax_card_is_required\")),\r\n\r\n    ServiceDesc:\r\n      facilityType === \"0\"\r\n        ? Yup.string().required(translate(\"branch_description_en_is_required\"))\r\n        : Yup.string(),\r\n\r\n    SecondServiceDesc:\r\n      facilityType === \"0\"\r\n        ? Yup.string()\r\n            .required(translate(\"branch_description_ar_is_required\"))\r\n            .matches(arabicRGX, translate(\"only_arbic_letters\"))\r\n        : Yup.string(),\r\n\r\n    Name: Yup.string().required(translate(\"branch_name_is_required\")),\r\n    SecondName: Yup.string()\r\n      .required(translate(\"arabic_branch_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n    ImageUrl: Yup.string().required(translate(\"branch_logo_is_required\")),\r\n    CoverImageUrl: Yup.string().required(translate(\"branch_cover_is_required\")),\r\n    PhoneNo1: Yup.string().required(translate(\"phone_number1_is_required\")),\r\n    PhoneNo2: Yup.string().required(translate(\"phone_number2_is_required\")),\r\n    MinimumOrderPrice: Yup.string().required(\r\n      translate(\"minimum_order_price_is_required\")\r\n    ),\r\n    Location: Yup.string(),\r\n    Currency: Yup.string(),\r\n    // Lat: Yup.string().required(translate(\"branch_location_is_required\")),\r\n    // Lon: Yup.string().required(translate(\"branch_location_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    License: \"\",\r\n    TaxCard: \"\",\r\n    ServiceDesc: \"\",\r\n    SecondServiceDesc: \"\",\r\n    Type: \"\",\r\n    CommercialRegister: \"\",\r\n    Name: \"\",\r\n    SecondName: \"\",\r\n    ImageUrl: \"\",\r\n    CoverImageUrl: \"\",\r\n    PhoneNo1: \"\",\r\n    PhoneNo2: \"\",\r\n    MinimumOrderPrice: \"\",\r\n    Currency: \"AED\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(AddNewBranchSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    const formData = new FormData();\r\n    if (facilityType === \"0\") {\r\n      formData.append(\"License\", License);\r\n      formData.append(\"TaxCard\", TaxCard);\r\n      formData.append(\"ServiceDesc\", data.ServiceDesc);\r\n      formData.append(\"SecondServiceDesc\", data.SecondServiceDesc);\r\n      formData.append(\"Name\", data.Name);\r\n      formData.append(\"SecondName\", data.SecondName);\r\n      formData.append(\"ImageUrl\", ImageUrl);\r\n      formData.append(\"CoverImageUrl\", CoverImageUrl);\r\n      formData.append(\"PhoneNo1\", data.PhoneNo1);\r\n      formData.append(\"PhoneNo2\", data.PhoneNo2);\r\n      formData.append(\"MinimumOrderPrice\", data.MinimumOrderPrice);\r\n      formData.append(\"Lat\", 30.03456);\r\n      formData.append(\"Lon\", 31.23629);\r\n    } else {\r\n      formData.append(\"TaxCard\", TaxCard);\r\n      formData.append(\"CommercialRegister\", CommercialRegister);\r\n      formData.append(\"Type\", data.Type);\r\n      formData.append(\"Name\", data.Name);\r\n      formData.append(\"SecondName\", data.SecondName);\r\n      formData.append(\"ImageUrl\", ImageUrl);\r\n      formData.append(\"CoverImageUrl\", CoverImageUrl);\r\n      formData.append(\"PhoneNo1\", data.PhoneNo1);\r\n      formData.append(\"PhoneNo2\", data.PhoneNo2);\r\n      formData.append(\"MinimumOrderPrice\", data.MinimumOrderPrice);\r\n      formData.append(\"Lat\", 30.03456);\r\n      formData.append(\"Lon\", 31.23629);\r\n    }\r\n\r\n    try {\r\n      if (facilityType === \"0\") {\r\n        dispatch(addNewRestaurantBranch(formData));\r\n      }\r\n      if (facilityType === \"1\") {\r\n        dispatch(addNewMarketBranch(formData));\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (newRestaurantId || newMarketId) {\r\n      navigate(\"add-working-days\");\r\n    }\r\n  }, [navigate, newRestaurantId, newMarketId]);\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/branches\"\r\n    >\r\n      {translate(`branches`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`add_new_branch`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Add New Branch</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* ******* Title ******** */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <IconButton\r\n              disableRipple\r\n              onClick={() => {\r\n                navigate(\"/dashboard/branches\");\r\n              }}\r\n              sx={{\r\n                transform: theme.direction === \"rtl\" ? \"rotate(180deg)\" : \"\",\r\n              }}\r\n            >\r\n              <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography variant=\"h5\" sx={{ ...titleSx, ml: \"17px\" }}>\r\n              {translate(`add_new_branch`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid\r\n              container\r\n              columnSpacing={{ xs: \"25px\", sm: \"40px\", lg: \"90px\" }}\r\n            >\r\n              {/* ************* Left Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== Branch name  ar and en ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- branch name (en) --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"Name\"\r\n                        label={translate(\"branch_name_en\")}\r\n                        // placeholder={\"KFC - branch1\"}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- branch name (ar) --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"SecondName\"\r\n                        // placeholder={\"كنتاكي\"}\r\n                        label={translate(\"branch_name_ar\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== Branch Type Input ====== */}\r\n                {facilityType === \"1\" && (\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <RHFSelect\r\n                      name=\"Type\"\r\n                      type=\"text\"\r\n                      label={translate(\"branch_type\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      onChange={(e) => {\r\n                        setValue(\"Type\", e.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }}\r\n                      SelectProps={{\r\n                        native: false,\r\n                        IconComponent: () => (\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        ),\r\n                      }}\r\n                    >\r\n                      <MenuItem value={0}>{translate(`market`)}</MenuItem>\r\n                      <MenuItem value={1}>{translate(`mini_market`)}</MenuItem>\r\n                      <MenuItem value={2}>{translate(`super_market`)}</MenuItem>\r\n                    </RHFSelect>\r\n                  </Grid>\r\n                )}\r\n                {/*====== Branch Description  ar and en ====== */}\r\n                {facilityType === \"0\" && (\r\n                  <Grid item xs={12}>\r\n                    <Grid container columnSpacing={2}>\r\n                      <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                        <RHFTextField\r\n                          name=\"ServiceDesc\"\r\n                          label={translate(\"description_en\")}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                        <RHFTextField\r\n                          name=\"SecondServiceDesc\"\r\n                          label={translate(\"description_ar\")}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                )}\r\n\r\n                {/*====== branch logo and cover ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Grid container spacing={2}>\r\n                    {/*=======branch logo Input  ======= */}\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                      <RHFTextField\r\n                        name=\"ImageUrl\"\r\n                        label={translate(\"branch_logo\")}\r\n                        type=\"file\"\r\n                        onChange={(event) => {\r\n                          setImageUrl(event.target.files[0]);\r\n                          setValue(\"ImageUrl\", event.target.value, {\r\n                            shouldValidate: true,\r\n                          });\r\n                        }}\r\n                        id=\"branchLogo\"\r\n                        sx={{\r\n                          ...txtFieldBorderStyle,\r\n                          \"& .MuiOutlinedInput-input\": {\r\n                            color: ImageUrl ? \"#535353\" : \"transparent\",\r\n                            fontSize: \"14px\",\r\n                          },\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"branchLogo\">\r\n                                  <img\r\n                                    src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*=======branch cover Input  ======= */}\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                      <RHFTextField\r\n                        name=\"CoverImageUrl\"\r\n                        label={translate(\"branch_cover\")}\r\n                        type=\"file\"\r\n                        onChange={(event) => {\r\n                          setCoverImageUrl(event.target.files[0]);\r\n                          setValue(\"CoverImageUrl\", event.target.value, {\r\n                            shouldValidate: true,\r\n                          });\r\n                        }}\r\n                        id=\"branchLogo\"\r\n                        sx={{\r\n                          ...txtFieldBorderStyle,\r\n                          \"& .MuiOutlinedInput-input\": {\r\n                            color: CoverImageUrl ? \"#535353\" : \"transparent\",\r\n                            fontSize: \"14px\",\r\n                          },\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"branchLogo\">\r\n                                  <img\r\n                                    src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*======= branch License Or CommercialRegister Input  ======= */}\r\n                <Grid item xs={12} sm={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    // name=\"License\"\r\n                    name={\r\n                      facilityType === \"0\" ? \"License\" : \"CommercialRegister\"\r\n                    }\r\n                    label={\r\n                      facilityType === \"0\"\r\n                        ? translate(\"branch_license\")\r\n                        : translate(\"branch_commercial_register\")\r\n                    }\r\n                    type=\"file\"\r\n                    onChange={(event) => {\r\n                      if (facilityType === \"0\") {\r\n                        setLicense(event.target.files[0]);\r\n                        setValue(\"License\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      } else {\r\n                        setCommercialRegister(event.target.files[0]);\r\n                        setValue(\"CommercialRegister\", event.target.value, {\r\n                          shouldValidate: true,\r\n                        });\r\n                      }\r\n                    }}\r\n                    hidden\r\n                    id=\"branchCover\"\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color:\r\n                          License || CommercialRegister\r\n                            ? \"#535353\"\r\n                            : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                            sx={{ p: \"0px\" }}\r\n                          >\r\n                            <label htmlFor=\"branchCover\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch TaxCard Input  ======= */}\r\n                <Grid item xs={12} sm={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"TaxCard\"\r\n                    label={translate(\"branch_tax_card\")}\r\n                    type=\"file\"\r\n                    onChange={(event) => {\r\n                      setTaxCard(event.target.files[0]);\r\n                      setValue(\"TaxCard\", event.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    hidden\r\n                    id=\"branchCover\"\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color: TaxCard ? \"#535353\" : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                            sx={{ p: \"0px\" }}\r\n                          >\r\n                            <label htmlFor=\"branchCover\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ************* Right Side Inputs *********** */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== Minimum Order Amount Input ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"MinimumOrderPrice\"\r\n                    type=\"number\"\r\n                    label={translate(\"minimum_order\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        fontSize: \"16px\",\r\n                        fontWeight: 400,\r\n                        lineHeight: \"16px\",\r\n                        color: \"#121212\",\r\n                        pl: \"10px\",\r\n                      },\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        height: \"50px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"Currency\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                                alt=\"\"\r\n                              />\r\n                            ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"Currency\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"AED\">AED</MenuItem>\r\n                          <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== branch Location Input ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"branch_location\"\r\n                    label={translate(\"branch_location\")}\r\n                    // placeholder=\"Dubai\"\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/* ======= branch license Input  =======\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"CityId\"\r\n                    label={translate(\"CityId\")}\r\n                    placeholder={\"KFC - branch1\"}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid> */}\r\n\r\n                {/*======= branch PhoneNo1 Input ======== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNo1\"\r\n                    label={translate(\"phoneNo1\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch PhoneNo2 Input ======== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"PhoneNo2\"\r\n                    label={translate(\"phoneNo2\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      // handleOpenConfirm();\r\n                      navigate(\"/dashboard/branches\");\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    loading={\r\n                      facilityType === \"0\"\r\n                        ? isLoadingAddNewBranch\r\n                        : isLoadingAddMarket\r\n                    }\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"next\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\EditBranchPage.js",["3020","3021","3022","3023","3024"],[],"import React, { useState } from \"react\";\r\n// react-router-dom\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  IconButton,\r\n  InputAdornment,\r\n  useTheme,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../../components/hook-form\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\nimport EditConfirmDialog from \"../../../components/confirm-dialog/EditConfirmDialog\";\r\n\r\n// --------------------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst containerSx = {\r\n  px: {\r\n    xs: \"15px\",\r\n    lg: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst branchFormHolderSx = {\r\n  p: {\r\n    xs: \"33px 20px 33px 20px\",\r\n    sm: \"33px 20px 33px 20px\",\r\n    md: \"49px 40px 33px 40px\",\r\n  },\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\n//\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#535353\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"10px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst continuBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#ffcc63\",\r\n  border: \"0.75px solid #ffcc63\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"600\",\r\n  width: \"100%\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  height: \"33px\",\r\n};\r\n\r\nconst backBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"600\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  width: \"100%\",\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  height: \"33px\",\r\n};\r\n\r\nconst avatarStyle = {\r\n  width: \"32px\",\r\n  height: \"32px\",\r\n  borderRadius: \"50%\",\r\n  filter: \"drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.25))\",\r\n  marginRight: \"16px\",\r\n  marginLeft: \"16px\",\r\n};\r\n\r\nexport default function EditBranchPage() {\r\n  const { themeStretch } = useSettingsContext();\r\n  const theme = useTheme();\r\n  const { state } = useLocation();\r\n\r\n  // console.log(state?.id)\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const arabicRGX = /^[\\u0621-\\u064A]+$/;\r\n\r\n  const EditBranchSchema = Yup.object().shape({\r\n    branchName: Yup.string().required(translate(\"branch_name_is_required\")),\r\n    branchNameAr: Yup.string()\r\n      .required(translate(\"arabic_branch_name_is_required\"))\r\n      .matches(arabicRGX, translate(\"only_arbic_letters\")),\r\n    branchLogo: Yup.string().required(translate(\"branch_logo_is_required\")),\r\n    branchCover: Yup.string().required(translate(\"branch_cover_is_required\")),\r\n    branchCategory: Yup.string().required(\r\n      translate(\"branch_categories_en_is_required\")\r\n    ),\r\n    branchCategoryAr: Yup.string().required(\r\n      translate(\"branch_categories_ar_is_required\")\r\n    ),\r\n    branchManager: Yup.string().required(\r\n      translate(\"branch_manager_ar_is_required\")\r\n    ),\r\n    minimumOrderAmount: Yup.string().required(\r\n      translate(\"minimum_order_is_required\")\r\n    ),\r\n    currency: Yup.string().required(\r\n      translate(\"minimum_order_amount_is_required\")\r\n    ),\r\n    branchLocation: Yup.string().required(\r\n      translate(\"branch_location_is_required\")\r\n    ),\r\n    branchLicense: Yup.string().required(\r\n      translate(\"branch_license_is_required\")\r\n    ),\r\n    branchSocialPage: Yup.string(),\r\n  });\r\n\r\n  const defaultValues = {\r\n    branchName: \"\",\r\n    branchNameAr: \"\",\r\n    branchLogo: \"\",\r\n    branchCover: \"\",\r\n    branchCategory: \"\",\r\n    branchCategoryAr: \"\",\r\n    branchManager: \"mahmoud_sabri\",\r\n    minimumOrderAmount: \"\",\r\n    branchLocation: \"\",\r\n    branchLicense: \"\",\r\n    branchSocialPage: \"\",\r\n    currency: \"AED\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(EditBranchSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    watch,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  // watch branch logo Photo if value changed\r\n  const watchBranchlogo = watch(\"branchLogo\");\r\n  const watchBranchCover = watch(\"branchCover\");\r\n  const watchBranchLicense = watch(\"branchLicense\");\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      // code here\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to=\"/dashboard/branches\"\r\n    >\r\n      {translate(`branches`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_branch_info`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Branch Info</title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        <Box sx={{ ...branchFormHolderSx }}>\r\n          {/* *************** Title ******************* */}\r\n          <Stack direction=\"row\" mb=\"30px\" alignItems=\"center\">\r\n            <IconButton\r\n              disableRipple\r\n              onClick={() => {\r\n                navigate(\"/dashboard/branches\");\r\n              }}\r\n              sx={{\r\n                transform: theme.direction === \"rtl\" ? \"rotate(180deg)\" : \"\",\r\n              }}\r\n            >\r\n              <img src=\"/assets/icons/dashboard/ic_backArrow.svg\" alt=\"\" />\r\n            </IconButton>\r\n\r\n            <Typography variant=\"h5\" sx={{ ...titleSx, ml: \"17px\" }}>\r\n              {translate(`edit_branch_info`)}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ***************** Form **************** */}\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            {!!errors.afterSubmit && (\r\n              <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n            )}\r\n\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              {/* ************* Left Side Inputs ************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== Branch name  ar and en ====== */}\r\n                <Grid item xs={12} mb={{ xs: \"16px\", md: \"0px\" }}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*--- branch name (en) --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"branchName\"\r\n                        label={translate(\"branch_name_en\")}\r\n                        placeholder={\"KFC - branch1\"}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*--- branch name (ar) --- */}\r\n                    <Grid item xs={12} sm={12} md={6}>\r\n                      <RHFTextField\r\n                        name=\"branchNameAr\"\r\n                        placeholder={\"كنتاكي\"}\r\n                        label={translate(\"branch_name_ar\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*====== branch logo and cover ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <Grid container spacing={2}>\r\n                    {/*=======branch logo Input  ======= */}\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                      <RHFTextField\r\n                        name=\"branchLogo\"\r\n                        label={translate(\"branch_logo\")}\r\n                        type=\"file\"\r\n                        hidden\r\n                        id=\"branchLogo\"\r\n                        sx={{\r\n                          ...txtFieldBorderStyle,\r\n                          \"& .MuiOutlinedInput-input\": {\r\n                            color: watchBranchlogo ? \"#535353\" : \"transparent\",\r\n                            fontSize: \"14px\",\r\n                          },\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"branchLogo\">\r\n                                  <img\r\n                                    src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*======= branch cover Input  ======= */}\r\n                    <Grid item xs={12} sm={6} md={6}>\r\n                      <RHFTextField\r\n                        name=\"branchCover\"\r\n                        label={translate(\"branch_cover\")}\r\n                        type=\"file\"\r\n                        hidden\r\n                        id=\"branchCover\"\r\n                        sx={{\r\n                          ...txtFieldBorderStyle,\r\n                          \"& .MuiOutlinedInput-input\": {\r\n                            color: watchBranchCover ? \"#535353\" : \"transparent\",\r\n                            fontSize: \"14px\",\r\n                          },\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"upload picture\"\r\n                                component=\"label\"\r\n                                sx={{ p: \"0px\" }}\r\n                              >\r\n                                <label htmlFor=\"branchCover\">\r\n                                  <img\r\n                                    src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                    alt=\"upload_icon\"\r\n                                  />\r\n                                </label>\r\n                              </IconButton>\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*======= branch categories Input (en)  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"branchCategory\"\r\n                    type=\"text\"\r\n                    label={translate(\"branch_categories_en\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"branchCategory\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    <MenuItem\r\n                      value={\"friedchicken,sandwiches,fastfood\"}\r\n                      selected\r\n                    >\r\n                      {translate(`fried_chicken_sandwiches_fast_food`)}\r\n                    </MenuItem>\r\n                  </RHFSelect>\r\n                </Grid>\r\n\r\n                {/*======= branch categories Input (ar)  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"branchCategoryAr\"\r\n                    type=\"text\"\r\n                    label={translate(\"branch_categories_ar\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    onChange={(e) => {\r\n                      setValue(\"branchCategoryAr\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    <MenuItem value={\"فراخ_بيتزا_مشويات\"} selected>\r\n                      {translate(`فراخ_بيتزا_مشويات`)}\r\n                    </MenuItem>\r\n                  </RHFSelect>\r\n                </Grid>\r\n\r\n                {/*======= Select branch Manager Input ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFSelect\r\n                    name=\"branchManager\"\r\n                    type=\"text\"\r\n                    label={translate(\"branch_manager\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiSelect-select.MuiSelect-outlined\": {\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                      },\r\n                    }}\r\n                    onChange={(e) => {\r\n                      setValue(\"branchManager\", e.target.value, {\r\n                        shouldValidate: true,\r\n                      });\r\n                    }}\r\n                    SelectProps={{\r\n                      native: false,\r\n                      IconComponent: () => (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ),\r\n                    }}\r\n                  >\r\n                    <MenuItem\r\n                      sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                      value=\"mahmoud_sabri\"\r\n                      selected\r\n                    >\r\n                      <img\r\n                        src=\"/assets/images/dashboard/avatar2.png\"\r\n                        alt=\"upload_icon\"\r\n                        style={{ ...avatarStyle }}\r\n                      />\r\n                      Mahmoud Sabri\r\n                    </MenuItem>\r\n                  </RHFSelect>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* **************************** Right Side Inputs ************************ */}\r\n              <Grid item xs={12} sm={6} md={6}>\r\n                {/*====== Minimum Order Amount Input ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"minimumOrderAmount\"\r\n                    type=\"number\"\r\n                    label={translate(\"minimum_order\")}\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-root\": {\r\n                        pr: \"20px\",\r\n                        height: \"50px\",\r\n                        alignItems: \"baseline\",\r\n                        \"& fieldset\": {\r\n                          borderColor: \"#D8D8D8\",\r\n                        },\r\n                        \"&:hover fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                        \"&.Mui-focused fieldset\": {\r\n                          borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                        },\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <RHFSelect\r\n                          name=\"currency\"\r\n                          sx={{\r\n                            ...transparentBorderTxtField,\r\n                            width: \"80px\",\r\n                          }}\r\n                          SelectProps={{\r\n                            native: false,\r\n                            IconComponent: () => (\r\n                              <img\r\n                                src=\"/assets/icons/dashboard/ic_dropdown.svg\"\r\n                                alt=\"\"\r\n                              />\r\n                            ),\r\n                          }}\r\n                          onChange={(e) =>\r\n                            setValue(\"currency\", e.target.value, {\r\n                              shouldValidate: true,\r\n                            })\r\n                          }\r\n                        >\r\n                          <MenuItem value=\"AED\">AED</MenuItem>\r\n                          <MenuItem value=\"EGP\">EGP</MenuItem>\r\n                        </RHFSelect>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*====== branch Location Input ====== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"branchLocation\"\r\n                    label={translate(\"branch_location\")}\r\n                    placeholder=\"Dubai\"\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch license Input  ======= */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"branchLicense\"\r\n                    label={translate(\"branch_License\")}\r\n                    type=\"file\"\r\n                    hidden\r\n                    id=\"branchLicense\"\r\n                    sx={{\r\n                      ...txtFieldBorderStyle,\r\n                      \"& .MuiOutlinedInput-input\": {\r\n                        color: watchBranchLicense ? \"#535353\" : \"transparent\",\r\n                        fontSize: \"14px\",\r\n                      },\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            color=\"primary\"\r\n                            aria-label=\"upload picture\"\r\n                            component=\"label\"\r\n                            sx={{ p: \"0px\" }}\r\n                          >\r\n                            <label htmlFor=\"branchLicense\">\r\n                              <img\r\n                                src=\"/assets/icons/auth/ic_upload.svg\"\r\n                                alt=\"upload_icon\"\r\n                              />\r\n                            </label>\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Grid>\r\n\r\n                {/*======= branch social page Input ======== */}\r\n                <Grid item xs={12} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"branchSocialPage\"\r\n                    label={translate(\"social_media_page_optional\")}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* ==============@@ Actions Button Button  @@=============*/}\r\n            <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n              <Grid item xs={12} md={6}>\r\n                {\"\"}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} md={6} mt=\"34px\">\r\n                <Stack direction=\"row\">\r\n                  <Button\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                    onClick={() => {\r\n                      handleOpenConfirm();\r\n                    }}\r\n                  >\r\n                    {translate(\"back\")}\r\n                  </Button>\r\n                  <LoadingButton\r\n                    color=\"inherit\"\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"Contained\"\r\n                    // loading={isSubmitSuccessful || isSubmitting}\r\n                    sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                  >\r\n                    {translate(\"edit_branch\")}\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n          </FormProvider>\r\n        </Box>\r\n\r\n        {/*======= Dialog ======== */}\r\n        <EditConfirmDialog\r\n          open={openConfirm}\r\n          onClose={handleCloseConfirm}\r\n          title={translate(\"delete_item\")}\r\n          content={\r\n            <>\r\n              <Typography\r\n                fontSize=\"13.5px\"\r\n                lineHeight=\"21px\"\r\n                sx={{\r\n                  overflowWrap: \"break-word\",\r\n                }}\r\n              >\r\n                {translate(\r\n                  \"if_you_press_back_the_changes_you_have_made_will_be\"\r\n                )}\r\n                {translate(\"canceled_are_you_sure\")}\r\n                <Typography\r\n                  fontSize=\"13.5px\"\r\n                  lineHeight=\"21px\"\r\n                  sx={{\r\n                    overflowWrap: \"break-word\",\r\n                  }}\r\n                >\r\n                  {translate(\"about_this_step\")}\r\n                </Typography>\r\n              </Typography>\r\n            </>\r\n          }\r\n          action={\r\n            <Stack direction=\"row\" spacing=\"9px\" width=\"100%\">\r\n              <Button\r\n                sx={continuBtnSx}\r\n                onClick={() => {\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"continue_editing\")}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={backBtnSx}\r\n                onClick={() => {\r\n                  // handleCloseConfirm();\r\n                  navigate(\"/dashboard/branches\");\r\n                }}\r\n              >\r\n                {translate(\"back\")}\r\n              </Button>\r\n            </Stack>\r\n          }\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\branches\\BranchesListPage.js",["3025"],[],"import React, { useEffect } from \"react\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport { useLocales } from \"../../../locales\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// mui\r\nimport { Container, Stack, IconButton, Typography } from \"@mui/material\";\r\n// component\r\nimport Image from \"../../../components/image/Image\";\r\nimport NewBranchesSection from \"../../../section/@dashboard/branches/NewBranchesSection\";\r\nimport BranchesSection from \"../../../section/@dashboard/branches/BranchesSection\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAllBranches } from \"../../../redux/services/restaurant_service\";\r\nimport { getAllBranchesMarket } from \"../../../redux/services/markets_service\";\r\n// ---------------------------------------------------------------------------\r\n\r\n//------------ styles ----------\r\nconst titleHolderSx = {\r\n  flexDirection: \"row\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  mb: \"26px\",\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: 600,\r\n  color: \"#333333\",\r\n};\r\n\r\nconst addNewSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: \"500\",\r\n  color: \"#121212\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nexport default function BranchesListPage() {\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getAllBranches({\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(\r\n        getAllBranchesMarket({\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // ----------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Branches List</title>\r\n      </Helmet>\r\n\r\n      <Container\r\n        /* sx={{\r\n          px: { xs: \"15px\", lg: \"0px !important\" },\r\n        }}*/\r\n        maxWidth={themeStretch ? false : \"xl\"}\r\n      >\r\n        {/* **** Tilte and add new Button **** */}\r\n        <Stack sx={{ ...titleHolderSx }}>\r\n          <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n            {translate(`branches`)}\r\n          </Typography>\r\n\r\n          <Stack direction=\"row\" alignItems=\"center\">\r\n            <IconButton\r\n              disableRipple\r\n              sx={{\r\n                p: \"0px\",\r\n              }}\r\n              onClick={() => {\r\n                navigate(\"add-branch\");\r\n              }}\r\n            >\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_addNew.svg\"\r\n              />\r\n            </IconButton>\r\n\r\n            <Typography\r\n              sx={{ ...addNewSx, ml: \"8px\" }}\r\n              onClick={() => {\r\n                navigate(\"add-branch\");\r\n              }}\r\n            >\r\n              {translate(`add_new_branch`)}\r\n            </Typography>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        {/* ***** Start Branches Section  ****** **/}\r\n        <BranchesSection />\r\n\r\n        {/* ***** Start New Branches Section  ****** */}\r\n        <NewBranchesSection />\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\overview\\OverViewPage.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\overview\\OverView.js",["3026","3027","3028","3029"],[],"import { Helmet } from \"react-helmet-async\";\r\nimport { Typography, Grid, Box, Divider, Stack, Container } from \"@mui/material\";\r\nimport ChartsRow from \"../../../section/@dashboard/overview/detailes/ChartsRow\";\r\nimport PendingBranchesList from \"../../../section/@dashboard/overview/list/pending/AllBranchesSection\";\r\nimport PendingBranchesList2 from \"../../../section/@dashboard/overview/list/pending/NewBranchwsSection\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport LinearProgress, { linearProgressClasses } from '@mui/material/LinearProgress';\r\nimport { styled } from '@mui/material/styles';\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n//__________________________________________________________________________\r\nconst BorderLinearProgress1 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"5.75px\",\r\n  borderRadius: 8,\r\n  width: \"197.81px\",\r\n  marginBottom: \"22px\",\r\n  marginTop: \"8px\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor: theme.palette.grey[theme.palette.mode === 'light' ? 'rgba(255, 204, 99, 0.3)' : 'rgba(255, 204, 99, 0.3)'],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === 'light' ? '#4E6FE4' : '#4E6FE4',\r\n  },\r\n}));\r\nconst BorderLinearProgress2 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"5.75px\",\r\n  marginTop: \"8px\",\r\n  borderRadius: 8,\r\n  width: \"172.56px\",\r\n  marginBottom: \"22px\",\r\n\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor: theme.palette.grey[theme.palette.mode === 'light' ? 'rgba(255, 204, 99, 0.3)' : 'rgba(255, 204, 99, 0.3)'],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === 'light' ? '#4EE476' : '#4EE476',\r\n  },\r\n}));\r\nconst BorderLinearProgress3 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"5.75px\",\r\n  borderRadius: 8,\r\n  width: \"147.3px\",\r\n  marginTop: \"8px\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor: theme.palette.grey[theme.palette.mode === 'light' ? 'rgba(255, 204, 99, 0.3)' : 'rgba(255, 204, 99, 0.3)'],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === 'light' ? '#FFCC63' : '#FFCC63',\r\n  },\r\n}));\r\nconst titleStyle = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  paddingBottom: \"16px\",\r\n}\r\nconst boxStyle = {\r\n  paddingTop: \"15px\",\r\n  paddingBottom: \"34px\",\r\n  boxShadow: \"1.80272px 1.80272px 9.0136px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"6.63688px\",\r\n  background: \"#FFFFFF\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\"\r\n}\r\nconst box2Style = {\r\n  paddingTop: \"18px\",\r\n  paddingLeft: \"32px\",\r\n  paddingRight: \"42px\",\r\n  paddingBottom: \"27px\",\r\n  boxShadow: \"1.80272px 1.80272px 9.0136px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"6.63688px\",\r\n  background: \"#FFFFFF\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\"\r\n}\r\nconst titleForBoxStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n\r\n\r\n}\r\nconst viewAllStyle = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"20px\",\r\n  marginRight: \"7px\",\r\n\r\n}\r\nconst imgStyle = {\r\n  width: \"5.26px\",\r\n  height: \"10.52px\",\r\n  margin: \"auto\"\r\n}\r\nconst victorStyle = {\r\n  width: \"10px\",\r\n  height: \"7.5px\",\r\n  margin: \"auto\",\r\n}\r\nconst boxTitleStyle = {\r\n  marginBottom: \"22px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  paddingLeft: \"32px\",\r\n  paddingRight: \"32px\",\r\n}\r\nconst avatarStyle = {\r\n  width: \"56px\",\r\n  height: \"56px\",\r\n  margin: \"auto\",\r\n  margingRight: \"21px\",\r\n  marginLeft: \"16px\"\r\n}\r\nconst mainTitleStyle = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"13px\",\r\n  lineHeight: \"16px\",\r\n  marginRight: \"20px\"\r\n}\r\nconst rateNumberStyle = {\r\n  color: \"#121212\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"11px\",\r\n  lineHeight: \"16px\",\r\n  paddingLeft: \"6px\"\r\n}\r\nconst starStyle = {\r\n  width: \"11.61px\",\r\n  height: \"11.11px\",\r\n  margin: \"auto\",\r\n\r\n}\r\nconst managerStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n}\r\nconst aedStyle = {\r\n  color: \"#4EE476\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n}\r\nconst rowStyle = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  alignContent: \"center\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n}\r\nconst flagStyle = {\r\n  width: \"18px\",\r\n  height: \"21.23px\",\r\n  margin: \"auto\",\r\n  marginRight: \"16px\"\r\n}\r\nconst locationIconStyle = {\r\n  width: \"61.38px\",\r\n  height: \"64.43px\",\r\n  margin: \"auto\",\r\n}\r\nconst numerStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"23.167px\",\r\n  lineHeight: \"35px\",\r\n  marginBottom: \"8px\"\r\n}\r\nconst contryStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"13.2383px\",\r\n  lineHeight: \"20px\",\r\n  marginBottom: \"34px\"\r\n}\r\nconst nameContryStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n}\r\nconst numberStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n}\r\nconst blueStyle = {\r\n  width: \"197.81px\",\r\n  height: \"5.75px\",\r\n  // paddingTop:\"3px\"\r\n  marginTop: \"7px\",\r\n  marginBottom: \"23px\"\r\n}\r\nconst greenStyle = {\r\n  width: \"172.56px\",\r\n  height: \"5.75px\",\r\n  // paddingTop:\"3px\"\r\n  marginTop: \"7px\",\r\n  marginBottom: \"23px\"\r\n}\r\nconst yellowStyle = {\r\n  width: \"147.3px\",\r\n  height: \"5.75px\",\r\n  // paddingTop:\"3px\"\r\n  marginTop: \"7px\",\r\n}\r\nexport default function OverView() {\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Overview </title>\r\n      </Helmet>\r\n\r\n      <Container\r\n        sx={{\r\n          px: { xs: '15px', lg: '0px!important' }\r\n        }}\r\n        maxWidth={themeStretch ? false : \"lg\"}\r\n      >\r\n        <Typography sx={titleStyle} variant=\"h5\">{translate(\"over_view\")}</Typography>\r\n        <Box marginBottom={\"63px\"}>\r\n          <ChartsRow />\r\n        </Box>\r\n\r\n\r\n        <PendingBranchesList />\r\n        <PendingBranchesList2 />\r\n        <Grid container spacing={3} marginTop={\"64px\"}>\r\n          <Grid item xs={12} lg={6}>\r\n            <Box sx={boxStyle} >\r\n              <Box sx={boxTitleStyle}>\r\n                <Typography sx={titleForBoxStyle}>\r\n                  {translate(\"the_highest_income_branches\")}\r\n                </Typography>\r\n                <Box display={\"flex\"} paddingTop=\"5px\">\r\n                  <Typography sx={viewAllStyle}>\r\n                    {translate(\"view_all\")}\r\n                  </Typography>\r\n                  <img\r\n                    src=\"/assets/icons/table/shape.svg\"\r\n                    alt=\"arrow\"\r\n                    style={imgStyle} />\r\n                </Box>\r\n\r\n              </Box>\r\n              {/******************************************************** */}\r\n              <Box marginBottom={\"8px\"} paddingLeft={\"32px\"} paddingRight={\"32px\"}>\r\n                <Box sx={rowStyle}>\r\n                  <Box display={\"flex\"}>\r\n                    <img\r\n                      src=\"/assets/icons/table/greenVector.svg\"\r\n                      alt=\"arrow\"\r\n                      style={victorStyle} />\r\n                    <img\r\n                      src=\"/assets/images/dashboard/kfc.png\"\r\n                      alt=\"rest\"\r\n                      style={avatarStyle} />\r\n                    <Box paddingLeft={\"21px\"} display={\"flex\"} flexDirection={\"column\"}>\r\n                      <Box display={\"flex\"}>\r\n                        <Typography sx={mainTitleStyle}>\r\n                          KFC -{translate(\"branch\")}1\r\n                        </Typography>\r\n                        <img\r\n                          src=\"/assets/icons/table/Star.svg\"\r\n                          alt=\"star\"\r\n                          style={starStyle} />\r\n                        <Typography sx={rateNumberStyle}>\r\n                          4.5\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box paddingTop={\"10px\"} display={\"flex\"}>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"manager\")}:\r\n                        </Typography>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"Ramy Gamal\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                  </Box>\r\n                  <Typography sx={aedStyle}>\r\n                    +AED 1200\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Divider sx={{ width: \"100%\" }}></Divider>\r\n              {/******************************************************** */}\r\n              <Box marginBottom={\"8px\"} marginTop={\"8px\"} paddingLeft={\"32px\"} paddingRight={\"32px\"}>\r\n                <Box sx={rowStyle}>\r\n                  <Box display={\"flex\"}>\r\n                    <img\r\n                      src=\"/assets/icons/table/greenVector.svg\"\r\n                      alt=\"arrow\"\r\n                      style={victorStyle} />\r\n                    <img\r\n                      src=\"/assets/images/dashboard/kfc.png\"\r\n                      alt=\"rest\"\r\n                      style={avatarStyle} />\r\n                    <Box paddingLeft={\"21px\"} display={\"flex\"} flexDirection={\"column\"}>\r\n                      <Box display={\"flex\"}>\r\n                        <Typography sx={mainTitleStyle}>\r\n                          KFC -{translate(\"branch\")}1\r\n                        </Typography>\r\n                        <img\r\n                          src=\"/assets/icons/table/Star.svg\"\r\n                          alt=\"star\"\r\n                          style={starStyle} />\r\n                        <Typography sx={rateNumberStyle}>\r\n                          4.5\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box paddingTop={\"10px\"} display={\"flex\"}>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"manager\")}:\r\n                        </Typography>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"Ramy Gamal\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                  </Box>\r\n                  <Typography sx={aedStyle}>\r\n                    +AED 1200\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Divider></Divider>\r\n\r\n              {/******************************************************** */}\r\n              <Box marginBottom={\"8px\"} marginTop={\"8px\"} paddingLeft={\"32px\"} paddingRight={\"32px\"}>\r\n                <Box sx={rowStyle}>\r\n                  <Box display={\"flex\"}>\r\n                    <img\r\n                      src=\"/assets/icons/table/redVector.svg\"\r\n                      alt=\"arrow\"\r\n                      style={victorStyle} />\r\n                    <img\r\n                      src=\"/assets/images/dashboard/kfc.png\"\r\n                      alt=\"rest\"\r\n                      style={avatarStyle} />\r\n                    <Box paddingLeft={\"21px\"} display={\"flex\"} flexDirection={\"column\"}>\r\n                      <Box display={\"flex\"}>\r\n                        <Typography sx={mainTitleStyle}>\r\n                          KFC -{translate(\"branch\")}1\r\n                        </Typography>\r\n                        <img\r\n                          src=\"/assets/icons/table/Star.svg\"\r\n                          alt=\"star\"\r\n                          style={starStyle} />\r\n                        <Typography sx={rateNumberStyle}>\r\n                          4.5\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box paddingTop={\"10px\"} display={\"flex\"}>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"manager\")}:\r\n                        </Typography>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"Ramy Gamal\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                  </Box>\r\n                  <Typography sx={aedStyle}>\r\n                    +AED 1200\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Divider></Divider>\r\n\r\n              {/******************************************************** */}\r\n              <Box marginBottom={\"8px\"} marginTop={\"8px\"} paddingLeft={\"32px\"} paddingRight={\"32px\"}>\r\n                <Box sx={rowStyle}>\r\n                  <Box display={\"flex\"}>\r\n                    <img\r\n                      src=\"/assets/icons/table/greenVector.svg\"\r\n                      alt=\"arrow\"\r\n                      style={victorStyle} />\r\n                    <img\r\n                      src=\"/assets/images/dashboard/kfc.png\"\r\n                      alt=\"rest\"\r\n                      style={avatarStyle} />\r\n                    <Box paddingLeft={\"21px\"} display={\"flex\"} flexDirection={\"column\"}>\r\n                      <Box display={\"flex\"}>\r\n                        <Typography sx={mainTitleStyle}>\r\n                          KFC -{translate(\"branch\")}1\r\n                        </Typography>\r\n                        <img\r\n                          src=\"/assets/icons/table/Star.svg\"\r\n                          alt=\"star\"\r\n                          style={starStyle} />\r\n                        <Typography sx={rateNumberStyle}>\r\n                          4.5\r\n                        </Typography>\r\n                      </Box>\r\n                      <Box paddingTop={\"10px\"} display={\"flex\"}>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"manager\")}:\r\n                        </Typography>\r\n                        <Typography sx={managerStyle}>\r\n                          {translate(\"Ramy Gamal\")}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                  </Box>\r\n                  <Typography sx={aedStyle}>\r\n                    +AED 1200\r\n                  </Typography>\r\n                </Box>\r\n              </Box>\r\n              <Divider></Divider>\r\n              {/******************************************************** */}\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={12} lg={6}>\r\n            <Box sx={box2Style}>\r\n              <Box display={\"flex\"} justifyContent={\"space-between\"}>\r\n                <Box display={\"flex\"}>\r\n                  <img\r\n                    src=\"/assets/icons/table/flag.svg\"\r\n                    alt=\"arrow\"\r\n                    style={flagStyle}\r\n                  />\r\n                  <Typography sx={titleForBoxStyle}>\r\n                    {translate(\"most_selling_cities\")}\r\n                  </Typography>\r\n                </Box>\r\n                <Box display={\"flex\"} paddingTop=\"5px\">\r\n                  <Typography sx={viewAllStyle}>\r\n                    {translate(\"view_all\")}\r\n                  </Typography>\r\n                  <img\r\n                    src=\"/assets/icons/table/shape.svg\"\r\n                    alt=\"arrow\"\r\n                    style={imgStyle} />\r\n                </Box>\r\n\r\n              </Box>\r\n              <Box paddingTop={\"30px\"} display={\"flex\"} flexDirection={\"column\"} justifyContent={\"center\"} alignItems={\"center\"}>\r\n                <img\r\n                  src=\"/assets/icons/table/Location.svg\"\r\n                  alt=\"arrow\"\r\n                  style={locationIconStyle}\r\n                />\r\n                <Typography paddingTop={\"18px\"} sx={numerStyle}>\r\n                  1,456\r\n                </Typography>\r\n                <Typography sx={contryStyle}>\r\n                  Dubai\r\n                </Typography>\r\n              </Box>\r\n              <Box display={\"flex\"} justifyContent={\"space-between\"}>\r\n                <Box display={\"flex\"} flexDirection={\"column\"}>\r\n                  <Typography paddingBottom={\"13px\"} sx={nameContryStyle}>\r\n                    Abu Dhabi\r\n                  </Typography>\r\n                  <Typography paddingBottom={\"13px\"} sx={nameContryStyle}>\r\n                    Ajman\r\n                  </Typography>\r\n                  <Typography paddingBottom={\"13px\"} sx={nameContryStyle}>\r\n                    Shariah\r\n                  </Typography>\r\n                </Box>\r\n                <Box display={\"flex\"} flexDirection={\"column\"}>\r\n                  <Typography paddingBottom={\"13px\"} sx={numberStyle}>\r\n                    1,456\r\n                  </Typography>\r\n                  <Typography paddingBottom={\"13px\"} sx={numberStyle}>\r\n                    1,123\r\n                  </Typography>\r\n                  <Typography paddingBottom={\"13px\"} sx={numberStyle}>\r\n                    1,123\r\n                  </Typography>\r\n                </Box>\r\n                <Box display={\"flex\"} flexDirection={\"column\"}>\r\n                  <BorderLinearProgress1 variant=\"determinate\" value={100} />\r\n                  <BorderLinearProgress2 variant=\"determinate\" value={100} />\r\n                  <BorderLinearProgress3 variant=\"determinate\" value={100} />\r\n                </Box>\r\n              </Box>\r\n\r\n\r\n            </Box>\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\@admin\\profile\\EditAdminProfile.js",["3030","3031","3032","3033","3034","3035","3036","3037","3038"],[],"import React, { useEffect, useState } from \"react\";\r\n// helmet\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  InputAdornment,\r\n  CircularProgress,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport Link from \"@mui/material/Link\";\r\n// import Modal from '@mui/material/Modal';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, {\r\n  RHFTextField,\r\n  RHFRadioGroup,\r\n} from \"../../../components/hook-form\";\r\nimport CustomDataPicker from \"../../../components/custom-datepicker/CustomDatePicker\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport BreadCrumbs from \"../../../components/breadCrumbs/BreadCrumbs\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getAdminProfileInfo,\r\n  editMyProfileInfo,\r\n} from \"../../../redux/services/admin_profile_service\";\r\nimport moment from \"moment\";\r\n// -------------------------------------------------------------------------------------\r\n\r\n// --------------- Styles --------------------\r\nconst mainHolderSx = {\r\n  p: { xs: \"45px 25px\", md: \"45px 40px\" },\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  height: \"48px\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  height: \"48px\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nexport default function EditAdminProfile() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingUpdateMyProfile } = useSelector(\r\n    (state) => state.adminProfile\r\n  );\r\n\r\n  const [ProfilePhoto, setImageUrl] = useState(null);\r\n\r\n  var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  var AdminId = userInfo?.id;\r\n\r\n  const { isLoading, personalInfo } = useSelector(\r\n    (state) => state?.adminProfile\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const EditProfileInfoSchema = Yup.object().shape({\r\n    firstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    lastName: Yup.string().required(translate(\"second_name_is_required\")),\r\n    address: Yup.string().required(translate(\"address_is_required\")),\r\n    birthDate: Yup.string()\r\n      .required(translate(\"date_of_birth_is_required\"))\r\n      .nullable(),\r\n    addressName: Yup.string().required(translate(\"address_name_is_required\")),\r\n    gender: Yup.number().required(translate(\"gender_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    firstName: personalInfo?.firstName,\r\n    lastName: personalInfo?.lastName,\r\n    address: personalInfo?.address,\r\n    birthDate: personalInfo?.dateOfBirth,\r\n    addressName: personalInfo?.addressName,\r\n    gender: personalInfo?.gender,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(EditProfileInfoSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    let { birthDate } = data;\r\n    birthDate = convertDateFormat(birthDate);\r\n    data = { ...data, birthDate };\r\n\r\n    try {\r\n      // code here\r\n\r\n      dispatch(editMyProfileInfo(data));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAdminProfileInfo(\"en-US\"));\r\n    console.log(\"(AdminId)\", AdminId);\r\n  }, [dispatch]);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  const layoutPath = window.location.pathname?.split(\"/\")[1];\r\n\r\n  // console.log(layoutPath);\r\n\r\n  const breadcrumbs = [\r\n    <Link\r\n      sx={{\r\n        fontWeight: 400,\r\n        fontSize: \"12px\",\r\n        color: \"#9DA0A4\",\r\n      }}\r\n      underline=\"hover\"\r\n      key=\"1\"\r\n      component={RouterLink}\r\n      to={`/${layoutPath}/profile`}\r\n    >\r\n      {translate(`Profile`)}\r\n    </Link>,\r\n\r\n    <Typography\r\n      sx={{\r\n        fontWeight: \"700 !important\",\r\n        fontSize: \"12px !important\",\r\n        color: \"#121212\",\r\n      }}\r\n      key=\"2\"\r\n    >\r\n      {translate(`edit_personal_information`)}\r\n    </Typography>,\r\n  ];\r\n\r\n  const genderOptions = [\r\n    { value: \"0\", label: \"male\" },\r\n    { value: \"1\", label: \"female\" },\r\n  ];\r\n  // ------------------ JSX Code ------------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title> Edit Profile Info </title>\r\n      </Helmet>\r\n\r\n      <Container maxWidth={themeStretch ? false : \"xl\"}>\r\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n        {isLoading && Spinner}\r\n\r\n        {!isLoading && (\r\n          <Box sx={{ ...mainHolderSx }}>\r\n            <Typography variant=\"h5\" color=\"#121212\" mb=\"30px\">\r\n              {translate(`edit_personal_information`)}\r\n            </Typography>\r\n\r\n            {/* ***************** Form **************** */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {/* *********** Edit Information ********** */}\r\n\r\n              <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                {/* ******** Left Side Inputs ******* */}\r\n                <Grid item xs={12} sm={6} md={6}>\r\n                  <Grid container columnSpacing={2}>\r\n                    {/*---  first name  --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"firstName\"\r\n                        label={translate(\"first_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    {/*---  second name --- */}\r\n                    <Grid item xs={12} sm={12} md={6} mb=\"16px\">\r\n                      <RHFTextField\r\n                        name=\"lastName\"\r\n                        label={translate(\"second_name\")}\r\n                        sx={{ ...txtFieldBorderStyle }}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  {/*====== date of birth ======= */}\r\n                  <Grid item xs={12} mb=\"16px\">\r\n                    <CustomDataPicker\r\n                      name=\"birthDate\"\r\n                      textLabel=\"date_of_birth\"\r\n                      //  onChange={(e) => {\r\n                      //     setValue('dateOfBirth', e.target.value['$d'], { shouldValidate: true })\r\n                      //      console.log(e.target.value)\r\n                      //   }}\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ************* Right Side Inputs ************ */}\r\n                {/*======  Address  ====== */}\r\n                <Grid item xs={12} sm={6} mb=\"16px\">\r\n                  <RHFTextField\r\n                    name=\"address\"\r\n                    label={translate(\"address\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_location.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                  <Stack height=\"16px\" />\r\n\r\n                  <RHFTextField\r\n                    name=\"addressName\"\r\n                    label={translate(\"address_name\")}\r\n                    type=\"text\"\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} mb=\"16px\">\r\n                  <Stack\r\n                    sx={{ ...genderHolderSx, position: \"relative\", ml: \"14px\" }}\r\n                  >\r\n                    <Typography sx={{ ...genderTextSx }}>\r\n                      {translate(\"gender\")}\r\n                    </Typography>\r\n                    <RHFRadioGroup\r\n                      name=\"gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      //  placeholder={Gender}\r\n                    />\r\n                  </Stack>{\" \"}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ==============@@ Actions Button Button  @@=============*/}\r\n              <Grid container columnSpacing={{ xs: \"40px\", lg: \"90px\" }}>\r\n                <Grid item xs={12} sm={6} md={6} />\r\n\r\n                <Grid item xs={12} sm={6} md={6} mt=\"8px\">\r\n                  <Stack direction=\"row\">\r\n                    <Button\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      variant=\"Contained\"\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                      onClick={() => {\r\n                        navigate(-1);\r\n                      }}\r\n                    >\r\n                      {translate(\"back\")}\r\n                    </Button>\r\n                    <LoadingButton\r\n                      color=\"inherit\"\r\n                      size=\"large\"\r\n                      type=\"submit\"\r\n                      variant=\"Contained\"\r\n                      loading={isLoadingUpdateMyProfile}\r\n                      // loading={isSubmitSuccessful || isSubmitting}\r\n                      sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                    >\r\n                      {translate(\"confirm\")}\r\n                    </LoadingButton>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </FormProvider>\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction convertDateFormat(value) {\r\n  const result = moment(value).format().split(\"T\")[0];\r\n  return result;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\LoginPage.js",["3039","3040","3041","3042","3043"],[],"import React, { useEffect, useState } from \"react\";\r\n//helemt\r\nimport { Helmet } from \"react-helmet-async\";\r\n// localization\r\nimport { useLocales } from \"../../locales\";\r\nimport * as Yup from \"yup\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport {\r\n  Link,\r\n  Alert,\r\n  Box,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  Grid,\r\n} from \"@mui/material\";\r\n// auth\r\nimport { useAuthContext } from \"../../auth/useAuthContext\";\r\n//mui\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// routes\r\nimport { PATH_AUTH } from \"../../routes/paths\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport Iconify from \"../../components/iconify\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\n//toast\r\nimport { toast } from \"react-toastify\";\r\n// -----------------------------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"18px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  paddingBottom: \"23px\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontSize: \"16px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: (theme) => (theme.palette.mode === \"light\" ? \"#EBF4F8\" : \"grey.800\"),\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  \"&:focus\": {\r\n    bgcolor: \"#fba900\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst signupLinkStyle = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"16px\",\r\n  textDecoration: \"none\",\r\n  fontWeight: 400,\r\n  ml: \"8px\",\r\n  \"&:hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px \",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst forgetPasswordSx = {\r\n  textAlign: \"right\",\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  mb: \"23px\",\r\n  \"&:hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nexport default function LoginPage() {\r\n  const { login } = useAuthContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    localStorage.clear();\r\n  }, []);\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const SignInSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"email_must_be_a_valid_email_address\")\r\n      .required(translate(\"email_is_required\")),\r\n    password: Yup.string().required(translate(\"password_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(SignInSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      if (login) {\r\n        await login(data);\r\n      }\r\n    } catch (error) {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  // ------------- JSX Code ----------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Login Page</title>\r\n      </Helmet>\r\n\r\n      <Grid container height=\"100%\">\r\n        {/* ********************* Login Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          {/* __________________ Login Form page ____________ */}\r\n          <Stack sx={{ ...holder, justifyContent: \"center\", height: \"100%\" }}>\r\n            {/* _____ Head of login page ____ */}\r\n            <Stack mb=\"23px\">\r\n              {/*---- logo ---- */}\r\n              <Stack\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                mb=\"28px\"\r\n                alignItems=\"center\"\r\n              >\r\n                <img src=\"/assets/images/logo/logo2.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              <Stack\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n                mb=\"28px\"\r\n              >\r\n                <Typography sx={{ ...titleSx, mr: \"8px\" }}>\r\n                  {translate(`welcome_to`)}\r\n                </Typography>\r\n                <img\r\n                  src=\"/assets/images/logo/logo_name.svg\"\r\n                  alt=\"logo\"\r\n                  style={{ width: \"120px\", height: \"17px\" }}\r\n                />\r\n              </Stack>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of login page -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {!!errors.afterSubmit && (\r\n                  <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                )}\r\n\r\n                {/*------ email input -------- */}\r\n                <RHFTextField\r\n                  name=\"email\"\r\n                  label={translate(\"Email\")}\r\n                  type=\"email\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                />\r\n\r\n                {/*------ password input -------- */}\r\n                <RHFTextField\r\n                  name=\"password\"\r\n                  label={translate(\"password\")}\r\n                  type={showPassword ? \"text\" : \"password\"}\r\n                  sx={txtFieldBorderStyle}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          onClick={() => setShowPassword(!showPassword)}\r\n                          edge=\"end\"\r\n                        >\r\n                          <Iconify\r\n                            icon={\r\n                              showPassword ? \"eva:eye-off-fill\" : \"eva:eye-fill\"\r\n                            }\r\n                            color={showPassword ? \"#BCBCBC\" : \"#FFCC63\"}\r\n                          />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Box>\r\n\r\n              {/*---------For Password Link -------- */}\r\n              <Typography\r\n                sx={{ ...forgetPasswordSx }}\r\n                onClick={() => navigate(\"/auth/reset-password\")}\r\n              >\r\n                {translate(\"forget_password\")}\r\n              </Typography>\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  fullWidth\r\n                  disableRipple\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  sx={{\r\n                    ...loadingButtonStyle,\r\n                  }}\r\n                  loading={isSubmitting}\r\n                >\r\n                  {translate(\"login\")}\r\n                </LoadingButton>\r\n\r\n                {/*--- Sign up Link --- */}\r\n                <Typography\r\n                  color=\"#535353\"\r\n                  fontWeight={400}\r\n                  fontSize=\"16px\"\r\n                  textAlign=\"center\"\r\n                >\r\n                  {translate(\"you_donot_have_an_account\")}\r\n                  <Link\r\n                    to=\"/auth/restaurant-form\"\r\n                    component={RouterLink}\r\n                    sx={{ ...signupLinkStyle }}\r\n                  >\r\n                    {translate(\"sign_up\")}\r\n                  </Link>\r\n                </Typography>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* ************ image Section ************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={657} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\RegisterPage.js",["3044","3045","3046","3047","3048","3049","3050","3051","3052","3053","3054","3055","3056","3057","3058"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// helemt\r\nimport { Helmet } from \"react-helmet-async\";\r\n// react-router\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n// @mui\r\nimport {\r\n  Link,\r\n  Alert,\r\n  Box,\r\n  IconButton,\r\n  InputAdornment,\r\n  Stack,\r\n  Typography,\r\n  Grid,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\n\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// routes\r\nimport { PATH_AUTH } from \"../../routes/paths\";\r\n// components\r\nimport FormProvider, {\r\n  RHFRadioGroup,\r\n  RHFSelect,\r\n  RHFTextField,\r\n} from \"../../components/hook-form\";\r\nimport Iconify from \"../../components/iconify\";\r\nimport CustomStepper from \"../../components/custom-stepper\";\r\nimport ImageSection from \"../../section/auth/ImageSection\";\r\nimport ChangeLanguageBox from \"../../section/auth/details/ChangeLanguageBox\";\r\nimport { setAdminInfo } from \"../../redux/slices/authentication\";\r\nimport CustomDatePicker from \"../../components/custom-datepicker/CustomDatePicker\";\r\nimport moment from \"moment\";\r\nimport { getNationalities } from \"../../redux/services/countries_service\";\r\nimport LocationModal from \"./LocationModal\";\r\n// -------------------------------------------\r\n\r\n//* ------- Styles --------\r\nconst titleSx = {\r\n  fontSize: \"27px\",\r\n  fontWeight: 600,\r\n  lineHeigh: \"40px\",\r\n  color: \"#FFCC63\",\r\n  textAlign: \"center\",\r\n  mb: \"5px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"18px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  textAlign: \"center\",\r\n  lineHeight: \"27px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  marginBottom: \"24px\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    height: \"48px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst fileFieldBorderStyle = {\r\n  width: \"100%\",\r\n  marginBottom: \"24px\",\r\n  \"& .MuiFormLabel-root\": {\r\n    color: \"#000000\",\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    height: \"48px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    \"& fieldset\": {\r\n      // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginBottom: \"23px\",\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  bgcolor: \"#FFCC63\",\r\n  py: \"15px\",\r\n  color: \"#FFFFFF\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  \"&:focus\": {\r\n    bgcolor: \"#fba900\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  marginLeft: \"auto\",\r\n  borderRadius: \"6px\",\r\n  marginRight: \"auto\",\r\n  boxShadow:\r\n    \" 0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst signupLinkStyle = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"16px\",\r\n  textDecoration: \"none\",\r\n  fontWeight: 400,\r\n  ml: \"8px\",\r\n  \"&:hover\": {\r\n    textDecoration: \"underline\",\r\n  },\r\n};\r\n\r\nconst holder = {\r\n  position: \"relative\",\r\n  p: {\r\n    xs: \"0px 0px\",\r\n    sm: \"00px 0px\",\r\n    md: \"00px 50px\",\r\n    lg: \"0px 100px 0px 100px\",\r\n  },\r\n};\r\n\r\nconst inputsHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  flexDirection: \"column\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst imageSectionSx = {\r\n  display: {\r\n    xs: \"none\",\r\n    md: \"block\",\r\n  },\r\n};\r\n\r\nconst genderRadioSx = {\r\n  \"& .MuiFormControlLabel-root\": {\r\n    mr: \"32px\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#ffcc63\",\r\n  },\r\n\r\n  \"& .MuiFormControlLabel-label\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    color: \"#bcbcbc\",\r\n  },\r\n};\r\n\r\nconst genderTextSx = {\r\n  textAlign: \"right\",\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  // paddingTop: \"32px\"\r\n};\r\n\r\nconst genderHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"23px\",\r\n  \"& .MuiFormHelperText-root.Mui-error\": {\r\n    position: \"absolute\",\r\n    top: \"30px\",\r\n  },\r\n};\r\n\r\nconst labelSx = {\r\n  textAlign: \"left\",\r\n  color: \"#535353\",\r\n  fontSize: \"14px\",\r\n  fontWeight: 400,\r\n};\r\n\r\nconst genderOptions = [\r\n  { value: \"0\", label: \"male\" },\r\n  { value: \"1\", label: \"female\" },\r\n];\r\n\r\nexport default function RegisterPage() {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n\r\n  const { nationalities } = useSelector((state) => state.countries);\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    FirstName,\r\n    LastName,\r\n    PhoneNumber,\r\n    Gender,\r\n    Email,\r\n    Password,\r\n    ConfirmPassword,\r\n    CountryCode,\r\n    DateOfBirth,\r\n    Building,\r\n    Floor,\r\n    Apartment,\r\n    NationalityId,\r\n    ProfilePicture,\r\n    ProfilePictureName,\r\n    AddressPhoneNumber,\r\n    AddressName,\r\n    isSubmitAdmin,\r\n    isPickedLoction,\r\n  } = useSelector((state) => state.authentication);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [natinalityId, setNatinalityId] = useState(NationalityId);\r\n\r\n  const [profilePic, setProfilePic] = useState(\r\n    localStorage.getItem(\"ProfilePicture\")\r\n  );\r\n\r\n  const [openLocation, setOpenLocation] = useState(false);\r\n\r\n  const handleOpenLocation = () => setOpenLocation(true);\r\n\r\n  const handleCloseLocation = () => setOpenLocation(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const PasswordRegEx = /^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{9,}$/;\r\n\r\n  const phoneRegExp =\r\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\r\n\r\n  const SignUpSchema = Yup.object().shape({\r\n    FirstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n    LastName: Yup.string().required(translate(\"last_name_is_required\")),\r\n    Email: Yup.string()\r\n      .email(\"email_must_be_a_valid_email_address\")\r\n      .required(translate(\"email_is_required\")),\r\n    Gender: Yup.string().required(translate(\"gender_is_required\")),\r\n    PhoneNumber: Yup.string().matches(phoneRegExp, \"Phone number is not valid\"),\r\n\r\n    Building: Yup.string().required(translate(\"building_is_required\")),\r\n    Floor: Yup.string().required(translate(\"floor_is_required\")),\r\n    Apartment: Yup.string().required(translate(\"apartment_is_required\")),\r\n    Password: Yup.string()\r\n      .required(translate(\"password_is_required\"))\r\n      .matches(\r\n        PasswordRegEx,\r\n        translate(\r\n          \"password_must_have_one_uppercase_one_special_charcteres_one_number_minimum_length_9_digit\"\r\n        )\r\n      ),\r\n    DateOfBirth: Yup.string()\r\n      .required(translate(\"date_of_birth_is_required\"))\r\n      .nullable(),\r\n    ConfirmPassword: Yup.string()\r\n      .oneOf([Yup.ref(\"Password\")], translate(\"passwords_do_not_match\"))\r\n      .required(translate(\"confirm_password_is_requierd\")),\r\n    NationalityId: Yup.string()\r\n      .required(translate(\"nationality_id_is_required\"))\r\n      .nullable(),\r\n    // ProfilePicture: Yup.string().required(translate(\"admin_photo_is_required\")),\r\n    //   CountryCode: Yup.string().required(translate(\"required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    FirstName: FirstName,\r\n    LastName: LastName,\r\n    Email: Email,\r\n    Gender: Gender,\r\n    PhoneNumber: PhoneNumber,\r\n    Building: Building,\r\n    Floor: Floor,\r\n    Apartment: Apartment,\r\n    Password: Password,\r\n    DateOfBirth: DateOfBirth,\r\n    ConfirmPassword: ConfirmPassword,\r\n    // ProfilePicture: \"\",\r\n    NationalityId: natinalityId,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(SignUpSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    setValue,\r\n    watch,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const watchProfilePicture = watch(\"ProfilePicture\");\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      dispatch(\r\n        setAdminInfo({\r\n          Apartment: data.Apartment,\r\n          Building: data.Building,\r\n          Password: data.Password,\r\n          ConfirmPassword: data.ConfirmPassword,\r\n          Email: data.Email,\r\n          FirstName: data.FirstName,\r\n          LastName: data.LastName,\r\n          Gender: data.Gender,\r\n          PhoneNumber: data.PhoneNumber,\r\n          Floor: data.Floor,\r\n          NationalityId: natinalityId,\r\n          DateOfBirth: moment(data.DateOfBirth).format(\"DD/MM/YYYY\"),\r\n          ProfilePicture: profilePic,\r\n        })\r\n      );\r\n\r\n      navigate(\"/auth/payment-form\");\r\n    } catch (error) {\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    dispatch(getNationalities());\r\n  }, [profilePic]);\r\n\r\n  // ------------ JSX Code ---------------\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Register Page</title>\r\n      </Helmet>\r\n\r\n      <Grid container>\r\n        {/* ********************* Register Form Section ******************/}\r\n        <Grid item xs={10} sm={8} md={6} mx=\"auto\">\r\n          {/* __________ Langauge Changer  _________ */}\r\n          <ChangeLanguageBox />\r\n\r\n          {/*__________________ Register Form Section ______________ */}\r\n          <Stack\r\n            sx={{ ...holder, justifyContent: \"center\", marginTop: \"72px\" }}\r\n          >\r\n            {/*---------- Head of Register page ---- */}\r\n            <Stack mb=\"22px\">\r\n              {/*---- logo ---- */}\r\n              <Stack direction=\"row\" justifyContent=\"center\">\r\n                <img src=\"/assets/images/logo/logo.svg\" alt=\"logo\" />\r\n              </Stack>\r\n\r\n              <Stack direction=\"row\" justifyContent=\"center\" mb=\"28px\">\r\n                <Typography sx={{ ...titleSx }}>\r\n                  {translate(`create_account`)}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              {/*---- Stepper  ---- */}\r\n              <CustomStepper activeStep={2} />\r\n\r\n              {/*--- instruction message --- */}\r\n              <Typography sx={{ ...subTitleSx, mt: \"23px\" }}>\r\n                {translate(`enter_your_data_to_create_your_account`)}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/*----------------- Form of Register  -------------- */}\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={{ ...inputsHolderSx }}>\r\n                {/*------ first name  and last name holder -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  {/*------ first name input -------- */}\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"FirstName\"\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      label={translate(\"first_name\")}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*------ second name input -------- */}\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"LastName\"\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      label={translate(\"last_name\")}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*------ admin email input -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"Email\"\r\n                      type=\"email\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      label={translate(\"admin_email\")}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*------ admin password input -------- */}\r\n                  <Grid item xs={6}>\r\n                    {\" \"}\r\n                    <RHFTextField\r\n                      name=\"Password\"\r\n                      type={showPassword ? \"text\" : \"password\"}\r\n                      sx={txtFieldBorderStyle}\r\n                      label={translate(\"admin_password\")}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              onClick={() => setShowPassword(!showPassword)}\r\n                              edge=\"end\"\r\n                            >\r\n                              <Iconify\r\n                                icon={\r\n                                  showPassword\r\n                                    ? \"eva:eye-off-fill\"\r\n                                    : \"eva:eye-fill\"\r\n                                }\r\n                                color={showPassword ? \"#BCBCBC\" : \"#FFCC63\"}\r\n                              />\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*------ date Of Birth input and confirm password -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  <Grid item xs={6}>\r\n                    <CustomDatePicker\r\n                      name=\"DateOfBirth\"\r\n                      inputFormat=\"yyyy-MM-dd\"\r\n                      label={translate(\"date_of_birth\")}\r\n                      sx={{ ...txtFieldBorderStyle, width: \"100%\" }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"ConfirmPassword\"\r\n                      label={translate(\"confirm_password\")}\r\n                      type={showConfirmPassword ? \"text\" : \"password\"}\r\n                      sx={txtFieldBorderStyle}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              onClick={() =>\r\n                                setShowConfirmPassword(!showConfirmPassword)\r\n                              }\r\n                              edge=\"end\"\r\n                            >\r\n                              <Iconify\r\n                                icon={\r\n                                  showConfirmPassword\r\n                                    ? \"eva:eye-off-fill\"\r\n                                    : \"eva:eye-fill\"\r\n                                }\r\n                                color={\r\n                                  showConfirmPassword ? \"#BCBCBC\" : \"#FFCC63\"\r\n                                }\r\n                              />\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*----------- phone number holder ------------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  <Grid item xs={6}>\r\n                    <RHFTextField\r\n                      name=\"PhoneNumber\"\r\n                      label={translate(\"admin_phone\")}\r\n                      type=\"number\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      //  placeholder={PhoneNumber}\r\n                      // defaultValues={defaultValues.PhoneNumber}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={6}>\r\n                    {\" \"}\r\n                    <RHFRadioGroup\r\n                      name=\"Gender\"\r\n                      // defaultValues={defaultValues.Gender}\r\n                      options={genderOptions}\r\n                      sx={{ ...genderRadioSx }}\r\n                      placeholder={Gender}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*------  Building , Floor and apartment input -------- */}\r\n                <Grid container columnSpacing=\"23px\">\r\n                  {/*--------  building input -------- */}\r\n                  <Grid item xs={4}>\r\n                    <RHFTextField\r\n                      name=\"Building\"\r\n                      label={translate(\"building\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      // placeholder={Building}\r\n                      //  defaultValues={defaultValues.Building}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*--------  Floor input -------- */}\r\n                  <Grid item xs={4}>\r\n                    <RHFTextField\r\n                      name=\"Floor\"\r\n                      label={translate(\"floor\")}\r\n                      type=\"text\"\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      //  placeholder={Floor}\r\n                      // defaultValues={defaultValues.Floor}\r\n                    />\r\n                  </Grid>\r\n\r\n                  {/*--------  Apartment input -------- */}\r\n                  <Grid item xs={4}>\r\n                    <RHFTextField\r\n                      name=\"Apartment\"\r\n                      label={translate(\"apartment\")}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      // placeholder={Apartment}\r\n                      // defaultValues={defaultValues.Apartment}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/*--------  location input -------- */}\r\n                <RHFTextField\r\n                  name=\"\"\r\n                  label={translate(\"location\")}\r\n                  // placeholder={translate(\"enter_your_address\")}\r\n                  type=\"text\"\r\n                  sx={{ ...txtFieldBorderStyle }}\r\n                  InputProps={{\r\n                    readOnly: true,\r\n                    endAdornment: (\r\n                      <InputAdornment\r\n                        position=\"end\"\r\n                        onClick={handleOpenLocation}\r\n                      >\r\n                        <IconButton edge=\"end\">\r\n                          <img src=\"/assets/icons/ic_location.svg\" alt=\"\" />\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  value={\r\n                    isPickedLoction === true\r\n                      ? translate(\"location_is_picked\")\r\n                      : translate(\"please_pick_up_location\")\r\n                  }\r\n                />\r\n              </Box>\r\n\r\n              {/*------ Nationality -------- */}\r\n              <RHFSelect\r\n                name=\"NationalityId\"\r\n                label={translate(\"nationality\")}\r\n                type=\"text\"\r\n                sx={{ ...txtFieldBorderStyle }}\r\n                SelectProps={{\r\n                  native: false,\r\n                  // IconComponent: () => <img src='/assets/icons/dashboard/ic_expandMore.svg' alt='' />\r\n                }}\r\n                onChange={(e) => {\r\n                  setNatinalityId(e.target.value);\r\n                  setValue(\"NationalityId\", e.target.value, {\r\n                    shouldValidate: true,\r\n                  });\r\n                }}\r\n              >\r\n                {nationalities.map((option, index) => (\r\n                  <MenuItem key={index} value={option.id}>\r\n                    {translate(option.name)}\r\n                  </MenuItem>\r\n                ))}\r\n              </RHFSelect>\r\n\r\n              <RHFTextField\r\n                name=\"ProfilePicture\"\r\n                label={translate(\"admin_photo\")}\r\n                type=\"file\"\r\n                hidden\r\n                id=\"ProfilePicture\"\r\n                sx={{\r\n                  ...txtFieldBorderStyle,\r\n                  \"& .MuiOutlinedInput-input\": {\r\n                    color: watchProfilePicture ? \"#535353\" : \"transparent\",\r\n                    fontSize: \"14px\",\r\n                  },\r\n                }}\r\n                onChange={(event) => {\r\n                  setProfilePic(event.target.files[0]);\r\n                  setValue(\"ProfilePicture\", event.target.value, {\r\n                    shouldValidate: true,\r\n                  });\r\n                }}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        color=\"primary\"\r\n                        aria-label=\"upload picture\"\r\n                        component=\"label\"\r\n                      >\r\n                        <label htmlFor=\"ProfilePicture\">\r\n                          <img\r\n                            src=\"/assets/icons/auth/ic_upload.svg\"\r\n                            alt=\"upload_icon\"\r\n                          />\r\n                        </label>\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n\r\n              {/* -------- Submit Button and sign ip link --------- */}\r\n              <Stack sx={{ marginX: \"auto\" }}>\r\n                {/* --- Next Button --- */}\r\n                <LoadingButton\r\n                  disableRipple\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...loadingButtonStyle }}\r\n                >\r\n                  {translate(\"next\")}\r\n                </LoadingButton>\r\n\r\n                {/*--- Sign in Link --- */}\r\n                <Typography\r\n                  color=\"#535353\"\r\n                  fontWeight={400}\r\n                  fontSize=\"16px\"\r\n                  textAlign=\"center\"\r\n                >\r\n                  {translate(\"you_have_an_account_already\")}\r\n                  <Link\r\n                    to=\"/auth/login\"\r\n                    component={RouterLink}\r\n                    sx={{ ...signupLinkStyle }}\r\n                  >\r\n                    {translate(\"sign_in\")}\r\n                  </Link>\r\n                </Typography>\r\n              </Stack>\r\n            </FormProvider>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {/* *************** image Section **************/}\r\n        <Grid item sm={6} sx={{ ...imageSectionSx }}>\r\n          <ImageSection height={1450} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {openLocation && (\r\n        <LocationModal open={openLocation} onClose={handleCloseLocation} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\redux\\services\\menu_restaurant_service.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loading-screen\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useResponsive.js",[],["3059"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\Main.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\Main.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\NavVertical.js",[],["3060"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\NavHorizontal.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\NavMini.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Tabs.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Accordion.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Chip.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Table.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Input.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Badge.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Drawer.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Avatar.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Dialog.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Radio.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Button.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Switch.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Slider.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Rating.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Tooltip.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\SvgIcon.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Select.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Popover.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\urls.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\NavVertical.js",[],["3061"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\NavHorizontal.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\NavMini.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Skeleton.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Stepper.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Backdrop.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Checkbox.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Breadcrumbs.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\DatePicker.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\Typography.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\ButtonGroup.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\ToggleButton.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\LoadingButton.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\auth\\ImageSection.js",["3062"],[],"import React, { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n\r\n// @mui\r\nimport {\r\n    Link,\r\n    Box,\r\n    Stack,\r\n    Typography,\r\n} from \"@mui/material\";\r\n// components\r\nimport { IconButtonAnimate } from \"../../components/animate\";\r\nimport Image from \"../../components/image/Image\";\r\n\r\n// ----------------------------------------------------------\r\n\r\n//* ------- Styles --------\r\n\r\nconst langsHolderSx = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"end\",\r\n    p: { xs: '25px 0px 0px 0px', md: '25px 50px 0px 50px', lg: '52px 92px' },\r\n    transform: { xs: 'translateX(10 %)', md: '' }\r\n}\r\n\r\nconst langsTextSx = {\r\n    color: { xs: '#121212', md: \"#fff\" },\r\n    fontWeight: 700,\r\n    fontSize: \"16px\",\r\n    cursor: \"pointer\",\r\n    mr: '30px',\r\n    LineHeight: '90px'\r\n}\r\n\r\nconst overLaySx = {\r\n    position: 'relative',\r\n    width: '100% !important',\r\n    // height: '1075px !important',\r\n    background: `linear-gradient(359.14deg,\r\n                    rgba(18, 18, 18, 0.55) 20.95%,\r\n                    rgba(37, 37, 37, 0.03) 62.21%,\r\n                    rgba(18, 18, 18, 0) 97.87%,\r\n                    rgba(255, 255, 255, 0) 97.87%), url(/assets/images/auth/restaurant_img.png)`,\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n}\r\n\r\nconst descriptionHolderSx = {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    left: '0px',\r\n    padding: { sm: '0px 10px', md: '0px 30px', lg: '0px 95px' },\r\n    top: '78%'\r\n}\r\n\r\nconst shadowTextSx = {\r\n    fontSize: '21px',\r\n    fontWeight: 400,\r\n    color: '#FFFFFF',\r\n    textShadow: '0px 4px 4px rgba(255, 255, 255, 0.5)'\r\n}\r\n\r\n\r\nexport default function ImageSection({ height = 1024 }) {\r\n\r\n    const { translate, currentLang, onChangeLang } = useLocales();\r\n\r\n    const handleChangeLang = (newLang) => {\r\n        onChangeLang(newLang);\r\n    };\r\n\r\n\r\n    // --------- JSX Code -------------\r\n    return (\r\n        <Box sx={{\r\n            ...overLaySx,\r\n            height: '100%',\r\n            minHeight: `${height}px !important`\r\n        }}\r\n        >\r\n\r\n            {/* __________ Langauge Link _________ */}\r\n            <Stack sx={{ ...langsHolderSx }} >\r\n                <Link\r\n                    underline=\"none\"\r\n                    sx={{ ...langsTextSx }}\r\n                    onClick={() =>\r\n                        handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                    }\r\n                >\r\n                    {currentLang.value === \"en\" ? 'العربية' : \"English\"}\r\n                </Link>\r\n\r\n                {/* __________ language Flag _________ */}\r\n                <IconButtonAnimate\r\n                    onClick={() =>\r\n                        handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                    }\r\n                    sx={{\r\n                        width: 'fit-content',\r\n                        height: 'fit-content',\r\n                        p: '0px'\r\n                    }}\r\n                >\r\n                    <Image\r\n                        disabledEffect\r\n                        src={currentLang.value === 'en' ?\r\n                            '/assets/images/auth/ar_flag.svg'\r\n                            : '/assets/icons/flags/ic_flag_en.svg'\r\n                        }\r\n                        alt={currentLang.label}\r\n                    />\r\n                </IconButtonAnimate>\r\n            </Stack>\r\n\r\n            {/* __________ Description Content _________ */}\r\n            <Box sx={{ ...descriptionHolderSx }}>\r\n\r\n                <Stack direction='row' alignItems='center' mb='10px'>\r\n\r\n                    <Typography\r\n                        sx={{\r\n                            ...shadowTextSx,\r\n                            fontSize: '24px',\r\n                            fontWeight: 500,\r\n                            mr: '20px',\r\n                            pb: '5px',\r\n                        }}\r\n                    >\r\n                        {translate(`welcome_to`)}\r\n                    </Typography>\r\n\r\n                    <Box>\r\n                        <img src=\"/assets/images/logo/logo_name2.svg\" alt=\"logo\" />\r\n                    </Box>\r\n\r\n                </Stack>\r\n\r\n                <Typography sx={{ ...shadowTextSx }}>\r\n                    {translate(`create_an_account_for_your_restaurant_now_to`)}\r\n                    <br />\r\n                    {translate(`start_your_journey_with_DNNDON`)}\r\n                </Typography>\r\n\r\n            </Box>\r\n        </Box>\r\n\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\FormProvider.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\breadCrumbs\\BreadCrumbs.js",["3063"],[],"import * as React from 'react';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport Stack from '@mui/material/Stack';\r\n// import NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport KeyboardDoubleArrowRightIcon from '@mui/icons-material/KeyboardDoubleArrowRight';\r\nimport KeyboardDoubleArrowLeftIcon from '@mui/icons-material/KeyboardDoubleArrowLeft';\r\nimport { useTheme } from '@emotion/react';\r\n\r\n// ----------------------------------------------------------------------------\r\nexport default function BreadCrumbs({ breadcrumbs }) {\r\n\r\n    const theme = useTheme();\r\n    const { direction } = theme\r\n\r\n    function handleClick(event) {\r\n        event.preventDefault();\r\n        console.info('You clicked a breadcrumb.');\r\n    }\r\n\r\n\r\n    return (\r\n        <Stack spacing={2} mb='28px'>\r\n            {/* <Breadcrumbs separator=\">>\" aria-label=\"breadcrumb\">\r\n                {breadcrumbs}\r\n            </Breadcrumbs>  */}\r\n            {/* <Breadcrumbs separator=\"-\" aria-label=\"breadcrumb\">\r\n                {breadcrumbs}\r\n            </Breadcrumbs> */}\r\n            <Breadcrumbs\r\n                sx={{\r\n                    '& .MuiBreadcrumbs-separator': {\r\n                        mx: '10px'\r\n                    }\r\n                }}\r\n                separator={direction === 'ltr' ? <KeyboardDoubleArrowRightIcon fontSize=\"small\" /> : <KeyboardDoubleArrowLeftIcon fontSize=\"small\" />}\r\n                aria-label=\"breadcrumb\"\r\n            >\r\n                {breadcrumbs}\r\n            </Breadcrumbs>\r\n        </Stack>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\image\\Image.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\Iconify.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-datepicker\\CustomDatePicker.js",["3064","3065","3066","3067","3068","3069","3070"],[],"import * as React from \"react\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport Calender from \"../iconify/Calender\";\r\nimport { useState } from \"react\";\r\nimport { Box } from \"@mui/system\";\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\nimport { Dialog, Modal } from \"@mui/material\";\r\nimport { useLocales } from \"../../locales\";\r\nimport moment from \"moment/moment\";\r\nimport dayjs from \"dayjs\";\r\n\r\n// ---------------------------------------------\r\n\r\nconst defaulttxtFieldSx = {\r\n  width: \"100%\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n      \"&:hover\": {\r\n        background: \"#fdcd855c\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"20% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    padding: \"12px 35px\",\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\n\r\nexport default function CustomDatePicker({\r\n  hideInput = false,\r\n  textLabel,\r\n  inputFormat,\r\n  name,\r\n  onChange,\r\n  ...other\r\n}) {\r\n  const today = new Date();\r\n  const [value, setValue] = useState(\"\");\r\n  const { control } = useFormContext();\r\n  const { translate } = useLocales();\r\n  return (\r\n    <Box\r\n      sx={{\r\n        padding: hideInput ? \"20px\" : \"0px\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n        <Controller\r\n          name={name}\r\n          control={control}\r\n          render={({ field, fieldState: { error, invalid } }) => (\r\n            // console.log(dayjs(field.value).format()),\r\n            // setValue(field.value['$d']),\r\n            // console.log(field.value['$d']),\r\n            <DatePicker\r\n              {...field}\r\n              fullWidth\r\n              value={\r\n                typeof field.value !== \"number\" ? field.value : field.value\r\n              }\r\n              // value={\r\n              //   typeof field.value === \"number\" && field.value === 0\r\n              //     ? \"\"\r\n              //     : field.value\r\n              // }\r\n              // value={\r\n              //     field.value ? field.value : today\r\n              // }\r\n              // value={\r\n              //     typeof field.value !== 'number' && field.value['$d']\r\n              // }\r\n              // value={\r\n              //     typeof field.value !== 'number' && moment(field.value).format()\r\n              // }\r\n\r\n              // value={\r\n              //     typeof field.value !== 'number' && moment(field.value).format()\r\n              // }\r\n              sx={defaulttxtFieldSx}\r\n              // error={error || invalid}\r\n              // error={!!error}\r\n              // error={!!error || invalid}\r\n              // helperText={error?.message}\r\n              openTo=\"day\"\r\n              // formatDate={(date) => moment(date).format()}\r\n              dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n              label={translate(`${textLabel}`)}\r\n              inputFormat={\r\n                inputFormat === \"MM/YYYY\" ? inputFormat : \"DD/MM/YYYY\"\r\n              }\r\n              // value={value['$d']}\r\n              // onChange={(e) => {\r\n              //     console.log(e)\r\n              //     onChange(moment(value).format())\r\n              // }}\r\n              // onChange={() => setValue(dayjs(field.value).format())}\r\n              views={\r\n                inputFormat === \"MM/YYYY\"\r\n                  ? [\"month\", \"year\"]\r\n                  : [\"day\", \"month\", \"year\"]\r\n              }\r\n              showDaysOutsideCurrentMonth\r\n              components={{\r\n                OpenPickerIcon: Calender,\r\n                // LeftArrowIcon: ArrowLeftIcon,\r\n                // RightArrowIcon: ArrowRightIcon\r\n              }}\r\n              componentsProps={{\r\n                actionBar: { actions: [\"accept\"] },\r\n              }}\r\n              PopperProps={{\r\n                sx: defaultPopperSx,\r\n              }}\r\n              // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n              renderInput={\r\n                hideInput\r\n                  ? ({ inputRef, InputProps }) => (\r\n                    <Box ref={inputRef}>{InputProps?.endAdornment}</Box>\r\n                  )\r\n                  : (params) => (\r\n                    <>\r\n                      <TextField\r\n                        {...params}\r\n                        sx={defaulttxtFieldSx}\r\n                        {...other}\r\n                        error={!!error}\r\n                        helperText={error?.message}\r\n                        id=\"dateOfBirth\"\r\n                      />\r\n                    </>\r\n                  )\r\n              }\r\n            />\r\n          )}\r\n        />\r\n      </LocalizationProvider>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-stepper\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingCards.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFMuiOtpInput.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\auth\\details\\ChangeLanguageBox.js",["3071"],[],"import { Link, Stack } from '@mui/material';\r\nimport React from 'react'\r\nimport { IconButtonAnimate } from '../../../components/animate';\r\nimport Image from '../../../components/image/Image';\r\nimport { useLocales } from '../../../locales';\r\n\r\n// -------------------------------------------------------\r\n\r\n\r\n// ------------ Styles ------\r\n\r\nconst langsHolderSx = {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"end\",\r\n    p: { xs: '25px 0px 0px 0px', md: '25px 50px 0px 50px', lg: '52px 92px' },\r\n    transform: { xs: 'translateX(10 %)', md: '' }\r\n}\r\n\r\nconst langsTextSx = {\r\n    color: { xs: '#121212', md: \"#fff\" },\r\n    fontWeight: 700,\r\n    fontSize: \"16px\",\r\n    cursor: \"pointer\",\r\n    mr: '30px',\r\n    LineHeight: '90px'\r\n}\r\n\r\nconst flagHolderSx = {\r\n    width: { xs: '30px', md: '55px' },\r\n    height: { xs: '30px', md: '55px' },\r\n    p: '0px'\r\n}\r\n\r\nexport default function ChangeLanguageBox() {\r\n\r\n\r\n    const { translate, currentLang, onChangeLang } = useLocales();\r\n\r\n    const handleChangeLang = (newLang) => {\r\n        onChangeLang(newLang);\r\n    };\r\n    // ----------- JSX Code --------------\r\n    return (\r\n        <>\r\n\r\n            {/* __________ Langauge Link and flag _________ */}\r\n            <Stack sx={{ ...langsHolderSx, display: { md: 'none' } }} >\r\n                {/*---- Current Language  ---- */}\r\n                <Link\r\n                    underline=\"none\"\r\n                    sx={{ ...langsTextSx }}\r\n                    onClick={() =>\r\n                        handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                    }\r\n                >\r\n                    {currentLang.value === \"en\" ? 'العربية' : \"English\"}\r\n                </Link>\r\n                {/*---- flag  ---- */}\r\n                <IconButtonAnimate\r\n                    sx={{ ...flagHolderSx }}\r\n                    onClick={() =>\r\n                        handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                    }\r\n                >\r\n                    <Image\r\n                        disabledEffect\r\n                        src={currentLang.value === 'en' ?\r\n                            '/assets/images/auth/ar_flag.svg'\r\n                            : '/assets/icons/flags/ic_flag_en.svg'\r\n                        }\r\n                        alt={currentLang.label}\r\n                    />\r\n                </IconButtonAnimate>\r\n\r\n            </Stack>\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\auth\\Modal\\RequestSendedSuccessfully.js",["3072","3073","3074"],[],"import React from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// Mui\r\nimport { Box, Link, Modal, Stack, Typography } from \"@mui/material\";\r\n// react-router-dom\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n// -----------------------------------------------------------------------------\r\n\r\n// ----------- Styles --------------\r\n\r\nconst ModalSx = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"95%\", sm: \"543px\", md: \"543px\", lg: \"543px\" },\r\n  bgcolor: \"#FFFFFF\",\r\n  pt: { xs: \"60px\", md: \"127px\", lg: \"60px\" },\r\n  pb: { xs: \"40px\", md: \"90px\", lg: \"93px\" },\r\n  px: { xs: \"10px\", sm: \"20px\", md: \"20px\", lg: \"30px\" },\r\n  borderRadius: \"16px\",\r\n  height: \"70%\",\r\n};\r\n\r\nconst modalTitleSx = {\r\n  textAlign: \"center\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n  fontSize: \"24px\",\r\n  lineHeight: \"36px\",\r\n};\r\n\r\nconst doneMarkHolderSx = {\r\n  width: { xs: \"90px\", sm: \"110px\", lg: \"133px\" },\r\n  height: { xs: \"90px\", sm: \"110px\", lg: \"133px\" },\r\n  margin: \"auto\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst nameStyle = {\r\n  fontSize: \"16px\",\r\n  fontWeight: \"600\",\r\n  lineHeight: \"24px\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst imgStyle = {\r\n  paddingBottom: \"9px\",\r\n};\r\n\r\nexport default function RequestSendedSuccessfully({ open, onCloseModel }) {\r\n  const { translate } = useLocales();\r\n\r\n  // ----------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={open}\r\n        onClose={onCloseModel}\r\n        aria-labelledby=\"child-modal-title\"\r\n        aria-describedby=\"child-modal-description\"\r\n      >\r\n        <Box sx={{ ...ModalSx }}>\r\n          <Box sx={{ ...doneMarkHolderSx }}>\r\n            <img src=\"/assets/icons/arrow/true.svg\" alt=\"\" />\r\n          </Box>\r\n\r\n          <Typography\r\n            sx={{\r\n              ...modalTitleSx,\r\n              mb: \"8px\",\r\n              mt: { xs: \"20px\", sm: \"30px\", md: \"65px\" },\r\n            }}\r\n          >\r\n            {translate(`request_has_been_sended_success`)}\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              ...modalTitleSx,\r\n              color: \"gray\",\r\n              fontSize: \"14px\",\r\n              mb: \"8px\",\r\n            }}\r\n          >\r\n            {translate(`hint_send`)}\r\n          </Typography>\r\n\r\n          <Box>\r\n            <Typography pt=\"32px\" textAlign=\"center\">\r\n              <Link\r\n                component={RouterLink}\r\n                to=\"/auth/confirmation\"\r\n                sx={{\r\n                  fontSize: \"16px\",\r\n                  fontWeight: 700,\r\n                }}\r\n              >\r\n                {translate(`go_to_verifiaction_email`)}\r\n              </Link>\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\branch-info\\HighestMealCard.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\branch-info\\HighestSellingMeal.js",["3075","3076","3077","3078"],[],"import React from \"react\";\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Stack, Typography } from \"@mui/material\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as URLS from \"../../../urls\";\r\n// -------------------------------------------------------------\r\n\r\n// --------- Style --------\r\nconst cardHolderSx = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  pb: \"16px\",\r\n  pt: \"16px\",\r\n  pl: \"24px\",\r\n  pr: \"24px\",\r\n  background: \"#FFFFFF\",\r\n  height: \"120px\",\r\n};\r\n\r\nconst nubmerTextSx = {\r\n  color: \"#121212\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n};\r\n\r\nconst titleTextSx = {\r\n  color: \"#9DA0A4\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  lineHeight: \"18px\",\r\n};\r\n\r\nconst subTilteSx = {\r\n  fontWeight: 600,\r\n  fontSize: \" 9px\",\r\n  lineHeight: \"14px\",\r\n  letterSpacing: \"0.0025em\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst rateHolderSx = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  p: \"4px 8px\",\r\n  borderRadius: \"10px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  height: \"26px\",\r\n  width: \"57px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"12px\",\r\n  height: \"12px\",\r\n};\r\n\r\nconst rateSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nexport default function HighestSellingMeal({ data }) {\r\n  const { translate } = useLocales();\r\n\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <Box sx={{ ...cardHolderSx }}>\r\n      <Typography mb=\"20px\" sx={{ ...titleTextSx }}>\r\n        {translate(`the_highest_selling_meals`)}\r\n      </Typography>\r\n\r\n      <Stack direction=\"row\" justifyContent=\"space-between\">\r\n        <Stack direction=\"row\">\r\n          <img\r\n            src={URLS.baseImageURL + `product/${data?.imageUrl}`}\r\n            alt=\"\"\r\n            style={{\r\n              width: \"64px\",\r\n              height: \"56px\",\r\n            }}\r\n          />\r\n\r\n          <Stack ml=\"16px\">\r\n            <Typography mb=\"16px\" sx={{ ...subTilteSx }}>\r\n              {data?.name}\r\n            </Typography>\r\n            <Typography sx={{ ...nubmerTextSx }}>\r\n              {data?.price + \" \"} {data?.currency}\r\n            </Typography>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        {/* <Box sx={{ ...rateHolderSx }}>\r\n          <img\r\n            src=\"/assets/icons/dashboard/ic_star.svg\"\r\n            alt=\"star\"\r\n            style={{ ...startIconSx }}\r\n          />\r\n          <Typography sx={{ ...rateSx }}></Typography>\r\n        </Box>*/}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\details\\DeleteItemPopUp.js",["3079","3080"],[],"import React, { useEffect, useState } from \"react\";\r\n// @mui\r\nimport { Modal, Button, Typography, Box } from \"@mui/material\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// Components\r\nimport CustomAlert from \"../../../../components/CustomAlert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteRestaurentProduct } from \"../../../../redux/services/menu_restaurant_service\";\r\n\r\n// ------------------------------------------------------------------------------\r\n\r\n// -------- Style -----------\r\nconst modalStyle = {\r\n  position: \"relative\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"300px\", sm: \"377px\" },\r\n  bgcolor: \"background.paper\",\r\n  // height: \"189px\",\r\n  overflowY: \"auto\",\r\n  p: \"22px 22px 20px 22px\",\r\n  borderRadius: \"11.3333px\",\r\n};\r\n\r\nconst parStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"19px\",\r\n  paddingTop: \"6px\",\r\n};\r\n\r\nconst myButtonsBoxStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  mt: \"30px\",\r\n};\r\n\r\nconst containedButtonStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"14px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  py: \"8px\",\r\n  width: \"100%\",\r\n  borderRadius: \"8px\",\r\n};\r\n\r\nconst outLinedButtonStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  color: \" #FFCC63\",\r\n  border: \"1px solid #FFCC63\",\r\n  background: \"#FFFFFF\",\r\n  py: \"8px\",\r\n  width: \"100%\",\r\n  borderRadius: \"8px\",\r\n  mr: \"16px\",\r\n};\r\n\r\nconst deletItemStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"26px\",\r\n};\r\nexport default function DeleteItemPopUp({ open, onClose }) {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { mealId } = useSelector((state) => state.control);\r\n\r\n  return (\r\n    <Modal open={open} onClose={onClose}>\r\n      <Box sx={modalStyle}>\r\n        <Box display={\"flex\"}>\r\n          <Box display={\"flex\"}>\r\n            <CustomAlert />\r\n          </Box>\r\n          <Box display={\"flex\"} flexDirection={\"column\"} paddingLeft={\"18px\"}>\r\n            <Typography sx={deletItemStyle}>\r\n              {translate(\"delete_item\")}\r\n            </Typography>\r\n            <Typography sx={parStyle}>\r\n              {translate(\"are_you_sure_you_want_to_delete_this_meal\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Box sx={myButtonsBoxStyle}>\r\n          <Button onClick={onClose} variant=\"outlined\" sx={outLinedButtonStyle}>\r\n            {translate(\"cancel\")}\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              dispatch(deleteRestaurentProduct(mealId));\r\n              onClose();\r\n            }}\r\n            variant=\"contained\"\r\n            sx={containedButtonStyle}\r\n          >\r\n            {translate(\"delete\")}\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </Modal>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\details\\ConfirmAddMealModal.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\users\\detailes\\UserAddSuccessfully.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\CategoriesList.js",["3081","3082","3083","3084","3085","3086","3087","3088","3089","3090","3091","3092","3093","3094","3095","3096"],[],"import React, { useEffect, useState } from \"react\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { _MenuList } from \"../../../../_mock/arrays\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../../components/table\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Header from \"../details/Header\";\r\nimport TablePaginationCustomized from \"../../../../components/table/TablePaginationCustomized\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// serrvices\r\nimport {\r\n  getRestaurantCategories,\r\n  getRestaurantCategoriesDetails,\r\n} from \"../../../../redux/services/employee_facility_service\";\r\nimport CategoryTableRow from \"./CategoryTableRow\";\r\n//url\r\nimport * as URLS from \"../../../../urls\";\r\nimport { initialize } from \"../../../../redux/slices/employeeFacility\";\r\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\r\nimport Image from \"../../../../components/image/Image\";\r\nimport { useRef } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport LoadingTableRows from \"../../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n//__________________________________________________________________\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\nconst TABLE_HEAD = [\r\n  { id: \"category_name\", label: \"category_name\", align: \"center\" },\r\n  { id: \"number_of_items\", label: \"number_of_items\", align: \"center\" },\r\n  { id: \"number_of_orders\", label: \"number_of_orders\", align: \"center\" },\r\n  { id: \"category_status\", label: \"category_status\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: 'row',\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\n// _______________________________________________________________________\r\n\r\nexport default function CategoriesList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { isLoading, error, restaurantCategories, deleteCategorySuccessfully } =\r\n    useSelector((state) => state.employeeFacility);\r\n\r\n  // console.log('deleteCategorySuccessfully', deleteCategorySuccessfully)\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  const navigate = useNavigate();\r\n  const [tableData, setTableData] = useState([]);\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const CategoriesRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => CategoriesRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(initialize());\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getRestaurantCategoriesDetails({\r\n          restaurantId: branchId,\r\n          pageNumber: 1,\r\n          pageSize: 5,\r\n        })\r\n      );\r\n      // fetch data again after delete item\r\n      if (deleteCategorySuccessfully) {\r\n        dispatch(\r\n          getRestaurantCategoriesDetails({\r\n            restaurantId: branchId,\r\n            pageNumber: 1,\r\n            pageSize: 5,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, [dispatch, deleteCategorySuccessfully]);\r\n\r\n  useEffect(() => {\r\n    setTableData(restaurantCategories);\r\n  }, [restaurantCategories]);\r\n\r\n  // console.log(restaurantCategories.length)\r\n\r\n  // --------------------- JSX Code ---------------------\r\n  return (\r\n    <>\r\n      {/* <Header counter={restaurantCategories.length} counterTitle=\"categories\" /> */}\r\n\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n\r\n        <Typography sx={{ ...totalUserSx }}>\r\n          {translate(\"total_categories\")}: {restaurantCategories?.length}\r\n        </Typography>\r\n\r\n        {/* ---- print and export ---- */}\r\n        <Stack\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          spacing=\"18px\"\r\n        >\r\n          {/* ----- Print ----- */}\r\n          <Button onClick={handlePrint}>\r\n            <Image\r\n              disabledEffect\r\n              src=\"/assets/icons/dashboard/ic_print.svg\"\r\n            />\r\n\r\n            <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Button>\r\n\r\n          {/* ----- Export ----- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n\r\n            <DownloadTableExcel\r\n              filename=\"CategoriesTable\"\r\n              sheet=\"Categories\"\r\n              currentTableRef={CategoriesRef.current}\r\n            >\r\n\r\n              <Button disableRipple>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Button>\r\n\r\n            </DownloadTableExcel>\r\n\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={CategoriesRef}\r\n          >\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData?.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData?.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {\r\n\r\n                !isLoading ?\r\n                  <>\r\n                    {dataFiltered\r\n                      ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((row, index) => (\r\n                        <CategoryTableRow\r\n                          key={row.id}\r\n                          // key={index * 2}\r\n                          row={row}\r\n                          selected={selected.includes(row.id)}\r\n                          onSelectRow={() => onSelectRow(row.id)}\r\n                          onDeleteRow={() => handleDeleteRow(row.id)}\r\n                        />\r\n                      ))}\r\n                    <TableEmptyRows\r\n                      height={denseHeight}\r\n                      emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                    />\r\n\r\n                    <TableNoData isNotFound={isNotFound} />\r\n                  </>\r\n                  :\r\n                  <LoadingTableRows number={5} cellsNum={6} />\r\n              }\r\n\r\n\r\n            </TableBody>\r\n          </Table>\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <TablePaginationCustomized\r\n          requestName=\"categoryDetails\"\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleDeleteRows(selected);\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData?.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData?.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData?.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\MenuList.js",["3097","3098","3099","3100","3101","3102","3103","3104","3105","3106","3107","3108","3109","3110","3111","3112","3113","3114"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { _MenuList2 } from \"../../../../_mock/arrays\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../../components/table\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport MenuTableRow2 from \"./MenuTableRow\";\r\nimport TablePaginationCustomized from \"../../../../components/table/TablePaginationCustomized\";\r\nimport Header from \"../details/Header\";\r\nimport MenuTableRow from \"./MenuTableRow\";\r\nimport { useSelector } from \"../../../../redux/store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Initialize } from \"../../../../redux/slices/market\";\r\nimport { getRestaurantMenu } from \"../../../../redux/services/menu_restaurant_service\";\r\nimport MenuRestaurentPagination from \"../../../../components/pagination/MenuRestaurentPagination\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport Image from \"../../../../components/image/Image\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport LoadingTableRows from \"../../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n//__________________________________________________________________\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\nconst TABLE_HEAD = [\r\n  { id: \"photo\", label: \"photo\", align: \"center\" },\r\n  { id: \"name\", label: \"name\", align: \"center\" },\r\n  { id: \"category\", label: \"category\", align: \"center\" },\r\n  { id: \"price\", label: \"price\", align: \"center\" },\r\n  { id: \"rate\", label: \"rate\", align: \"center\" },\r\n  { id: \"no_of_orders\", label: \"no_of_orders\", align: \"center\" },\r\n  { id: \"item_status\", label: \"item_status\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: \"row\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n// _______________________________________________________________________\r\nexport default function MenuList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const {\r\n    isLoading,\r\n    error,\r\n    menuRestaurent,\r\n    isDeletedProduct,\r\n    offersRestaurent,\r\n    isLoadingOffers,\r\n  } = useSelector((state) => state.menuRestaurant);\r\n\r\n  const classes = useStyles();\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState(menuRestaurent);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const MenuesRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => MenuesRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(menuRestaurent);\r\n    //dispatch(getMarketCategoriesDetails({ pageNumber: 1, marketId }));\r\n\r\n    // fetch data again after delete item\r\n    if (isDeletedProduct) {\r\n      dispatch(\r\n        getRestaurantMenu({\r\n          pageNumber: 1,\r\n          restaurantId: branchId,\r\n        })\r\n      );\r\n    }\r\n    dispatch(Initialize());\r\n  }, [dispatch, isDeletedProduct, menuRestaurent]);\r\n\r\n\r\n  // ----------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      {/* <Header counter={menuRestaurent.length} counterTitle=\"items\" /> */}\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n\r\n        <Typography sx={{ ...totalUserSx }}>\r\n          {translate(\"total_items\")}: {menuRestaurent?.length}\r\n        </Typography>\r\n\r\n        {/* ---- print and export ---- */}\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing=\"18px\">\r\n          {/* ----- Print ----- */}\r\n          <Button onClick={handlePrint}>\r\n            <Image disabledEffect src=\"/assets/icons/dashboard/ic_print.svg\" />\r\n\r\n            <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Button>\r\n\r\n          {/* ----- Export ----- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <DownloadTableExcel\r\n              filename=\"MenuTable\"\r\n              sheet=\"Menu\"\r\n              currentTableRef={MenuesRef.current}\r\n            >\r\n              <Button disableRipple>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Button>\r\n            </DownloadTableExcel>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n\r\n\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={MenuesRef}\r\n          >\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {\r\n                !isLoading ?\r\n                <>\r\n                {\r\n                      dataFiltered\r\n                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row, index) => (\r\n                          <MenuTableRow\r\n                            // key={row.id}\r\n                            row={row}\r\n                            key={index * 2}\r\n                            selected={selected.includes(row.id)}\r\n                            onSelectRow={() => onSelectRow(row.id)}\r\n                            onDeleteRow={() => handleDeleteRow(row.id)}\r\n                          />\r\n                        ))\r\n                }\r\n                    <TableEmptyRows\r\n                      height={denseHeight}\r\n                      emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\r\n                    />\r\n\r\n                    <TableNoData isNotFound={isNotFound} />\r\n                </>\r\n                  \r\n                  :\r\n                  <LoadingTableRows number={5} cellsNum={9} />\r\n              }\r\n\r\n            </TableBody>\r\n          </Table>\r\n\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <MenuRestaurentPagination\r\n          count={dataFiltered.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          //\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleDeleteRows(selected);\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\market\\HighestItemCard.js",["3115","3116","3117"],[],"import React from \"react\";\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Stack, Typography } from \"@mui/material\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// -------------------------------------------------------------\r\n\r\n// --------- Style --------\r\nconst cardHolderSx = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  pb: \"16px\",\r\n  pt: \"16px\",\r\n  pl: \"24px\",\r\n  pr: \"24px\",\r\n  background: \"#FFFFFF\",\r\n  height: \"120px\",\r\n};\r\n\r\nconst nubmerTextSx = {\r\n  color: \"#121212\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n};\r\n\r\nconst titleTextSx = {\r\n  color: \"#9DA0A4\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n};\r\n\r\nconst subTilteSx = {\r\n  fontWeight: 600,\r\n  fontSize: \" 9px\",\r\n  lineHeight: \"14px\",\r\n  letterSpacing: \"0.0025em\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst rateHolderSx = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  p: \"4px 8px\",\r\n  borderRadius: \"10px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  height: \"26px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"12px\",\r\n  height: \"12px\",\r\n};\r\n\r\nconst rateSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nexport default function HighestItemCard({ title }) {\r\n  const { translate } = useLocales();\r\n\r\n  const { marketHighestSellingProduct, isLoadingMarketHighestSelling } =\r\n    useSelector((state) => state.market);\r\n\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <Box sx={{ ...cardHolderSx }}>\r\n      <Typography mb=\"20px\" sx={{ ...titleTextSx }}>\r\n        {translate(`${title}`)}\r\n      </Typography>\r\n\r\n      <Stack direction=\"row\" justifyContent=\"space-between\">\r\n        <Stack direction=\"row\">\r\n          <img\r\n            src=\"/assets/images/employee/marketItem.png\"\r\n            alt=\"\"\r\n            style={{\r\n              width: \"60px\",\r\n              height: \"47px\",\r\n            }}\r\n          />\r\n\r\n          <Stack ml=\"16px\">\r\n            <Typography mb=\"14px\" sx={{ ...subTilteSx }}>\r\n              Mighty Zinger big box\r\n            </Typography>\r\n            <Typography sx={{ ...nubmerTextSx }}>AED 70.23</Typography>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        {title === \"the_highest_rated_product\" && (\r\n          <Box sx={{ ...rateHolderSx }}>\r\n            <img\r\n              src=\"/assets/icons/dashboard/ic_star.svg\"\r\n              alt=\"star\"\r\n              style={{ ...startIconSx }}\r\n            />\r\n            <Typography sx={{ ...rateSx, pl: \"6px\" }}>4.5</Typography>\r\n          </Box>\r\n        )}\r\n\r\n        {title === \"the_highest_selling_product\" && (\r\n          <Box sx={{ ...rateHolderSx }}>\r\n            <Typography sx={{ ...rateSx, pr: \"3px\" }}>4.5</Typography>\r\n            <Typography sx={{ ...rateSx }}>{translate(\"orders\")}</Typography>\r\n          </Box>\r\n        )}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\OffersList.js",["3118","3119","3120","3121","3122","3123","3124","3125","3126","3127","3128","3129","3130","3131","3132","3133"],[],"import React, { useState, useEffect } from \"react\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { _MenuList3 } from \"../../../../_mock/arrays\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../../components/table\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport MenuTableRow3 from \"./OfferTableRow\";\r\nimport TablePaginationCustomized from \"../../../../components/table/TablePaginationCustomized\";\r\nimport Header from \"../details/Header\";\r\nimport OfferTableRow from \"./OfferTableRow\";\r\nimport { getRestaurantOffers } from \"../../../../redux/services/menu_restaurant_service\";\r\nimport { useSelector } from \"../../../../redux/store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Initialize } from \"../../../../redux/slices/market\";\r\nimport OffersRestaurentsPgination from \"../../../../components/pagination/OffersRestaurentsPgination\";\r\nimport Image from \"../../../../components/image/Image\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport { useRef } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport LoadingTableRows from \"../../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n//__________________________________________________________________\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\nconst TABLE_HEAD = [\r\n  { id: \"photo\", label: \"photo\", align: \"center\" },\r\n  { id: \"name\", label: \"name\", align: \"center\" },\r\n  { id: \"offer_type\", label: \"offer_type\", align: \"center\" },\r\n  { id: \"price\", label: \"price\", align: \"center\" },\r\n  { id: \"rate\", label: \"rate\", align: \"center\" },\r\n  { id: \"no_of_orders\", label: \"no_of_orders\", align: \"center\" },\r\n  { id: \"start_date\", label: \"start_date\", align: \"center\" },\r\n  { id: \"end_date\", label: \"end_date\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: \"row\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n// _______________________________________________________________________\r\nexport default function OffersList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { error, offersRestaurent, isLoadingOffers, isDeletedOffer } =\r\n    useSelector((state) => state.menuRestaurant);\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  const navigate = useNavigate();\r\n  const [tableData, setTableData] = useState(offersRestaurent);\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const OffersRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => OffersRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(offersRestaurent);\r\n    //dispatch(getMarketCategoriesDetails({ pageNumber: 1, marketId }));\r\n\r\n    // fetch data again after delete item\r\n    if (isDeletedOffer) {\r\n      dispatch(\r\n        getRestaurantOffers({\r\n          pageNumber: 1,\r\n          restaurantId: branchId,\r\n        })\r\n      );\r\n    }\r\n    dispatch(Initialize());\r\n  }, [dispatch, isDeletedOffer, offersRestaurent]);\r\n\r\n  // ----------- JSX Code ------------\r\n  return (\r\n    <>\r\n      {/* <Header counter={offersRestaurent?.length} counterTitle=\"offers\" /> */}\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n\r\n        <Typography sx={{ ...totalUserSx }}>\r\n          {translate(\"total_offers\")}: {offersRestaurent?.length}\r\n        </Typography>\r\n\r\n        {/* ---- print and export ---- */}\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing=\"18px\">\r\n          {/* ----- Print ----- */}\r\n          <Button onClick={handlePrint}>\r\n            <Image disabledEffect src=\"/assets/icons/dashboard/ic_print.svg\" />\r\n\r\n            <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Button>\r\n\r\n          {/* ----- Export ----- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <DownloadTableExcel\r\n              filename=\"OffersTable\"\r\n              sheet=\"Offers\"\r\n              currentTableRef={OffersRef.current}\r\n            >\r\n              <Button disableRipple>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Button>\r\n            </DownloadTableExcel>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={OffersRef}\r\n          >\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData?.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData?.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {\r\n                !isLoadingOffers ?\r\n                  <>\r\n                    {\r\n                      dataFiltered\r\n                        ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        .map((row, index) => (\r\n                          <OfferTableRow\r\n                            // key={row.id}\r\n                            key={index * 2}\r\n                            row={row}\r\n                            selected={selected.includes(row.id)}\r\n                            onSelectRow={() => onSelectRow(row.id)}\r\n                            onDeleteRow={() => handleDeleteRow(row.id)}\r\n                          />\r\n                        ))\r\n                    }\r\n                    <TableEmptyRows\r\n                      height={denseHeight}\r\n                      emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                    />\r\n                    <TableNoData isNotFound={isNotFound} />\r\n                  </>\r\n                  :\r\n                  <LoadingTableRows number={5} cellsNum={10} />\r\n              }\r\n\r\n            \r\n            </TableBody>\r\n          </Table>\r\n\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <OffersRestaurentsPgination\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          //\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleDeleteRows(selected);\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData?.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\details\\DiscardDialog.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\users\\detailes\\AddUserModal.js",["3134","3135"],[],"import React, { useState } from 'react'\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// @mui\r\nimport {\r\n    Alert,\r\n    Box,\r\n    Grid,\r\n    Modal,\r\n    MenuItem,\r\n    Stack,\r\n    IconButton,\r\n    InputAdornment,\r\n    Typography,\r\n} from '@mui/material';\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// Form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport * as Yup from \"yup\";\r\n//components\r\nimport FormProvider,\r\n{ RHFSelect, RHFTextField, } from \"../../../../components/hook-form\";\r\nimport Iconify from \"../../../../components/iconify\";\r\n// section Component\r\nimport UserAddSuccessfully from \"./UserAddSuccessfully\"\r\n//---------------------------------------------------------------------------\r\n\r\n// -------------- Styles ---------------\r\n\r\nconst titleStyle = {\r\n    fontSize: \"27px\",\r\n    fontWeight: \"600\",\r\n    lineHeight: \"41px\",\r\n    color: \"#FFCC63\",\r\n}\r\n\r\nconst loadingButtonStyle = {\r\n    fontSize: \"16.3606px\",\r\n    fontWeight: 600,\r\n    lineHeight: \"25px\",\r\n    bgcolor: \"#FFCC63\",\r\n    py: '15px',\r\n    color: (theme) => (theme.palette.mode === \"light\" ? \"#FFFFFF\" : \"#FFFFFF\"),\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    marginLeft: \"auto\",\r\n    borderRadius: \"8.1803px\",\r\n    marginRight: \"auto\",\r\n\r\n};\r\n\r\nconst inputsHolderSx = {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n}\r\n\r\nconst txtFieldBorderStyle = {\r\n    width: \"100%\",\r\n    paddingBottom: \"23px\",\r\n    \"& .MuiFormLabel-root\": {\r\n        color: '#BCBCBC',\r\n        fontSize: '16px',\r\n    }\r\n    ,\r\n    \"& .MuiOutlinedInput-input\": {\r\n        textAlign: 'left',\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n        pr: \"20px\",\r\n        \"& fieldset\": {\r\n            // borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n        \"&:hover fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n        \"&.Mui-focused fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n    },\r\n    \".MuiSvgIcon-root\": {\r\n        color: \"#D8D8D8 !important\"\r\n    }\r\n};\r\n\r\nconst modalStyle = {\r\n    position: \"relative\",\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: { xs: \"95%\", sm: \"80%\", md: \"648px\", },\r\n    bgcolor: 'background.paper',\r\n    height: \"83%\",\r\n    overflowY: 'auto',\r\n    paddingTop: \"52px\",\r\n    paddingBottom: \"53px\",\r\n    paddingLeft: { xs: '20px', sm: '40px', md: \"64px\" },\r\n    paddingRight: { xs: '20px', sm: '40px', md: \"64px\" },\r\n    borderRadius: \"16px\",\r\n    scrollbarWidth: \"none\",\r\n    minHeight: '600px'\r\n};\r\n\r\nconst boxHeaderStyle = {\r\n    marginBottom: \"25px\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\"\r\n}\r\n\r\nconst box2Style = {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    marginTop: \"61px\",\r\n    marginRight: { xs: '30px', md: \"64px\" },\r\n}\r\n\r\n\r\nexport default function AddUserModal({ open, onClose }) {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const openHandler = () => {\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const closeHandler = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const addUserSchema = Yup.object().shape({\r\n        firstName: Yup.string().required(translate(\"first_name_is_required\")),\r\n        lastName: Yup.string().required(translate(\"last_name_is_required\")),\r\n        userEmail: Yup.string()\r\n            .email(\"email_must_be_a_valid_email_address\")\r\n            .required(translate(\"email_is_required\")),\r\n        countryCode: Yup.string().required(translate('required')),\r\n        phoneNumber: Yup.string().required(translate(\"phone_number_is_required\")),\r\n        userPosition: Yup.string().required(translate(\"user_position_is_required\")),\r\n        branch: Yup.string().required(translate(\"branch_is_required\")),\r\n        userAddress: Yup.string().required(translate(\"user_address_is_required\")),\r\n        password: Yup.string()\r\n            .required(translate(\"password_is_required\")),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref(\"password\")], \"passwords_do_not_match\")\r\n            .required(translate(\"confirm_password_is_requierd\")),\r\n    });\r\n\r\n    const defaultValues = {\r\n        firstName: '',\r\n        lastName: '',\r\n        userEmail: '',\r\n        countryCode: '',\r\n        phoneNumber: '',\r\n        userPosition: '',\r\n        branch: '',\r\n        userAddress: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n    };\r\n\r\n    const methods = useForm({\r\n        resolver: yupResolver(addUserSchema),\r\n        defaultValues,\r\n    });\r\n\r\n    const {\r\n        reset,\r\n        setError,\r\n        handleSubmit,\r\n        setValue,\r\n        formState: { errors, isSubmitting, isSubmitSuccessful },\r\n    } = methods;\r\n\r\n    const onSubmit = async (data) => {\r\n\r\n        try {\r\n            openHandler();\r\n            // code here\r\n        } catch (error) {\r\n            console.error(error);\r\n            reset();\r\n            setError(\"afterSubmit\", {\r\n                ...error,\r\n                message: error.message,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    // ------------- JSX Code ------------\r\n\r\n    return (\r\n        <Modal open={open} onClose={onClose} >\r\n            <Box sx={modalStyle}>\r\n                <Box sx={box2Style} >\r\n                    <IconButton sx={{ p: '0px' }} onClick={onClose} >\r\n                        <img\r\n                            src=\"/assets/icons/arrow/x.svg\"\r\n                            alt=\"\" />\r\n                    </IconButton>\r\n                </Box>\r\n                <Box sx={boxHeaderStyle}>\r\n                    <Typography sx={titleStyle}>\r\n                        {translate(\"add_new_user\")}\r\n                    </Typography>\r\n\r\n                </Box>\r\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                    <Box sx={{ ...inputsHolderSx }} >\r\n                        {!!errors.afterSubmit && (\r\n                            <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>)}\r\n\r\n                        {/* ---------- First Name and Last Name Inputs ----------- */}\r\n                        <Grid container columnSpacing='23px' >\r\n\r\n                            <Grid item xs={12} sm={6}>\r\n                                <RHFTextField\r\n                                    name=\"firstName\"\r\n                                    label={translate(\"first_name\")}\r\n                                    type=\"text\"\r\n                                    sx={{ ...txtFieldBorderStyle }} />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={6}>\r\n                                <RHFTextField\r\n                                    name=\"lastName\"\r\n                                    label={translate(\"last_name\")}\r\n                                    type=\"text\"\r\n                                    sx={{ ...txtFieldBorderStyle }} />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        {/* ---------- email Inputs ----------- */}\r\n                        <RHFTextField\r\n                            name=\"userEmail\"\r\n                            label={translate(\"user_email\")}\r\n                            type=\"email\"\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n\r\n                        {/* ---------- country Code and Phone Number ----------- */}\r\n                        <Grid container columnSpacing='23px'  >\r\n\r\n                            <Grid item xs={4} sm={3}>\r\n                                <RHFSelect\r\n                                    name=\"countryCode\"\r\n                                    type=\"text\"\r\n                                    label={translate(\"+02\")}\r\n                                    sx={{ ...txtFieldBorderStyle }}\r\n                                    onChange={(e) => {\r\n                                        setValue(\"countryCode\", e.target.value, {\r\n                                            shouldValidate: true,\r\n                                        });\r\n                                    }}\r\n                                    SelectProps={{\r\n                                        native: false,\r\n                                        IconComponent: () => (\r\n                                            <img\r\n                                                src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                                                alt=\"\"\r\n                                            />\r\n                                        ),\r\n                                    }}\r\n                                >\r\n                                    <MenuItem value=\"+02\" selected>\r\n                                        +02\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"+03\">\r\n                                        +03\r\n                                    </MenuItem>\r\n                                </RHFSelect>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={8} sm={9}>\r\n                                <RHFTextField\r\n                                    name=\"phoneNumber\"\r\n                                    label={translate(\"phone_number\")}\r\n                                    type=\"number\"\r\n                                    sx={{ ...txtFieldBorderStyle }} />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        {/*--------  User Position Input -------- */}\r\n                        <RHFSelect\r\n                            name=\"userPosition\"\r\n                            type=\"text\"\r\n                            label={translate(\"user_position\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                            onChange={(e) => {\r\n                                setValue(\"userPosition\", e.target.value, {\r\n                                    shouldValidate: true,\r\n                                });\r\n                            }}\r\n                            SelectProps={{\r\n                                native: false,\r\n                                IconComponent: () => (\r\n                                    <img\r\n                                        src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                                        alt=\"\"\r\n                                    />\r\n                                ),\r\n                            }}\r\n                        >\r\n                            <MenuItem value={\"manager\"} selected>\r\n                                {translate(`manager`)}\r\n                            </MenuItem>\r\n                            <MenuItem value=\"employee\">\r\n                                {translate(`employee`)}\r\n                            </MenuItem>\r\n                        </RHFSelect>\r\n\r\n                        {/*-----------  branch Input ---------- */}\r\n                        <RHFSelect\r\n                            name=\"branch\"\r\n                            type=\"text\"\r\n                            label={translate(\"branch\")}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                            onChange={(e) => {\r\n                                setValue(\"branch\", e.target.value, {\r\n                                    shouldValidate: true,\r\n                                });\r\n                            }}\r\n                            SelectProps={{\r\n                                native: false,\r\n                                IconComponent: () => (\r\n                                    <img\r\n                                        src=\"/assets/icons/dashboard/ic_expandMore.svg\"\r\n                                        alt=\"\"\r\n                                    />\r\n                                ),\r\n                            }}\r\n                        >\r\n                            <MenuItem value={\"branch 1\"} selected>\r\n                                {translate(`branch 1`)}\r\n                            </MenuItem>\r\n                            <MenuItem value=\"branch 2\">\r\n                                {translate(`branch 2`)}\r\n                            </MenuItem>\r\n                        </RHFSelect>\r\n\r\n                        {/*--------  user Address Input ------- */}\r\n                        <RHFTextField\r\n                            name=\"userAddress\"\r\n                            label={translate(\"user_address\")}\r\n                            placeholder={translate(\"user_address\")}\r\n                            type=\"text\"\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <img\r\n                                            src=\"/assets/icons/arrow/location.svg\"\r\n                                            alt=''\r\n                                        />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                            sx={{ ...txtFieldBorderStyle }}\r\n                        />\r\n\r\n                        {/*--------  user password Input ------- */}\r\n                        <RHFTextField\r\n                            name=\"password\"\r\n                            label={translate(\"password\")}\r\n                            type={showPassword ? \"text\" : \"password\"}\r\n                            sx={txtFieldBorderStyle}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            onClick={() => setShowPassword(!showPassword)}\r\n                                            edge=\"end\">\r\n                                            <Iconify\r\n                                                icon={\r\n                                                    showPassword ? \"eva:eye-outline\" : \"eva:eye-off-outline\"\r\n                                                }\r\n                                                color={showPassword ? '#D8D8D8' : \"#BCBCBC\"} />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n\r\n                        {/*--------  user confirmPassword Input ------- */}\r\n                        <RHFTextField\r\n                            name=\"confirmPassword\"\r\n                            label={translate(\"confirm_password\")}\r\n                            type={showPassword ? \"text\" : \"password\"}\r\n                            sx={txtFieldBorderStyle}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            onClick={() => setShowPassword(!showPassword)}\r\n                                            edge=\"end\">\r\n                                            <Iconify\r\n                                                icon={\r\n                                                    showPassword ? \"eva:eye-outline\" : \"eva:eye-off-outline\"\r\n                                                }\r\n                                                color={showPassword ? '#D8D8D8' : \"#BCBCBC\"}\r\n                                            />\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n\r\n                    </Box>\r\n\r\n                    {/* -------- Submit Button --------- */}\r\n                    <Stack sx={{ marginX: \"auto\" }}>\r\n                        <LoadingButton\r\n                            fullWidth\r\n                            size=\"large\"\r\n                            type=\"submit\"\r\n                            variant=\"Contained\"\r\n                            //  loading={isSubmitSuccessful || isSubmitting}\r\n                            sx={{ ...loadingButtonStyle }}>\r\n                            {translate(\"add_user\")}\r\n                        </LoadingButton>\r\n                    </Stack >\r\n\r\n                    {/* ---------------- UserAddSuccessfully Modal ----------- */}\r\n                    <UserAddSuccessfully open={isOpen} onCloseModel={closeHandler} />\r\n\r\n                </FormProvider>\r\n            </Box>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\opportunity\\PlanCard.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketCategoryList.js",["3136","3137","3138","3139","3140"],[],"import React, { useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// @MUi\r\nimport {\r\n    Button,\r\n    IconButton,\r\n    Table,\r\n    Tooltip,\r\n    TableBody,\r\n    TableContainer,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Mock\r\nimport { _MenuList } from \"../../../../_mock/arrays\";\r\n// Components\r\nimport {\r\n    useTable,\r\n    getComparator,\r\n    emptyRows,\r\n    TableNoData,\r\n    TableEmptyRows,\r\n    TableHeadCustom,\r\n    TableSelectedAction,\r\n} from \"../../../../components/table\";\r\nimport TablePaginationCustomized from \"../../../../components/table/TablePaginationCustomized\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../components/scrollbar\";\r\n// Sections Components\r\nimport MarketCategoryTableRow from \"./MarketCategoryTableRow\";\r\nimport Header from \"../details/Header\";\r\n\r\n// -------------------------------------------------------------------------------------------\r\n\r\n// ------------ Style ------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \"& .MuiPaginationItem-icon\": {\r\n            color: \"#FFCC63;\",\r\n        },\r\n    },\r\n}));\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n    position: \"relative\",\r\n    overflow: \"unset\",\r\n    boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n    borderRadius: \"16px\",\r\n    background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n    minWidth: 800,\r\n    borderCollapse: \"separate\",\r\n    borderSpacing: \"0px 16px\",\r\n    paddingRight: \"19px\",\r\n    paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n    background: \"#FFFFFF\",\r\n    color: \"#535353\",\r\n    border: \"0.75px solid #BCBCBC\",\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    paddingLeft: \"43px\",\r\n    paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    paddingLeft: \"44px\",\r\n    paddingRight: \"44px\",\r\n};\r\n\r\n\r\nconst TABLE_HEAD = [\r\n    { id: \"category_name\", label: \"category_name\", align: \"center\" },\r\n    { id: \"number_of_items\", label: \"number_of_items\", align: \"center\" },\r\n    { id: \"number_of_orders\", label: \"number_of_orders\", align: \"center\" },\r\n    { id: \"category_status\", label: \"category_status\", align: \"center\" },\r\n    { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nexport default function MarketCategoryList() {\r\n    const classes = useStyles();\r\n    const {\r\n        dense,\r\n        page,\r\n        order,\r\n        orderBy,\r\n        rowsPerPage,\r\n        setPage,\r\n        selected,\r\n        setSelected,\r\n        onSelectRow,\r\n        onSelectAllRows,\r\n        onSort,\r\n        onChangeDense,\r\n        onChangePage,\r\n        onChangeRowsPerPage,\r\n    } = useTable();\r\n    const { translate } = useLocales();\r\n    const [tableData, setTableData] = useState(_MenuList);\r\n    const [openConfirm, setOpenConfirm] = useState(false);\r\n    const [filterName, setFilterName] = useState(\"\");\r\n    const [filterRole, setFilterRole] = useState(\"all\");\r\n    const [filterStatus, setFilterStatus] = useState(\"all\");\r\n    const dataFiltered = applyFilter({\r\n        inputData: tableData,\r\n        comparator: getComparator(order, orderBy),\r\n        filterName,\r\n        filterRole,\r\n        filterStatus,\r\n    });\r\n    const dataInPage = dataFiltered?.slice(\r\n        page * rowsPerPage,\r\n        page * rowsPerPage + rowsPerPage\r\n    );\r\n    const denseHeight = dense ? 52 : 72;\r\n    const isFiltered =\r\n        filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n    const isNotFound =\r\n        (!dataFiltered?.length && !!filterName) ||\r\n        (!dataFiltered?.length && !!filterRole) ||\r\n        (!dataFiltered?.length && !!filterStatus);\r\n\r\n    const handleOpenConfirm = () => {\r\n        setOpenConfirm(true);\r\n    };\r\n\r\n    const handleCloseConfirm = () => {\r\n        setOpenConfirm(false);\r\n    };\r\n\r\n    const handleDeleteRow = (id) => {\r\n        const deleteRow = tableData?.filter((row) => row.id !== id);\r\n        setSelected([]);\r\n        setTableData(deleteRow);\r\n        if (page > 0) {\r\n            if (dataInPage.length < 2) {\r\n                setPage(page - 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteRows = (selected) => {\r\n        const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n        setSelected([]);\r\n        setTableData(deleteRows);\r\n        if (page > 0) {\r\n            if (selected.length === dataInPage.length) {\r\n                setPage(page - 1);\r\n            } else if (selected.length === dataFiltered?.length) {\r\n                setPage(0);\r\n            } else if (selected.length > dataInPage.length) {\r\n                const newPage =\r\n                    Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n                setPage(newPage);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // ------------- JSX Code ----------------\r\n    return (\r\n        <>\r\n\r\n\r\n            {/* --------- Start Table Header ---------*/}\r\n            <Header counter='30' counterTitle='categories' />\r\n\r\n\r\n            {/* -------------- Start Table ---------------*/}\r\n            <StyledTableContainer>\r\n                <TableSelectedAction\r\n                    dense={dense}\r\n                    numSelected={selected.length}\r\n                    rowCount={tableData?.length}\r\n                    onSelectAllRows={(checked) =>\r\n                        onSelectAllRows(\r\n                            checked,\r\n                            tableData?.map((row) => row.id)\r\n                        )\r\n                    }\r\n                    action={\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                                <Iconify icon=\"eva:trash-2-outline\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    }\r\n                />\r\n                <Scrollbar>\r\n                    <Table size={dense ? \"small\" : \"medium\"} sx={{ ...tableHolderSx }}>\r\n                        <TableHeadCustom\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            headLabel={TABLE_HEAD}\r\n                            rowCount={tableData?.length}\r\n                            numSelected={selected.length}\r\n                            onSort={onSort}\r\n                            onSelectAllRows={(checked) =>\r\n                                onSelectAllRows(\r\n                                    checked,\r\n                                    tableData?.map((row) => row.id)\r\n                                )\r\n                            }\r\n                        />\r\n                        <TableBody>\r\n                            {dataFiltered\r\n                                ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => (\r\n                                    <MarketCategoryTableRow\r\n                                        // key={row.id}\r\n                                        key={index * 2}\r\n                                        row={row}\r\n                                        selected={selected.includes(row.id)}\r\n                                        onSelectRow={() => onSelectRow(row.id)}\r\n                                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                                    />\r\n                                ))}\r\n\r\n                            <TableEmptyRows\r\n                                height={denseHeight}\r\n                                emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                            />\r\n\r\n                            <TableNoData isNotFound={isNotFound} />\r\n                        </TableBody>\r\n                    </Table>\r\n                </Scrollbar>\r\n\r\n                {/* --- Strat Table Pagenation --- */}\r\n                <TablePaginationCustomized\r\n                    requestName=\"categoryDetails\"\r\n                    count={dataFiltered?.length}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    onPageChange={onChangePage}\r\n                    onRowsPerPageChange={onChangeRowsPerPage}\r\n                    dense={dense}\r\n                    onChangeDense={onChangeDense}\r\n                />\r\n            </StyledTableContainer>\r\n\r\n\r\n            {/* ---------- Start Confirm Dialog  -------*/}\r\n            <CustomConfirmDialog\r\n                open={openConfirm}\r\n                onClose={handleCloseConfirm}\r\n                title={translate(\"delete_item\")}\r\n                content={\r\n                    <>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>\r\n                }\r\n                action={\r\n                    <>\r\n                        <Button\r\n                            sx={cancelBtnSx}\r\n                            onClick={() => {\r\n                                handleCloseConfirm();\r\n                            }}\r\n                        >\r\n                            {translate(\"cancel\")}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            sx={confirmBtnSx}\r\n                            onClick={() => {\r\n                                handleDeleteRows(selected);\r\n                                handleCloseConfirm();\r\n                            }}\r\n                        >\r\n                            {translate(\"delete\")}\r\n                        </Button>\r\n                    </>\r\n                }\r\n            />\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n    inputData,\r\n    comparator,\r\n    filterName,\r\n    filterStatus,\r\n    filterRole,\r\n}) {\r\n    const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n    stabilizedThis?.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n\r\n    inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n    if (filterName) {\r\n        inputData = inputData.filter(\r\n            (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n        );\r\n    }\r\n\r\n    if (filterStatus !== \"all\") {\r\n        inputData = inputData.filter((user) => user.status === filterStatus);\r\n    }\r\n\r\n    if (filterRole !== \"all\") {\r\n        inputData = inputData.filter((user) => user.role === filterRole);\r\n    }\r\n\r\n    return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketSubCategoryList.js",["3141","3142","3143","3144","3145","3146","3147","3148","3149","3150"],[],"import React, { useState, useEffect } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// @MUi\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  CircularProgress,\r\n  Box,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Mock\r\nimport { _MenuList } from \"../../../../_mock/arrays\";\r\n// Components\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../../components/table\";\r\nimport MarketSubCategoryPagination from \"../../../../components/pagination/MarketSubCategoryPagination\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../components/scrollbar\";\r\n// Sections Components\r\nimport Header from \"../details/Header\";\r\nimport MarketSubCategoryTableRow from \"./MarketSubCategoryTableRow\";\r\nimport { getMarketCategoriesDetails } from \"../../../../redux/services/markets_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Initialize } from \"../../../../redux/slices/market\";\r\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\r\nimport Image from \"../../../../components/image/Image\";\r\nimport { useRef } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\n// -------------------------------------------------------------------------------------------\r\n\r\n// ------------ Style ------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: 'row',\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"category_name\", label: \"category_name\", align: \"center\" },\r\n  { id: \"main_category_name\", label: \"main_category_name\", align: \"center\" },\r\n  { id: \"number_of_items\", label: \"number_of_items\", align: \"center\" },\r\n  { id: \"number_of_orders\", label: \"number_of_orders\", align: \"center\" },\r\n  { id: \"category_status\", label: \"category_status\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nexport default function MarketSubCategoryList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { marketCategories, isLoadingmarketCategories, isDeletedCategories } =\r\n    useSelector((state) => state.market);\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n  var marketId = branchId;\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n  const { translate } = useLocales();\r\n  const [tableData, setTableData] = useState(marketCategories);\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const SubCategoriesRef = useRef(null);\r\n\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => SubCategoriesRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(marketCategories);\r\n    //dispatch(getMarketCategoriesDetails({ pageNumber: 1, marketId }));\r\n\r\n    // fetch data again after delete item\r\n    if (isDeletedCategories) {\r\n      dispatch(\r\n        getMarketCategoriesDetails({\r\n          pageNumber: 1,\r\n          marketId,\r\n        })\r\n      );\r\n    }\r\n    dispatch(Initialize());\r\n  }, [dispatch, isDeletedCategories, marketCategories]);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n  // ------------- JSX Code ----------------\r\n  return (\r\n    <>\r\n      {/* --------- Start Table Header ---------*/}\r\n      {/* <Header counter={marketCategories.length} counterTitle=\"sub_categories\" /> */}\r\n\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n\r\n        <Typography sx={{ ...totalUserSx }}>\r\n          {translate(\"total_sub_categories\")}: {marketCategories?.length}\r\n        </Typography>\r\n\r\n        {/* ---- print and export ---- */}\r\n        <Stack\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          spacing=\"18px\"\r\n        >\r\n          {/* ----- Print ----- */}\r\n          <Button onClick={handlePrint}>\r\n            <Image\r\n              disabledEffect\r\n              src=\"/assets/icons/dashboard/ic_print.svg\"\r\n            />\r\n\r\n            <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Button>\r\n\r\n          {/* ----- Export ----- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n\r\n            <DownloadTableExcel\r\n              filename=\"SubCategoriesTable\"\r\n              sheet=\"SubCategories\"\r\n              currentTableRef={SubCategoriesRef.current}\r\n            >\r\n\r\n              <Button disableRipple>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Button>\r\n\r\n            </DownloadTableExcel>\r\n\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* -------------- Start Table ---------------*/}\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n          {/* {isLoadingmarketCategories && Spinner} */}\r\n          {/* {!isLoadingmarketCategories && ( */}\r\n            <Table\r\n              size={dense ? \"small\" : \"medium\"}\r\n              sx={{ ...tableHolderSx }}\r\n              ref={SubCategoriesRef}\r\n            >\r\n              <TableHeadCustom\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={tableData?.length}\r\n                numSelected={selected.length}\r\n                onSort={onSort}\r\n                onSelectAllRows={(checked) =>\r\n                  onSelectAllRows(\r\n                    checked,\r\n                    tableData?.map((row) => row.id)\r\n                  )\r\n                }\r\n              />\r\n              <TableBody>\r\n                {dataFiltered\r\n                  ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => (\r\n                    <MarketSubCategoryTableRow\r\n                      key={row.id}\r\n                      row={row}\r\n                      selected={selected.includes(row.id)}\r\n                      onSelectRow={() => onSelectRow(row.id)}\r\n                      onDeleteRow={() => handleDeleteRow(row.id)}\r\n                    />\r\n                  ))}\r\n\r\n                <TableEmptyRows\r\n                  height={denseHeight}\r\n                  emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                />\r\n\r\n                <TableNoData isNotFound={isNotFound} />\r\n              </TableBody>\r\n            </Table>\r\n          {/* )} */}\r\n        </Scrollbar>\r\n\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <MarketSubCategoryPagination\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ---------- Start Confirm Dialog  -------*/}\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleDeleteRows(selected);\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\opportunityPages\\PromoteDetailsSection.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\EmployeeList.js",["3151","3152","3153","3154","3155","3156","3157","3158","3159","3160","3161","3162","3163","3164","3165","3166"],[],"import React, { useEffect, useState } from \"react\";\r\n// import CustomConfirmDialog from \"../../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  // Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  // Typography,\r\n  // Stack,\r\n  CircularProgress,\r\n  Stack,\r\n  Typography,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { _usersList } from \"../../../_mock/arrays\";\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n//service\r\n\r\nimport EmployeePagination from \"../../../components/pagination/EmployeePagination\";\r\nimport EmployeeTableRow from \"./EmployeeTableRow\";\r\n\r\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\r\nimport Image from \"../../../components/image/Image\";\r\nimport { useRef } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n//___________________________________________________________________\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"id\", label: \"id\", align: \"center\" },\r\n  { id: \"user_name\", label: \"user_name\", align: \"center\" },\r\n  { id: \"branche_name\", label: \"branche_name\", align: \"center\" },\r\n  { id: \"position\", label: \"position\", align: \"center\" },\r\n  { id: \"email\", label: \"email\", align: \"left\" },\r\n  { id: \"phone_number\", label: \"phone_number\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderRadius: \"25px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: 'row',\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\n// _______________________________________________________________________\r\n\r\nexport default function EmployeeList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, admins } = useSelector((state) => state.users);\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState(_usersList);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const UsersRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => UsersRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(admins);\r\n  }, [admins]);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n  // ----------------\r\n  return (\r\n    <>\r\n      <Box>\r\n        {/* <TableTopSection title='users' /> */}\r\n        {/* <TableTopSection counterTilte=\"employees\" counter={\"\"} /> */}\r\n        <Stack sx={{ ...actionHolderSx }}>\r\n          {/* ***** total user **** */}\r\n\r\n          <Typography sx={{ ...totalUserSx }}>\r\n            {translate(\"total_employees\")}: {admins?.length}\r\n          </Typography>\r\n\r\n          {/* ---- print and export ---- */}\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n          >\r\n            {/* ----- Print ----- */}\r\n            <Button onClick={handlePrint}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n\r\n              <Typography sx={{ ...infoSx, ml: '8px' }}>{translate(\"print\")}</Typography>\r\n            </Button>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n\r\n              <DownloadTableExcel\r\n                filename=\"UsersTable\"\r\n                sheet=\"Users\"\r\n                currentTableRef={UsersRef.current}\r\n              >\r\n\r\n                <Button disableRipple>\r\n                  <Image\r\n                    disabledEffect\r\n                    src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                  />\r\n\r\n                  <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n                    {translate(\"export\")}\r\n                  </Typography>\r\n                </Button>\r\n\r\n              </DownloadTableExcel>\r\n\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n        <StyledTableContainer>\r\n          <TableSelectedAction\r\n            dense={dense}\r\n            numSelected={selected.length}\r\n            rowCount={tableData.length}\r\n            onSelectAllRows={(checked) =>\r\n              onSelectAllRows(\r\n                checked,\r\n                tableData.map((row) => row.id)\r\n              )\r\n            }\r\n            action={\r\n              <Tooltip title=\"Delete\">\r\n                <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                  <Iconify icon=\"eva:trash-2-outline\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            }\r\n          />\r\n          <Scrollbar>\r\n\r\n\r\n            <Table\r\n              size={dense ? \"small\" : \"medium\"}\r\n              sx={{ ...tableHolderSx }}\r\n              ref={UsersRef}\r\n            >\r\n              <TableHeadCustom\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={tableData.length}\r\n                numSelected={selected.length}\r\n                onSort={onSort}\r\n                onSelectAllRows={(checked) =>\r\n                  onSelectAllRows(\r\n                    checked,\r\n                    tableData.map((row) => row.id)\r\n                  )\r\n                }\r\n              />\r\n              <TableBody>\r\n                {\r\n                  !isLoading ?\r\n                    <>\r\n                      {\r\n                        dataFiltered\r\n                          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                          .map((row) => (\r\n                            <EmployeeTableRow\r\n                              key={row.id}\r\n                              row={row}\r\n                              selected={selected.includes(row.id)}\r\n                              onSelectRow={() => onSelectRow(row.id)}\r\n                              onDeleteRow={() => handleDeleteRow(row.id)}\r\n                            />\r\n                          ))}\r\n                      < TableEmptyRows\r\n                        height={denseHeight}\r\n                        emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\r\n                      />\r\n                      <TableNoData isNotFound={isNotFound} />\r\n                    </>\r\n                    :\r\n                    <LoadingTableRows number={5} cellsNum={8} />\r\n                }\r\n\r\n\r\n              </TableBody>\r\n            </Table>\r\n          </Scrollbar>\r\n          {/* --- Strat Table Pagenation --- */}\r\n          <EmployeePagination\r\n            count={dataFiltered?.length}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            onPageChange={onChangePage}\r\n            onRowsPerPageChange={onChangeRowsPerPage}\r\n            dense={dense}\r\n            onChangeDense={onChangeDense}\r\n          />\r\n        </StyledTableContainer>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\Faqs.js",["3167","3168","3169","3170","3171","3172"],[],"import React, { useEffect, useState } from 'react'\r\nimport { useTheme } from '@emotion/react';\r\n//Locales\r\nimport { useLocales } from '../../../locales';\r\n// mui\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport { Box, CircularProgress, Typography } from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport axios from '../../../utils/axios';\r\nimport * as URLS from '../../../urls'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAdminFaqs } from '../../../redux/services/admin_help_service';\r\nimport LoadingAccordion from '../../../components/loadingSkeleton/LoadingAccordion';\r\n\r\n// --------------------------------------------------------------------------\r\n\r\n// ---------- Styles ------------\r\nconst accordionSx = {\r\n    p: { xs: '23px 20px', sm: '23px 56px' },\r\n    '& .MuiAccordionSummary-root': {\r\n        padding: '0px!important',\r\n        minHeight: 'auto!important'\r\n    },\r\n    '& .MuiAccordionSummary-content': {\r\n        my: '0px!important',\r\n        '& .MuiTypography-root': {\r\n            fontSize: '16px',\r\n            fontWeight: 500,\r\n            color: '#121212'\r\n        },\r\n    },\r\n    '& .MuiAccordionSummary-content.Mui-expanded': {\r\n        '& .MuiTypography-root': {\r\n            fontWeight: 700,\r\n            lineHeight: '32.32px!important'\r\n        },\r\n    },\r\n    '& .MuiAccordionDetails-root': {\r\n        p: '0px!important',\r\n        '& .MuiTypography-root': {\r\n            fontSize: '12px',\r\n            fontWeight: 300,\r\n            color: '#535353',\r\n            lineHeight: '35px',\r\n            letterSpacing: '.5px'\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function Faqs() {\r\n\r\n    const dispatch = useDispatch();\r\n    const { isLoadingFaqs, error, faqs } = useSelector(state => state.adminHelp)\r\n\r\n    const theme = useTheme();\r\n    const { direction } = theme;\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminFaqs('en'))\r\n    }, [dispatch])\r\n\r\n\r\n    const FaqsContent = <>\r\n        {\r\n            Array.isArray(faqs) &&\r\n            faqs.map((row, index) =>\r\n                // isLoadingFaqs ? \r\n                    <Box mb='10px' key={index}>\r\n                        <Accordion sx={{ ...accordionSx }} >\r\n                            <AccordionSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography>\r\n\r\n                                    {direction === 'rtl' ? row.foreignQuestion : row.question}\r\n                                </Typography>\r\n\r\n                                <Typography\r\n                                    sx={{\r\n                                        ml: '4px',\r\n                                        transform: theme.direction === 'rtl' && 'rotateY(180deg)'\r\n                                    }}\r\n                                >\r\n                                    ?\r\n                                </Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <Typography>\r\n                                    {direction === 'rtl' ? row.foreignAnswer : row.answer}\r\n                                </Typography>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    </Box>\r\n                // :\r\n            )\r\n        }\r\n    </>\r\n\r\n\r\n    // ---------- JSX Code ----------\r\n    return (\r\n\r\n        <>\r\n            {!isLoadingFaqs ? FaqsContent : <LoadingAccordion />}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\UserList.js",["3173","3174","3175","3176","3177","3178","3179","3180","3181","3182","3183","3184","3185","3186","3187","3188"],[],"import React, { useEffect, useState } from \"react\";\r\n// import CustomConfirmDialog from \"../../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  // Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  // Typography,\r\n  // Stack,\r\n  CircularProgress,\r\n  Stack,\r\n  Typography,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { _usersList } from \"../../../_mock/arrays\";\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n//service\r\nimport UserTableRow from \"./UserTableRow\";\r\nimport UsersPagination from \"../../../components/pagination/UsersPagination\";\r\nimport { useRef } from \"react\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n//___________________________________________________________________\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"id\", label: \"id\", align: \"center\" },\r\n  { id: \"user_name\", label: \"user_name\", align: \"center\" },\r\n  { id: \"branche_name\", label: \"branche_name\", align: \"center\" },\r\n  { id: \"position\", label: \"position\", align: \"center\" },\r\n  { id: \"email\", label: \"email\", align: \"left\" },\r\n  { id: \"phone_number\", label: \"phone_number\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderRadius: \"25px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: \"row\",\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n// _______________________________________________________________________\r\n\r\nexport default function UserList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingRestaurantAdmins, restaurantAdmins } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const { isLoadingMarketAdmins, marketAdmins } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const [admins, setAdmins] = useState(\r\n    localStorage.getItem(\"facilityType\") === \"0\"\r\n      ? restaurantAdmins\r\n      : marketAdmins\r\n  );\r\n\r\n  // console.log(admins)\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState(_usersList);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage?.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const UsersRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => UsersRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setAdmins(\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? restaurantAdmins\r\n        : marketAdmins\r\n    );\r\n    setTableData(\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? restaurantAdmins\r\n        : marketAdmins\r\n    );\r\n  }, [admins, marketAdmins, restaurantAdmins]);\r\n\r\n  // ----------------\r\n  return (\r\n    <>\r\n      <Box>\r\n        {/* <TableTopSection title='users' /> */}\r\n        {/* <TableTopSection counterTilte=\"employees\" counter={\"\"} /> */}\r\n        <Stack sx={{ ...actionHolderSx }}>\r\n          {/* ***** total user **** */}\r\n\r\n          <Typography sx={{ ...totalUserSx }}>\r\n            {translate(\"total_employees\")}:\r\n          </Typography>\r\n\r\n          {/* ---- print and export ---- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing=\"18px\">\r\n            {/* ----- Print ----- */}\r\n            <Button onClick={handlePrint}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n\r\n              <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                {translate(\"print\")}\r\n              </Typography>\r\n            </Button>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <DownloadTableExcel\r\n                filename=\"UsersTable\"\r\n                sheet=\"Users\"\r\n                currentTableRef={UsersRef.current}\r\n              >\r\n                <Button disableRipple>\r\n                  <Image\r\n                    disabledEffect\r\n                    src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                  />\r\n\r\n                  <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                    {translate(\"export\")}\r\n                  </Typography>\r\n                </Button>\r\n              </DownloadTableExcel>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n        <StyledTableContainer>\r\n          <TableSelectedAction\r\n            dense={dense}\r\n            numSelected={selected.length}\r\n            rowCount={tableData?.length}\r\n            onSelectAllRows={(checked) =>\r\n              onSelectAllRows(\r\n                checked,\r\n                tableData?.map((row) => row.id)\r\n              )\r\n            }\r\n            action={\r\n              <Tooltip title=\"Delete\">\r\n                <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                  <Iconify icon=\"eva:trash-2-outline\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            }\r\n          />\r\n          <Scrollbar>\r\n            <Table\r\n              size={dense ? \"small\" : \"medium\"}\r\n              sx={{ ...tableHolderSx }}\r\n              ref={UsersRef}\r\n            >\r\n              <TableHeadCustom\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={tableData?.length}\r\n                numSelected={selected.length}\r\n                onSort={onSort}\r\n                onSelectAllRows={(checked) =>\r\n                  onSelectAllRows(\r\n                    checked,\r\n                    tableData?.map((row) => row.id)\r\n                  )\r\n                }\r\n              />\r\n              <TableBody>\r\n\r\n                {\r\n                  !isLoadingRestaurantAdmins || !isLoadingMarketAdmins ?\r\n                    <>\r\n                      {\r\n                        dataFiltered\r\n                          ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                          .map((row) => (\r\n                            <UserTableRow\r\n                              key={row.id}\r\n                              row={row}\r\n                              selected={selected.includes(row.id)}\r\n                              onSelectRow={() => onSelectRow(row.id)}\r\n                              onDeleteRow={() => handleDeleteRow(row.id)}\r\n                            />\r\n                          ))\r\n                      }\r\n                      <TableEmptyRows\r\n                        height={denseHeight}\r\n                        emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                      />\r\n                      <TableNoData isNotFound={isNotFound} />\r\n                    </>\r\n                    :\r\n                    <LoadingTableRows number={5} cellsNum={8} />\r\n                }\r\n\r\n                \r\n              </TableBody>\r\n            </Table>\r\n          </Scrollbar>\r\n          {/* --- Strat Table Pagenation --- */}\r\n          <UsersPagination\r\n            count={dataFiltered?.length}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            onPageChange={onChangePage}\r\n            onRowsPerPageChange={onChangeRowsPerPage}\r\n            dense={dense}\r\n            onChangeDense={onChangeDense}\r\n          />\r\n        </StyledTableContainer>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketProductList.js",["3189","3190","3191","3192","3193","3194","3195","3196","3197","3198","3199","3200","3201","3202"],[],"import React, { useState, useEffect } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// @Mui\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  CircularProgress,\r\n  Box,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Mock\r\nimport { _Products } from \"../../../../_mock/arrays\";\r\n// Components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../../components/table\";\r\nimport TablePaginationCustomized from \"../../../../components/table/TablePaginationCustomized\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\n// Section Components\r\nimport Header from \"../details/Header\";\r\nimport MarketProductTableRow from \"./MarketProductTableRow\";\r\nimport { getMarketMenu } from \"../../../../redux/services/markets_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Initialize } from \"../../../../redux/slices/market\";\r\nimport ProductPagination from \"../../../../components/pagination/ProductPagination\";\r\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\r\nimport Image from \"../../../../components/image/Image\";\r\nimport { useRef } from \"react\";\r\nimport { useReactToPrint } from 'react-to-print';\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\n// ---------- Style ------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: 'row',\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"photo\", label: \"photo\", align: \"center\" },\r\n  { id: \"name\", label: \"name\", align: \"center\" },\r\n  { id: \"category\", label: \"category\", align: \"center\" },\r\n  { id: \"price\", label: \"price\", align: \"center\" },\r\n  { id: \"no_of_orders\", label: \"no_of_orders\", align: \"center\" },\r\n  { id: \"status\", label: \"status\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nexport default function MarketProductList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { products, isLoadingProduct, isDeletedProduct } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n  var marketId = branchId;\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n  const { translate } = useLocales();\r\n  const { themeStretch } = useSettingsContext();\r\n  const navigate = useNavigate();\r\n  const [tableData, setTableData] = useState(products);\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n  const [filterName, setFilterName] = useState(\"\");\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const ProductsRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => ProductsRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(products);\r\n    //dispatch(getMarketCategoriesDetails({ pageNumber: 1, marketId }));\r\n\r\n    // fetch data again after delete item\r\n    if (isDeletedProduct) {\r\n      dispatch(\r\n        getMarketMenu({\r\n          pageNumber: 1,\r\n          marketId,\r\n        })\r\n      );\r\n    }\r\n    dispatch(Initialize());\r\n  }, [dispatch, isDeletedProduct, products]);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n  // ----------- JSX Code ------------\r\n  return (\r\n    <>\r\n      {/* --------- Start Table Header ---------*/}\r\n      {/* <Header counter={products.length} counterTitle=\"products\" /> */}\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n\r\n        <Typography sx={{ ...totalUserSx }}>\r\n          {translate(\"total_categories\")}: {products?.length}\r\n        </Typography>\r\n\r\n        {/* ---- print and export ---- */}\r\n        <Stack\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          spacing=\"18px\"\r\n        >\r\n          {/* ----- Print ----- */}\r\n          <Button onClick={handlePrint}>\r\n            <Image\r\n              disabledEffect\r\n              src=\"/assets/icons/dashboard/ic_print.svg\"\r\n            />\r\n\r\n            <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Button>\r\n\r\n          {/* ----- Export ----- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n\r\n            <DownloadTableExcel\r\n              filename=\"ProductsTable\"\r\n              sheet=\"Products\"\r\n              currentTableRef={ProductsRef.current}\r\n            >\r\n\r\n              <Button disableRipple>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: '8px' }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Button>\r\n\r\n            </DownloadTableExcel>\r\n\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n      {/* -------------- Start Table Body ---------------*/}\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n          {/* {isLoadingProduct && Spinner} */}\r\n          {/* {!isLoadingProduct && ( */}\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={ProductsRef}\r\n          >\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {dataFiltered\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => (\r\n                  <MarketProductTableRow\r\n                    key={row.id}\r\n                    // key={index * 2}\r\n                    row={row}\r\n                    selected={selected.includes(row.id)}\r\n                    onSelectRow={() => onSelectRow(row.id)}\r\n                    onDeleteRow={() => handleDeleteRow(row.id)}\r\n                  />\r\n                ))}\r\n\r\n              <TableEmptyRows\r\n                height={denseHeight}\r\n                emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\r\n              />\r\n\r\n              <TableNoData isNotFound={isNotFound} />\r\n            </TableBody>\r\n          </Table>\r\n          {/* )} */}\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <ProductPagination\r\n          count={dataFiltered.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          //\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ---------- Start Confirm Dialog  -------*/}\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleDeleteRows(selected);\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\MyMeeting.js",["3203","3204","3205","3206","3207","3208","3209","3210","3211","3212"],[],"import React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n//mui\r\nimport { Box, Button, Typography, Stack } from \"@mui/material\";\r\n// section components\r\nimport MeetingInfo from \"./details/MeetingInfo\";\r\n// ------------------------------------------------------------\r\n\r\n// -------- Styles ---------\r\nconst BtnSx = {\r\n  width: \"250px\",\r\n  height: \"48px\",\r\n  background: \"#FFCC63\",\r\n  borderRadius: \"8px\",\r\n  color: \"#fff\",\r\n  fontSize: \"16px\",\r\n  \":hover\": {\r\n    background: \"#FFCC63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst secondTxtSx = {\r\n  fontWeight: 500,\r\n  fontSize: \"16px\",\r\n  lineHeight: \"19px\",\r\n  textAlign: \"center\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nexport default function MyMeeting() {\r\n  const { translate } = useLocales();\r\n\r\n  const [bookMeet, setBookMeet] = useState(false);\r\n\r\n  // ---------- JSX Code ----------\r\n  return (\r\n    <>\r\n      {/**      {!bookMeet &&\r\n                <Stack alignItems='center' pt='90px' >\r\n\r\n                    <Box>\r\n                        <img src='/assets/images/employee/onlineCalender.png' alt='' />\r\n                    </Box>\r\n\r\n                    <Typography sx={{ ...secondTxtSx, py: '35px' }} >\r\n                        {translate(`you_do_not_have_meetings_during_the`)}\r\n                        <br />\r\n                        {translate(`coming_period`)}\r\n                    </Typography>\r\n\r\n                    <Button\r\n                        onClick={() => setBookMeet(true)}\r\n                        sx={{ ...BtnSx }}\r\n                    >\r\n                        {translate(`book_meeting`)}\r\n                    </Button>\r\n\r\n                </Stack>\r\n            }\r\n\r\n            {bookMeet && <MeetingInfo />} */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\MyQuestions.js",["3213","3214"],[],"import { useTheme } from '@emotion/react';\r\nimport { Accordion, AccordionDetails, AccordionSummary, CircularProgress, Stack, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system';\r\nimport React, { useEffect } from 'react'\r\nimport { useLocales } from '../../../locales'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAdminQuestions } from '../../../redux/services/admin_help_service';\r\n// ------------------------------------------------------------------\r\n\r\n// ---------- Styles ------------\r\nconst accordionSx = {\r\n    p: { xs: '23px 20px', sm: '23px 56px' },\r\n    '& .MuiAccordionSummary-root': {\r\n        padding: '0px!important',\r\n        minHeight: 'auto!important'\r\n    },\r\n    '& .MuiAccordionSummary-content': {\r\n        my: '0px!important',\r\n        '& .MuiTypography-root': {\r\n            fontSize: '16px',\r\n            fontWeight: 500,\r\n            color: '#121212'\r\n        },\r\n    },\r\n    '& .MuiAccordionSummary-content.Mui-expanded': {\r\n        '& .MuiTypography-root': {\r\n            fontWeight: 700,\r\n            lineHeight: '32.32px!important'\r\n        },\r\n    },\r\n    '& .MuiAccordionDetails-root': {\r\n        p: '0px!important',\r\n        '& .MuiTypography-root': {\r\n            fontSize: '12px',\r\n            fontWeight: 300,\r\n            color: '#535353',\r\n            lineHeight: '35px',\r\n            letterSpacing: '.5px'\r\n        },\r\n    }\r\n}\r\n\r\nconst textSx = {\r\n    fontWeight: 600,\r\n    fontSize: '11px',\r\n    lineHeight: '16px',\r\n    color: '#121212',\r\n}\r\n\r\n// data \r\n// const question = [\r\n//     {\r\n//         title: `question`,\r\n//         discription: `\r\n//                         Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n//                         Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n//                         when an unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n//                         It has survived not only five centuries but also the leap into electronic typesetting,\r\n//                         remaining essentially unchanged.  It was popularised in the 1960s with the release\r\n//                         of Letraset sheets containing\r\n//                     `\r\n//     },\r\n//     {\r\n//         title: `question`,\r\n//         discription: 'Not answered We will reply to you as soon as possible'\r\n//     },\r\n//     {\r\n//         title: `question`,\r\n//         discription: `\r\n//                         Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n//                         Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,\r\n//                         when an unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n//                     `\r\n//     },\r\n\r\n// ]\r\n\r\nexport default function MyQuestions() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const theme = useTheme();\r\n\r\n    const dispatch = useDispatch();\r\n    const { isLoading, error, myQuestion } = useSelector(state => state.adminHelp)\r\n\r\n    const Spinner = <Box display='flex' justifyContent='center'><CircularProgress /> </Box>\r\n\r\n    const MyQuestionsContent = <>\r\n        {\r\n            Array.isArray(myQuestion) &&\r\n            myQuestion.map((row, index) =>\r\n                <Box mb='10px' key={index}>\r\n                    <Accordion sx={{ ...accordionSx }} >\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"panel1a-content\"\r\n                            id=\"panel1a-header\"\r\n                        >\r\n                            <Typography>\r\n                                {translate(`${row?.question}`)}\r\n                                {/* {index + 1}  */}\r\n                            </Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>\r\n                                {row?.answer}\r\n                            </Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n    </>\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminQuestions('en'))\r\n    }, [dispatch])\r\n\r\n\r\n    // ----------- JSX Code ----------\r\n    return (\r\n        <>\r\n\r\n            {/* ********* Add New Question Button ********* */}\r\n            <Stack direction='row' alignItems='center' mb='32px' >\r\n                <Box\r\n                    onClick={() => navigate(`/dashboard/contact-us`)}\r\n                    sx={{ cursor: 'pointer' }}\r\n                >\r\n                    <img src='/assets/icons/dashboard/ic_addBtn.svg' alt='' />\r\n                </Box>\r\n\r\n\r\n                <Typography\r\n                    ml='16px'\r\n                    sx={{ ...textSx, cursor: 'pointer' }}\r\n                    onClick={() => navigate(`/dashboard/contact-us`)}\r\n                >\r\n                    {translate(`add_new_question`)}\r\n                </Typography>\r\n\r\n            </Stack>\r\n\r\n\r\n            {/* ********* Question  ********* */}\r\n\r\n            {isLoading ? Spinner : MyQuestionsContent}\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\PrivacyPolicy.js",["3215"],[],"import React from 'react'\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography } from \"@mui/material\";\r\n// pdf reader\r\nimport { Viewer } from \"@react-pdf-viewer/core\";\r\nimport { Worker } from \"@react-pdf-viewer/core\";\r\nimport '@react-pdf-viewer/core/lib/styles/index.css';\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n\r\n// ----------------------------------------------------------------\r\n// -------- Styles ----------\r\nconst BoxStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    border: \"\",\r\n    paddingLeft: \"32px\",\r\n    paddingRight: \"32px\",\r\n    paddingTop: \"34px\",\r\n    paddingBottom: \"53px\",\r\n    boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n    borderRadius: \"5px\",\r\n    background: \"#FFFFFF\",\r\n\r\n}\r\n\r\nconst typoStyle = {\r\n    fontSize: \"20px\",\r\n    fontWeight: \"600\",\r\n    lineHeight: \"16px\",\r\n    color: \"#010F07\",\r\n    paddingBottom: \"32px\"\r\n}\r\n\r\nconst contentStyle = {\r\n    fontSize: \"16px\",\r\n    fontWeight: \"300\",\r\n    lineHeight: \"27px\",\r\n    color: \"#535353\",\r\n}\r\n\r\nexport default function PrivacyPolicy() {\r\n\r\n    const { translate } = useLocales();\r\n\r\n    // ------------ JSX Code -----------\r\n    return (\r\n        <Box sx={{ ...BoxStyle, mt: '6px' }}>\r\n            <Typography sx={{ ...typoStyle }}>\r\n                {translate(\"privacy_policy\")}\r\n            </Typography>\r\n            {/* <Typography sx={{ ...contentStyle, fontWeight: 600, fontSize: '18px' }}>\r\n        {translate(\"acceptance_of_terms\")}\r\n      </Typography>\r\n      <Typography paddingBottom={\"50px\"} sx={{ ...contentStyle }}>\r\n        {translate(\"p1\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p2\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p3\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p4\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"h1\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"h2\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"h3\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p5\")}\r\n      </Typography> */}\r\n            <Worker workerUrl=\"https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js\">\r\n                <Viewer fileUrl={URLS.adminPolicyURL} />\r\n            </Worker>\r\n        </Box>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\TermsConditions.js",["3216"],[],"import React from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography } from \"@mui/material\";\r\n// pdf reader\r\nimport { Viewer } from \"@react-pdf-viewer/core\";\r\nimport { Worker } from \"@react-pdf-viewer/core\";\r\nimport \"@react-pdf-viewer/core/lib/styles/index.css\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n// ------------------------------------------------------------------------\r\n\r\n// -------- Styles ----------\r\nconst BoxStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    border: \"\",\r\n    paddingLeft: \"32px\",\r\n    paddingRight: \"32px\",\r\n    paddingTop: \"34px\",\r\n    paddingBottom: \"53px\",\r\n    boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n    borderRadius: \"5px\",\r\n    background: \"#FFFFFF\",\r\n};\r\n\r\nconst typoStyle = {\r\n    fontSize: \"20px\",\r\n    fontWeight: \"600\",\r\n    lineHeight: \"16px\",\r\n    color: \"#010F07\",\r\n    paddingBottom: \"32px\",\r\n};\r\n\r\nconst contentStyle = {\r\n    fontSize: \"16px\",\r\n    fontWeight: \"300\",\r\n    lineHeight: \"27px\",\r\n    color: \"#535353\",\r\n};\r\n\r\nexport default function TermsConditions() {\r\n    const { translate } = useLocales();\r\n\r\n    // const readFile = (name, url) => {\r\n    //     setPdfFile(url);\r\n    //     let reader = new FileReader();\r\n    //     reader.onload = (e) => {\r\n    //         alert(\"loading...\");\r\n    //         setPdfFile(url);\r\n    //     };\r\n    // };\r\n\r\n    // ----------- JSX Code -----------\r\n    return (\r\n        <Box sx={{ ...BoxStyle, mt: \"6px\" }}>\r\n            <Typography sx={{ ...typoStyle }}>\r\n                {translate(\"terms_conditions\")}\r\n            </Typography>\r\n            {/* <Typography sx={{ ...contentStyle, fontWeight: 600, fontSize: '18px' }}>\r\n                {translate(\"acceptance_of_terms\")}\r\n            </Typography>\r\n            <Typography paddingBottom={\"50px\"} sx={{ ...contentStyle }}>\r\n                {translate(\"p1\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"p2\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"p3\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"p4\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"h1\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"h2\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"h3\")}\r\n            </Typography>\r\n            <Typography sx={{ ...contentStyle }}>\r\n                {translate(\"p5\")}\r\n            </Typography> */}\r\n            <Worker workerUrl=\"https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js\">\r\n                <Viewer fileUrl={URLS.adminTermsURL} />\r\n            </Worker>\r\n        </Box>\r\n    );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\LegalUpdates.js",["3217"],[],"import React from 'react'\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography } from \"@mui/material\";\r\n// pdf reader\r\nimport { Viewer } from \"@react-pdf-viewer/core\";\r\nimport { Worker } from \"@react-pdf-viewer/core\";\r\nimport '@react-pdf-viewer/core/lib/styles/index.css';\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n// -------------------------------------------------------------------------\r\n\r\n// ----------- Styles -------------\r\nconst BoxStyle = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    border: \"\",\r\n    paddingLeft: \"32px\",\r\n    paddingRight: \"32px\",\r\n    paddingTop: \"34px\",\r\n    paddingBottom: \"53px\",\r\n    boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n    borderRadius: \"5px\",\r\n    background: \"#FFFFFF\",\r\n\r\n}\r\n\r\nconst typoStyle = {\r\n    fontSize: \"20px\",\r\n    fontWeight: \"600\",\r\n    lineHeight: \"16px\",\r\n    color: \"#010F07\",\r\n    paddingBottom: \"32px\"\r\n}\r\n\r\nconst contentStyle = {\r\n    fontSize: \"16px\",\r\n    fontWeight: \"300\",\r\n    lineHeight: \"27px\",\r\n    color: \"#535353\",\r\n}\r\n\r\nexport default function LegalUpdates() {\r\n\r\n    const { translate } = useLocales();\r\n\r\n    // ---------- JSX Code ---------\r\n    return (\r\n        <Box sx={{ ...BoxStyle, mt: '6px' }}>\r\n            <Typography sx={{ ...typoStyle }}>\r\n                {translate(\"legal_updates\")}\r\n            </Typography>\r\n            {/* <Typography sx={{ ...contentStyle, fontWeight: 600, fontSize: '18px' }}>\r\n        {translate(\"acceptance_of_terms\")}\r\n      </Typography>\r\n      <Typography paddingBottom={\"50px\"} sx={{ ...contentStyle }}>\r\n        {translate(\"p1\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p2\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p3\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p4\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"h1\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"h2\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"h3\")}\r\n      </Typography>\r\n      <Typography sx={{ ...contentStyle }}>\r\n        {translate(\"p5\")}\r\n      </Typography> */}\r\n\r\n            <Worker workerUrl=\"https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js\">\r\n                <Viewer fileUrl={URLS.adminLegalURL} />\r\n            </Worker>\r\n        </Box>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\details\\HelpHeader.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\InboxSection.js",["3218","3219","3220","3221","3222"],[],"import React from \"react\";\r\n// useEffect\r\nimport { useEffect } from \"react\";\r\nimport { useTheme } from \"@emotion/react\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport { Box, Typography, Grid, InputAdornment } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport SearchBar from \"./details/SearchBar\";\r\nimport BoxColumn from \"./details/BoxColumn\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\n// Service\r\nimport {\r\n  getInquiry,\r\n  getInquiriesBySubject,\r\n  replyToInquiry,\r\n} from \"../../../redux/services/employee_facility_service\";\r\nimport moment from \"moment\";\r\nimport FormProvider, { RHFTextField } from \"../../../components/hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// _______________________________________________________________________\r\n\r\nconst firstGridStyle = {\r\n  p: \"32px 0px 0px 0px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"4.82206px\",\r\n  background: \"#FFFFFF\",\r\n};\r\n\r\nconst secondGridStyle = {\r\n  p: \"24px 32px 25px 32px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"4.82206px\",\r\n  background: \"#FFFFFF\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst titleOfMessageStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n  paddingBottom: \"9px\",\r\n};\r\n\r\nconst headerMessageStyle = {\r\n  display: \"flex\",\r\n  paddingBottom: \"14px\",\r\n};\r\n\r\nconst boxDateStyle = {\r\n  display: \"flex\",\r\n  paddingBottom: \"32px\",\r\n};\r\n\r\nconst toStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst dateStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"10px\",\r\n  lineHeight: \"15px\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  width: \"100%\",\r\n  borderRadius: \"3.85765px\",\r\n  background: \"#F5F5F5\",\r\n  \".css-1oggn2n-MuiInputBase-root-MuiInput-root\": {\r\n    height: \"100%\",\r\n    paddingRight: { lg: \"24px\", xs: \"43px\" },\r\n  },\r\n  \".css-g8xom6-MuiInputBase-input-MuiInput-input\": {\r\n    paddingLeft: \"16px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    paddingRight: \"1px\",\r\n    \"&:hover fieldset\": {\r\n      background: \"#FFCC63\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderRadius: \"3.85765px\",\r\n    },\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    // padding: \"9px 0px 9px 31px\",\r\n    paddingLeft: \"31px\",\r\n    paddingRight: \"10px\",\r\n  },\r\n};\r\n\r\nconst txtFieldArBorderStyle = {\r\n  width: \"100%\",\r\n  borderRadius: \"3.85765px\",\r\n  background: \"#F5F5F5\",\r\n\r\n  \".rtl-7sw7y4-MuiInputBase-root-MuiInput-root\": {\r\n    height: \"100%\",\r\n    paddingRight: \"16px\",\r\n    paddingLeft: \"16px\",\r\n  },\r\n  \".css-1oggn2n-MuiInputBase-root-MuiInput-root\": {\r\n    paddingRight: { lg: \"24px\", xs: \"43px\" },\r\n  },\r\n  \".css-g8xom6-MuiInputBase-input-MuiInput-input\": {\r\n    paddingLeft: \"31px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    paddingRight: \"1px\",\r\n    \"&:hover fieldset\": {\r\n      background: \"#FFCC63\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderRadius: \"3.85765px\",\r\n    },\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    // padding: \"9px 0px 9px 31px\",\r\n    paddingLeft: \"31px\",\r\n  },\r\n};\r\n\r\nconst boxTextFieldStyle = {\r\n  display: \"flex\",\r\n  height: \"100%\",\r\n  marginTop: \"30px\",\r\n};\r\n\r\nconst buttonStyle = {\r\n  paddingLeft: \"18px\",\r\n  paddingRight: \"18px\",\r\n  paddingTop: \"7px\",\r\n  paddingBottom: \"7px\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n  borderRadius: \"8px\",\r\n  marginLeft: \"16px\",\r\n};\r\n\r\nconst messageRow = {\r\n  display: \"flex\",\r\n};\r\n\r\nconst messageLeft = {\r\n  position: \"relative\",\r\n  marginBottom: \"31px\",\r\n  padding: \"28px 28px 28px 28px\",\r\n  backgroundColor: \"rgba(255, 204, 99, 0.2)\",\r\n  width: \"300px\",\r\n  height: \"auto\",\r\n  textAlign: \"left\",\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  borderRadius: \"7px\",\r\n  lineHeight: \"21px\",\r\n  wordWrap: \"break-word\",\r\n  paddingRight: \"20px\",\r\n  \"&:hover\": {\r\n    backgroundColor: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst messageRight = {\r\n  position: \"relative\",\r\n  marginBottom: \"31px\",\r\n  padding: \"28px 28px 28px 28px\",\r\n  background: \"#F5F5F5\",\r\n  wordWrap: \"break-word\",\r\n  width: \"300px\",\r\n  height: \"auto\",\r\n  textAlign: \"left\",\r\n  borderRadius: \"7px\",\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n  marginRight: \"8px\",\r\n  \"&:hover\": {\r\n    backgroundColor: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst messageContent = {\r\n  fontSize: \"14px\",\r\n  fontWeight: \"400\",\r\n  lineHeight: \"21px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst chatSectionStyle = {\r\n  overflowY: \"auto\",\r\n  maxHeight: \"406px\",\r\n  flexDirection: \"column\",\r\n  display: \"flex\",\r\n  scrollbarWidth: \"none\",\r\n};\r\n\r\nconst titleOfSubjectStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n  color: \"#121212\",\r\n  paddingLeft: \"10px\",\r\n};\r\n\r\nconst boxSubjectStyle = {\r\n  display: \"flex\",\r\n  paddingBottom: \"9px\",\r\n};\r\n\r\nconst messageRowRight = {\r\n  display: \"flex\",\r\n  justifyContent: \"flex-end\",\r\n};\r\n\r\nconst contentRightStyle = {\r\n  fontSize: \"14px\",\r\n  fontWeight: \"400\",\r\n  lineHeight: \"21px\",\r\n  color: \"#535353\",\r\n};\r\n//_________________________________________________\r\nexport default function InboxSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { inquiry, isLoading, inquiryById, massege, isLoadingReplyToInquiry } =\r\n    useSelector((state) => state.employeeFacility);\r\n\r\n  const { messageId } = useSelector((state) => state.control);\r\n\r\n  const [valueOfSearch, setValueOfSearch] = useState(\"\");\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const replaySchema = Yup.object().shape({\r\n    //  text: Yup.string().required(translate(\"text_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    text: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(replaySchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful },\r\n  } = methods;\r\n\r\n  const theme = useTheme();\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // code here\r\n      dispatch(replyToInquiry({ data: data, id: messageId }));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getInquiry());\r\n    //   dispatch(getInquirybyId());\r\n  }, [dispatch]);\r\n\r\n  const handleSearch = (e) => {\r\n    setValueOfSearch(e.target.value);\r\n    if (valueOfSearch) {\r\n      dispatch(getInquiriesBySubject(e.target.value));\r\n    } else {\r\n      dispatch(getInquiry());\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {/* ***************** Left Side **************** */}\r\n        <Grid item xs={12} sm={12} md={5}>\r\n          <Box sx={firstGridStyle}>\r\n            <SearchBar onChange={handleSearch} placeholder={\"search\"} />\r\n\r\n            <Box sx={{ mt: \"14px\" }} />\r\n\r\n            <BoxColumn BoxRow={inquiry} />\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* ***************** Right Side **************** */}\r\n        <Grid item xs={12} sm={12} md={7}>\r\n          <Box sx={secondGridStyle}>\r\n            <Box sx={boxSubjectStyle}>\r\n              <Typography sx={titleOfMessageStyle}>\r\n                {translate(\"subject\")}:\r\n              </Typography>\r\n              <Typography sx={titleOfSubjectStyle}>\r\n                {inquiryById.subject}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Box sx={headerMessageStyle}>\r\n              <Typography sx={toStyle}>{translate(\"to\")} :</Typography>\r\n              <Typography sx={{ ...toStyle, paddingLeft: \"3px\" }}>\r\n                {inquiryById.to}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Box sx={boxDateStyle}>\r\n              <Typography\r\n                sx={{ ...dateStyle, paddingRight: \"23px\" }}\r\n              ></Typography>\r\n              <Typography sx={dateStyle}>\r\n                {moment(inquiryById.date).format(\"DD/MM/YYYY\")}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Box sx={chatSectionStyle}>\r\n              {Array.isArray(massege) &&\r\n                massege.map((row, index) =>\r\n                  row?.fromAdmin === false ? (\r\n                    <Box sx={messageRow}>\r\n                      <Box sx={messageLeft}>\r\n                        <Typography key={index} sx={messageContent}>\r\n                          {row.text}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  ) : (\r\n                    <Box sx={messageRowRight}>\r\n                      <Box sx={messageRight}>\r\n                        <Typography sx={contentRightStyle}>\r\n                          {row.text}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n                  )\r\n                )}\r\n            </Box>\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Box sx={boxTextFieldStyle}>\r\n                <RHFTextField\r\n                  name=\"text\"\r\n                  type=\"text\"\r\n                  variant=\"standard\"\r\n                  placeholder={translate(\"enter_message\")}\r\n                  sx={\r\n                    theme.direction === \"ltr\"\r\n                      ? txtFieldBorderStyle\r\n                      : txtFieldArBorderStyle\r\n                  }\r\n                  InputProps={{\r\n                    disableUnderline: true,\r\n                    endAdornment: (\r\n                      <InputAdornment position=\"end\"></InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n                <LoadingButton\r\n                  loading={isLoadingReplyToInquiry}\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  sx={buttonStyle}\r\n                >\r\n                  <img\r\n                    src=\"/assets/icons/employee/send.svg\"\r\n                    alt=\"\"\r\n                    style={{\r\n                      padding: \"4px\",\r\n                      width: \"30px\",\r\n                      transform:\r\n                        theme.direction === \"rtl\" ? \"rotate(180deg)\" : \"\",\r\n                    }}\r\n                  />\r\n                </LoadingButton>\r\n              </Box>\r\n            </FormProvider>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\SendInquiry.js",["3223","3224","3225","3226","3227","3228","3229"],[],"import React from \"react\";\r\nimport { useTheme } from \"@emotion/react\";\r\n// locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography, Grid } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// forms\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// component\r\nimport { RHFTextField } from \"../../../components/hook-form\";\r\nimport FormProvider from \"../../../components/hook-form/FormProvider\";\r\n// redux\r\nimport { dispatch, useDispatch, useSelector } from \"../../../redux/store\";\r\n// Service\r\nimport { addInquiry } from \"../../../redux/services/employee_facility_service\";\r\n// -------------------------------------------------------------------------------\r\n\r\n// ----------- Styles --------------\r\nconst firstGridStyle = {\r\n  p: {\r\n    xs: \"46px 35px 77px 35px\",\r\n    md: \"46px 40px 77px 40px\",\r\n    lg: \"46px 68px 77px 57px\",\r\n  },\r\n  boxShadow: \"0px 3.53623px 8.84058px rgba(0, 0, 0, 0.05)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n};\r\n\r\nconst secondGridStyle = {\r\n  paddingTop: \"47px\",\r\n  paddingRight: \"27px\",\r\n  paddingBottom: { lg: \"120px\", xs: \"40px\", sm: \"120px\" },\r\n  paddingLeft: \"48px\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFCC63\",\r\n};\r\n\r\nconst addInquiryStyle = {\r\n  fontWeight: \"600\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"14px\",\r\n  color: \"#535353\",\r\n  paddingBottom: \"24px\",\r\n};\r\n\r\nconst contentStyle = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"21px\",\r\n  color: \"#BCBCBC\",\r\n  paddingBottom: \"40px\",\r\n  overflowWrap: \"break-word\",\r\n};\r\n\r\nconst lableStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"10px\",\r\n  lineHeight: \"14px\",\r\n  color: \"#121212\",\r\n  paddingBottom: \"8px\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  borderRadius: \"7.07246px\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"12px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      color: \" #D8D8D8\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst secondLableStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"10px\",\r\n  lineHeight: \"14px\",\r\n  color: \"#121212\",\r\n  paddingBottom: \"8px\",\r\n  paddingTop: \"24px\",\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  marginTop: \"40px\",\r\n  width: \"100%\",\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) => (theme.palette.mode === \"light\" ? \"#FFFFFF\" : \"grey.800\"),\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  height: \"42px\",\r\n  fontSize: \"14.1449px\",\r\n  fontWeight: 600,\r\n  lineHeight: \"21px\",\r\n  borderRadius: \"7.07246px\",\r\n};\r\n\r\nconst contactInformationStyle = {\r\n  fontWeight: \"700\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"14px\",\r\n  color: \"#FFFFFF\",\r\n  paddingBottom: \"50px\",\r\n};\r\n\r\nconst locationIconStyle = {\r\n  width: \"21.22px\",\r\n  height: \"21.22px\",\r\n  marginTop: \"4px\",\r\n};\r\n\r\nconst callIconStyle = {\r\n  width: \"21.22px\",\r\n  height: \"21.22px\",\r\n  marginTop: \"4px\",\r\n};\r\n\r\nconst messageIconStyle = {\r\n  width: \"21.22px\",\r\n  height: \"21.22px\",\r\n};\r\n\r\nconst informationStyle = {\r\n  fontWeight: \"700\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n  color: \"#FFFFFF\",\r\n  textDecorationLine: \"underline\",\r\n  paddingBottom: \"8px\",\r\n  paddingLeft: \"17px\",\r\n};\r\n\r\nconst information2Style = {\r\n  fontWeight: \"700\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n  color: \"#FFFFFF\",\r\n  textDecorationLine: \"underline\",\r\n  paddingLeft: \"17px\",\r\n};\r\n\r\nconst faceBookIconStyle = {\r\n  width: \"33.16px\",\r\n  height: \"33.07px\",\r\n  // marginRight: \"6px\",\r\n};\r\n\r\nconst instagramIconStyle = {\r\n  width: \"33.16px\",\r\n  height: \"33.07px\",\r\n  marginRight: \"6px\",\r\n  marginLeft: \"6px\",\r\n};\r\n\r\nconst twitterIconStyle = {\r\n  width: \"33.16px\",\r\n  height: \"33.07px\",\r\n};\r\n\r\nconst boxStyle = {\r\n  display: \"flex\",\r\n};\r\n\r\nconst columBoxStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n};\r\n\r\nexport default function SendInquiry() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isAdded, isLoadingAddInquiry } = useSelector(\r\n    (state) => state.employeeFacility\r\n  );\r\n  const { translate } = useLocales();\r\n\r\n  const theme = useTheme();\r\n\r\n  const ContactUsSchema = Yup.object().shape({\r\n    subject: Yup.string().required(translate(\"subject_is_required\")),\r\n    details: Yup.string().required(translate(\"details_is_required\")),\r\n  });\r\n\r\n  const defaultValues = {\r\n    subject: \"\",\r\n    details: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ContactUsSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data, event) => {\r\n    console.log(data);\r\n    console.log(event);\r\n    try {\r\n      //\r\n      dispatch(addInquiry(data))\r\n        .unwrap()\r\n        .then((_) => alert(\"You Added questions Successfuly !!\"))\r\n        .catch((_) => alert(\"Failed  !! \"));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  // --------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {/* ***************** Left Side **************** */}\r\n        <Grid item xs={12} sm={12} md={7} lg={8}>\r\n          <Box sx={firstGridStyle}>\r\n            <Typography sx={addInquiryStyle}>\r\n              {translate(\"add_inquiry\")}\r\n            </Typography>\r\n\r\n            <Typography sx={contentStyle}>\r\n              {translate(\r\n                \"send_us_your_question_now_and_we_will_get_back_to_you_as_soon_as_possible\"\r\n              )}\r\n            </Typography>\r\n\r\n            <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n              <Typography sx={lableStyle}>{translate(\"subject\")}</Typography>\r\n              <RHFTextField\r\n                name=\"subject\"\r\n                type=\"text\"\r\n                placeholder={translate(\"enter_question_title\")}\r\n                inputProps={{\r\n                  sx: {\r\n                    \"&::placeholder\": {\r\n                      textAlign: \"left\",\r\n                      color: \"#D8D8D8\",\r\n                      fontWeight: \"300\",\r\n                      fontSize: \"10px\",\r\n                      lineHeight: \"14px\",\r\n                    },\r\n                  },\r\n                }}\r\n                sx={{ ...txtFieldBorderStyle }}\r\n              />\r\n\r\n              <Typography sx={secondLableStyle}>\r\n                {translate(\"details\")}\r\n              </Typography>\r\n\r\n              <RHFTextField\r\n                multiline\r\n                rows={3}\r\n                name=\"details\"\r\n                type=\"text\"\r\n                placeholder={translate(\"type_your_question_here\")}\r\n                inputProps={{\r\n                  sx: {\r\n                    \"&::placeholder\": {\r\n                      textAlign: \"left\",\r\n                      color: \"#D8D8D8\",\r\n                      fontWeight: \"300\",\r\n                      fontSize: \"10px\",\r\n                      lineHeight: \"14px\",\r\n                    },\r\n                  },\r\n                }}\r\n                sx={{ ...txtFieldBorderStyle }}\r\n              />\r\n\r\n              <LoadingButton\r\n                color=\"inherit\"\r\n                size=\"large\"\r\n                type=\"submit\"\r\n                variant=\"Contained\"\r\n                loading={isLoadingAddInquiry}\r\n                sx={loadingButtonStyle}\r\n              >\r\n                {translate(\"send\")}\r\n              </LoadingButton>\r\n            </FormProvider>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* ***************** right Side **************** */}\r\n        <Grid item xs={12} sm={12} md={5} lg={4}>\r\n          <Box sx={secondGridStyle}>\r\n            <Typography sx={contactInformationStyle}>\r\n              {translate(\"contact_information\")}\r\n            </Typography>\r\n\r\n            <Box sx={{ ...boxStyle, marginBottom: \"32px\" }}>\r\n              <Box sx={columBoxStyle}>\r\n                <img\r\n                  src=\"/assets/icons/employee/location.svg\"\r\n                  alt=\"\"\r\n                  style={locationIconStyle}\r\n                />\r\n              </Box>\r\n\r\n              <Box sx={columBoxStyle}>\r\n                <Typography sx={informationStyle}>\r\n                  {translate(\"Building 5, Dubai, UAE\")}\r\n                </Typography>\r\n                <Typography sx={information2Style}>\r\n                  {translate(\"Building 8, Riyadh , Saudi Arabia\")}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n            <Box sx={{ ...boxStyle, marginBottom: \"33px\" }}>\r\n              <Box sx={columBoxStyle}>\r\n                <img\r\n                  src=\"/assets/icons/employee/call.svg\"\r\n                  alt=\"\"\r\n                  style={callIconStyle}\r\n                />\r\n              </Box>\r\n\r\n              <Box sx={columBoxStyle}>\r\n                <Typography sx={informationStyle}>\r\n                  {translate(\"+971 236 582 25\")}\r\n                </Typography>\r\n                <Typography sx={information2Style}>\r\n                  {translate(\"+971 236 65 566\")}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n            <Box sx={{ ...boxStyle, marginBottom: \"29px\" }}>\r\n              <Box sx={columBoxStyle}>\r\n                <img\r\n                  src=\"/assets/icons/employee/message.svg\"\r\n                  alt=\"\"\r\n                  style={messageIconStyle}\r\n                />\r\n              </Box>\r\n\r\n              <Box sx={columBoxStyle}>\r\n                <Typography sx={informationStyle}>\r\n                  {translate(\"DNNDON@Gmail.com\")}\r\n                </Typography>\r\n                <Typography sx={information2Style}>\r\n                  {translate(\"DNNDONSupport@Gmail.com\")}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n\r\n            {/* ********* Icons ***********/}\r\n            <Box display=\"flex\" justifyContent=\"center\">\r\n              <img\r\n                src=\"/assets/icons/employee/facebook.svg\"\r\n                alt=\"\"\r\n                style={faceBookIconStyle}\r\n              />\r\n              <img\r\n                src=\"/assets/icons/employee/instagram.svg\"\r\n                alt=\"\"\r\n                style={instagramIconStyle}\r\n              />\r\n              <img\r\n                src=\"/assets/icons/employee/twitter.svg\"\r\n                alt=\"\"\r\n                style={twitterIconStyle}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\EditConfirmDialog.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\ConfirmDialog.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\profilePages\\ProtectionSection.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\spinner\\Spinner.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\profilePages\\ProfileInformationSection.js",["3230","3231","3232","3233","3234"],[],"import React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Grid, Typography, Stack } from \"@mui/material\";\r\n// components\r\nimport PaymentCard from \"./details/PaymentCard\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTheme } from \"@emotion/react\";\r\n\r\n// ------------------------------------------------------------------\r\n\r\n// -------------- Styles -----------\r\nconst mainHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"25px\",\r\n  p: \"40px\",\r\n};\r\n\r\nconst titleHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst subMainTextSx = {\r\n  fontWeight: 500,\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst infoTextSx = {\r\n  ...subMainTextSx,\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst linkTextSx = {\r\n  fontWeight: 400,\r\n  fontSize: \"14px\",\r\n  letterSpacing: \".3px\",\r\n  lineHeight: \"24px\",\r\n  color: \"#535353\",\r\n  cursor: \"pointer\",\r\n  transition: \".3s\",\r\n  \":hover\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst highLightTextSx = {\r\n  fontWeight: 500,\r\n  fontSize: \"12px\",\r\n  lineHeight: \"16px\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst boldTextSx = {\r\n  fontWeight: 600,\r\n  fontSize: \"11px\",\r\n  lineHeight: \"16px\",\r\n  color: \"#121212\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\n// data\r\nconst paymentCards = [\r\n  {\r\n    imgUrl: \"/assets/images/dashboard/masterCard.svg\",\r\n    cardNumber: \"xxx-5485\",\r\n    expireDate: \"03/22\",\r\n  },\r\n  {\r\n    imgUrl: \"/assets/images/dashboard/visa.svg\",\r\n    cardNumber: \"xxx-5485\",\r\n    expireDate: \"03/22\",\r\n  },\r\n  {\r\n    imgUrl: \"/assets/images/dashboard/paypal.svg\",\r\n    cardNumber: \"xxx-5485\",\r\n    expireDate: \"03/22\",\r\n  },\r\n];\r\n\r\nexport default function ProfileInformationSection({ personalInfo }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const theme = useTheme();\r\n\r\n  // ---------- JSX Code ---------\r\n  return (\r\n    <>\r\n      <Grid container columnSpacing={{ sm: \"20px\", md: \"40px\" }}>\r\n        {/* ********** Profile Information Section ***********  */}\r\n        <Grid item xs={12} sm={6} md={7}>\r\n          <Box sx={{ ...mainHolderSx }}>\r\n            {/* --- profile title and edit Action --- */}\r\n            <Stack sx={{ ...titleHolderSx, mb: \"24px\" }}>\r\n              <Typography variant=\"h5\" color=\"#121212\">\r\n                {translate(`profile_information`)}\r\n              </Typography>\r\n\r\n              <Typography\r\n                sx={{\r\n                  ...highLightTextSx,\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => navigate(`edit-profile-info`)}\r\n              >\r\n                {translate(`edit`)}\r\n              </Typography>\r\n            </Stack>\r\n\r\n            {/* --- information Content Holder --- */}\r\n            <Grid container mb=\"24px\">\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Stack direction=\"row\" mb=\"16px\">\r\n                  <Typography sx={{ ...subMainTextSx }}>\r\n                    {translate(`full_name`)}\r\n                  </Typography>\r\n                  <Typography sx={{ ...infoTextSx }}>\r\n                    {/* : Mahmoud Sabri */}:{\" \"}\r\n                    {`${personalInfo?.firstName} ${personalInfo?.lastName}`}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" mb=\"16px\">\r\n                  <Typography sx={{ ...subMainTextSx }}>\r\n                    {translate(`mobile1`)}\r\n                  </Typography>\r\n                  <Typography sx={{ ...infoTextSx }}>\r\n                    {/* : (44) 123 1234 123 */}: {personalInfo?.phoneNumber}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" mb=\"16px\">\r\n                  <Typography sx={{ ...subMainTextSx }}>\r\n                    {translate(`date_of_birth`)}\r\n                  </Typography>\r\n                  <Typography sx={{ ...infoTextSx }}>\r\n                    {/* : 20 / 11 /1991 */}:{\" \"}\r\n                    {personalInfo?.dateOfBirth &&\r\n                      handleDateOfBirth(personalInfo?.dateOfBirth)}\r\n                  </Typography>\r\n                </Stack>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={12} md={6}>\r\n                <Stack direction=\"row\" mb=\"16px\">\r\n                  <Typography sx={{ ...subMainTextSx }}>\r\n                    {translate(`address`)}\r\n                  </Typography>\r\n                  <Typography sx={{ ...infoTextSx }}>\r\n                    {/* : 5 salem st ,Dubai */}: {personalInfo?.addressName}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" mb=\"16px\">\r\n                  <Typography sx={{ ...subMainTextSx }}>\r\n                    {translate(`email`)}\r\n                  </Typography>\r\n                  <Typography sx={{ ...infoTextSx }}>\r\n                    {/* : alecthompson@gmail.com */}: {personalInfo?.email}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" mb=\"16px\">\r\n                  <Typography sx={{ ...subMainTextSx }}>\r\n                    {translate(`gender`)}\r\n                  </Typography>\r\n                  <Typography sx={{ ...infoTextSx }}>\r\n                    {/* :  {translate(`male`)} */}:{\" \"}\r\n                    {personalInfo?.gender === 0\r\n                      ? translate(`male`)\r\n                      : translate(`female`)}\r\n                  </Typography>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* --- change Information Links --- */}\r\n            <Box>\r\n              {/* Change email Link */}\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                mb=\"16px\"\r\n                onClick={() => navigate(\"change-email\")}\r\n              >\r\n                <Typography sx={{ ...linkTextSx, mr: \"16px\" }}>\r\n                  {translate(`change_email`)}\r\n                </Typography>\r\n                <img\r\n                  src=\"/assets/icons/dashboard/ic_orangeArrow.svg\"\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"8px\",\r\n                    height: \"14px\",\r\n                    transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                  }}\r\n                />\r\n              </Stack>\r\n\r\n              {/* Change phone number Link */}\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                mb=\"16px\"\r\n                onClick={() => navigate(\"change-phone\")}\r\n              >\r\n                <Typography sx={{ ...linkTextSx, mr: \"16px\" }}>\r\n                  {translate(`change_phone_number`)}\r\n                </Typography>\r\n                <img\r\n                  src=\"/assets/icons/dashboard/ic_orangeArrow.svg\"\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"8px\",\r\n                    height: \"14px\",\r\n                    transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                  }}\r\n                />\r\n              </Stack>\r\n\r\n              {/* Change password Link */}\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                mb=\"16px\"\r\n                onClick={() => navigate(\"change-password\")}\r\n              >\r\n                <Typography sx={{ ...linkTextSx, mr: \"16px\" }}>\r\n                  {translate(`change_password`)}\r\n                </Typography>\r\n                <img\r\n                  src=\"/assets/icons/dashboard/ic_orangeArrow.svg\"\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"8px\",\r\n                    height: \"14px\",\r\n                    transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* *********** profile Payment information **********  */}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\n// -------------------------------\r\n//\r\n// function handleDateOfBirth(date) {\r\n//     let  result = date.split('T')[0]\r\n//     return result;\r\n// }\r\nfunction handleDateOfBirth(date) {\r\n  let result = date.split(\"T\")[0];\r\n  return result;\r\n}\r\n\r\n// handleDateOfBirth(\"1995-04-05T00:00:00\")\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\HighestIncomBranch.js",["3235","3236","3237","3238"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as URLS from \"../../urls\";\r\n// services\r\nimport {\r\n  getHighestBranchesSales,\r\n  getHighestRestaurentsBranchesSales,\r\n} from \"../../redux/services/performance_service\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  paddingTop: \"25px\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n  position: \"absolute\",\r\n  bottom: '25px',\r\n  left:'0px',\r\n  width:'100%'\r\n};\r\n\r\nexport default function HighestIncomBranch() {\r\n  const diapatch = useDispatch();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n\r\n    diapatch(\r\n      getHighestRestaurentsBranchesSales({\r\n        pageNumber: 1,\r\n      })\r\n    );\r\n    //onRowsPerPageChange(event);\r\n  };\r\n\r\n  const handlePaginate = (e) => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      diapatch(\r\n        getHighestRestaurentsBranchesSales({\r\n          pageNumber: e.target.innerText,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      diapatch(\r\n        getHighestBranchesSales({\r\n          pageNumber: e.target.innerText,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n\r\n        <Pagination\r\n          sx={{\r\n            \"& .MuiPagination-ul\": { justifyContent: \"center\" },\r\n          }}\r\n          onChange={(e) => handlePaginate(e)}\r\n          count={5}\r\n          color=\"primary\"\r\n          renderItem={(item) => (\r\n            <PaginationItem\r\n              slots={{\r\n                previous: KeyboardDoubleArrowLeftIcon,\r\n                next: KeyboardDoubleArrowRightIcon,\r\n              }}\r\n              {...item}\r\n            />\r\n          )}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\LocationModal.js",["3239","3240","3241","3242","3243","3244","3245","3246","3247","3248","3249","3250","3251"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n//mui\r\nimport { Box, Typography, Modal, Button, TextField } from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport { useDispatch, useSelector } from \"../../redux/store\";\r\nimport { setLatAndLong } from \"../../redux/slices/authentication\";\r\nimport LocationSearch from \"./LocationSearch\";\r\n\r\n// -----------------------------------------------------------------------------\r\n\r\n// -------- Modal Style -------\r\nconst modalSx = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"95%\", lg: \"600px\" },\r\n  bgcolor: \"#ffffff\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  p: { xs: \"44px 25px 59px 20px\", md: \"40px\" },\r\n  maxHeight: \"552px\",\r\n  overflowY: \"auto!important\",\r\n  scrollbarWidth: \"none\",\r\n};\r\n\r\n// ---- Style ---\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst transparentBorderTxtField = {\r\n  alignItem: \"center\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#535353\",\r\n    p: \"0px!important\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#121212\",\r\n    fontWeight: 500,\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    alignItems: \"baseline\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent!important\",\r\n    },\r\n  },\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  // minWidth: { xs: '145px', sm: '206px' },\r\n  // boxShadow:\r\n  //     \"0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nexport default function LocationModal({ open, onClose }) {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const mapRef = useRef(null);\r\n\r\n  const [mapReady, setMapReady] = useState(false);\r\n\r\n  const { Latitude, Longitude } = useSelector((state) => state.authentication);\r\n\r\n  const [lat, setLat] = useState(Latitude);\r\n\r\n  const [lng, setLng] = useState(Longitude);\r\n\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  const [currLocation, setCurrLocation] = useState({});\r\n\r\n  const [currLocationJs, setCurrLocationJs] = useState({ Latitude, Longitude });\r\n\r\n  const onGoogleApiLoaded = ({ map, maps }) => {\r\n    mapRef.current = map;\r\n    setMapReady(true);\r\n  };\r\n\r\n  const onMarkerClick = (e, { markerId, lat, lng }) => {\r\n    console.log(\"This is ->\", markerId);\r\n\r\n    // inside the map instance you can call any google maps method\r\n    mapRef.current.setCenter({ lat, lng });\r\n    // rif. https://developers.google.com/maps/documentation/javascript/reference?hl=it\r\n  };\r\n\r\n  const onMapClick = (e) => {\r\n    setMarkers((current) => [\r\n      ...current,\r\n      {\r\n        lat: e.latLng.lat(),\r\n        lng: e.latLng.lng(),\r\n      },\r\n    ]);\r\n  };\r\n  /*\r\n  const getLocation = async () => {\r\n    const location = await axios.get(\"https://ipapi.co/json\");\r\n    setCurrLocation(location.data);\r\n    console.log(\"location address\");\r\n\r\n    console.log(location.data);\r\n  };\r\n\r\n  const getLocationJs = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      const { latitude, longitude } = position.coords;\r\n\r\n      setCurrLocationJs({ latitude, longitude });\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    getLocation();\r\n    getLocationJs();\r\n  }, []);*/\r\n\r\n  // ----------- JSX Code --------------\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={open}\r\n        onClose={onClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...modalSx, overflow: \"hidden\" }}>\r\n          <Typography\r\n            sx={{\r\n              textAlign: \"center\",\r\n              fontSize: \"18px\",\r\n              fontWeight: 400,\r\n              color: \"#535353\",\r\n            }}\r\n          >\r\n            {translate(\"pick_your_location\")}\r\n          </Typography>\r\n\r\n          {/*<h1>Current Location JS</h1>\r\n          <p>Latitude: {currLocationJs.latitude}</p>\r\n          <p>Longitude: {currLocationJs.longitude}</p>\r\n\r\n          <p>City: {currLocation.city}</p>*/}\r\n          <LocationSearch placeholder=\"search_place\" />\r\n\r\n          <div style={{ width: \"100%\", height: \"269px\", marginBottom: \"20px\" }}>\r\n            <>\r\n              {mapReady && (\r\n                <div>Map is ready. See for logs in developer console.</div>\r\n              )}\r\n              <GoogleMapReact\r\n                apiKey=\"AIzaSyAMyIZtIMeZjTu-b2P_xyyZaNBeIv-fkzU\"\r\n                defaultCenter={{ lat: lat, lng: lng }}\r\n                defaultZoom={5}\r\n                //options={mapOptions}\r\n                mapMinHeight=\"100vh\"\r\n                onGoogleApiLoaded={onGoogleApiLoaded}\r\n                onChange={(map) => {\r\n                  console.log(\"Map moved\", map);\r\n                  console.log(\"lat is\", map.center.lat);\r\n                  console.log(\"lon is\", map.center.lng);\r\n                  setLat(map.center.lat);\r\n                  setLng(map.center.lng);\r\n                  setCurrLocationJs({ lat, lng });\r\n                }}\r\n              >\r\n                <img src=\"/assets/icons/arrow/marker_ic.svg\" alt=\"\" />\r\n              </GoogleMapReact>\r\n            </>\r\n          </div>\r\n          <Button\r\n            sx={{\r\n              width: \"100%\",\r\n              borderRadius: \"8px\",\r\n              background: \"#FFCC63\",\r\n              textAlign: \"center\",\r\n              fontSize: \"16px\",\r\n              fontWeight: 600,\r\n              color: \"#FFFFFF\",\r\n              marginTop: \"20px\",\r\n            }}\r\n            onClick={() => {\r\n              dispatch(\r\n                setLatAndLong({\r\n                  Latitude: lat,\r\n                  Longitude: lng,\r\n                })\r\n              );\r\n              onClose();\r\n            }}\r\n          >\r\n            {translate(\"pick_up_location\")}\r\n          </Button>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\finance\\NetBalanceCard.js",["3252","3253","3254","3255"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Button, Typography, Stack } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// redux\r\nimport {\r\n  // dispatch, useDispatch,\r\n  useSelector\r\n} from \"../../../redux/store\";\r\nimport LoadingCards from \"../../loadingSkeleton/LoadingCards\";\r\n// Service\r\n// import { getFacilityWalletBalance } from \"../../../redux/services/finance_service\";\r\n\r\n// -------------------------------------------------------------------------------------------------\r\n\r\n// -------------- Styles ---------------\r\nconst mainHolderSx = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  background: \"#FFFFFF\",\r\n  p: { xs: \"22px 24px\", lg: \"22px 24px\" },\r\n  position: \"relative\",\r\n  height: \"136px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst imgStyle = {\r\n  width: \"31.86px\",\r\n  height: \"31.93px\",\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  color: \"#9DA0A4\",\r\n  mr: \"12px\",\r\n  ml: \"12px\",\r\n};\r\n\r\nconst containdedBtnSx = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  width: \"113px\",\r\n  height: \"41px\",\r\n  borderRadius: \"8px\",\r\n  color: \"#FFFFFF\",\r\n  background: \"#FFCC63\",\r\n};\r\n\r\nconst outLinedBtnSx = {\r\n  ...containdedBtnSx,\r\n  border: \"1px solid #FFCC63\",\r\n  color: \"#FFCC63\",\r\n  background: \"#FFFFFF\",\r\n};\r\n\r\nconst persentTextSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"12px\",\r\n  color: \"#4EE476\",\r\n  mr: \"8px\",\r\n  background: \"rgba(52, 195, 143, 0.180392)\",\r\n  borderRadius: \"3px\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"13px\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nexport default function NetBalanceCard() {\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { isLoadingWalletBalance, walletBalance } = useSelector((state) => state.finance);\r\n\r\n  // -------------- JSX Code -------------------\r\n  return (\r\n    <>\r\n      {!isLoadingWalletBalance ?\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ---- Icon and Title ---- */}\r\n          <Stack>\r\n            <Box display=\"flex\" alignItems=\"center\" mb=\"8px\">\r\n              <img\r\n                src=\"/assets/icons/arrow/camera.svg\"\r\n                alt=\"profile\"\r\n                style={imgStyle}\r\n              />\r\n              <Typography sx={{ ...titleSx }}>\r\n                {translate(\"net_balance\")}\r\n              </Typography>\r\n            </Box>\r\n\r\n            <Typography variant=\"h5\" color=\"#535353\">\r\n              {walletBalance?.currency}{' '}{walletBalance?.adminWalletBalance}\r\n            </Typography>\r\n\r\n\r\n          </Stack>\r\n\r\n          {/* ---- Actions Buttons ---- */}\r\n          <Stack>\r\n            <Button\r\n              onClick={() => navigate(\"withdraw-cash\")}\r\n              sx={{ ...containdedBtnSx, mb: \"16px\" }}\r\n              variant=\"contained\"\r\n            >\r\n              {translate(\"withdraw_cash\")}\r\n            </Button>\r\n            <Button\r\n              onClick={() => navigate(\"transfer-cash\")}\r\n              sx={{ ...outLinedBtnSx }}\r\n              variant=\"outlined\"\r\n            >\r\n              {translate(\"transfer_cash\")}\r\n            </Button>\r\n          </Stack>\r\n        </Box>\r\n        :\r\n        <LoadingCards />\r\n      }\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\profile\\ProfileCard.js",["3256","3257","3258","3259"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// @ Mui\r\nimport { Box, IconButton, Stack, Typography, Avatar } from \"@mui/material\";\r\n// Icons\r\nimport Iconify from \"../../iconify/Iconify\";\r\n// React-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTheme } from \"@emotion/react\";\r\n// redux\r\nimport { dispatch, useDispatch, useSelector } from \"../../../redux/store\";\r\n// Service\r\nimport { getOverView } from \"../../../redux/services/admin_profile_service\";\r\nimport * as URLS from \"../../../urls\";\r\nimport LoadingCards from \"../../loadingSkeleton/LoadingCards\";\r\n// ---------------------------------------------------------------\r\n// ---------------- Style --------------------\r\nconst boxStyle = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  p: \"24px\",\r\n  background: \"#FFFFFF\",\r\n  display: \"flex\",\r\n  position: \"relative\",\r\n  height: \"136px\",\r\n};\r\n\r\nconst avatarStyle = {\r\n  width: \"88px\",\r\n  height: \"88px\",\r\n  borderRadius: \"50%\",\r\n};\r\n\r\nconst middleBoxStyle = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  ml: \"24px\",\r\n};\r\n\r\nconst nameStyle = {\r\n  color: \"#535353\",\r\n  fontSize: \"16x\",\r\n  fontWeight: \"500\",\r\n  lineHeight: \"24px\",\r\n};\r\n\r\nconst titleCardStyle = {\r\n  color: \"#535353\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"400\",\r\n  lineHeight: \"20px\",\r\n};\r\n\r\nconst adminStyle = {\r\n  color: \"#bcbcbc\",\r\n  fontSize: \"14px\",\r\n  fontWeight: \"400\",\r\n  lineHeight: \"20px\",\r\n};\r\n\r\nconst nameRestStyle = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"16px\",\r\n  fontWeight: \"600\",\r\n  lineHeight: \"20px\",\r\n  marginBottom: \"2px\",\r\n};\r\n\r\nconst showProfleStyl = {\r\n  color: \"#9DA0A4\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"400\",\r\n  lineHeight: \"18px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\n\r\nexport default function ProfileCard() {\r\n  // const url = JSON.parse(localStorage.getItem(\"user\")).profilePictureUrl;\r\n  var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n  // const [url, setUrl] =useState('profilePictureUrl');\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const theme = useTheme();\r\n\r\n  const { direction } = theme;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { adminInfo, isLoading } = useSelector((state) => state.adminProfile);\r\n\r\n  useEffect(() => {\r\n    dispatch(getOverView());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n\r\n    !isLoading ?\r\n      <Box sx={boxStyle}>\r\n        <Box>\r\n          <Avatar\r\n            style={avatarStyle}\r\n            src={URLS.baseImageURL + `user/${userInfo?.profilePictureUrl}`}\r\n          />\r\n        </Box>\r\n        <Box sx={middleBoxStyle}>\r\n          <Typography sx={titleCardStyle}>\r\n            {translate(\"welcome_to_ddndon\")}\r\n          </Typography>\r\n          <Typography sx={nameStyle}>\r\n            {adminInfo?.firstName} {\"  \"}\r\n            {adminInfo?.lastName}\r\n          </Typography>\r\n\r\n          <Stack direction=\"row\">\r\n            <Typography sx={adminStyle}>{adminInfo?.role}</Typography>\r\n\r\n            <Typography sx={{ ...nameRestStyle, ml: \"8px\" }}>\r\n              {adminInfo?.name}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          <Box display=\"flex\" alignItems=\"center\" width='fit-content'>\r\n            <Typography\r\n              sx={showProfleStyl}\r\n              onClick={() => navigate(\"/dashboard/profile\")}\r\n            >\r\n              {translate(\"show_profile\")}\r\n            </Typography>\r\n            <img\r\n              src=\"/assets/icons/arrow/arrow.svg\"\r\n              alt=\"Avatar\"\r\n              style={{\r\n                width: \"10px\",\r\n                height: \"11px\",\r\n                marginLeft: \"8px\",\r\n                marginRight: \"8px\",\r\n                transform: direction === \"rtl\" && \"rotate(180deg)\",\r\n                cursor: 'pointer',\r\n              }}\r\n              onClick={() => navigate(\"/dashboard/profile\")}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      :\r\n      <LoadingCards />\r\n\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceListInvoices.js",["3260","3261","3262","3263","3264","3265","3266","3267","3268","3269","3270","3271","3272","3273","3274","3275","3276"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  IconButton,\r\n  CircularProgress,\r\n  Box,\r\n  TextField,\r\n} from \"@mui/material\";\r\n\r\nimport { styled } from \"@mui/material/styles\";\r\n// dummy data\r\nimport { _financeTable } from \"../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\nimport FinanceTableRowInvoice from \"./FinanceTableRowInvoice\";\r\n\r\nimport Image from \"../../../components/image/Image\";\r\nimport moment from \"moment\";\r\n\r\n//Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n//Service\r\nimport { adminInvoices } from \"../../../redux/services/finance_service\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\n\r\nimport CustomCalender from \"../../../components/iconify/CustomCalender\";\r\n// -------------------------------------------------------------------------------------------------------\r\nconst TABLE_HEAD = [\r\n  { id: \"invoice_id\", label: \"invoice_id\", align: \"center\" },\r\n  { id: \"user_name\", label: \"user_name\", align: \"center\" },\r\n  { id: \"request_date\", label: \"request_date\", align: \"left\" },\r\n  { id: \"withdraw_date\", label: \"withdraw_date\", align: \"left\" },\r\n  { id: \"invoice_value\", label: \"invoice_value\", align: \"center\" },\r\n  { id: \"invoice_statue\", label: \"invoice_statue\", align: \"left\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderColor: theme.palette.primary.main,\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 30px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst tilteSx = {\r\n  color: \"#333333\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"30px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst dateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    // padding: '12px 35px'\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\nexport default function FinanceListInvoices() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, error, financeInvoices } = useSelector(\r\n    (state) => state.finance\r\n  );\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [dates, setDates] = useState({\r\n    startDate: \"1990-04-10\",\r\n    endDate: \"1990-04-18\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(financeInvoices);\r\n  }, [financeInvoices]);\r\n\r\n  // ----------------- JSX Code ------------------\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" sx={{ ...tilteSx, mb: \"26px\" }}>\r\n        {translate(`invoices`)}\r\n      </Typography>\r\n\r\n      {/* ********* Table title and actions Row *********** */}\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n        <Stack\r\n          direction=\"row\"\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          mb={{ xs: \"10px\", md: \"0px\" }}\r\n        >\r\n          <>\r\n            <Typography sx={{ ...totalUserSx }}>\r\n              {translate(\"total_invoices\")}:\r\n            </Typography>\r\n\r\n            <Typography sx={{ ...totalUserSx, ml: \"4px\" }}>30</Typography>\r\n          </>\r\n        </Stack>\r\n\r\n        <Stack sx={{ ...subHolderSx }}>\r\n          {/* ---- Date Range ---- */}\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            mr={{ xs: \"0px\", md: \"30px\" }}\r\n          >\r\n            {/* ---- form Date ---- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <DatePicker\r\n                components={{\r\n                  OpenPickerIcon: CustomCalender,\r\n                }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                disableFuture\r\n                inputFormat=\"yyyy-MM-dd\"\r\n                value={dates.startDate}\r\n                onChange={(newValue) => {\r\n                  setDates((prev) => {\r\n                    return {\r\n                      ...prev,\r\n                      startDate: `${newValue.getFullYear()}-${\r\n                        newValue.getMonth() + 1\r\n                      }-${newValue.getDate()}`,\r\n                    };\r\n                  });\r\n                  // dispatch( );\r\n                }}\r\n                renderInput={({ inputRef, inputProps, InputProps }) => (\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    ref={inputRef}\r\n                    {...inputProps}\r\n                  >\r\n                    {InputProps?.endAdornment}\r\n                  </Box>\r\n                )}\r\n              />\r\n\r\n              <Typography sx={{ ...dateTextSx, ml: \"18px\", mr: \"12px\" }}>\r\n                {dates.startDate}\r\n              </Typography>\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n\r\n            {/* ----- to date ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <Typography fontSize=\"12px\" fontWeight={700} color=\"#FFCC63\">\r\n                {translate(`to`)}\r\n              </Typography>\r\n              <DatePicker\r\n                components={{\r\n                  OpenPickerIcon: CustomCalender,\r\n                }}\r\n                componentsProps={{\r\n                  actionBar: {\r\n                    // The actions will be the same between desktop and mobile\r\n                    actions: [\"no\", \"accept\"],\r\n                  },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                disableFuture\r\n                inputFormat=\"yyyy-MM-dd\"\r\n                value={dates.endDate}\r\n                onChange={(newValue) => {\r\n                  setDates((prev) => {\r\n                    return {\r\n                      ...prev,\r\n                      endDate: `${newValue.getFullYear()}-${\r\n                        newValue.getMonth() + 1\r\n                      }-${newValue.getDate()}`,\r\n                    };\r\n                  });\r\n                  // dispatch()\r\n                }}\r\n                renderInput={({ inputRef, inputProps, InputProps }) => (\r\n                  <Box\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    ref={inputRef}\r\n                    {...inputProps}\r\n                  >\r\n                    {InputProps?.endAdornment}\r\n                  </Box>\r\n                )}\r\n              />\r\n\r\n              <Typography sx={{ ...dateTextSx, ml: \"18px\", mr: \"12px\" }}>\r\n                {dates.endDate}\r\n              </Typography>\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n          </Stack>\r\n\r\n          {/* ---- print and export ---- */}\r\n          <Stack\r\n            mt={{ xs: \"15px\", md: \"0px\" }}\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n          >\r\n            {/* ----- Print ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx }}>{translate(\"print\")}</Typography>\r\n            </Stack>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_export.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx }}>{translate(\"export\")}</Typography>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n          <Table size={dense ? \"small\" : \"medium\"} sx={{ ...tableHolderSx }}>\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData?.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData?.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {dataFiltered\r\n                ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => (\r\n                  <FinanceTableRowInvoice\r\n                    key={row.id}\r\n                    // key={index * 2}\r\n                    row={row}\r\n                    selected={selected.includes(row.id)}\r\n                    onSelectRow={() => onSelectRow(row.id)}\r\n                    onDeleteRow={() => handleDeleteRow(row.id)}\r\n                  />\r\n                ))}\r\n\r\n              <TableEmptyRows\r\n                height={denseHeight}\r\n                emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n              />\r\n\r\n              <TableNoData isNotFound={isNotFound} />\r\n            </TableBody>\r\n          </Table>\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <TablePaginationCustomized\r\n          requestName=\"categoryDetails\"\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content={\r\n          <>\r\n            Are you sure want to delete <strong> {selected.length} </strong>{\" \"}\r\n            items?\r\n          </>\r\n        }\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              handleDeleteRows(selected);\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// --------------------------------------------------------------------------------------------------\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\finance\\RatedFinanceCard.js",["3277","3278","3279","3280","3281","3282"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography } from \"@mui/material\";\r\n// redux\r\nimport { dispatch, useDispatch, useSelector } from \"../../../redux/store\";\r\n// Service\r\nimport { getFacilityWalletBalance } from \"../../../redux/services/finance_service\";\r\nimport LoadingCards from \"../../loadingSkeleton/LoadingCards\";\r\n\r\n// -----------------------------------------------------------------\r\n\r\n// ----------- Styles -----------\r\nconst mainHolderSx = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  background: \"#FFFFFF\",\r\n  // p: '22px 24px',\r\n  p: { xs: \"22px 24px\", lg: \"22px 24px 22px 24px\" },\r\n  position: \"relative\",\r\n  height: \"136px\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n};\r\n\r\nconst imgStyle = {\r\n  width: \"31.86px\",\r\n  height: \"31.93px\",\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  color: \"#9DA0A4\",\r\n  mr: \"12px\",\r\n  ml: \"12px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"10px\",\r\n  lineHeight: \"20px\",\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst persentTextSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"12px\",\r\n  color: \"#4EE476\",\r\n  mr: \"8px\",\r\n  background: \"rgba(52, 195, 143, 0.180392)\",\r\n  borderRadius: \"3px\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"13px\",\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nexport default function RatedFinanceCard() {\r\n  const { isLoadingWalletBalance,walletBalance } = useSelector((state) => state.finance);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  // -------------- JSX Code -----------------\r\n  return (\r\n    <>\r\n      {!isLoadingWalletBalance ?\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          <Box display=\"flex\" pb=\"6px\" alignItems=\"center\">\r\n            <img\r\n              src=\"/assets/icons/arrow/camera.svg\"\r\n              alt=\"profile\"\r\n              style={imgStyle}\r\n            />\r\n\r\n            <Typography sx={{ ...titleSx }}>\r\n              {translate(\"total_balance\")}\r\n            </Typography>\r\n\r\n            <Typography sx={{ ...subTitleSx }}>\r\n              {translate(\"with_value_added_tax\")}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Typography variant=\"h5\" color=\"#535353\">\r\n            {walletBalance?.currency}{' '}{walletBalance?.allBranchesBalance}\r\n          </Typography>\r\n\r\n          <Box display=\"flex\" mt=\"3px\" alignItems=\"center\">\r\n            <Typography sx={{ ...smallTextSx }}>\r\n              {translate(\"from_previous_period\")}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      :\r\n        <LoadingCards />\r\n      }\r\n      \r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\performance\\PerformanceChartsSection.js",["3283","3284","3285"],[],"import React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// charts\r\nimport Chart from \"react-apexcharts\";\r\n// mui\r\nimport { Box, FormControl, Grid, MenuItem, Select, Stack, TextField, Typography } from \"@mui/material\";\r\n// section component\r\n// import DountChartCard from '../../@dashboard/branches/details/DountChartCard'\r\nimport DountChartCard2 from \"../../../components/cards/DountChartCard/DountChartCard2\";\r\nimport { dispatch, useSelector } from \"../../../redux/store\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport CustomCalender from \"../../../components/iconify/CustomCalender\";\r\nimport moment from \"moment\";\r\nimport { getMarketReviewsAnalysis, getRestaurantReviewsAnalysis } from \"../../../redux/services/orders_service\";\r\nimport LoadingCharts from \"../../../components/loadingSkeleton/LoadingCharts\";\r\nimport LoadingCards from \"../../../components/loadingSkeleton/LoadingCards\";\r\n// ------------------------------------------------------------------------\r\n\r\n// ----------- Styles --------------\r\nconst mainHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"25px\",\r\n  p: { xs: \"27px 20px 40px 20px\", sm: \"27px 38px 40px 38px \" },\r\n};\r\n\r\nconst holderSx = {\r\n  flexDirection: { xs: \"row\", sm: \"column\" },\r\n  alignItems: \"left\",\r\n  mt: \"36px\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst labelHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"6px\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"8px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  fontWeight: 500,\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"2px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  color: \"#34C38F\",\r\n  lineHeight: \"8px\",\r\n  background: \"rgba(52, 195, 143, 0.180392)\",\r\n};\r\n\r\nconst rateHolderSx = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  p: \"4px 7px\",\r\n  borderRadius: \"10px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  height: \"26px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"12px\",\r\n  height: \"12px\",\r\n};\r\n\r\nconst rateSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst defaulttxtFieldSx = {\r\n  width: \"100%\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n      \"&:hover\": {\r\n        background: \"#fdcd855c\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#BCBCBC\",\r\n    cursor: \"pointer\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"3px\",\r\n    width: \"120px\",\r\n    flexDirection: \"row-reverse\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    // padding: '12px 35px'\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\n\r\n\r\nexport default function PerformanceChartsSection() {\r\n  const { branchId } = useSelector((state) => state.control);\r\n  const {\r\n    isLoadingOrderNumber,\r\n    orderNumber,\r\n    isLoadingReviewNumber,\r\n    ReviewsNumber,\r\n    FacilityReviewsAnalysis,\r\n    isLoadingFacilityReviewsAnalysis\r\n  } = useSelector((state) => state.orders);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  // const currentYear = new Date().getFullYear()\r\n  // const currentDate = `${new Date().getFullYear()}-${new Date().getMonth() + 1}-1`;\r\n\r\n  const previoustDate = `${new Date().getFullYear()}-0${new Date().getMonth()}-01`;\r\n\r\n\r\n  const [selectedDate, setSelectedDate] = useState(previoustDate);\r\n\r\n  const [openDatePicker, setOpenDatePicker] = useState(false);\r\n\r\n  const customFormat = \"YYYY-MM-DD\";\r\n\r\n  const ChangeSelectedDateHandler = (newValue) => {\r\n    setSelectedDate(moment(newValue).format(customFormat))\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n\r\n      dispatch(getRestaurantReviewsAnalysis({\r\n        facilityId: branchId,\r\n        date: moment(newValue).format(customFormat)\r\n      }));\r\n    }\r\n\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketReviewsAnalysis({\r\n        facilityId: branchId,\r\n        date: moment(newValue).format(customFormat)\r\n      }));\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const barChartData = {\r\n    series: [\r\n      {\r\n        name: translate(`on_time`),\r\n        data: FacilityReviewsAnalysis?.goodReviews,\r\n      },\r\n      {\r\n        name: translate(`delay`),\r\n        data: FacilityReviewsAnalysis?.badReviews,\r\n      },\r\n    ],\r\n    categories: [...Array(32)].map((_, index) => index * 1),\r\n  };\r\n\r\n  // option\r\n  const customOption = {\r\n    plotOptions: {\r\n      bar: {\r\n        columnWidth: \"80px\",\r\n      },\r\n    },\r\n    colors: [\"#FFCC63\", \"#535353\"],\r\n    theme: { mode: \"light\" },\r\n    xaxis: {\r\n      tickPlacement: \"on\",\r\n      labels: {\r\n        style: { fontSize: \"12\", colors: \"#BCBCBC\" },\r\n      },\r\n      categories: [...Array(32)].map((_, index) => index + 1 * 1),\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        formatter: (val) => {\r\n          return `${val}`;\r\n        },\r\n        style: { fontSize: \"12\", colors: [\"#BCBCBC\"] },\r\n      },\r\n    },\r\n    legend: {\r\n      show: false,\r\n      position: \"right\",\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n      style: {\r\n        colors: [\"#f4f4f4\"],\r\n        fontSize: 12,\r\n      },\r\n    },\r\n    stroke: {\r\n      colors: [\"transparent\"],\r\n      width: 3,\r\n    },\r\n  };\r\n\r\n  // ------------ JSX Code -------------\r\n  return (\r\n    <Stack>\r\n      {/* ********** Dount Chart Row *********** */}\r\n      <Grid container spacing=\"24px\" mb=\"60px\">\r\n        <Grid item xs={12} sm={6}>\r\n          {!isLoadingOrderNumber ?\r\n            <DountChartCard2\r\n              title=\"total_number_of_orders\"\r\n              data={orderNumber}\r\n            />\r\n            :\r\n            <LoadingCards />\r\n          }\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          {!isLoadingReviewNumber ?\r\n            <DountChartCard2\r\n              title=\"reviews\"\r\n              data={ReviewsNumber}\r\n            />\r\n            :\r\n            <LoadingCards />\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* ******************** Bar Chart Row ******************** */}\r\n      <Grid container sx={{ ...mainHolderSx }}>\r\n        {/* // ****** heading and monthes ****** */}\r\n        <Grid item xs={12} mb=\"14px\">\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Typography sx={{ ...TilteSx }}>{translate(`rating`)}</Typography>\r\n          </Stack>\r\n        </Grid>\r\n\r\n        {\r\n          !isLoadingFacilityReviewsAnalysis ?\r\n            <>\r\n              {/* ******* Summary of Data ******** */}\r\n              <Grid item xs={12} sm={2.5} md={2}>\r\n                <Stack sx={{ ...holderSx }}>\r\n                  {/* *----- Monthes Earning ----- */}\r\n                  <Box mb={{ xs: \"35px\", sm: \"38px\" }}>\r\n                    {/* --- earning this month --- */}\r\n                    <Stack direction=\"row\" alignItems=\"center\">\r\n                      <Typography sx={{ ...subTitleSx }}>\r\n                        {translate(`this_month`)}\r\n                      </Typography>\r\n\r\n                      {/* rate */}\r\n                      <Box\r\n                        sx={{\r\n                          ...rateHolderSx,\r\n                          ml: { xs: \"30px\", md: \"30px\" },\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                          alt=\"star\"\r\n                          style={{ ...startIconSx }}\r\n                        />\r\n                        <Typography sx={{ ...rateSx, ml: \"5px\" }}>\r\n                          {FacilityReviewsAnalysis?.currentMonthRate}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Stack>\r\n\r\n                    {/* change of earning */}\r\n                    <Stack direction=\"row\" alignItems=\"center\" mt=\"12px\" mb=\"18px\">\r\n                      <Typography sx={{ ...changeTextSx }}>+ 0.2 %</Typography>\r\n\r\n                      <Typography ml=\"5px\" sx={{ ...miniTextSx }}>\r\n                        {translate(`from_previous_month`)}\r\n                      </Typography>\r\n                    </Stack>\r\n\r\n                    {/* ---  earning last month ----*/}\r\n                    <Stack direction=\"row\" alignItems=\"center\">\r\n                      <Typography sx={{ ...subTitleSx }}>\r\n                        {/* {translate(`last_month`)} */}\r\n                        {selectedDate}\r\n                      </Typography>\r\n\r\n                      {/* rate */}\r\n                      <Box\r\n                        sx={{\r\n                          ...rateHolderSx,\r\n                          ml: { xs: \"30px\", md: \"30px\" },\r\n                        }}\r\n                      >\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                          alt=\"star\"\r\n                          style={{ ...startIconSx }}\r\n                        />\r\n                        <Typography sx={{ ...rateSx, ml: \"5px\" }}>\r\n                          {FacilityReviewsAnalysis?.selectedMonthRate}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Stack>\r\n                  </Box>\r\n\r\n                  {/* ------ Monthes Earning labels and percentage ------ */}\r\n                  <Box>\r\n                    {/* *** First Month select *** */}\r\n                    <Stack sx={{ ...labelHolderSx }}>\r\n                      <Box display=\"flex\" alignItems=\"center\">\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                          alt=\"\"\r\n                          width=\"12px\"\r\n                        />\r\n                        <Typography sx={{ ...smallTextSx, ml: \"9px\" }}>\r\n                          {translate(`good_reviews`)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Stack>\r\n\r\n                    {/* *** Previous Month Data *** */}\r\n                    <Stack sx={{ ...labelHolderSx }}>\r\n                      <Box display=\"flex\" alignItems=\"center\">\r\n                        <img src=\"/assets/icons/dashboard/ic_darkBox.svg\" alt=\"\" />\r\n                        <Typography sx={{ ...smallTextSx, ml: \"9px\" }}>\r\n                          {translate(`bad_reviews`)}\r\n                        </Typography>\r\n                      </Box>\r\n                    </Stack>\r\n                  </Box>\r\n                </Stack>\r\n              </Grid>\r\n\r\n              {/* ******* Bar Chart ******** */}\r\n              <Grid item xs={12} sm={9.5} md={10}>\r\n                <Stack\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"10px\"\r\n                  pl=\"25px\"\r\n                >\r\n                  <Typography fontSize=\"12px\" color=\"#D8D8D8\">\r\n                    {translate(`rate`)}\r\n                  </Typography>\r\n\r\n                  {/* // *** Month Select *** */}\r\n                  <Box\r\n                    display='flex'\r\n                    alignItems='center'\r\n                    borderRadius='5px'\r\n                  >\r\n\r\n                    <DatePicker\r\n                      fullWidth\r\n                      sx={defaulttxtFieldSx}\r\n                      openTo=\"day\"\r\n                      open={openDatePicker}\r\n                      onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                      onClose={() => setOpenDatePicker(false)}\r\n                      dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                      // inputFormat=\"DD/MM/YYYY\"\r\n                      value={selectedDate}\r\n                      onChange={(newValue) => {\r\n                        ChangeSelectedDateHandler(newValue);\r\n                      }}\r\n                      views={['day', \"month\", \"year\"]}\r\n                      showDaysOutsideCurrentMonth\r\n                      components={{ OpenPickerIcon: CustomCalender }}\r\n                      componentsProps={{\r\n                        actionBar: { actions: [\"accept\"] },\r\n                      }}\r\n                      PopperProps={{\r\n                        sx: defaultPopperSx,\r\n                      }}\r\n                      inputProps={{ readOnly: true }}\r\n                      // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                          sx={{ ...txtFieldBorderStyle }}\r\n                          id=\"dateOfBirth\"\r\n                          {...params}\r\n                        />\r\n                      )}\r\n                    />\r\n\r\n                  </Box>\r\n                </Stack>\r\n\r\n                <Chart\r\n                  type=\"bar\"\r\n                  width=\"102%\"\r\n                  height=\"230px\"\r\n                  series={barChartData.series}\r\n                  options={{ ...customOption }}\r\n                />\r\n\r\n              </Grid>\r\n            </>\r\n            :\r\n            <LoadingCharts />\r\n        }\r\n\r\n      </Grid>\r\n    </Stack>\r\n  );\r\n}\r\n// ---------------------------------------\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\BranchLineChartSection.js",["3286"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// apex Chart\r\nimport Chart from \"react-apexcharts\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  Grid,\r\n  Select,\r\n  Stack,\r\n  MenuItem,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getMarketMonthlyEarnings,\r\n  getResturantMonthlyEarnings,\r\n} from \"../../../redux/services/orders_service\";\r\nimport LoadingCharts from \"../../../components/loadingSkeleton/LoadingCharts\";\r\n// -------------------------------------------------------------------------------------\r\n\r\n// ---------- Styles ----------\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst earnTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#495057\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"4px 8px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  lineHeight: \"8px\",\r\n  color: \"white\",\r\n  background: \"#4EE476\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  p: { xs: \"20px\", sm: \"30px\", md: \"40px\" },\r\n  borderRadius: \"25px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst monthSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#535353\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nexport default function BranchLineChartSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n  const { isLoadingBranchMonthlyEarnings, branchMonthlyEarnings } = useSelector((state) => state.orders);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const currentYear = new Date().getFullYear();\r\n  const currentMonth = new Date().getMonth() + 1; //05\r\n  const previousMonth = new Date().getMonth(); //04\r\n\r\n  const currentDate = `${currentYear}-${currentMonth}-1`;\r\n  const previousDate = `${currentYear}-${previousMonth}-1`;\r\n\r\n  const [firstMonth, setFirstMonth] = useState(`${currentDate}`);\r\n  const [secondMonth, setSecondMonth] = useState(`${previousDate}`);\r\n\r\n  const months = [\r\n    {\r\n      name: \"january\",\r\n      value: `${currentYear}-1-1`,\r\n    },\r\n    {\r\n      name: \"february\",\r\n      value: `${currentYear}-2-1`,\r\n    },\r\n    {\r\n      name: \"march\",\r\n      value: `${currentYear}-3-1`,\r\n    },\r\n    {\r\n      name: \"april\",\r\n      value: `${currentYear}-4-1`,\r\n    },\r\n    {\r\n      name: \"may\",\r\n      value: `${currentYear}-5-1`,\r\n    },\r\n    {\r\n      name: \"june\",\r\n      value: `${currentYear}-6-1`,\r\n    },\r\n    {\r\n      name: \"july\",\r\n      value: `${currentYear}-7-1`,\r\n    },\r\n    {\r\n      name: \"august\",\r\n      value: `${currentYear}-8-1`,\r\n    },\r\n    {\r\n      name: \"september\",\r\n      value: `${currentYear}-9-1`,\r\n    },\r\n    {\r\n      name: \"october\",\r\n      value: `${currentYear}-10-1`,\r\n    },\r\n    {\r\n      name: \"november\",\r\n      value: `${currentYear}-11-1`,\r\n    },\r\n    {\r\n      name: \"december\",\r\n      value: `${currentYear}-12-1`,\r\n    },\r\n  ];\r\n\r\n  const firstDateName = months?.find((e) => e[\"value\"] === firstMonth)[\"name\"];\r\n  const secondDateName = months?.find((e) => e[\"value\"] === secondMonth)[ \"name\"];\r\n\r\n  const LineChartData = [\r\n    {\r\n      name: firstDateName,\r\n      data: branchMonthlyEarnings?.current,\r\n    },\r\n    {\r\n      name: secondDateName,\r\n      data: branchMonthlyEarnings?.previous,\r\n    },\r\n  ];\r\n\r\n  const firstMonthChangeHandler = (event) => {\r\n    setFirstMonth(event.target.value);\r\n  };\r\n\r\n  const secondMonthChangeHandler = (event) => {\r\n    setSecondMonth(event.target.value);\r\n  };\r\n\r\n  const calculateTotalEarnings = (month, restaurantMonthlyEarnings) => {\r\n    if (month === \"previous\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.previous?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n    if (month === \"current\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.current?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n  };\r\n\r\n  let currentMonthEarning = +calculateTotalEarnings(\r\n    \"current\",\r\n    branchMonthlyEarnings\r\n  );\r\n\r\n  let previousMonthEarning = +calculateTotalEarnings(\r\n    \"previous\",\r\n    branchMonthlyEarnings\r\n  );\r\n\r\n  const calDifferenceFromPrev = () => {\r\n    if (previousMonthEarning > 0) {\r\n      let result = +(\r\n        ((currentMonthEarning - previousMonthEarning) / previousMonthEarning) *\r\n        100\r\n      ).toFixed(1);\r\n      return result;\r\n    }\r\n    if (previousMonthEarning === 0 && currentMonthEarning !== 0) {\r\n      return 100;\r\n    }\r\n    if (previousMonthEarning === 0 && previousMonthEarning === 0) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // this is for restaurent\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getResturantMonthlyEarnings({\r\n          resturantId: branchId,\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n    // this is for market\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(\r\n        getMarketMonthlyEarnings({\r\n          marketId: branchId,\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n  }, [dispatch, firstMonth, secondMonth, branchId]);\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <Box>\r\n      {/* **********  Line Chart Data Section *********** */}\r\n      <Box sx={{ ...contentHolderSx }}>\r\n        <Grid container>\r\n          <Grid item xs={12} mb=\"14px\">\r\n            <Stack\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-between\"\r\n            >\r\n              <Typography sx={{ ...TilteSx }}>\r\n                {translate(`earning`)}\r\n              </Typography>\r\n            </Stack>\r\n          </Grid>\r\n\r\n          {\r\n            !isLoadingBranchMonthlyEarnings ?\r\n              <>\r\n                {/***** Monthes  Data *****/}\r\n                <Grid item xs={12} md={2}>\r\n                  {/* **** Earning monthes data **** */}\r\n                  <Stack\r\n                    direction={{ xs: \"row\", md: \"column\" }}\r\n                    alignItems=\"left\"\r\n                    mt={{ xs: \"35px\", lg: \"49px\" }}\r\n                    justifyContent=\"space-between\"\r\n                  >\r\n                    {/* *----- Monthes Earning ----- */}\r\n                    <Box mb={{ xs: \"35px\", lg: \"50px\" }}>\r\n                      {/* --- earning this month --- */}\r\n                      <Stack direction=\"row\" alignItems=\"center\">\r\n                        <Typography sx={{ ...subTitleSx }}>\r\n                          {translate(firstDateName)}\r\n                        </Typography>\r\n\r\n                        <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                          {branchMonthlyEarnings?.currency}{\" \"}\r\n                          {calculateTotalEarnings(\"current\", branchMonthlyEarnings)}\r\n                        </Typography>\r\n                      </Stack>\r\n\r\n                      {/* change of earning */}\r\n                      <Stack direction=\"row\" alignItems=\"center\" mt=\"14px\" mb=\"26px\">\r\n                        <Typography sx={{ ...changeTextSx }}>\r\n                          {calDifferenceFromPrev()} %\r\n                        </Typography>\r\n\r\n                        <Typography ml=\"5px\" sx={{ ...miniTextSx }}>\r\n                          {translate(`from_previous_month`)}\r\n                        </Typography>\r\n                      </Stack>\r\n\r\n                      {/* ---  earning last month ----*/}\r\n                      <Stack direction=\"row\" alignItems=\"center\">\r\n                        <Typography sx={{ ...subTitleSx }}>\r\n                          {/* {translate(`last_month`)} */}\r\n                          {translate(secondDateName)}\r\n                        </Typography>\r\n\r\n                        <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                          {branchMonthlyEarnings?.currency}{\" \"}\r\n                          {calculateTotalEarnings(\"previous\", branchMonthlyEarnings)}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Box>\r\n\r\n                    {/* ------ Monthes Earning labels and percentage ------ */}\r\n                    <Box>\r\n                      {/* *** First Month select *** */}\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                      >\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                          <FormControl sx={{ ...monthSelectSx }}>\r\n                            <Select\r\n                              IconComponent={(props) => (\r\n                                <ArrowDropDownIcon {...props} />\r\n                              )}\r\n                              value={firstMonth}\r\n                              onChange={firstMonthChangeHandler}\r\n                              displayEmpty\r\n                              inputProps={{ \"aria-label\": \"Without label\" }}\r\n                            >\r\n                              {months.map((month, index) => (\r\n                                <MenuItem\r\n                                  sx={{ ...titleStyle }}\r\n                                  value={month[\"value\"]}\r\n                                  id={month[\"name\"]}\r\n                                  key={index}\r\n                                >\r\n                                  {translate(`${month[\"name\"]}`)}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Box>\r\n                      </Stack>\r\n\r\n                      {/* *** Second Month Data *** */}\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                      >\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_purpleBox.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                          <FormControl sx={{ ...monthSelectSx }}>\r\n                            <Select\r\n                              IconComponent={(props) => (\r\n                                <ArrowDropDownIcon {...props} />\r\n                              )}\r\n                              value={secondMonth}\r\n                              onChange={secondMonthChangeHandler}\r\n                              displayEmpty\r\n                              inputProps={{ \"aria-label\": \"Without label\" }}\r\n                            >\r\n                              {months.map((month, index) => (\r\n                                <MenuItem\r\n                                  sx={{ ...titleStyle }}\r\n                                  value={month[\"value\"]}\r\n                                  key={index}\r\n                                >\r\n                                  {translate(`${month[\"name\"]}`)}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Box>\r\n                      </Stack>\r\n                    </Box>\r\n                  </Stack>\r\n                </Grid>\r\n\r\n                {/***** Line Chart data *****/}\r\n                <Grid item xs={12} md={10}>\r\n                  <Chart\r\n                    type=\"line\"\r\n                    width=\"102%\"\r\n                    height=\"300px\"\r\n                    series={LineChartData}\r\n                    options={{ ...customOption }}\r\n                  />\r\n                </Grid>\r\n              </>\r\n              :\r\n              <LoadingCharts />\r\n          }\r\n\r\n\r\n\r\n\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n// Customization on  line Chart\r\nconst customOption = {\r\n  // title: { text: \"Product sell in 2021\" },\r\n  xaxis: {\r\n    // title: { text: \"Product Sell in Months\" },\r\n    categories: [...Array(31).keys()].map((e) => e + 1),\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: \"#BCBCBC\",\r\n        fontSize: \"16px\",\r\n        fontWeight: 400,\r\n        cssClass: \"apexcharts-xaxis-label\",\r\n      },\r\n    },\r\n  },\r\n  yaxis: {\r\n    // title: { text: translate('earning')  },\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: \"#BCBCBC\",\r\n        fontSize: \"16px\",\r\n        fontWeight: 400,\r\n        cssClass: \"apexcharts-xaxis-label\",\r\n      },\r\n    },\r\n  },\r\n  stroke: {\r\n    curve: \"smooth\",\r\n    width: 3,\r\n  },\r\n  colors: [\"#FFCC63\", \"#BB85FF\"],\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  legend: {\r\n    show: false,\r\n  },\r\n};\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\AdminCard.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loading-screen\\LoadingScreen.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\MealsAndReviewsSection.js",["3287","3288","3289","3290","3291","3292","3293","3294","3295","3296","3297","3298","3299","3300"],[],"import React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport { useTheme } from \"@emotion/react\";\r\n// mui\r\nimport {\r\n  Box,\r\n  Divider,\r\n  FormControl,\r\n  Grid,\r\n  MenuItem,\r\n  Pagination,\r\n  PaginationItem,\r\n  Select,\r\n  Stack,\r\n  Typography,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// component\r\nimport SellingMealsCard from \"./details/SellingMealsCard\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"../../../redux/store\";\r\nimport Spinner from \"../../../components/spinner/Spinner\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\nimport RecentReviewsPagination from \"../../../components/pagination/RecentReviewsPagination\";\r\nimport MostSellingPagination from \"../../../components/pagination/MostSellingPagination\";\r\nimport LoadingVertical from \"../../../components/loadingSkeleton/LoadingVertical\";\r\n\r\n// ---------------------------------------------------------------\r\n\r\n// ---------- Styles -------------\r\nconst mainHolderSx = {\r\n  p: \"40px 30px\",\r\n  boxShadow: \"1.80272px 1.80272px 9.0136px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n  justifyContent: \"space-between\",\r\n  position: \"relative\",\r\n  height: \"400px\",\r\n  // minHeight: \"480px\",\r\n};\r\n\r\nconst titleHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"22px\",\r\n};\r\n\r\nconst mainTitleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"20px\",\r\n  marginRight: \"7px\",\r\n  textDecoration: \"underline\",\r\n};\r\n\r\nconst iconSx = {\r\n  width: \"5.26px\",\r\n  height: \"10.52px\",\r\n  margin: \"auto\",\r\n};\r\n\r\nconst reviewsHolder = {\r\n  background: \"#fff\",\r\n  borderRadius: \"16px\",\r\n  p: \"40px 40px\",\r\n  minHeight: \"400px\",\r\n  boxShadow: \"1.80272px 1.80272px 9.0136px rgba(0, 0, 0, 0.1)\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst reveiwTextSx = {\r\n  color: \"#535353\",\r\n  opacity: \".6\",\r\n  letterSpacing: \".5px\",\r\n  fontSize: \"16px\",\r\n};\r\n\r\nconst rateHolderSx = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  p: \"4px 7px\",\r\n  borderRadius: \"10px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  height: \"26px\",\r\n};\r\n\r\nconst rateNumberSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"12px\",\r\n  paddingLeft: \"5px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"12px\",\r\n  height: \"12px\",\r\n};\r\n\r\nconst nameTextSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 400,\r\n  color: \"#121212\",\r\n  letterSpacing: \".3px\",\r\n};\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\nconst avatarStyle = {\r\n  width: \"35px\",\r\n  height: \"35px\",\r\n  borderRadius: \"50%\",\r\n};\r\nexport default function MealsAndReviewsSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    mostSelling,\r\n    isLoadingmostSelling,\r\n    resturantReview,\r\n    isLoadingresturantReview,\r\n  } = useSelector((state) => state.orders);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const classes = useStyles();\r\n\r\n  const theme = useTheme();\r\n\r\n  const [rows, setRows] = useState(4);\r\n\r\n  const [reviewRows, setReviewRows] = useState(4);\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <Grid container spacing=\"24px\">\r\n      {/* ************** Start Highest inComing branches Section ***********  */}\r\n      {/* { */}\r\n\r\n      <Grid item xs={12} sm={12} md={6}>\r\n        <Box sx={{ ...mainHolderSx }}>\r\n          {/* ----- main Tilte of Highest incoming of branches ------ */}\r\n          <Stack sx={{ ...titleHolderSx }}>\r\n            <Typography sx={{ ...mainTitleSx }}>\r\n              {translate(\"the_highest_selling_meals\")}\r\n            </Typography>\r\n          </Stack>\r\n\r\n          {/* ----------  Highest Incoming Card of Branches ---------- */}\r\n\r\n          {\r\n            !isLoadingmostSelling ?\r\n              Array.isArray(mostSelling) &&\r\n              mostSelling.map((row, index) => (\r\n                <Box key={index}>\r\n                  <SellingMealsCard row={row} />\r\n                  {index < mostSelling.length - 1 && (\r\n                    <Divider\r\n                      sx={{ width: \"calc(100% + 60px )\", ml: \"-30px\" }}\r\n                    ></Divider>\r\n                  )}\r\n                </Box>\r\n              ))\r\n              :\r\n              <LoadingVertical />\r\n          }\r\n          {/* ------- Start Paginations ----- */}\r\n          <MostSellingPagination />\r\n        </Box>\r\n      </Grid>\r\n\r\n\r\n\r\n      {/* ************** Start Reviews of branches Section ***********  */}\r\n\r\n\r\n      <Grid item xs={12} sm={12} md={6}>\r\n        <Box sx={{ ...reviewsHolder }}>\r\n          {/* ********** Title ********* */}\r\n          <Stack sx={{ ...titleHolderSx, px: \"0px\" }}>\r\n            <Typography fontSize=\"16px\" fontWeight=\"600\" color=\"#535353\">\r\n              {translate(`recent_reviews`)}\r\n            </Typography>\r\n\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <Typography sx={{ ...highLightTextSx, cursor: \"pointer\" }}>\r\n                {translate(`view_all`)}\r\n              </Typography>\r\n              <img\r\n                src=\"/assets/icons/dashboard/ic_orangeArrow.svg\"\r\n                alt=\"arrow\"\r\n                style={{\r\n                  ...iconSx,\r\n                  transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                }}\r\n              />\r\n            </Box>\r\n          </Stack>\r\n\r\n          {\r\n            !isLoadingresturantReview ?\r\n              resturantReview?.map((review, index) => (\r\n                <Box mb=\"32px\" key={index}>\r\n                  <Stack\r\n                    direction=\"row\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"center\"\r\n                    mb=\"8px\"\r\n                  >\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <Avatar\r\n                        style={avatarStyle}\r\n                        src={`${URLS.baseImageURL}user/${review?.profilePictureUrl}`}\r\n                        alt=\"\"\r\n                      />\r\n\r\n                      <Typography ml=\"8px\" sx={{ ...nameTextSx }}>\r\n                        {review?.userName}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                  <Box sx={{ ...rateHolderSx }}>\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                      alt=\"star\"\r\n                      style={{ ...startIconSx }}\r\n                    />\r\n                    <Typography sx={{ ...rateNumberSx }}>\r\n                      {review?.starsCount}\r\n                    </Typography>\r\n                  </Box>\r\n                </Stack>\r\n\r\n                  <Typography sx={{ ...reveiwTextSx }}>\r\n                    {review?.comment}\r\n                  </Typography>\r\n                </Box>\r\n              ))\r\n              :\r\n              <LoadingVertical />\r\n          }\r\n          <RecentReviewsPagination />\r\n        </Box>\r\n      </Grid>\r\n      :\r\n      <LoadingVertical />\r\n\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\PendingOrdersList.js",["3301","3302","3303","3304","3305","3306","3307","3308","3309","3310"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  CircularProgress,\r\n  Box,\r\n} from \"@mui/material\";\r\n\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  // TableHeadCustom,\r\n  TableSelectedAction,\r\n  TableHeadCustom,\r\n} from \"../../../components/table\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport PendingOrdersRow from \"./details/PendingOrdersTableRow\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// pagination\r\nimport OrdersPendingPagination from \"../../../components/pagination/OrdersPendingPagination\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"order_number\", label: \"order_number\", align: \"center\" },\r\n  { id: \"order_time\", label: \"order_time\", align: \"center\" },\r\n  { id: \"order_location\", label: \"order_location\", align: \"center\" },\r\n  { id: \"meals\", label: \"meals\", align: \"center\" },\r\n  { id: \"price\", label: \"price\", align: \"center\" },\r\n  { id: \"delivery_name\", label: \"delivery_name\", align: \"center\" },\r\n  { id: \"order_status\", label: \"order_status\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"center\" },\r\n];\r\n\r\n// ---------- Styles --------------\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderColor: theme.palette.primary.main,\r\n  border: \"1px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#fff\",\r\n  // padding:'0px 24px'\r\n  \"& .MuiTable-root\": {\r\n    padding: \" 0px 24px!important\",\r\n    borderSpacing: \"0px 16px\",\r\n  },\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 30px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nexport default function PendingOrdersList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { pendingOrder, isLoadingPendingOrder } = useSelector(\r\n    (state) => state.orders\r\n  );\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {}, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setTableData(pendingOrder);\r\n  }, [pendingOrder]);\r\n\r\n  // ------------ JSX Code --------------\r\n  return (\r\n    <>\r\n      {/* ***************** Table ***************** */}\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n          <Table size={dense ? \"small\" : \"medium\"} sx={{ ...tableHolderSx }}>\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {!isLoadingPendingOrder ? (\r\n                <>\r\n                  {dataFiltered\r\n                    ?.slice(\r\n                      page * rowsPerPage,\r\n                      page * rowsPerPage + rowsPerPage\r\n                    )\r\n                    .map((row, index) => (\r\n                      <PendingOrdersRow\r\n                        // key={row.id}\r\n                        key={index * 2}\r\n                        row={row}\r\n                        selected={selected.includes(row.orderId)}\r\n                        onSelectRow={() => onSelectRow(row.orderId)}\r\n                        onDeleteRow={() => handleDeleteRow(row.orderId)}\r\n                      />\r\n                    ))}\r\n\r\n                  <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                  />\r\n\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </>\r\n              ) : (\r\n                <LoadingTableRows number={5} cellsNum={10} />\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <OrdersPendingPagination\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content={\r\n          <>\r\n            Are you sure want to delete <strong> {selected.length} </strong>{\" \"}\r\n            items?\r\n          </>\r\n        }\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              handleDeleteRows(selected);\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\DountChartCard\\DountChartCard2.js",["3311","3312"],[],"import React from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography } from \"@mui/material\";\r\n// components\r\nimport { buildStyles } from \"react-circular-progressbar\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\n// import Iconify from \"../../../../components/iconify/Iconify\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\n// ---------------------------------------------------------------\r\n// --------- Style --------\r\nconst cardHolderSx = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  p: \"24px\",\r\n  background: \"#FFFFFF\",\r\n  display: \"flex\",\r\n  position: \"relative\",\r\n  height: \"136px\",\r\n};\r\n\r\nconst chartHolderSx = {\r\n  \"& > svg\": {\r\n    width: \"88px\",\r\n  },\r\n  height: \"87px\",\r\n  width: \"87px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  ml: \"24px\",\r\n  width: \"100%\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst itemHolderSx = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst itemTextSx = {\r\n  color: \"#535353\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  paddingLeft: \"8px\",\r\n};\r\n\r\nconst nubmerTextSx = {\r\n  color: \" #FFCC63\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"400\",\r\n};\r\n\r\nconst titleTextSx = {\r\n  color: \"#535353\",\r\n  fontSize: \"13px\",\r\n  fontWeight: \"600\",\r\n  lineHeight: \"20px\",\r\n  marginBottom: \"6px\",\r\n};\r\n\r\nexport default function DountChartCard2({ title, data }) {\r\n  const calculateTotalValue = (title) => {\r\n    if (title === \"total_number_of_orders\") {\r\n      var totalValue = data?.completeOrders + data?.incompleteOrders;\r\n      if (isNaN(totalValue)) {\r\n        return 0;\r\n      }\r\n      return totalValue;\r\n    }\r\n    if (title === \"reviews\") {\r\n      var totalValue = data?.goodReviews + data?.badReviews;\r\n      if (isNaN(totalValue)) {\r\n        return 0;\r\n      }\r\n      return totalValue;\r\n    }\r\n  };\r\n\r\n  const defineFirstTag = (title) => {\r\n    if (title === \"total_number_of_orders\") {\r\n      return translate(`completed`);\r\n    }\r\n    if (title === \"reviews\") {\r\n      return translate(`good`);\r\n    }\r\n    if (title === \"deliverd_orders\") {\r\n      return translate(`on_time`);\r\n    }\r\n  };\r\n\r\n  const defineSecondTag = (title) => {\r\n    if (title === \"total_number_of_orders\") {\r\n      return translate(`incompleted`);\r\n    }\r\n    if (title === \"reviews\") {\r\n      return translate(`bad`);\r\n    }\r\n    if (title === \"deliverd_orders\") {\r\n      return translate(`delay`);\r\n    }\r\n  };\r\n\r\n  const defineFirstValue = (title) => {\r\n    if (\r\n      title === \"total_number_of_orders\" &&\r\n      calculateTotalValue(title) !== 0\r\n    ) {\r\n      return data.completeOrdersRatio;\r\n    }\r\n    if (title === \"reviews\" && calculateTotalValue(title) !== 0) {\r\n      let value = Math.ceil(\r\n        (data?.goodReviews / calculateTotalValue(title)) * 100\r\n      );\r\n      if (isNaN(value)) {\r\n        return 0;\r\n      }\r\n      return value;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const defineSecondValue = (title) => {\r\n    if (\r\n      title === \"total_number_of_orders\" &&\r\n      calculateTotalValue(title) !== 0\r\n    ) {\r\n      return data.incompleteOrdersRatio;\r\n    }\r\n    if (title === \"reviews\" && calculateTotalValue(title) !== 0) {\r\n      let value = Math.floor(\r\n        (data?.badReviews / calculateTotalValue(title)) * 100\r\n      );\r\n      if (isNaN(value)) {\r\n        return 0;\r\n      }\r\n      return value;\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const percentage = 100;\r\n  // ----------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Box sx={{ ...cardHolderSx }}>\r\n        {/* *************** Circular Chart Box ************** */}\r\n        <Box\r\n          sx={{\r\n            ...chartHolderSx,\r\n            \"& .CircularProgressbar-text\": {\r\n              fontWeight: 700,\r\n            },\r\n          }}\r\n        >\r\n          <CircularProgressbar\r\n            maxValue={`${calculateTotalValue(title)}`}\r\n            value={defineFirstValue(title)}\r\n            strokeWidth={12}\r\n            text={`${calculateTotalValue(title)}`}\r\n            styles={buildStyles({\r\n              // width: '70px',\r\n              // height: '70px',\r\n              rotation: 0.1,\r\n              strock: \"#FFCC63\",\r\n              // strokeLinecap: 'butt',\r\n              textSize: \"12px\",\r\n              pathTransitionDuration: 0.5,\r\n              pathColor: `#FFCC63`,\r\n              textColor: \"#FFCC63\",\r\n              trailColor: \"rgba(255, 204, 99, 0.3)\",\r\n              // backgroundColor: 'red',\r\n              text: {\r\n                fill: \"#FFCC63\",\r\n                fontSize: \"12px\",\r\n                fontWeight: \"bold\",\r\n              },\r\n            })}\r\n          />\r\n        </Box>\r\n\r\n        {/* ************** Content Holder Box ************** */}\r\n        <Box sx={{ ...contentHolderSx }}>\r\n          <Typography sx={{ ...titleTextSx }}>\r\n            {translate(`${title}`)}\r\n          </Typography>\r\n\r\n          {/* ***** first compared item ***** */}\r\n          <Box sx={{ ...itemHolderSx, md: \"6px\" }}>\r\n            {/* compared item name */}\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n       \r\n              <Typography sx={{ ...itemTextSx }}>\r\n                {defineFirstTag(title)}\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* compared item value */}\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <Typography sx={{ ...nubmerTextSx, pr: \"2px\" }}>\r\n                {defineFirstValue(title)} %\r\n              </Typography>\r\n\r\n             \r\n            </Box>\r\n          </Box>\r\n\r\n          {/* ***** second compared item ***** */}\r\n          <Box sx={{ ...itemHolderSx }}>\r\n            {/* compared item name */}\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n     \r\n\r\n              <Typography sx={{ ...itemTextSx }}>\r\n                {defineSecondTag(title)}\r\n              </Typography>\r\n            </Box>\r\n\r\n            {/* compared item value */}\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <Typography sx={{ ...nubmerTextSx, pr: \"2px\" }}>\r\n                {defineSecondValue(title)} %\r\n              </Typography>\r\n        \r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\OrderDetailTable.js",["3313","3314","3315","3316","3317","3318","3319","3320"],[],"import React, { useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\n// @mui\r\nimport {\r\n    Button,\r\n    IconButton,\r\n    Table,\r\n    Tooltip,\r\n    TableBody,\r\n    TableContainer,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// mock\r\nimport { _MenuList2 } from \"../../../_mock/arrays\";\r\n// Components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n    TableNoData,\r\n    TableEmptyRows,\r\n    TableHeadCustom,\r\n    TableSelectedAction,\r\n    useTable,\r\n    getComparator,\r\n    emptyRows,\r\n} from \"../../../components/table\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\n// Section Components\r\nimport OrderDetailTableRow from \"./details/OrderDetailTableRow\";\r\n// ----------------------------------------------------------------------------------------------\r\n\r\n// --------------- JSX Code ---------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \"& .MuiPaginationItem-icon\": {\r\n            color: \"#FFCC63;\"\r\n        }\r\n    }\r\n}));\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n    position: \"relative\",\r\n    overflow: \"unset\",\r\n    boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n    borderRadius: \"16px\",\r\n    background: \"#FFFFFF\",\r\n    // width: '142%'\r\n}));\r\n\r\nconst tableHolderSx = {\r\n    minWidth: 800,\r\n    borderCollapse: \"separate\",\r\n    borderSpacing: \"0px 16px\",\r\n    paddingRight: \"19px\",\r\n    paddingLeft: \"19px\",\r\n}\r\n\r\nconst cancelBtnSx = {\r\n    background: '#FFFFFF',\r\n    color: '#535353',\r\n    border: '0.75px solid #BCBCBC',\r\n    fontSize: '12px',\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    paddingLeft: \"43px\",\r\n    paddingRight: \"43px\",\r\n}\r\n\r\nconst confirmBtnSx = {\r\n    fontSize: '12px',\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    paddingLeft: \"44px\",\r\n    paddingRight: \"44px\",\r\n}\r\n\r\n\r\nconst TABLE_HEAD = [\r\n    { id: \"photo\", label: \"photo\", align: \"center\" },\r\n    { id: \"name\", label: \"name\", align: \"center\" },\r\n    { id: \"category\", label: \"category\", align: \"center\" },\r\n    { id: \"price\", label: \"price\", align: \"center\" },\r\n    { id: \"rate\", label: \"rate\", align: \"center\" },\r\n    { id: \"no_of_orders\", label: \"no_of_orders\", align: \"center\" },\r\n    { id: \"preparation_time\", label: \"preparation_time\", align: \"center\" },\r\n    { id: \"item_status\", label: \"item_status\", align: \"center\" },\r\n    { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nexport default function OrderDetailTable() {\r\n\r\n    const classes = useStyles();\r\n    const {\r\n        dense,\r\n        page,\r\n        order,\r\n        orderBy,\r\n        rowsPerPage,\r\n        setPage,\r\n        selected,\r\n        setSelected,\r\n        onSelectRow,\r\n        onSelectAllRows,\r\n        onSort,\r\n        onChangeDense,\r\n        onChangePage,\r\n        onChangeRowsPerPage,\r\n    } = useTable();\r\n    const { translate } = useLocales();\r\n    const [tableData, setTableData] = useState(_MenuList2);\r\n    const [openConfirm, setOpenConfirm] = useState(false);\r\n    const [filterName, setFilterName] = useState(\"\");\r\n    const [filterRole, setFilterRole] = useState(\"all\");\r\n    const [filterStatus, setFilterStatus] = useState(\"all\");\r\n    const dataFiltered = applyFilter({\r\n        inputData: tableData,\r\n        comparator: getComparator(order, orderBy),\r\n        filterName,\r\n        filterRole,\r\n        filterStatus,\r\n    });\r\n    const dataInPage = dataFiltered.slice(\r\n        page * rowsPerPage,\r\n        page * rowsPerPage + rowsPerPage\r\n    );\r\n    const denseHeight = dense ? 52 : 72;\r\n    const isFiltered =\r\n        filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n    const isNotFound =\r\n        (!dataFiltered.length && !!filterName) ||\r\n        (!dataFiltered.length && !!filterRole) ||\r\n        (!dataFiltered.length && !!filterStatus);\r\n\r\n    const handleOpenConfirm = () => {\r\n        setOpenConfirm(true);\r\n    };\r\n\r\n    const handleCloseConfirm = () => {\r\n        setOpenConfirm(false);\r\n    };\r\n\r\n    const handleDeleteRow = (id) => {\r\n        const deleteRow = tableData.filter((row) => row.id !== id);\r\n        setSelected([]);\r\n        setTableData(deleteRow);\r\n        if (page > 0) {\r\n            if (dataInPage.length < 2) {\r\n                setPage(page - 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteRows = (selected) => {\r\n        const deleteRows = tableData.filter((row) => !selected.includes(row.id));\r\n        setSelected([]);\r\n        setTableData(deleteRows);\r\n        if (page > 0) {\r\n            if (selected.length === dataInPage.length) {\r\n                setPage(page - 1);\r\n            } else if (selected.length === dataFiltered.length) {\r\n                setPage(0);\r\n            } else if (selected.length > dataInPage.length) {\r\n                const newPage =\r\n                    Math.ceil((tableData.length - selected.length) / rowsPerPage) - 1;\r\n                setPage(newPage);\r\n            }\r\n        }\r\n    };\r\n\r\n    // --------- JSX Code ----------\r\n    return (\r\n        <>\r\n            {/* -******* Table ***** */}\r\n            <StyledTableContainer >\r\n                <TableSelectedAction\r\n                    dense={dense}\r\n                    numSelected={selected.length}\r\n                    rowCount={tableData.length}\r\n                    onSelectAllRows={(checked) =>\r\n                        onSelectAllRows(\r\n                            checked,\r\n                            tableData.map((row) => row.id)\r\n                        )\r\n                    }\r\n                    action={\r\n                        <Tooltip title=\"Delete\">\r\n                            <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                                <Iconify icon=\"eva:trash-2-outline\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    } />\r\n                <Scrollbar>\r\n                    <Table size={dense ? \"small\" : \"medium\"} sx={{ ...tableHolderSx }} >\r\n                        <TableHeadCustom\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            headLabel={TABLE_HEAD}\r\n                            rowCount={tableData.length}\r\n                            numSelected={selected.length}\r\n                            onSort={onSort}\r\n                            onSelectAllRows={(checked) =>\r\n                                onSelectAllRows(\r\n                                    checked,\r\n                                    tableData.map((row) => row.id)\r\n                                )} />\r\n                        <TableBody>\r\n                            {dataFiltered\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => (\r\n                                    <OrderDetailTableRow\r\n                                        // key={row.id}\r\n                                        row={row}\r\n                                        key={index * 2}\r\n                                        selected={selected.includes(row.id)}\r\n                                        onSelectRow={() => onSelectRow(row.id)}\r\n                                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                                    />\r\n                                ))}\r\n\r\n                            <TableEmptyRows\r\n                                height={denseHeight}\r\n                                emptyRows={emptyRows(page, rowsPerPage, tableData.length)} />\r\n\r\n                            <TableNoData isNotFound={isNotFound} />\r\n                        </TableBody>\r\n                    </Table>\r\n                </Scrollbar>\r\n                {/* --- Strat Table Pagenation --- */}\r\n                <TablePaginationCustomized\r\n                    count={dataFiltered.length}\r\n                    page={page}\r\n                    rowsPerPage={rowsPerPage}\r\n                    onPageChange={onChangePage}\r\n                    onRowsPerPageChange={onChangeRowsPerPage}\r\n                    //\r\n                    dense={dense}\r\n                    onChangeDense={onChangeDense}\r\n                />\r\n\r\n\r\n            </StyledTableContainer>\r\n\r\n\r\n\r\n            {/* -******* Confirm dialig ***** */}\r\n            <CustomConfirmDialog\r\n                open={openConfirm}\r\n                onClose={handleCloseConfirm}\r\n                title={translate(\"delete_item\")}\r\n                content={\r\n                    <>\r\n                        {translate(\"are_you_sure_you_want_to_delete_this_item\")}\r\n                    </>\r\n                }\r\n                action={\r\n                    <>\r\n                        <Button\r\n                            sx={cancelBtnSx}\r\n                            onClick={() => {\r\n                                handleCloseConfirm();\r\n                            }} >\r\n                            {translate(\"cancel\")}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            sx={confirmBtnSx}\r\n                            onClick={() => {\r\n                                handleDeleteRows(selected);\r\n                                handleCloseConfirm();\r\n                            }} >\r\n                            {translate(\"delete\")}\r\n                        </Button>\r\n                    </>\r\n                }\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n    inputData,\r\n    comparator,\r\n    filterName,\r\n    filterStatus,\r\n    filterRole,\r\n}) {\r\n    const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n\r\n    inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n    if (filterName) {\r\n        inputData = inputData.filter(\r\n            (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n        );\r\n    }\r\n\r\n    if (filterStatus !== \"all\") {\r\n        inputData = inputData.filter((user) => user.status === filterStatus);\r\n    }\r\n\r\n    if (filterRole !== \"all\") {\r\n        inputData = inputData.filter((user) => user.role === filterRole);\r\n    }\r\n\r\n    return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceList.js",["3321","3322","3323","3324","3325","3326","3327","3328","3329","3330","3331","3332","3333","3334","3335"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// react-router-dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// mui\r\nimport {\r\n  Button,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  IconButton,\r\n  Stack,\r\n  Box,\r\n  CircularProgress,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// dummy data\r\nimport { _financeTable } from \"../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\nimport FinanceTableRow from \"./FinanceTableRow\";\r\n//Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n//Service\r\nimport { adminInvoices } from \"../../../redux/services/finance_service\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport CustomCalender from \"../../../components/iconify/CustomCalender\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport {\r\n  getPendingRestaurantBranches,\r\n  getPendingMarketBranches,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport moment from \"moment\";\r\n// PAGINATION\r\nimport FinancePagination from \"../../../components/pagination/FinancePagination\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n// -------------------------------------------------------------------------------------------------------\r\nconst TABLE_HEAD = [\r\n  { id: \"invoice_id\", label: \"invoice_id\", align: \"center\" },\r\n  { id: \"user_name\", label: \"user_name\", align: \"center\" },\r\n  { id: \"request_date\", label: \"request_date\", align: \"left\" },\r\n  { id: \"withdraw_date\", label: \"withdraw_date\", align: \"left\" },\r\n  { id: \"invoice_value\", label: \"invoice_value\", align: \"center\" },\r\n  { id: \"currency\", label: \"currency\", align: \"left\" },\r\n  { id: \"invoice_value\", label: \"invoice_value\", align: \"center\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  border: \"1px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 30px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst tilteSx = {\r\n  color: \"#333333\",\r\n  fontWeight: 600,\r\n  fontSize: \"20px\",\r\n  lineHeight: \"30px\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst dateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    // padding: '12px 35px'\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#BCBCBC\",\r\n    cursor: \"pointer\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"3px\",\r\n    width: \"120px\",\r\n    flexDirection: \"row-reverse\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n};\r\n\r\nconst defaulttxtFieldSx = {\r\n  width: \"100%\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n      \"&:hover\": {\r\n        background: \"#fdcd855c\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst Spinner = (\r\n  <Box display=\"flex\" justifyContent=\"center\">\r\n    <CircularProgress />{\" \"}\r\n  </Box>\r\n);\r\nexport default function FinanceList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const customFormat = \"YYYY-MM-DD\";\r\n\r\n  const { isLoading, error, financeInvoices } = useSelector(\r\n    (state) => state.finance\r\n  );\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  //moment().format(customFormat)\r\n  const [dates, setDates] = useState({\r\n    startDate: \"2023-05-25\",\r\n    endDate: \"2023-05-31\",\r\n  });\r\n\r\n  const [openDatePicker, setOpenDatePicker] = useState(false);\r\n  const [openSecondPicker, setOpenSecondPicker] = useState(false);\r\n\r\n  const TransactionRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => TransactionRef.current,\r\n  });\r\n\r\n  // for restaurents\r\n  useEffect(() => {\r\n    dispatch(adminInvoices({ pageNumber: 1, ...dates }));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setTableData(financeInvoices);\r\n  }, [financeInvoices]);\r\n\r\n  const handleFirstDatePicker = (handleValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        startDate: moment(handleValue).format(customFormat),\r\n      };\r\n    });\r\n\r\n    dispatch(\r\n      adminInvoices({\r\n        pageNumber: 1,\r\n        startDate: moment(handleValue).format(customFormat),\r\n        endDate: dates.endDate,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSecondtDatePicker = (handleSecondValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        endDate: moment(handleSecondValue).format(customFormat),\r\n      };\r\n    });\r\n    dispatch(\r\n      adminInvoices({\r\n        pageNumber: 1,\r\n        startDate: dates.startDate,\r\n        endDate: moment(handleSecondValue).format(customFormat),\r\n      })\r\n    );\r\n  };\r\n\r\n  // ----------------- JSX Code ------------------\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" sx={{ ...tilteSx, mb: \"26px\" }}>\r\n        {translate(`transaction_history`)}\r\n      </Typography>\r\n\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n        <Stack\r\n          direction=\"row\"\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          mb={{ xs: \"10px\", md: \"0px\" }}\r\n        >\r\n          <>\r\n            <Typography sx={{ ...totalUserSx }}>\r\n              {translate(\"total_transaction\")}:\r\n            </Typography>\r\n\r\n            <Typography sx={{ ...totalUserSx, ml: \"4px\" }}></Typography>\r\n          </>\r\n        </Stack>\r\n\r\n        <Stack sx={{ ...subHolderSx }}>\r\n          {/* ---- Date Range ---- */}\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            mr={{ xs: \"0px\", md: \"30px\" }}\r\n          >\r\n            {/* ---- form Date ---- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <DatePicker\r\n                fullWidth\r\n                sx={defaulttxtFieldSx}\r\n                openTo=\"day\"\r\n                open={openDatePicker}\r\n                onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                onClose={() => setOpenDatePicker(false)}\r\n                dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                // inputFormat=\"DD/MM/YYYY\"\r\n                value={dates.startDate}\r\n                onChange={(newValue) => {\r\n                  handleFirstDatePicker(newValue);\r\n                }}\r\n                views={[\"day\", \"month\", \"year\"]}\r\n                showDaysOutsideCurrentMonth\r\n                components={{ OpenPickerIcon: CustomCalender }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                inputProps={\r\n                  { readOnly: true, }\r\n                }\r\n                // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    id=\"dateOfBirth\"\r\n                    {...params}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n\r\n            {/* ----- to date ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <Typography fontSize=\"12px\" fontWeight={700} color=\"#FFCC63\">\r\n                {translate(`to`)}\r\n              </Typography>\r\n              <DatePicker\r\n                fullWidth\r\n                sx={defaulttxtFieldSx}\r\n                openTo=\"day\"\r\n                open={openSecondPicker}\r\n                onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                onClose={() => setOpenSecondPicker(false)}\r\n                dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                // inputFormat=\"DD/MM/YYYY\"\r\n                value={dates.endDate}\r\n                onChange={(newValue) => {\r\n                  handleSecondtDatePicker(newValue);\r\n                }}\r\n                views={[\"day\", \"month\", \"year\"]}\r\n                showDaysOutsideCurrentMonth\r\n                components={{ OpenPickerIcon: CustomCalender }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                inputProps={\r\n                  { readOnly: true, }\r\n                }\r\n                // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                    sx={{ ...txtFieldBorderStyle, cursor: \"pointer\" }}\r\n                    id=\"dateOfBirth\"\r\n                    {...params}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n          </Stack>\r\n\r\n          {/* ---- print and export ---- */}\r\n          <Stack\r\n            mt={{ xs: \"15px\", md: \"0px\" }}\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n          >\r\n            {/* ----- Print ----- */}\r\n            <Button onClick={handlePrint}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                {translate(\"print\")}\r\n              </Typography>\r\n            </Button>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <DownloadTableExcel\r\n                filename=\"TransactionTable\"\r\n                sheet=\"Transaction\"\r\n                currentTableRef={TransactionRef.current}\r\n              >\r\n                <Button disableRipple>\r\n                  <Image\r\n                    disabledEffect\r\n                    src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                  />\r\n\r\n                  <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                    {translate(\"export\")}\r\n                  </Typography>\r\n                </Button>\r\n              </DownloadTableExcel>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n\r\n        <Scrollbar>\r\n          {isLoading && Spinner}\r\n          {!isLoading && (\r\n            <Table\r\n              size={dense ? \"small\" : \"medium\"}\r\n              sx={{ ...tableHolderSx }}\r\n              ref={TransactionRef}\r\n            >\r\n              {/* ****** table head *****/}\r\n              <TableHeadCustom\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={tableData.length}\r\n                numSelected={selected.length}\r\n                onSort={onSort}\r\n                onSelectAllRows={(checked) =>\r\n                  onSelectAllRows(\r\n                    checked,\r\n                    tableData.map((row) => row.id)\r\n                  )\r\n                }\r\n              />\r\n\r\n              {/* ****** table body **** */}\r\n              <TableBody>\r\n                {\r\n                  !isLoading ?\r\n                  <>\r\n                    {dataFiltered\r\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                      .map((row, index) => (\r\n                        <FinanceTableRow\r\n                          onClick={() => console.log(\"hi\")}\r\n                          // key={row.id}\r\n                          key={index}\r\n                          row={row}\r\n                          selected={selected.includes(row.id)}\r\n                          onSelectRow={() => onSelectRow(row.id)}\r\n                          onDeleteRow={() => handleDeleteRow(row.id)}\r\n                        />\r\n                      ))}\r\n                      <TableEmptyRows\r\n                        height={denseHeight}\r\n                        emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\r\n                      />\r\n\r\n                      <TableNoData isNotFound={isNotFound} />\r\n                    </>\r\n                    :\r\n                    <LoadingTableRows number={5} cellsNum={9} />\r\n                }\r\n\r\n                \r\n              </TableBody>\r\n            </Table>\r\n          )}\r\n        </Scrollbar>\r\n\r\n        {/* --- Strat Table Pagenation --- */}\r\n\r\n        {/** FinancePagination */}\r\n        <FinancePagination\r\n          dates={dates}\r\n          count={dataFiltered.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          //\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content={\r\n          <>\r\n            Are you sure want to delete <strong> {selected.length} </strong>{\" \"}\r\n            items?\r\n          </>\r\n        }\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              handleDeleteRows(selected);\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// --------------------------------------------------------------------------------------------------\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\OrdersListSection.js",["3336","3337","3338","3339","3340","3341","3342","3343","3344","3345","3346","3347","3348","3349","3350","3351","3352"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Stack,\r\n  TableRow,\r\n  CircularProgress,\r\n  Box,\r\n} from \"@mui/material\";\r\n// _mock_\r\n\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  // TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport TableHeadCustom2 from \"../../../components/table/TableHeadCustom2\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\nimport OrdersTableRow from \"./details/OrdersTableRow\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// serrvices\r\nimport { getAllOrders } from \"../../../redux/services/orders_service\";\r\nimport BranchesSection from \"../../@dashboard/branches/BranchesSection\";\r\nimport OrdersPagination from \"../../../components/pagination/OrdersPagination\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n// -------------------------------------------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"order_number\", label: \"order_number\", align: \"center\" },\r\n  { id: \"order_time\", label: \"order_time\", align: \"center\" },\r\n  { id: \"preparation_time\", label: \"preparation_time\", align: \"center\" },\r\n  { id: \"orders_location\", label: \"orders_location\", align: \"center\" },\r\n  { id: \"meals\", label: \"meals\", align: \"center\" },\r\n  { id: \"price\", label: \"price\", align: \"center\" },\r\n  { id: \"delivery_name\", label: \"delivery_name\", align: \"center\" },\r\n  { id: \"order_status\", label: \"order_status\", align: \"center\" },\r\n];\r\n\r\n// ---------- Styles --------------\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  border: \"0px solid\",\r\n  borderColor: theme.palette.primary.main,\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#fff\",\r\n  // padding:'0px 24px'\r\n  \"& .MuiTable-root\": {\r\n    padding: \" 0px 24px!important\",\r\n    borderSpacing: \"0px 8px\",\r\n  },\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nexport default function OrdersListSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, error, allOrders } = useSelector((state) => state.orders);\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTableData(allOrders);\r\n  }, [allOrders]);\r\n\r\n  // ----------- JSX Code -----------\r\n  return (\r\n    <>\r\n      {/* ***************** Table ***************** */}\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n        <Scrollbar>\r\n          <Table size={dense ? \"small\" : \"medium\"} sx={{ ...tableHolderSx }}>\r\n            <TableHeadCustom2\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData?.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData?.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {!isLoading ? (\r\n                <>\r\n                  {dataFiltered\r\n                    ?.slice(\r\n                      page * rowsPerPage,\r\n                      page * rowsPerPage + rowsPerPage\r\n                    )\r\n                    .map((row, index) => (\r\n                      <OrdersTableRow\r\n                        key={row.id}\r\n                        // key={index * 2}\r\n                        row={row}\r\n                        selected={selected.includes(row.id)}\r\n                        onSelectRow={() => onSelectRow(row.id)}\r\n                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                      />\r\n                    ))}\r\n                  <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                  />\r\n\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </>\r\n              ) : (\r\n                <LoadingTableRows number={5} cellsNum={10} />\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </Scrollbar>\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <OrdersPagination\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content={\r\n          <>\r\n            Are you sure want to delete <strong> {selected.length} </strong>{\" \"}\r\n            items?\r\n          </>\r\n        }\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              handleDeleteRows(selected);\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\OrdersChartsSection.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\BranchInfoSection.js",["3353","3354","3355","3356"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Grid, Stack, Typography } from \"@mui/material\";\r\n// components\r\nimport Image from \"../../../components/image/Image\";\r\n// react-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import EditBranchInfoModal from './EditBranchInfoModal'\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport EditWorkingDayModal from \"./details/EditWorkingDaysModal\";\r\nimport moment from \"moment\";\r\n// -------------------------------------------------------------------\r\n\r\n// ------ Styles -------\r\n\r\nconst contentHolderSx = {\r\n  p: { xs: \"24px 20px 24px 20px\", md: \"24px\" },\r\n  borderRadius: \"25px\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n};\r\n\r\nconst textSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst subTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#121212\",\r\n};\r\nconst titleSx = {\r\n  fontSize: \"14px\",\r\n  color: \"#121212\",\r\n  fontWeight: 600,\r\n  lineHeight: \"21px\",\r\n  letterSpacing: \".5px\",\r\n};\r\nconst locationHolder = {\r\n  p: \"24px\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  borderRadius: \"25px\",\r\n};\r\n\r\nconst rowSx = {\r\n  py: \"16px\",\r\n  borderBottom: \"1px solid #D8D8D8\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst highLightSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 600,\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nexport default function BranchInfoSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { restaurantDetails, restaurantWorkTimes, restaurantInfo } =\r\n    useSelector((state) => state.branches);\r\n\r\n  const { marketDetails, marketInfo, marketWorkTimes } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const [info, setInfo] = useState(\r\n    localStorage.getItem(\"facilityType\") === \"0\"\r\n      ? restaurantDetails\r\n      : marketDetails\r\n  );\r\n  const [workTimes, setWorkingTimes] = useState(\r\n    localStorage.getItem(\"facilityType\") === \"0\"\r\n      ? restaurantWorkTimes\r\n      : marketWorkTimes\r\n  );\r\n\r\n  const openModalHandler = () => setOpenModal(true);\r\n\r\n  const closeModalHandler = () => setOpenModal(false);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const defineWorkingTime = (openTime, closeTime) => {\r\n    if (\r\n      (openTime === null || openTime === \"00:00:00\") &&\r\n      (closeTime === null || closeTime === \"00:00:00\")\r\n    ) {\r\n      return translate(\"close\");\r\n    } else {\r\n      return `${moment(openTime, \"hh:mm A\").format(\"hh:mm A\")} - ${moment(\r\n        closeTime,\r\n        \"hh:mm A\"\r\n      ).format(\"hh:mm A\")}`;\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    setInfo(\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? restaurantDetails\r\n        : marketDetails\r\n    );\r\n    setWorkingTimes(\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? restaurantWorkTimes\r\n        : marketWorkTimes\r\n    );\r\n  }, [dispatch, info, workTimes, restaurantDetails, marketDetails]);\r\n\r\n  // --------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Box mt=\"48px\">\r\n        <Grid\r\n          container\r\n          columnSpacing={{ xs: \"20px\", md: \"24px\" }}\r\n          rowSpacing={{ xs: \"26px\", md: \"0px\" }}\r\n        >\r\n          {/* **************** Left Side Section ******************** */}\r\n          <Grid item xs={12} sm={7} md={8} mx=\"auto\">\r\n            <Box sx={{ ...contentHolderSx }}>\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"flex-end\"\r\n              >\r\n                <Typography\r\n                  onClick={() => navigate(\"/employee/branch-info/edit-info\")}\r\n                  sx={{\r\n                    ...highLightSx,\r\n                    fontSize: \"14px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  {translate(`edit`)}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              {/* ----- Manager ----- */}\r\n              <Grid container sx={{ ...rowSx }}>\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`branch_manger`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Stack direction=\"row\" alignItems=\"center\" flexGrow={1}>\r\n                    <Typography sx={{ ...subTextSx }}>\r\n                      {info?.user?.firstName} {info?.user?.lastName}\r\n                    </Typography>\r\n                    <Typography ml=\"12px\" sx={{ ...highLightSx }}>\r\n                      {translate(`contact_info`)}\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ category ----- */}\r\n              <Grid container sx={{ ...rowSx }}>\r\n                <Grid item xs={5} sm={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`categories`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7} sm={7}>\r\n                  <Typography sx={{ ...subTextSx }}>\r\n                    {info?.description}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ Location ----- */}\r\n              <Grid container sx={{ ...rowSx }}>\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`location`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Typography sx={{ ...subTextSx }}>\r\n                    {info?.location}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ Rating ----- */}\r\n              <Grid container sx={{ ...rowSx }}>\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`rating`)}{\" \"}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <img src=\"/assets/icons/dashboard/ic_star.svg\" alt=\"\" />\r\n                    <Typography\r\n                      ml=\"8px\"\r\n                      sx={{ ...subTextSx, color: \"#535353\" }}\r\n                    >\r\n                      {info?.rate}\r\n                    </Typography>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ phone1 ----- */}\r\n              <Grid container sx={{ ...rowSx }}>\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`phoneNo1`)}{\" \"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                  <Typography sx={{ ...subTextSx }}>\r\n                    {localStorage.getItem(\"facilityType\") === \"0\"\r\n                      ? restaurantInfo?.phoneNo1\r\n                      : marketInfo.phoneNo1}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ phone2 ----- */}\r\n              <Grid container sx={{ ...rowSx }}>\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`phoneNo2`)}{\" \"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                  <Typography sx={{ ...subTextSx }}>\r\n                    {localStorage.getItem(\"facilityType\") === \"0\"\r\n                      ? restaurantInfo?.phoneNo2\r\n                      : marketInfo.phoneNo2}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ Delivery Time ----- \r\n            <Grid container sx={{ ...rowSx }}>\r\n              <Grid item xs={5}>\r\n                <Typography sx={{ ...textSx }}>\r\n                  {translate(`delivery_time`)}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={7}>\r\n                <Typography sx={{ ...subTextSx }}>\r\n                  20 {translate(`mins`)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>*/}\r\n\r\n              {/* ------ Minimum Orders ----- */}\r\n              <Grid container sx={{ ...rowSx, borderColor: \"transparent\" }}>\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`minimum_order_amount`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Typography sx={{ ...subTextSx }}>\r\n                    AED {info?.minimumOrderCost}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              {/* ------ Deliver Free ----- \r\n            <Grid container sx={{ ...rowSx }}>\r\n              <Grid item xs={5}>\r\n                <Typography sx={{ ...textSx }}>\r\n                  {translate(`delivery_free`)}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={7}>\r\n                <Typography sx={{ ...subTextSx }}>AED 10.00 </Typography>\r\n              </Grid>\r\n            </Grid>*/}\r\n\r\n              {/* ------ Payment ----- \r\n            <Grid container sx={{ ...rowSx }}>\r\n              <Grid item xs={5}>\r\n                <Typography sx={{ ...textSx }}>\r\n                  {translate(`payment`)}{\" \"}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={7}>\r\n                <Stack direction=\"row\" alignItems=\"center\" spacing=\"8px\">\r\n                  <img src=\"/assets/icons/dashboard/ic_visa.svg\" alt=\"\" />\r\n                  <img src=\"/assets/icons/dashboard/ic_masterCard.svg\" alt=\"\" />\r\n                  <img src=\"/assets/icons/dashboard/ic_cash.svg\" alt=\"\" />\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>*/}\r\n\r\n              {/* ------ Pre_order -----\r\n            <Grid container sx={{ ...rowSx, borderColor: \"transparent\" }}>\r\n              <Grid item xs={5}>\r\n                <Typography sx={{ ...textSx }}>\r\n                  {translate(`pre_order`)}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={7}>\r\n                <Typography sx={{ ...subTextSx }}>\r\n                  {restaurantDetails?.preOrder === true\r\n                    ? translate(`yes`)\r\n                    : translate(`no`)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid> */}\r\n            </Box>\r\n          </Grid>\r\n\r\n          {/* **************** Right Side Section ******************** */}\r\n          <Grid item xs={12} sm={5} md={4} mx=\"auto\">\r\n            <Box sx={{ ...contentHolderSx, height: \"fit-content\" }}>\r\n              {/*  ********** Title  ********* */}\r\n              <Stack\r\n                mb=\"24px\"\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <Typography sx={{ ...titleSx }}>\r\n                  {translate(\"working_days\")}\r\n                </Typography>\r\n\r\n                <Typography\r\n                  sx={{\r\n                    ...highLightSx,\r\n                    fontSize: \"14px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={openModalHandler}\r\n                >\r\n                  {translate(`edit`)}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              <Typography sx={{ ...highLightSx, color: \"#4EE476\", mb: \"28px\" }}>\r\n                {localStorage.getItem(\"facilityType\") === \"0\"\r\n                  ? translate(\r\n                      restaurantInfo?.isOpen ? `branch_open` : `branch_close`\r\n                    )\r\n                  : translate(\r\n                      marketInfo?.isOpen ? `branch_open` : `branch_close`\r\n                    )}\r\n              </Typography>\r\n\r\n              {/*  ********** Workin days and Hours  ********* */}\r\n              {workTimes?.map((day, index) => (\r\n                <Stack\r\n                  key={index}\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"29px\"\r\n                >\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(day.name)}\r\n                  </Typography>\r\n\r\n                  <Typography sx={{ ...highLightSx, fontWeight: 400 }}>\r\n                    {/* {day.openTime === null ? translate(\"close\") : day.openTime}{\" \"}\r\n                    {day.closeTime === null ? \"\" : \" - \" + day.closeTime} */}\r\n                    {defineWorkingTime(day.openTime, day.closeTime)}\r\n                  </Typography>\r\n                </Stack>\r\n              ))}\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n      {/* **************** Edit Working Day Modal ******************** */}\r\n      {openModal && (\r\n        <EditWorkingDayModal\r\n          workTimes={workTimes}\r\n          open={openModal}\r\n          onClose={closeModalHandler}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\ChartFinance.js",["3357","3358","3359","3360","3361","3362","3363"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// apex Chart\r\nimport Chart from \"react-apexcharts\";\r\n// mui\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  Stack,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport { getRestaurantMonthlyEarnings } from \"../../../redux/services/restaurant_service\";\r\n\r\nimport BranchLineChart2 from \"./BranchLineChart2\";\r\nimport { getAllMarketsMonthlyEarnings, getAllRestaurantMonthlyEarnings } from \"../../../redux/services/performance_service\";\r\nimport LoadingCharts from \"../../../components/loadingSkeleton/LoadingCharts\";\r\n// -----------------------------------------------------------\r\n\r\nconst mainHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"25px\",\r\n  p: { xs: \"27px 20px 40px 20px\", sm: \"27px 38px 40px 38px \" },\r\n};\r\n\r\nconst selectSx = {\r\n  minWidth: \"30px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"10px!important\",\r\n    fontSize: \"8px\", //8px\r\n    color: \"#535353\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"8px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst microTextSx = {\r\n  fontSize: \"8px\", // 8px\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst labelTextSx = {\r\n  ...microTextSx,\r\n  p: \"3px 5px\",\r\n  borderLeft: \"2px solid #EFF2F7\",\r\n  height: \"33px\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst earnTextSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"2px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  color: \"#34C38F\",\r\n  lineHeight: \"8px\",\r\n  background: \"rgba(52, 195, 143, 0.180392)\",\r\n};\r\n\r\nconst monthSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#535353\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\n\r\nexport default function ChartFinance() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingBranchesEarningMonthly, AllBranchesEarningMonthly } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  const currentMonth = new Date().getMonth() + 1; //05\r\n  const previousMonth = new Date().getMonth(); //04\r\n\r\n  const currentDate = `${currentYear}-${currentMonth}-1`;\r\n  const previousDate = `${currentYear}-${previousMonth}-1`;\r\n\r\n  const [firstMonth, setFirstMonth] = useState(`${currentDate}`);\r\n  const [secondMonth, setSecondMonth] = useState(`${previousDate}`);\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setFirstMonth(event.target.value);\r\n  };\r\n\r\n  const handleSecondChange = (event) => {\r\n    setSecondMonth(event.target.value);\r\n  };\r\n\r\n  const calculateTotalEarnings = (month, restaurantMonthlyEarnings) => {\r\n    if (month === \"previous\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.previous?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n    if (month === \"current\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.current?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n  };\r\n\r\n  let currentMonthEarning = +calculateTotalEarnings(\r\n    \"current\",\r\n    AllBranchesEarningMonthly\r\n  );\r\n\r\n  let previousMonthEarning = +calculateTotalEarnings(\r\n    \"previous\",\r\n    AllBranchesEarningMonthly\r\n  );\r\n\r\n  const calDifferenceFromPrev = () => {\r\n    if (previousMonthEarning > 0) {\r\n      let result = +(\r\n        ((currentMonthEarning - previousMonthEarning) / previousMonthEarning) *\r\n        100\r\n      ).toFixed(1);\r\n      return result;\r\n    }\r\n    if (previousMonthEarning === 0 && currentMonthEarning !== 0) {\r\n      return 100;\r\n    }\r\n    if (previousMonthEarning === 0 && previousMonthEarning === 0) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  calDifferenceFromPrev();\r\n\r\n  const months = [\r\n    {\r\n      name: \"january\",\r\n      value: `${currentYear}-1-1`,\r\n    },\r\n    {\r\n      name: \"february\",\r\n      value: `${currentYear}-2-1`,\r\n    },\r\n    {\r\n      name: \"march\",\r\n      value: `${currentYear}-3-1`,\r\n    },\r\n    {\r\n      name: \"april\",\r\n      value: `${currentYear}-4-1`,\r\n    },\r\n    {\r\n      name: \"may\",\r\n      value: `${currentYear}-5-1`,\r\n    },\r\n    {\r\n      name: \"june\",\r\n      value: `${currentYear}-6-1`,\r\n    },\r\n    {\r\n      name: \"july\",\r\n      value: `${currentYear}-7-1`,\r\n    },\r\n    {\r\n      name: \"august\",\r\n      value: `${currentYear}-8-1`,\r\n    },\r\n    {\r\n      name: \"september\",\r\n      value: `${currentYear}-9-1`,\r\n    },\r\n    {\r\n      name: \"october\",\r\n      value: `${currentYear}-10-1`,\r\n    },\r\n    {\r\n      name: \"november\",\r\n      value: `${currentYear}-11-1`,\r\n    },\r\n    {\r\n      name: \"december\",\r\n      value: `${currentYear}-12-1`,\r\n    },\r\n  ];\r\n\r\n  const firstDateName = months?.find((e) => e[\"value\"] === firstMonth)[\"name\"];\r\n  const secondDateName = months?.find((e) => e[\"value\"] === secondMonth)[\"name\"];\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getAllRestaurantMonthlyEarnings({\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(\r\n        getAllMarketsMonthlyEarnings({\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n  }, [dispatch, firstMonth, secondMonth]);\r\n\r\n  // ---------- JSX Code -------\r\n  return (\r\n    <>\r\n      <Stack>\r\n        {/* ******************** Line Chart Row ******************** */}\r\n        <Grid container sx={{ ...mainHolderSx }}>\r\n          {/* // ****** heading and monthes ****** */}\r\n          <Grid item xs={12} mb=\"14px\">\r\n            <Stack\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-between\"\r\n            >\r\n              <Typography sx={{ ...TilteSx }}>\r\n                {translate(`earning`)}\r\n              </Typography>\r\n            </Stack>\r\n          </Grid>\r\n\r\n          {\r\n            !isLoadingBranchesEarningMonthly ?\r\n              <>\r\n                {/* ******* Summary of Data ******** */}\r\n                <Grid item xs={12} sm={3} md={2}>\r\n                  <Stack\r\n                    direction={{ xs: \"row\", sm: \"column\" }}\r\n                    alignItems=\"left\"\r\n                    mt=\"36px\"\r\n                    justifyContent=\"space-between\"\r\n                  >\r\n                    {/* *----- Monthes Earning ----- */}\r\n                    <Box mb={{ xs: \"35px\", sm: \"60px\" }}>\r\n                      {/* --- earning this month --- */}\r\n                      <Stack direction=\"row\" alignItems=\"center\">\r\n                        <Typography sx={{ ...subTitleSx }}>\r\n                          {translate(`${firstDateName}`)}\r\n                        </Typography>\r\n\r\n                        <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                          {AllBranchesEarningMonthly?.currency}{\" \"}\r\n                          {calculateTotalEarnings(\r\n                            \"current\",\r\n                            AllBranchesEarningMonthly\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n\r\n                      {/* ---  earning last month ----*/}\r\n                      <Stack direction=\"row\" alignItems=\"center\">\r\n                        <Typography sx={{ ...subTitleSx }}>\r\n                          {translate(`${secondDateName}`)}\r\n                        </Typography>\r\n\r\n                        <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                          {AllBranchesEarningMonthly?.currency}{\" \"}\r\n                          {calculateTotalEarnings(\r\n                            \"previous\",\r\n                            AllBranchesEarningMonthly\r\n                          )}\r\n                        </Typography>\r\n                      </Stack>\r\n                    </Box>\r\n\r\n                    {/* ------ Monthes Earning labels and percentage ------ */}\r\n                    <Box>\r\n                      {/* *** First Month select *** */}\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                        mb=\"6px\"\r\n                      >\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                            alt=\"\"\r\n                          />\r\n                          <FormControl sx={{ ...monthSelectSx }}>\r\n                            <Select\r\n                              IconComponent={(props) => (\r\n                                <ArrowDropDownIcon {...props} />\r\n                              )}\r\n                              value={firstMonth}\r\n                              onChange={handleChange}\r\n                              displayEmpty\r\n                              inputProps={{ \"aria-label\": \"Without label\" }}\r\n                            >\r\n                              {months.map((month, index) => (\r\n                                <MenuItem\r\n                                  sx={{ ...titleStyle }}\r\n                                  value={month[\"value\"]}\r\n                                  key={index}\r\n                                >\r\n                                  {translate(`${month.name}`)}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Box>\r\n                      </Stack>\r\n\r\n                      {/* *** Previous Month Data *** */}\r\n                      <Stack\r\n                        direction=\"row\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                        mb=\"6px\"\r\n                      >\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                          <img\r\n                            src=\"/assets/icons/dashboard/ic_purpleBox.svg\"\r\n                            alt=\"\"\r\n                          />\r\n\r\n                          <FormControl sx={{ ...monthSelectSx }}>\r\n                            <Select\r\n                              IconComponent={(props) => (\r\n                                <ArrowDropDownIcon {...props} />\r\n                              )}\r\n                              value={secondMonth}\r\n                              onChange={handleSecondChange}\r\n                              displayEmpty\r\n                              inputProps={{ \"aria-label\": \"Without label\" }}\r\n                            >\r\n                              {months.map((month, index) => (\r\n                                <MenuItem\r\n                                  sx={{ ...titleStyle }}\r\n                                  value={month[\"value\"]}\r\n                                  key={index}\r\n                                >\r\n                                  {translate(`${month.name}`)}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </Box>\r\n                      </Stack>\r\n                    </Box>\r\n                  </Stack>\r\n                </Grid>\r\n\r\n                {/* ******* Line Chart ******** */}\r\n                <Grid item xs={12} sm={9} md={10}>\r\n                  <BranchLineChart2\r\n                    firstDateName={firstDateName}\r\n                    secondDateName={secondDateName}\r\n                  />\r\n                </Grid>\r\n              </>\r\n              :\r\n              <LoadingCharts />\r\n          }\r\n\r\n        </Grid>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\BranchReviewsSection.js",["3364","3365","3366","3367","3368","3369","3370","3371","3372"],[],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n// mui\r\nimport { Box, Stack, Grid, Typography, CircularProgress } from \"@mui/material\";\r\n//locales\r\nimport { useLocales } from \"../../../locales\";\r\n// sections components\r\nimport * as URLS from \"../../../urls\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getRestaurantReview,\r\n  getMarketReview,\r\n} from \"../../../redux/services/restaurant_service\";\r\nimport EditWorkingDayModal from \"./details/EditWorkingDaysModal\";\r\n// ------------------------------------------------------------------\r\n\r\n// ----------- styles -------------\r\nconst contentHolderSx = {\r\n  background: \"#FFFFFF\",\r\n  boxShadow: \" 0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  borderRadius: \"25px\",\r\n  padding: \"24px\",\r\n};\r\n\r\nconst titleSx = {\r\n  fontSize: \"14px\",\r\n  color: \"#121212\",\r\n  fontWeight: 600,\r\n  lineHeight: \"21px\",\r\n  letterSpacing: \".5px\",\r\n};\r\n\r\nconst reveiwTextSx = {\r\n  color: \"#535353\",\r\n  opacity: \".64\",\r\n  lineHeight: \"18px\",\r\n  fontSize: \"12px\",\r\n};\r\n\r\nconst highLightSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  color: \"#FFCC63\",\r\n};\r\n\r\nconst nameTextSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: 500,\r\n  color: \"#121212\",\r\n  letterSpacing: \".3px\",\r\n};\r\n\r\nconst rateHolderSx = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  p: \"4px 7px\",\r\n  borderRadius: \"10px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  height: \"26px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"12px\",\r\n  height: \"12px\",\r\n};\r\n\r\nconst rateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst textSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: 400,\r\n  color: \"#121212\",\r\n};\r\n\r\nexport default function BranchReviewsSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { isLoading, RestaurantsReviews, restaurantWorkTimes, restaurantInfo } =\r\n    useSelector((state) => state.branches);\r\n\r\n  const { marketReviews, marketWorkTimes, marketInfo } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const [reviews, setReviews] = useState(\r\n    localStorage.getItem(\"facilityType\") === \"0\"\r\n      ? RestaurantsReviews\r\n      : marketReviews\r\n  );\r\n\r\n  const [workTimes, setWorkingTimes] = useState(\r\n    localStorage.getItem(\"facilityType\") === \"0\"\r\n      ? restaurantWorkTimes\r\n      : marketWorkTimes\r\n  );\r\n\r\n  const openModalHandler = () => setOpenModal(true);\r\n\r\n  const closeModalHandler = () => setOpenModal(false);\r\n\r\n  const defineWorkingTime = (openTime, closeTime) => {\r\n    if (\r\n      (openTime === null || openTime === '00:00:00') &&\r\n      (closeTime === null || closeTime === '00:00:00')) {\r\n      return translate('close')\r\n    } else {\r\n      return `${openTime} - ${closeTime}`\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setReviews(\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? RestaurantsReviews\r\n        : marketReviews\r\n    );\r\n  }, [reviews]);\r\n\r\n  console.log(restaurantWorkTimes)\r\n  // ---------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Box mt=\"48px\">\r\n        <Grid\r\n          container\r\n          columnSpacing={{ xs: \"20px\", md: \"24px\" }}\r\n          rowSpacing={{ xs: \"26px\", md: \"0px\" }}\r\n        >\r\n          {/* **************** Left Side Section ******************** */}\r\n          <Grid item xs={12} sm={7} md={8} mx=\"auto\">\r\n            <Box sx={{ ...contentHolderSx }}>\r\n              <Typography mb=\"25px\" sx={{ ...titleSx }}>\r\n                {translate(\"ratings_reviews\")}\r\n              </Typography>\r\n\r\n              {reviews?.map((review, index) => (\r\n                <Box mb=\"25px\" key={index}>\r\n                  <Stack\r\n                    direction=\"row\"\r\n                    justifyContent=\"space-between\"\r\n                    mb=\"13px\"\r\n                  >\r\n                    {/* -- reviewer name -- */}\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <img\r\n                        src={\r\n                          review?.profilePictureUrl !== null\r\n                            ? `${URLS.baseImageURL}user/${review?.profilePictureUrl}`\r\n                            : \"/assets/images/dashboard/admin.png\"\r\n                        }\r\n                        style={{\r\n                          height: \"32px\",\r\n                          width: \"32px\",\r\n                          borderRadius: \"50%\",\r\n                        }}\r\n                        alt=\"\"\r\n                      />\r\n\r\n                      <Typography ml=\"8px\" sx={{ ...nameTextSx }}>\r\n                        {review?.userName}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    {/* -- review rate -- */}\r\n                    <Box\r\n                      sx={{ ...rateHolderSx, ml: { xs: \"30px\", md: \"48px\" } }}\r\n                    >\r\n                      <img\r\n                        src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                        alt=\"star\"\r\n                        style={{ ...startIconSx }}\r\n                      />\r\n                      <Typography sx={{ ...rateTextSx, ml: \"5px\" }}>\r\n                        {review?.starsCount}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Stack>\r\n\r\n                  <Typography sx={{ ...reveiwTextSx }}>\r\n                    {review?.comment}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </Grid>\r\n\r\n          {/* **************** Right Side Section ******************** */}\r\n          <Grid item xs={12} sm={5} md={4} mx=\"auto\">\r\n            <Box sx={{ ...contentHolderSx, height: \"fit-content\" }}>\r\n              {/*  ********** Title  ********* */}\r\n              <Stack\r\n                mb=\"24px\"\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <Typography sx={{ ...titleSx }}>\r\n                  {translate(\"working_days\")}\r\n                </Typography>\r\n\r\n                <Typography\r\n                  sx={{\r\n                    ...highLightSx,\r\n                    fontSize: \"14px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={openModalHandler}\r\n                >\r\n                  {translate(`edit`)}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              <Typography sx={{ ...highLightSx, color: \"#4EE476\", mb: \"28px\" }}>\r\n                {translate(\r\n                  restaurantInfo?.isOpen ? `branch_open` : `branch_close`\r\n                )}\r\n              </Typography>\r\n\r\n              {/*  ********** Workin days and Hours  ********* */}\r\n              {workTimes?.map((day, index) => (\r\n                <Stack\r\n                  key={index}\r\n                  direction=\"row\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                  mb=\"29px\"\r\n                >\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(day.name)}\r\n                  </Typography>\r\n\r\n                  <Typography sx={{ ...highLightSx, fontWeight: 400 }}>\r\n                    {/* {day.openTime === null ? translate(\"close\") : day.openTime}{\" \"}\r\n                    {day.closeTime === null ? \"\" : \" - \" + day.closeTime}\r\n                    {day.closeTime === null ? \"\" : \" - \" + day.closeTime} */}\r\n                    {defineWorkingTime(day.openTime, day.closeTime)}\r\n                  </Typography>\r\n                </Stack>\r\n              ))}\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {/* **************** Edit Working Day Modal ******************** */}\r\n      {openModal && (\r\n        <EditWorkingDayModal open={openModal} onClose={closeModalHandler} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\BranchAnalysisSection.js",["3373","3374","3375"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// apex Chart\r\nimport Chart from \"react-apexcharts\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  Grid,\r\n  Select,\r\n  Stack,\r\n  MenuItem,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// component\r\nimport DountChartCard from \"../../../components/cards/DountChartCard/DountChartCard\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport HighestMealCard from \"../../../components/cards/branch-info/HighestMealCard\";\r\nimport {\r\n  getMarketMonthlyEarnings,\r\n  getResturantMonthlyEarnings\r\n}\r\n  from \"../../../redux/services/orders_service\";\r\nimport { monthsInQuarter } from \"date-fns\";\r\nimport LoadingCharts from \"../../../components/loadingSkeleton/LoadingCharts\";\r\nimport LoadingCards from \"../../../components/loadingSkeleton/LoadingCards\";\r\n// import Person from '@material-ui/icons/Person'\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// ---------- Styles ----------\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst earnTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#495057\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"2px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  lineHeight: \"8px\",\r\n  color: \"white\",\r\n  background: \"#4EE476\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  p: { xs: \"20px\", sm: \"30px\", md: \"40px\" },\r\n  borderRadius: \"25px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst monthSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#535353\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst monthsName = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nexport default function BranchAnalysisSection() {\r\n\r\n  const dispatch = useDispatch()\r\n  const { translate } = useLocales();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const {\r\n    isloadingOrderNumber,\r\n    ordersNumber,\r\n    isloadingReviewNumber,\r\n    reviewsNumber } =\r\n    useSelector((state) => state.branches);\r\n\r\n  const { isLoadingBranchMonthlyEarnings, branchMonthlyEarnings } = useSelector((state) => state.orders);\r\n\r\n\r\n  const {\r\n    isloadingOrderNumberMarket,\r\n    ordersNumberMarket,\r\n    isloadingReviewNumberMarket,\r\n    reviewsNumberMarket\r\n  } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const currentYear = new Date().getFullYear();\r\n  const currentMonth = new Date().getMonth() + 1; //05\r\n  const previousMonth = new Date().getMonth(); //04\r\n\r\n  const currentDate = `${currentYear}-${currentMonth}-1`;\r\n  const previousDate = `${currentYear}-${previousMonth}-1`;\r\n\r\n  const [firstMonth, setFirstMonth] = useState(`${currentDate}`);\r\n  const [secondMonth, setSecondMonth] = useState(`${previousDate}`);\r\n\r\n  const months = [\r\n    {\r\n      name: \"january\",\r\n      value: `${currentYear}-1-1`,\r\n    },\r\n    {\r\n      name: \"february\",\r\n      value: `${currentYear}-2-1`,\r\n    },\r\n    {\r\n      name: \"march\",\r\n      value: `${currentYear}-3-1`,\r\n    },\r\n    {\r\n      name: \"april\",\r\n      value: `${currentYear}-4-1`,\r\n    },\r\n    {\r\n      name: \"may\",\r\n      value: `${currentYear}-5-1`,\r\n    },\r\n    {\r\n      name: \"june\",\r\n      value: `${currentYear}-6-1`,\r\n    },\r\n    {\r\n      name: \"july\",\r\n      value: `${currentYear}-7-1`,\r\n    },\r\n    {\r\n      name: \"august\",\r\n      value: `${currentYear}-8-1`,\r\n    },\r\n    {\r\n      name: \"september\",\r\n      value: `${currentYear}-9-1`,\r\n    },\r\n    {\r\n      name: \"october\",\r\n      value: `${currentYear}-10-1`,\r\n    },\r\n    {\r\n      name: \"november\",\r\n      value: `${currentYear}-11-1`,\r\n    },\r\n    {\r\n      name: \"december\",\r\n      value: `${currentYear}-12-1`,\r\n    },\r\n  ];\r\n\r\n  const firstDateName = months?.find((e) => e[\"value\"] === firstMonth)[\"name\"];\r\n  const secondDateName = months?.find((e) => e[\"value\"] === secondMonth)[\"name\"];\r\n\r\n\r\n\r\n  const LineChartData = [\r\n    {\r\n      name: firstDateName,\r\n      data: branchMonthlyEarnings?.current\r\n    },\r\n    {\r\n      name: secondDateName,\r\n      data: branchMonthlyEarnings?.previous\r\n    },\r\n  ];\r\n\r\n  const changeFirstMonthHandler = (event) => {\r\n    setFirstMonth(event.target.value);\r\n  };\r\n  const changeSecondMonthHandler = (event) => {\r\n    setSecondMonth(event.target.value);\r\n  };\r\n\r\n  const calculateTotalEarnings = (month, restaurantMonthlyEarnings) => {\r\n    if (month === \"previous\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.previous?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n    if (month === \"current\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.current?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n  };\r\n\r\n  let currentMonthEarning = +calculateTotalEarnings(\r\n    \"current\",\r\n    branchMonthlyEarnings\r\n  );\r\n  let previousMonthEarning = +calculateTotalEarnings(\r\n    \"previous\",\r\n    branchMonthlyEarnings\r\n  );\r\n\r\n  const calDifferenceFromPrev = () => {\r\n    if (previousMonthEarning > 0) {\r\n      let result = +(\r\n        ((currentMonthEarning - previousMonthEarning) / previousMonthEarning) *\r\n        100\r\n      ).toFixed(1);\r\n      return result;\r\n    }\r\n    if (previousMonthEarning === 0 && currentMonthEarning !== 0) {\r\n      return 100;\r\n    }\r\n    if (previousMonthEarning === 0 && previousMonthEarning === 0) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  calDifferenceFromPrev();\r\n\r\n  useEffect(() => {\r\n    // this is for restaurent\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getResturantMonthlyEarnings({\r\n          resturantId: branchId,\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n    // this is for market\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(\r\n        getMarketMonthlyEarnings({\r\n          marketId: branchId,\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n  }, [dispatch, firstMonth, secondMonth, branchId]);\r\n\r\n  return (\r\n    <Box>\r\n      {/* **********  Dount Chart Cards Section *********** */}\r\n      <Grid container spacing={3} mb=\"48px\">\r\n        <Grid item xs={12} sm={6} lg={4}>\r\n          {\r\n            (localStorage.getItem(\"facilityType\") === \"0\" && !isloadingOrderNumber)\r\n              ||\r\n              (localStorage.getItem(\"facilityType\") === \"1\" && !isloadingOrderNumberMarket)\r\n              ?\r\n              <DountChartCard\r\n                title=\"total_number_of_orders\"\r\n                data={\r\n                  localStorage.getItem(\"facilityType\") === \"0\"\r\n                    ? ordersNumber\r\n                    : ordersNumberMarket\r\n                }\r\n              />\r\n              :\r\n              <LoadingCards />\r\n          }\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} lg={4}>\r\n          {\r\n            (localStorage.getItem(\"facilityType\") === \"0\" && !isloadingReviewNumber)\r\n              ||\r\n              (localStorage.getItem(\"facilityType\") === \"1\" && !isloadingReviewNumberMarket)\r\n              ?\r\n              <DountChartCard\r\n                title=\"reviews\"\r\n                data={\r\n                  localStorage.getItem(\"facilityType\") === \"0\"\r\n                    ? reviewsNumber\r\n                    : reviewsNumberMarket\r\n                }\r\n              />\r\n              :\r\n              <LoadingCards />\r\n          }\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} lg={4}>\r\n          {localStorage.getItem(\"facilityType\") === \"0\" ? (\r\n            <HighestMealCard />\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* **********  Line Chart Data Section *********** */}\r\n      <Box>\r\n        {/* **********  Line Chart Data Section *********** */}\r\n        <Box sx={{ ...contentHolderSx }}>\r\n          <Grid container>\r\n            <Grid item xs={12} >\r\n              {/***** heading and monthes *****/}\r\n              <Typography sx={{ ...TilteSx }}>\r\n                {translate(`earning`)}\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {\r\n              !isLoadingBranchMonthlyEarnings ?\r\n                <>\r\n                  {/***** Monthes  Data *****/}\r\n                  <Grid item xs={12} md={2}>\r\n                    {/* **** Earning monthes data **** */}\r\n                    <Stack\r\n                      direction={{ xs: \"row\", md: \"column\" }}\r\n                      alignItems=\"left\"\r\n                      mt={{ xs: \"35px\", lg: \"49px\" }}\r\n                      justifyContent=\"space-between\"\r\n                    >\r\n                      {/* *----- Monthes Earning ----- */}\r\n                      <Box mb={{ xs: \"35px\", lg: \"50px\" }}>\r\n                        {/* --- earning this month --- */}\r\n                        <Stack direction=\"row\" alignItems=\"center\">\r\n                          <Typography sx={{ ...subTitleSx }}>\r\n                            {/* {translate(`this_month`)} */}\r\n                            {translate(firstDateName)}\r\n                          </Typography>\r\n\r\n                          <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                            {branchMonthlyEarnings?.currency}{\" \"}\r\n                            {calculateTotalEarnings(\"current\", branchMonthlyEarnings)}\r\n                          </Typography>\r\n                        </Stack>\r\n\r\n                        {/* change of earning */}\r\n                        {\r\n                          calDifferenceFromPrev() ?\r\n                            <Stack\r\n                              direction=\"row\"\r\n                              alignItems=\"center\"\r\n                              mt=\"14px\"\r\n                              mb=\"26px\"\r\n                            >\r\n\r\n                              <Typography sx={{ ...changeTextSx }}>\r\n                                {calDifferenceFromPrev()} %\r\n                              </Typography>\r\n\r\n                              <Typography ml=\"5px\" sx={{ ...miniTextSx }}>\r\n                                {translate(`from_previous_month`)}\r\n                              </Typography>\r\n                            </Stack>\r\n                            :\r\n                            <Stack my='10px' />\r\n                        }\r\n\r\n                        {/* ---  earning last month ----*/}\r\n                        <Stack direction=\"row\" alignItems=\"center\">\r\n                          <Typography sx={{ ...subTitleSx }}>\r\n                            {/* {translate(`last_month`)} */}\r\n                            {translate(secondDateName)}\r\n                          </Typography>\r\n\r\n                          <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                            {branchMonthlyEarnings?.currency}{\" \"}\r\n                            {calculateTotalEarnings(\"previous\", branchMonthlyEarnings)}\r\n                          </Typography>\r\n                        </Stack>\r\n\r\n                      </Box>\r\n\r\n                      {/* ------ Monthes Earning labels and percentage ------ */}\r\n                      <Box>\r\n                        {/* *** First Month select *** */}\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"space-between\"\r\n                        >\r\n                          <Box display=\"flex\" alignItems=\"center\">\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                            <FormControl sx={{ ...monthSelectSx }}>\r\n                              <Select\r\n                                IconComponent={(props) => (\r\n                                  <ArrowDropDownIcon {...props} />\r\n                                )}\r\n                                value={firstMonth}\r\n                                onChange={changeFirstMonthHandler}\r\n                                displayEmpty\r\n                                inputProps={{ \"aria-label\": \"Without label\" }}\r\n                              >\r\n                                {months.map((month, index) => (\r\n                                  <MenuItem\r\n                                    sx={{ ...titleStyle }}\r\n                                    value={month['value']}\r\n                                    key={index}\r\n                                  >\r\n                                    {translate(`${month[\"name\"]}`)}\r\n                                  </MenuItem>\r\n                                ))}\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Box>\r\n                        </Stack>\r\n\r\n                        {/* *** Second Month Data *** */}\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"space-between\"\r\n                        >\r\n                          <Box display=\"flex\" alignItems=\"center\">\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_purpleBox.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                            <FormControl sx={{ ...monthSelectSx }}>\r\n                              <Select\r\n                                IconComponent={(props) => (\r\n                                  <ArrowDropDownIcon {...props} />\r\n                                )}\r\n                                value={secondMonth}\r\n                                onChange={changeSecondMonthHandler}\r\n                                displayEmpty\r\n                                inputProps={{ \"aria-label\": \"Without label\" }}\r\n                              >\r\n                                {months.map((month, index) => (\r\n                                  <MenuItem\r\n                                    sx={{ ...titleStyle }}\r\n                                    value={month['value']}\r\n                                    key={index}\r\n                                  >\r\n                                    {translate(`${month[\"name\"]}`)}\r\n                                  </MenuItem>\r\n                                ))}\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Box>\r\n                        </Stack>\r\n\r\n                      </Box>\r\n                    </Stack>\r\n                  </Grid>\r\n\r\n                  {/***** Line Chart data *****/}\r\n                  <Grid item xs={12} md={10}>\r\n                    <Chart\r\n                      type=\"line\"\r\n                      width=\"102%\"\r\n                      height=\"300px\"\r\n                      series={LineChartData}\r\n                      options={{ ...customOption }}\r\n                    />\r\n\r\n                  </Grid>\r\n                </>\r\n                :\r\n                <LoadingCharts />\r\n            }\r\n\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n// Customization on  line Chart\r\nconst customOption = {\r\n  // title: { text: \"Product sell in 2021\" },\r\n  xaxis: {\r\n    // title: { text: \"Product Sell in Months\" },\r\n    categories: [...Array(31)].map((_, index) => index + 1),\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: \"#BCBCBC\",\r\n        fontSize: \"16px\",\r\n        fontWeight: 400,\r\n        cssClass: \"apexcharts-xaxis-label\",\r\n      },\r\n    },\r\n  },\r\n  yaxis: {\r\n    // title: { text: translate('earning')  },\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: \"#BCBCBC\",\r\n        fontSize: \"16px\",\r\n        fontWeight: 400,\r\n        cssClass: \"apexcharts-xaxis-label\",\r\n      },\r\n    },\r\n  },\r\n  stroke: {\r\n    curve: \"smooth\",\r\n    width: 3,\r\n  },\r\n  colors: [\"#FFCC63\", \"#BB85FF\"],\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  legend: {\r\n    show: false,\r\n  },\r\n};\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\finance\\ChartFinance.js",["3376"],[],"import React, { useState } from 'react'\r\nimport { useLocales } from '../../../locales';\r\n// apex Chart\r\nimport Chart from 'react-apexcharts';\r\n// mui\r\nimport { Box, CircularProgress, FormControl, Grid, MenuItem, Select, Stack, Typography } from '@mui/material'\r\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getRestaurantAnnualEarnings } from '../../../redux/services/restaurant_service';\r\nimport LoadingCharts from '../../../components/loadingSkeleton/LoadingCharts';\r\n\r\n\r\n// -----------------------------------------------------------\r\n\r\n// ---------- Styles ----------\r\nconst TilteSx = {\r\n    fontSize: '16px',\r\n    fontWeight: 600,\r\n    color: '#535353'\r\n}\r\n\r\nconst subTitleSx = {\r\n    fontSize: '10px',\r\n    fontWeight: 400,\r\n    color: '#BCBCBC'\r\n}\r\n\r\nconst earnTextSx = {\r\n    fontSize: '12px',\r\n    fontWeight: 500,\r\n    color: '#495057'\r\n}\r\n\r\nconst changeTextSx = {\r\n    padding: '2px',\r\n    borderRadius: '3px',\r\n    fontSize: '8px',\r\n    fontWeight: 500,\r\n    lineHeight: '8px',\r\n    color: 'white',\r\n    background: '#4EE476'\r\n}\r\n\r\nconst miniTextSx = {\r\n    fontSize: '10px',\r\n    fontWeight: 400,\r\n    color: '#BCBCBC',\r\n}\r\n\r\nconst titleStyle = {\r\n    color: \"#535353\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    lineHeight: \"19px\",\r\n}\r\n\r\nconst contentHolderSx = {\r\n    p: { xs: '20px', sm: '30px', md: '40px' },\r\n    borderRadius: '25px',\r\n    border: \"1.5px solid #ECECEC\",\r\n    background: ' #FFFFFF',\r\n    boxShadow: '2px 2px 10px rgba(0, 0, 0, 0.1)'\r\n}\r\n\r\nconst monthSelectSx = {\r\n    minWidth: '70px',\r\n    width: '110px',\r\n    '& .MuiOutlinedInput-root': {\r\n        // pr: '8px!important'\r\n    },\r\n    '& .MuiOutlinedInput-input': {\r\n        pr: '20px!important',\r\n        color: \"#535353\",\r\n        fontWeight: \"400\",\r\n        fontSize: \"12.9807px\",\r\n        pt: '5px!important',\r\n        pb: '5px!important'\r\n    },\r\n    '& .MuiSvgIcon-root': {\r\n        color: \"#535353\",\r\n        right: '0px !important'\r\n    },\r\n\r\n    '& fieldset': {\r\n        borderWidth: '0px!important',\r\n    }\r\n}\r\n\r\n\r\nexport default function ChartFinance() {\r\n\r\n    const dispatch = useDispatch()\r\n    const { translate } = useLocales();\r\n\r\n    const { isLoadingFacilityAnnualEarnings, FacilityAnnualEarning } = useSelector(state => state.branches)\r\n\r\n    const { branchId } = useSelector((state) => state.control);\r\n\r\n\r\n    const currentYear = new Date().getFullYear()\r\n\r\n    const currentDate = `${new Date().getFullYear()}-0${new Date().getMonth() + 1}-01`;\r\n    const previoustDate = `${new Date().getFullYear()}-0${new Date().getMonth()}-01`;\r\n\r\n    const [firstMonth, setFirstMonth] = useState(currentDate);\r\n\r\n    const [secondMonth, setSecondMonth] = useState(previoustDate);\r\n\r\n    const months = [\r\n        {\r\n            name: \"january\",\r\n            value: `${currentYear}-01-01`,\r\n        },\r\n        {\r\n            name: \"february\",\r\n            value: `${currentYear}-02-01`,\r\n        },\r\n        {\r\n            name: \"march\",\r\n            value: `${currentYear}-03-01`,\r\n        },\r\n        {\r\n            name: \"april\",\r\n            value: `${currentYear}-04-01`,\r\n        },\r\n        {\r\n            name: \"may\",\r\n            value: `${currentYear}-05-01`,\r\n        },\r\n        {\r\n            name: \"june\",\r\n            value: `${currentYear}-06-01`,\r\n        },\r\n        {\r\n            name: \"july\",\r\n            value: `${currentYear}-07-01`,\r\n        },\r\n        {\r\n            name: \"august\",\r\n            value: `${currentYear}-08-01`,\r\n        },\r\n        {\r\n            name: \"september\",\r\n            value: `${currentYear}-09-01`,\r\n        },\r\n        {\r\n            name: \"october\",\r\n            value: `${currentYear}-10-1`,\r\n        },\r\n        {\r\n            name: \"november\",\r\n            value: `${currentYear}-11-1`,\r\n        },\r\n        {\r\n            name: \"december\",\r\n            value: `${currentYear}-12-1`,\r\n        },\r\n    ];\r\n\r\n    const firstDateName = months?.find((e) => e[\"value\"] === firstMonth)[\"name\"];\r\n    const secondDateName = months?.find((e) => e[\"value\"] === secondMonth)[\"name\"];\r\n\r\n    const changeFirstMonthHandler = (event) => {\r\n        setFirstMonth(event.target.value);\r\n        dispatch(getRestaurantAnnualEarnings({\r\n            branchId: branchId,\r\n            date: event.target.value,\r\n            date2: secondMonth\r\n        }))\r\n    };\r\n\r\n    const changeSecondMonthHandler = (event) => {\r\n        setSecondMonth(event.target.value);\r\n        dispatch(\r\n            getRestaurantAnnualEarnings({\r\n                branchId: branchId,\r\n                date: firstMonth,\r\n                date2: event.target.value\r\n            })\r\n        );\r\n    };\r\n\r\n    const calculateTotalEarnings = (month, restaurantMonthlyEarnings) => {\r\n        if (month === \"previous\" && restaurantMonthlyEarnings) {\r\n            let totalEarnings = restaurantMonthlyEarnings?.previous?.reduce(\r\n                (acc, cur) => acc + cur,\r\n                0\r\n            );\r\n            return totalEarnings;\r\n        }\r\n        if (month === \"current\" && restaurantMonthlyEarnings) {\r\n            let totalEarnings = restaurantMonthlyEarnings?.current?.reduce(\r\n                (acc, cur) => acc + cur,\r\n                0\r\n            );\r\n            return totalEarnings;\r\n        }\r\n    };\r\n\r\n    let currentMonthEarning = +calculateTotalEarnings(\r\n        \"current\",\r\n        FacilityAnnualEarning\r\n    );\r\n\r\n    let previousMonthEarning = +calculateTotalEarnings(\r\n        \"previous\",\r\n        FacilityAnnualEarning\r\n    );\r\n\r\n    const calDifferenceFromPrev = () => {\r\n        if (previousMonthEarning > 0) {\r\n            let result = +(\r\n                ((currentMonthEarning - previousMonthEarning) / previousMonthEarning) *\r\n                100\r\n            ).toFixed(1);\r\n            return result;\r\n        }\r\n        if (previousMonthEarning === 0 && currentMonthEarning !== 0) {\r\n            return 100;\r\n        }\r\n        if (previousMonthEarning === 0 && previousMonthEarning === 0) {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    calDifferenceFromPrev();\r\n\r\n\r\n    const LineChartData =\r\n        [\r\n            {\r\n                name: firstDateName,\r\n                data: FacilityAnnualEarning?.current\r\n            },\r\n            {\r\n                name: secondDateName,\r\n                data: FacilityAnnualEarning?.previous\r\n            },\r\n        ]\r\n\r\n    // ---------- JSX Code -------\r\n    return (\r\n        <Box >\r\n            {/* **********  Line Chart Data Section *********** */}\r\n            <Box sx={{ ...contentHolderSx }}>\r\n                <Grid container >\r\n\r\n                    <Grid item xs={12} >\r\n                        {/***** heading and monthes *****/}\r\n                        <Typography sx={{ ...TilteSx }}>\r\n                            {translate(`earning`)}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {\r\n                        !isLoadingFacilityAnnualEarnings ?\r\n                            <>\r\n                                {/***** Monthes  Data *****/}\r\n                                <Grid item xs={12} md={2}>\r\n                                    {/* **** Earning monthes data **** */}\r\n                                    <Stack\r\n                                        direction={{ xs: 'row', md: 'column' }}\r\n                                        alignItems='left'\r\n                                        mt={{ xs: '35px', lg: '49px' }}\r\n                                        justifyContent='space-between'\r\n                                    >\r\n\r\n                                        {/* *----- Monthes Earning ----- */}\r\n                                        <Box mb={{ xs: '35px', lg: '50px' }}>\r\n\r\n                                            {/* --- earning this month --- */}\r\n                                            <Stack direction='row' alignItems='center'>\r\n                                                <Typography sx={{ ...subTitleSx }} >\r\n                                                    {/* {translate(`this_month`)} */}\r\n                                                    {translate(`${firstDateName}`)}\r\n                                                </Typography>\r\n\r\n                                                <Typography ml='34px' sx={{ ...earnTextSx }}>\r\n                                                    {FacilityAnnualEarning?.currency}{' '}\r\n                                                    {calculateTotalEarnings(\r\n                                                        \"current\",\r\n                                                        FacilityAnnualEarning\r\n                                                    )}\r\n                                                </Typography>\r\n                                            </Stack>\r\n\r\n                                            {/* change of earning */}\r\n                                            <Stack direction='row' alignItems='center' mt='14px' mb='26px'>\r\n                                                <Typography sx={{ ...changeTextSx }}>\r\n                                                    {calDifferenceFromPrev()} %\r\n                                                </Typography>\r\n\r\n                                                <Typography ml='5px' sx={{ ...miniTextSx }}>\r\n                                                    {translate(`from_previous_month`)}\r\n                                                </Typography>\r\n                                            </Stack>\r\n\r\n                                            {/* ---  earning last month ----*/}\r\n                                            <Stack direction='row' alignItems='center'>\r\n                                                <Typography sx={{ ...subTitleSx }} >\r\n                                                    {/* {translate(`last_month`)} */}\r\n                                                    {translate(`${secondDateName}`)}\r\n                                                </Typography>\r\n\r\n                                                <Typography ml='34px' sx={{ ...earnTextSx }}>\r\n                                                    {FacilityAnnualEarning?.currency}{' '}\r\n                                                    {calculateTotalEarnings(\r\n                                                        \"previous\",\r\n                                                        FacilityAnnualEarning\r\n                                                    )}\r\n                                                </Typography>\r\n                                            </Stack>\r\n\r\n                                        </Box>\r\n\r\n                                        {/* ------ Monthes Earning labels and percentage ------ */}\r\n                                        <Box>\r\n\r\n                                            {/* *** First Month select *** */}\r\n                                            <Stack\r\n                                                direction='row'\r\n                                                alignItems='center'\r\n                                                justifyContent='space-between'\r\n                                            >\r\n\r\n                                                <Box display='flex' alignItems='center'>\r\n                                                    <img src=\"/assets/icons/dashboard/ic_orangeBox.svg\" alt=\"\" />\r\n                                                    <FormControl sx={{ ...monthSelectSx }}>\r\n                                                        <Select\r\n                                                            IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n                                                            value={firstMonth}\r\n                                                            onChange={changeFirstMonthHandler}\r\n                                                            displayEmpty\r\n                                                            inputProps={{ 'aria-label': 'Without label' }}\r\n                                                        >\r\n                                                            {months.map((month, index) => (\r\n                                                                <MenuItem\r\n                                                                    sx={{ ...titleStyle }}\r\n                                                                    value={month[\"value\"]}\r\n                                                                    key={index}\r\n                                                                >\r\n                                                                    {translate(`${month.name}`)}\r\n                                                                </MenuItem>\r\n                                                            ))}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n\r\n                                            </Stack>\r\n\r\n\r\n                                            {/* *** Second Month Data *** */}\r\n                                            <Stack\r\n                                                direction='row'\r\n                                                alignItems='center'\r\n                                                justifyContent='space-between'\r\n                                            >\r\n\r\n                                                <Box display='flex' alignItems='center'>\r\n                                                    <img src=\"/assets/icons/dashboard/ic_purpleBox.svg\" alt=\"\" />\r\n                                                    <FormControl sx={{ ...monthSelectSx }}>\r\n                                                        <Select\r\n                                                            IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n                                                            value={secondMonth}\r\n                                                            onChange={changeSecondMonthHandler}\r\n                                                            displayEmpty\r\n                                                            inputProps={{ 'aria-label': 'Without label' }}\r\n                                                        >\r\n                                                            {months.map((month, index) => (\r\n                                                                <MenuItem\r\n                                                                    sx={{ ...titleStyle }}\r\n                                                                    value={month[\"value\"]}\r\n                                                                    key={index}\r\n                                                                >\r\n                                                                    {translate(`${month.name}`)}\r\n                                                                </MenuItem>\r\n                                                            ))}\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                </Box>\r\n\r\n                                            </Stack>\r\n\r\n                                        </Box>\r\n                                    </Stack>\r\n                                </Grid>\r\n                                {/***** Line Chart data *****/}\r\n                                <Grid item xs={12} md={10}>\r\n                                    <Chart type='line'\r\n                                        width='102%'\r\n                                        height='300px'\r\n                                        series={LineChartData}\r\n                                        options={{ ...customOption }}\r\n                                    />\r\n                                </Grid>\r\n                            </>\r\n                            :\r\n                            <LoadingCharts />\r\n                    }\r\n\r\n                </Grid>\r\n            </Box>\r\n        </Box >\r\n    )\r\n}\r\n\r\n\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n// Customization on  line Chart\r\nconst customOption = {\r\n    // title: { text: \"Product sell in 2021\" },\r\n    xaxis: {\r\n        // title: { text: \"Product Sell in Months\" },\r\n        categories: [...Array(12)].map((_, index) => index + 1),\r\n        labels: {\r\n            show: true,\r\n            style: {\r\n                colors: '#BCBCBC',\r\n                fontSize: '16px',\r\n                fontWeight: 400,\r\n                cssClass: 'apexcharts-xaxis-label',\r\n            },\r\n        },\r\n    },\r\n    yaxis: {\r\n        // title: { text: translate('earning')  },\r\n        labels: {\r\n            show: true,\r\n            style: {\r\n                colors: '#BCBCBC',\r\n                fontSize: '16px',\r\n                fontWeight: 400,\r\n                cssClass: 'apexcharts-xaxis-label',\r\n            },\r\n        },\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 3,\r\n    },\r\n    colors: [\"#FFCC63\", \"#BB85FF\"],\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    legend: {\r\n        show: false\r\n    },\r\n\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\finance\\FinanceList.js",["3377","3378","3379","3380","3381","3382","3383","3384","3385","3386","3387","3388","3389","3390","3391"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n  Box,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { _financeTable } from \"../../../_mock/arrays\";\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\nimport FinanceTableRow from \"../finance/FinanceTableRow\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport CustomCalender from \"../../../components/iconify/CustomCalender\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport { useRef } from \"react\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { employeeInvoices } from \"../../../redux/services/finance_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport EmployeeFinancePagination from \"../../../components/pagination/EmployeeFinancePagination\";\r\n\r\n// ______________________________________________________________\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"invoice_id\", label: \"invoice_id\", align: \"center\" },\r\n  { id: \"user_name\", label: \"user_name\", align: \"center\" },\r\n  { id: \"request_date\", label: \"request_date\", align: \"left\" },\r\n  { id: \"withdraw_date\", label: \"withdraw_date\", align: \"left\" },\r\n  { id: \"invoice_value\", label: \"invoice_value\", align: \"center\" },\r\n  { id: \"invoice_statue\", label: \"invoice_statue\", align: \"left\" },\r\n];\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderColor: theme.palette.primary.main,\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 30px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst tilteSx = {\r\n  color: \"#333333\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"30px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst dateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    // padding: '12px 35px'\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\nconst defaulttxtFieldSx = {\r\n  width: \"100%\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n      \"&:hover\": {\r\n        background: \"#fdcd855c\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#BCBCBC\",\r\n    cursor: \"pointer\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"3px\",\r\n    width: \"120px\",\r\n    flexDirection: \"row-reverse\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n};\r\n\r\nexport default function FinanceList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const customFormat = \"YYYY-MM-DD\";\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { isLoadingEmployee, error, invoicesList } = useSelector(\r\n    (state) => state.finance\r\n  );\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  //moment().format(customFormat)\r\n  const [dates, setDates] = useState({\r\n    startDate: \"2023-05-25\",\r\n    endDate: \"2023-05-31\",\r\n  });\r\n\r\n  const [openDatePicker, setOpenDatePicker] = useState(false);\r\n  const [openSecondPicker, setOpenSecondPicker] = useState(false);\r\n\r\n  // for restaurents\r\n  useEffect(() => {\r\n    dispatch(\r\n      employeeInvoices({ pageNumber: 1, ...dates, facilityId: branchId })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setTableData(invoicesList);\r\n  }, [invoicesList]);\r\n\r\n  const handleFirstDatePicker = (handleValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        startDate: moment(handleValue).format(customFormat),\r\n      };\r\n    });\r\n\r\n    dispatch(\r\n      employeeInvoices({\r\n        facilityId: branchId,\r\n        pageNumber: 1,\r\n        startDate: moment(handleValue).format(customFormat),\r\n        endDate: dates.endDate,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSecondtDatePicker = (handleSecondValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        endDate: moment(handleSecondValue).format(customFormat),\r\n      };\r\n    });\r\n    dispatch(\r\n      employeeInvoices({\r\n        facilityId: branchId,\r\n        pageNumber: 1,\r\n        endDate: moment(handleSecondValue).format(customFormat),\r\n        startDate: dates.startDate,\r\n      })\r\n    );\r\n  };\r\n\r\n  const TransactionRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => TransactionRef.current,\r\n  });\r\n\r\n  //_________________________________________________________________\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" sx={{ ...tilteSx, mb: \"26px\" }}>\r\n        {translate(`transaction_history`)}\r\n      </Typography>\r\n\r\n      {/* <TableTopSection counter={30} counterTilte='transaction' /> */}\r\n\r\n      {/* ********* Table title and actions Row *********** */}\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n        <Stack\r\n          direction=\"row\"\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          mb={{ xs: \"10px\", md: \"0px\" }}\r\n        >\r\n          <>\r\n            <Typography sx={{ ...totalUserSx }}>\r\n              {translate(\"total_transaction\")}:\r\n            </Typography>\r\n\r\n            <Typography sx={{ ...totalUserSx, ml: \"4px\" }}>{\"\"}</Typography>\r\n          </>\r\n        </Stack>\r\n\r\n        <Stack sx={{ ...subHolderSx }}>\r\n          {/* ---- Date Range ---- */}\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            mr={{ xs: \"0px\", md: \"30px\" }}\r\n          >\r\n            {/* ---- form Date ---- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <DatePicker\r\n                fullWidth\r\n                sx={defaulttxtFieldSx}\r\n                openTo=\"day\"\r\n                open={openDatePicker}\r\n                onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                onClose={() => setOpenDatePicker(false)}\r\n                dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                // inputFormat=\"DD/MM/YYYY\"\r\n                value={dates.startDate}\r\n                onChange={(newValue) => {\r\n                  handleFirstDatePicker(newValue);\r\n                }}\r\n                views={[\"day\", \"month\", \"year\"]}\r\n                showDaysOutsideCurrentMonth\r\n                components={{ OpenPickerIcon: CustomCalender }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    id=\"dateOfBirth\"\r\n                    {...params}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n\r\n            {/* ----- to date ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <Typography fontSize=\"12px\" fontWeight={700} color=\"#FFCC63\">\r\n                {translate(`to`)}\r\n              </Typography>\r\n              <DatePicker\r\n                fullWidth\r\n                sx={defaulttxtFieldSx}\r\n                openTo=\"day\"\r\n                open={openSecondPicker}\r\n                onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                onClose={() => setOpenSecondPicker(false)}\r\n                dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                // inputFormat=\"DD/MM/YYYY\"\r\n                value={dates.endDate}\r\n                onChange={(newValue) => {\r\n                  handleSecondtDatePicker(newValue);\r\n                }}\r\n                views={[\"day\", \"month\", \"year\"]}\r\n                showDaysOutsideCurrentMonth\r\n                components={{ OpenPickerIcon: CustomCalender }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                    sx={{ ...txtFieldBorderStyle, cursor: \"pointer\" }}\r\n                    id=\"dateOfBirth\"\r\n                    {...params}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n          </Stack>\r\n\r\n          {/* ---- print and export ---- */}\r\n          <Stack\r\n            mt={{ xs: \"15px\", md: \"0px\" }}\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n          >\r\n            {/* ----- Print ----- */}\r\n            <Button onClick={handlePrint}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                {translate(\"print\")}\r\n              </Typography>\r\n            </Button>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <DownloadTableExcel\r\n                filename=\"TransactionTable\"\r\n                sheet=\"Transaction\"\r\n                currentTableRef={TransactionRef.current}\r\n              >\r\n                <Button disableRipple>\r\n                  <Image\r\n                    disabledEffect\r\n                    src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                  />\r\n\r\n                  <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                    {translate(\"export\")}\r\n                  </Typography>\r\n                </Button>\r\n              </DownloadTableExcel>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n\r\n        <Scrollbar>\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={TransactionRef}\r\n          >\r\n            {/* ****** table head **** */}\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n\r\n            {/* ****** table body **** */}\r\n            <TableBody>\r\n              {dataFiltered\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => (\r\n                  <FinanceTableRow\r\n                    // key={row.id}\r\n                    key={index}\r\n                    row={row}\r\n                    selected={selected.includes(row.id)}\r\n                    onSelectRow={() => onSelectRow(row.id)}\r\n                    onDeleteRow={() => handleDeleteRow(row.id)}\r\n                  />\r\n                ))}\r\n\r\n              <TableEmptyRows\r\n                height={denseHeight}\r\n                emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\r\n              />\r\n\r\n              <TableNoData isNotFound={isNotFound} />\r\n            </TableBody>\r\n          </Table>\r\n        </Scrollbar>\r\n\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <EmployeeFinancePagination\r\n          dates={dates}\r\n          count={dataFiltered.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          //\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content={\r\n          <>\r\n            Are you sure want to delete <strong> {selected.length} </strong>{\" \"}\r\n            items?\r\n          </>\r\n        }\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              handleDeleteRows(selected);\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\rank\\RatedBranchCard.js",["3392"],[],"import React from \"react\";\r\nimport { useTheme } from \"@emotion/react\";\r\n//Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Stack, Typography } from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../iconify/Iconify\";\r\n// Url\r\nimport * as URLS from \"../../../urls\";\r\n// react-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"../../../redux/store\";\r\nimport { setBranchId } from \"../../../redux/slices/control\";\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// ----------- Styles --------------\r\nconst mainHolderSx = {\r\n  borderRadius: \"25px\",\r\n  boxShadow: \"0px 0px 8px rgba(1, 1, 1, 0.12)\",\r\n  background: \"#FFFFFF\",\r\n  p: \"24px\",\r\n  position: \"relative\",\r\n  height: \"136px\",\r\n};\r\n\r\nconst avatarStyle = {\r\n  width: \"56px\",\r\n  height: \"56px\",\r\n  borderRadius: \"50%\",\r\n  border: \"1px solid #ffcc63\",\r\n};\r\n\r\nconst titleTextSx = {\r\n  color: \"#A6AAB4\",\r\n  fontSize: \"14px\",\r\n  fontWeight: \"500\",\r\n};\r\n\r\nconst rateTextSx = {\r\n  color: \"#121212\",\r\n  opacity: 0.74,\r\n  fontSize: \"12px\",\r\n  fontWeight: \"700\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  color: \"#FFCC63\",\r\n  fontSize: \"13px\",\r\n  fontWeight: \"700\",\r\n  lineHeight: \"12px\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  color: \"#ABABAB\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"400\",\r\n  textDecoration: \"underline\",\r\n};\r\n\r\nconst arrowIconsStyle = {\r\n  width: \"8px\",\r\n  height: \"9px\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  color: '#4EE476',\r\n  fontWeight: 600,\r\n  fontSize: '12px'\r\n}\r\n\r\nexport default function RatedBranchCard({ title, data }) {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = useTheme();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // -------------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/*  --------- Start Title and more Btn  ---------- */}\r\n        <Stack\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          mb=\"9px\"\r\n        >\r\n          <Typography sx={{ ...titleTextSx }}>\r\n            {translate(`${title}`)}\r\n          </Typography>\r\n        </Stack>\r\n\r\n        {/*  -------------- Content Holder  ------------------ */}\r\n        <Stack direction=\"row\" alignItems=\"center\">\r\n          {/* ---- avater holder --- */}\r\n          <Box pr=\"21px\">\r\n            <img\r\n              src={\r\n                localStorage.getItem(\"facilityType\") === \"0\"\r\n                  ? URLS.baseImageURL + `resturant/${data?.imgUrl}`\r\n                  : URLS.baseImageURL + `market/${data?.imgUrl}`\r\n              }\r\n              alt=\"\"\r\n              style={avatarStyle}\r\n            />\r\n          </Box>\r\n\r\n          {/* ---- branch name and rate holder --- */}\r\n          <Stack>\r\n            <Typography sx={{ ...highLightTextSx, mb: \"6px\" }}>\r\n              {data?.name}\r\n            </Typography>\r\n            {title === \"the_highest_rated_branch\" ? (\r\n              <Stack direction=\"row\" alignItems=\"center\" mb=\"8px\">\r\n                <img\r\n                  src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                  alt=\"Avatar\"\r\n                  style={{ width: \"12px\", height: \"12px\" }}\r\n                />\r\n                <Typography sx={{ ...rateTextSx, ml: \"5px\" }}>\r\n                  {data?.rate}\r\n                </Typography>\r\n              </Stack>\r\n            ) : (\r\n                <Typography sx={{ ...miniTextSx}}>\r\n                  {data?.currency} {data?.balance}\r\n                </Typography>\r\n            )}\r\n\r\n            <Box display=\"flex\" alignItems=\"center\">\r\n              <Typography\r\n                onClick={() => {\r\n                  dispatch(setBranchId(data?.id));\r\n                  navigate(\"/employee/branch-info\");\r\n                }}\r\n                sx={{\r\n                  ...smallTextSx,\r\n                  cursor: \"pointer\",\r\n                  mr: \"8px\",\r\n                }}\r\n              >\r\n                {translate(\"view_branch_details\")}\r\n              </Typography>\r\n\r\n              <img\r\n                src=\"/assets/icons/arrow/arrow.svg\"\r\n                alt=\"Avatar\"\r\n                style={{\r\n                  ...arrowIconsStyle,\r\n                  transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                }}\r\n              />\r\n            </Box>\r\n          </Stack>\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\rank\\RankingBranchesList.js",["3393","3394","3395","3396","3397","3398","3399","3400","3401","3402","3403","3404","3405","3406","3407","3408"],[],"import React, { useRef, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  CircularProgress,\r\n  Box,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n// _mock_\r\nimport { _rankingList } from \"../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// import TableTopSection from \"../../../components/table/TableTopSection\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport CustomCalender from \"../../../components/iconify/CustomCalender\";\r\nimport RankTableRow from \"./details/RankTableRow\";\r\n\r\n// useEffect\r\nimport { useEffect } from \"react\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../redux/store\";\r\nimport RankPagination from \"../../../components/pagination/RankPagination\";\r\n\r\n//service\r\nimport {\r\n  getResturantChainRanking,\r\n  getMarketChainRanking,\r\n} from \"../../../redux/services/rank_service\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport moment from \"moment\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n// ---------------------------------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"branch_id\", label: \"branch_id\", align: \"center\" },\r\n  { id: \"branch_manager\", label: \"branch_manager\", align: \"center\" },\r\n  { id: \"branch_name\", label: \"branch_name\", align: \"left\" },\r\n  { id: \"rate\", label: \"rate\", align: \"left\" },\r\n  { id: \"total_reviews\", label: \"total_reviews\", align: \"center\" },\r\n  { id: \"good_reviews\", label: \"good_reviews\", align: \"left\" },\r\n  { id: \"bad_reviews\", label: \"bad_reviews\", align: \"left\" },\r\n  // { id: \"actions\", label: \"actions\", align: \"left\" },\r\n];\r\n\r\n// ---------- Styles --------------\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderColor: theme.palette.primary.main,\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst tilteSx = {\r\n  color: \"#333333\",\r\n  fontWeight: 600,\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst dateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#BCBCBC\",\r\n    cursor: \"pointer\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"3px\",\r\n    width: \"120px\",\r\n    flexDirection: \"row-reverse\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n};\r\n\r\nconst defaulttxtFieldSx = {\r\n  width: \"100%\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n      \"&:hover\": {\r\n        background: \"#fdcd855c\",\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    // padding: '12px 35px'\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\n\r\nexport default function RankingBranchesList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const customFormat = \"YYYY-MM-DD\";\r\n\r\n  //  get Resturant Chain Review\r\n  const { isLoadingchainRanking, chainRanking } = useSelector(\r\n    (state) => state.rank\r\n  );\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  //moment().format(customFormat)\r\n  const [dates, setDates] = useState({\r\n    from: \"2023-05-25\",\r\n    to: \"2023-05-31\",\r\n  });\r\n\r\n  const [openDatePicker, setOpenDatePicker] = useState(false);\r\n  const [openSecondPicker, setOpenSecondPicker] = useState(false);\r\n\r\n  const RankedBranchesRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => RankedBranchesRef.current,\r\n  });\r\n  // for restaurents\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getResturantChainRanking({ pageNumber: 1, ...dates }));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketChainRanking({ pageNumber: 1, ...dates }));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setTableData(chainRanking);\r\n  }, [chainRanking]);\r\n\r\n  const handleFirstDatePicker = (handleValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        from: moment(handleValue).format(customFormat),\r\n      };\r\n    });\r\n\r\n    dispatch(\r\n      getResturantChainRanking({\r\n        pageNumber: 1,\r\n        from: moment(handleValue).format(customFormat),\r\n        to: dates.to,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSecondtDatePicker = (handleSecondValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        to: moment(handleSecondValue).format(customFormat),\r\n      };\r\n    });\r\n    dispatch(\r\n      getResturantChainRanking({\r\n        pageNumber: 1,\r\n        to: moment(handleSecondValue).format(customFormat),\r\n        from: dates.from,\r\n      })\r\n    );\r\n  };\r\n\r\n  // --------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" sx={{ ...tilteSx, mb: \"26px\" }}>\r\n        {translate(`branch_rank`)}\r\n      </Typography>\r\n\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n        <Stack\r\n          direction=\"row\"\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          mb={{ xs: \"10px\", md: \"0px\" }}\r\n        >\r\n          <>\r\n            <Typography sx={{ ...totalUserSx }}>\r\n              {translate(\"total_ranked_branches\")}:\r\n            </Typography>\r\n\r\n            <Typography sx={{ ...totalUserSx, ml: \"4px\" }}></Typography>\r\n          </>\r\n        </Stack>\r\n        <Stack sx={{ ...subHolderSx }}>\r\n          {/* ---- Date Range ---- */}\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            mr={{ xs: \"0px\", md: \"30px\" }}\r\n          >\r\n            {/* ---- form Date ---- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <DatePicker\r\n                fullWidth\r\n                sx={defaulttxtFieldSx}\r\n                openTo=\"day\"\r\n                open={openDatePicker}\r\n                onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                onClose={() => setOpenDatePicker(false)}\r\n                dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                // inputFormat=\"DD/MM/YYYY\"\r\n                value={dates.from}\r\n                onChange={(newValue) => {\r\n                  handleFirstDatePicker(newValue);\r\n                }}\r\n                views={[\"day\", \"month\", \"year\"]}\r\n                showDaysOutsideCurrentMonth\r\n                components={{ OpenPickerIcon: CustomCalender }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                inputProps={\r\n                  { readOnly: true, }\r\n                }\r\n                // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                    sx={{ ...txtFieldBorderStyle }}\r\n                    id=\"dateOfBirth\"\r\n                    {...params}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n\r\n            {/* ----- to date ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\">\r\n              <Typography fontSize=\"12px\" fontWeight={700} color=\"#FFCC63\">\r\n                {translate(`to`)}\r\n              </Typography>\r\n              <DatePicker\r\n                fullWidth\r\n                sx={defaulttxtFieldSx}\r\n                openTo=\"day\"\r\n                open={openSecondPicker}\r\n                onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                onClose={() => setOpenSecondPicker(false)}\r\n                dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                // inputFormat=\"DD/MM/YYYY\"\r\n                value={dates.to}\r\n                onChange={(newValue) => {\r\n                  handleSecondtDatePicker(newValue);\r\n                }}\r\n                views={[\"day\", \"month\", \"year\"]}\r\n                showDaysOutsideCurrentMonth\r\n                components={{ OpenPickerIcon: CustomCalender }}\r\n                componentsProps={{\r\n                  actionBar: { actions: [\"accept\"] },\r\n                }}\r\n                PopperProps={{\r\n                  sx: defaultPopperSx,\r\n                }}\r\n                inputProps={\r\n                  { readOnly: true, }\r\n                }\r\n                // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                    sx={{ ...txtFieldBorderStyle, cursor: \"pointer\" }}\r\n                    id=\"dateOfBirth\"\r\n                    {...params}\r\n                  />\r\n                )}\r\n              />\r\n              <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n            </Stack>\r\n          </Stack>\r\n\r\n          {/* ---- print and export ---- */}\r\n          <Stack\r\n            mt={{ xs: \"15px\", md: \"0px\" }}\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n          >\r\n            {/* ----- Print ----- */}\r\n            <Button onClick={handlePrint}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                {translate(\"print\")}\r\n              </Typography>\r\n            </Button>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <DownloadTableExcel\r\n                filename=\"RanckedBranchesTable\"\r\n                sheet=\"RanckedBranches\"\r\n                currentTableRef={RankedBranchesRef.current}\r\n              >\r\n                <Button disableRipple>\r\n                  <Image\r\n                    disabledEffect\r\n                    src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                  />\r\n\r\n                  <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                    {translate(\"export\")}\r\n                  </Typography>\r\n                </Button>\r\n              </DownloadTableExcel>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n\r\n        <Scrollbar>\r\n\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={RankedBranchesRef}\r\n          >\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData?.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData?.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {\r\n                !isLoadingchainRanking ?\r\n                <>\r\n                {  dataFiltered\r\n                    ?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => (\r\n                      <RankTableRow\r\n                        key={row.id}\r\n                        // key={index * 2}\r\n                        row={row}\r\n                        selected={selected.includes(row.id)}\r\n                        onSelectRow={() => onSelectRow(row.id)}\r\n                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                      />\r\n                    ))}\r\n                    <TableEmptyRows\r\n                      height={denseHeight}\r\n                      emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                    />\r\n\r\n                    <TableNoData isNotFound={isNotFound} />\r\n                  </>\r\n                  :\r\n                  <LoadingTableRows number={5} cellsNum={9} />\r\n              }\r\n             \r\n            </TableBody>\r\n          </Table>\r\n\r\n\r\n        </Scrollbar>\r\n\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <RankPagination\r\n          dates={dates}\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      {/* <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content={\r\n          <>\r\n            Are you sure want to delete <strong> {selected.length} </strong>{\" \"}\r\n            items?\r\n          </>\r\n        }\r\n        action={\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"error\"\r\n            onClick={() => {\r\n              handleDeleteRows(selected);\r\n              handleCloseConfirm();\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        }\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\BestSellingBranchesSection.js",["3409","3410","3411","3412","3413","3414","3415","3416","3417","3418","3419","3420","3421","3422","3423","3424","3425"],[],"import React, { useEffect } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport {\r\n  Box,\r\n  CircularProgress,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  Pagination,\r\n  PaginationItem,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport LinearProgress, {\r\n  linearProgressClasses,\r\n} from \"@mui/material/LinearProgress\";\r\n// component\r\nimport BranchIncomingCard from \"./details/BranchIncomingCard\";\r\nimport { useTheme } from \"@emotion/react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport HighestIncomBranch from \"../../../components/pagination/HighestIncomBranch\";\r\nimport Spinner from \"../../../components/spinner/Spinner\";\r\nimport LoadingVertical from \"../../../components/loadingSkeleton/LoadingVertical\";\r\n\r\n// -----------------------------------------------------------------------------------\r\n\r\n// ---------- Styles -------------\r\nconst mainHolderSx = {\r\n  p: \"40px 24px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n  justifyContent: \"space-between\",\r\n  minHeight: \"400px\",\r\n  position: \"relative\",\r\n};\r\n\r\nconst titleHolderSx = {\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n  mb: \"18px\",\r\n};\r\n\r\nconst mainTitleSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"24px\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"20px\",\r\n  marginRight: \"7px\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst iconSx = {\r\n  width: \"5.26px\",\r\n  height: \"10.52px\",\r\n  margin: \"auto\",\r\n};\r\n\r\nconst BorderLinearProgress1 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"5.75px\",\r\n  borderRadius: 8,\r\n  width: \"197.81px\",\r\n  // marginBottom: \"37px\", //59\r\n  // marginTop: \"5px\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n        theme.palette.mode === \"light\"\r\n          ? \"rgba(255, 204, 99, 0.3)\"\r\n          : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#4E6FE4\" : \"#4E6FE4\",\r\n  },\r\n}));\r\n\r\nconst BorderLinearProgress2 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"5.75px\",\r\n  // marginTop: \"5px\",\r\n  borderRadius: 8,\r\n  width: \"172.56px\",\r\n  // marginBottom: \"35px\", //53\r\n\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n        theme.palette.mode === \"light\"\r\n          ? \"rgba(255, 204, 99, 0.3)\"\r\n          : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#4EE476\" : \"#4EE476\",\r\n  },\r\n}));\r\n\r\nconst BorderLinearProgress3 = styled(LinearProgress)(({ theme }) => ({\r\n  height: \"5.75px\",\r\n  borderRadius: 8,\r\n  width: \"147.3px\",\r\n  // marginTop: \"5px\",\r\n  [`&.${linearProgressClasses.colorPrimary}`]: {\r\n    backgroundColor:\r\n      theme.palette.grey[\r\n        theme.palette.mode === \"light\"\r\n          ? \"rgba(255, 204, 99, 0.3)\"\r\n          : \"rgba(255, 204, 99, 0.3)\"\r\n      ],\r\n  },\r\n  [`& .${linearProgressClasses.bar}`]: {\r\n    borderRadius: 8,\r\n    backgroundColor: theme.palette.mode === \"light\" ? \"#FFCC63\" : \"#FFCC63\",\r\n  },\r\n}));\r\n\r\nconst flagIconSx = {\r\n  width: \"18px\",\r\n  height: \"21.23px\",\r\n  // margin: \"auto\",\r\n  // marginRight: \"16px\",\r\n};\r\n\r\nconst locationIconSx = {\r\n  width: \"61.38px\",\r\n  height: \"64.43px\",\r\n  margin: \"auto\",\r\n};\r\n\r\nconst numberTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"24px\",\r\n  marginBottom: \"8px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  mb: \"48px\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"21px\",\r\n};\r\n\r\nexport default function BestSellingBranchesSection() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    highestIncomeBranchesSales,\r\n    isLoadingHighestIncomeBranchesSales,\r\n    restaurantsMostSelling,\r\n    restaurantBranchesIncome,\r\n    MarketMostSelling,\r\n    marketIncome,\r\n    isLoadingRestaurentsHighestIncome,\r\n    isLoadingMarketHighestIncome,\r\n\r\n    HighestBranchesSales,\r\n    isLoading,\r\n  } = useSelector((state) => state.performance);\r\n\r\n  const { branchesMostSellingCities, isLoadingMostSellingCities } = useSelector(\r\n    (state) => state.resturants\r\n  );\r\n\r\n  console.log(branchesMostSellingCities);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"most selling is\", MarketMostSelling);\r\n  // }, [dispatch]);\r\n\r\n  const { translate } = useLocales();\r\n  const theme = useTheme();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // ----------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        {/* ************** Start Highest inComing branches Section ***********  */}\r\n\r\n        <Grid item xs={12} sm={12} md={6}>\r\n          <Box sx={{ position: \"relative\" }}>\r\n            {\" \"}\r\n            <Box sx={{ ...mainHolderSx }}>\r\n              {/* ----- main Tilte of Highest incoming of branches ------ */}\r\n              <Stack sx={{ ...titleHolderSx }}>\r\n                <Typography sx={{ ...mainTitleSx }}>\r\n                  {translate(\"the_highest_income_branches\")}\r\n                </Typography>\r\n                <Box\r\n                  display=\"flex\"\r\n                  py=\"5px\"\r\n                  onClick={() =>\r\n                    navigate(\"/dashboard/performance/highest-income-branches\")\r\n                  }\r\n                >\r\n                  <Typography sx={{ ...highLightTextSx }}>\r\n                    {translate(\"view_all\")}\r\n                  </Typography>\r\n                  <img\r\n                    src=\"/assets/icons/dashboard/ic_orangeArrow.svg\"\r\n                    alt=\"arrow\"\r\n                    style={{\r\n                      ...iconSx,\r\n                      transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                    }}\r\n                  />\r\n                </Box>\r\n              </Stack>\r\n              {!isLoadingRestaurentsHighestIncome ? (\r\n                Array.isArray(highestIncomeBranchesSales) &&\r\n                highestIncomeBranchesSales.length !== 0 ? (\r\n                  highestIncomeBranchesSales.map((row, index) => (\r\n                    <Box mb=\"16px\" key={index}>\r\n                      <BranchIncomingCard row={row} />\r\n                    </Box>\r\n                  ))\r\n                ) : (\r\n                  <img\r\n                    src=\"/assets/images/tables/heigest_branches.svg\"\r\n                    alt=\"\"\r\n                    style={{\r\n                      height: \"50%\",\r\n                      width: \"50%\",\r\n                      display: \"block\",\r\n                      marginLeft: \"auto\",\r\n                      marginRight: \"auto\",\r\n                    }}\r\n                  />\r\n                )\r\n              ) : (\r\n                <LoadingVertical />\r\n              )}\r\n              {/* <Stack mt=\"50px\" /> */}\r\n              <HighestIncomBranch />\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n\r\n        {/* ******************** Start Most Selling Cities ********************* */}\r\n\r\n        <Grid item xs={12} sm={12} md={6}>\r\n          <Box sx={{ ...mainHolderSx }}>\r\n            {/* ----- main Tilte of Highest incoming of branches ------ */}\r\n            <Stack sx={{ ...titleHolderSx, mb: \"30px\" }}>\r\n              <Box display=\"flex\">\r\n                <img\r\n                  src=\"/assets/icons/flags/auth/ar_flagXS.svg\"\r\n                  alt=\"arrow\"\r\n                  style={flagIconSx}\r\n                />\r\n                <Typography sx={{ ...mainTitleSx, ml: \"16px\" }}>\r\n                  {translate(\"most_selling_cities\")}\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Box\r\n                display=\"flex\"\r\n                pt=\"5px\"\r\n                onClick={() =>\r\n                  navigate(\"/dashboard/performance/most_selling_cities\")\r\n                }\r\n              >\r\n                <Typography sx={{ ...highLightTextSx }}>\r\n                  {translate(\"view_all\")}\r\n                </Typography>\r\n                <img\r\n                  src=\"/assets/icons/dashboard/ic_orangeArrow.svg\"\r\n                  alt=\"arrow\"\r\n                  style={{\r\n                    ...iconSx,\r\n                    transform: theme.direction === \"rtl\" && \"rotate(180deg)\",\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Stack>\r\n\r\n            {!isLoadingMostSellingCities ? (\r\n              branchesMostSellingCities.length !== 0 ? (\r\n                <>\r\n                  {/* ----- Highest Selling City ------ */}\r\n                  <Stack justifyContent=\"center\" alignItems=\"center\">\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_locationPin.svg\"\r\n                      alt=\"arrow\"\r\n                      style={locationIconSx}\r\n                    />\r\n                    <Typography pt=\"18px\" sx={{ ...numberTextSx }}>\r\n                      {branchesMostSellingCities[0]?.noOfOrders}\r\n                    </Typography>\r\n                    <Typography sx={{ ...subTitleSx, mb: \"44px\" }}>\r\n                      {branchesMostSellingCities[0]?.cityName}\r\n                      {/* {restaurantsMostSelling[0].sales} */}\r\n                    </Typography>\r\n                  </Stack>\r\n                  {/* ----- Three Highest Selling City ------ */}\r\n                  <Stack justifyContent=\"space-between\" px=\"8px\">\r\n                    <Box\r\n                      display=\"flex\"\r\n                      flexDirection=\"row\"\r\n                      justifyContent=\"space-between\"\r\n                    >\r\n                      {/* ---- cities ---- */}\r\n                      <Stack flexGrow={0.6}>\r\n                        {Array.isArray(branchesMostSellingCities) &&\r\n                          branchesMostSellingCities.map((row, index) => (\r\n                            <Stack\r\n                              key={index}\r\n                              direction={{ xs: \"column\", sm: \"row\" }}\r\n                              justifyContent=\"space-between\"\r\n                            >\r\n                              <Typography\r\n                                sx={{\r\n                                  ...subTitleSx,\r\n                                  mb: { xs: \"10px\", sm: \"24px\" },\r\n                                }}\r\n                              >\r\n                                {row?.cityName}\r\n                              </Typography>\r\n                              <Typography\r\n                                sx={{ ...smallTextSx, mb: { xs: \"15px\" } }}\r\n                              >\r\n                                {row?.noOfOrders}\r\n                              </Typography>\r\n                            </Stack>\r\n                          ))}\r\n                      </Stack>\r\n\r\n                      {/* ---- progress Bar ---- */}\r\n\r\n                      {Array.isArray(branchesMostSellingCities) &&\r\n                        branchesMostSellingCities.map((row, index) => (\r\n                          <Stack\r\n                            key={index}\r\n                            justifyContent={{ xs: \"start\", sm: \"start\" }}\r\n                          >\r\n                            <Box mt=\"5px\" mb={{ xs: \"60px\", sm: \"40px\" }}>\r\n                              <BorderLinearProgress1\r\n                                variant=\"determinate\"\r\n                                value={row?.sales}\r\n                              />\r\n                            </Box>\r\n\r\n                            {/**    <Box mb={{ xs: '60px', sm: '40px' }}>\r\n                    <BorderLinearProgress2 variant=\"determinate\" value={10} />\r\n                  </Box>\r\n\r\n                  <Box>\r\n                    <BorderLinearProgress3 variant=\"determinate\" value={10} />\r\n                  </Box> */}\r\n                          </Stack>\r\n                        ))}\r\n                    </Box>\r\n                  </Stack>\r\n                </>\r\n              ) : (\r\n                <img\r\n                  src=\"/assets/images/tables/heigest_cities.svg\"\r\n                  alt=\"\"\r\n                  style={{\r\n                    height: \"50%\",\r\n                    width: \"50%\",\r\n                    display: \"block\",\r\n                    marginLeft: \"auto\",\r\n                    marginRight: \"auto\",\r\n                  }}\r\n                />\r\n              )\r\n            ) : (\r\n              <LoadingVertical />\r\n            )}\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\ContactUsHeader.js",["3426","3427","3428","3429"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// @mui\r\nimport { Box, Typography, Tab, Tabs, Badge } from \"@mui/material\";\r\nimport { useTheme } from \"@emotion/react\";\r\nimport { dispatch, useDispatch, useSelector } from \"../../../../redux/store\";\r\n\r\nimport {\r\n  getInquiry,\r\n  getInquiriesBySubject,\r\n} from \"../../../../redux/services/employee_facility_service\";\r\n\r\n// ____________________________________________________________________\r\n\r\nconst titleStyle = {\r\n  color: \"#333333\",\r\n  fontWeight: \"600\",\r\n  lineHeight: \"30px\",\r\n  mb: \"33px\",\r\n};\r\n\r\nconst containerTab = {\r\n  borderColor: \"divider\",\r\n  // display: \"flex\",\r\n  // marginBottom: { xs: '35px', sm: '50px', md: '70px' },\r\n  width: { md: \"100%\", lg: \"100%\" },\r\n  pl: { xs: \"20px\", sm: \"44px\" },\r\n  pr: { xs: \"20px\", sm: \"44px\" },\r\n  pt: { xs: \"45px\", sm: \"45px\" },\r\n  mx: \"auto\",\r\n  boxShadow: \"0px 2.8909px 7.22724px rgba(0, 0, 0, 0.1);\",\r\n  background: \"#fff\",\r\n};\r\n\r\nconst styleTabs = {\r\n  width: 1,\r\n  bottom: 0,\r\n  zIndex: 9,\r\n  minHeight: \"fit-content!important\",\r\n  \"& button.Mui-selected\": {\r\n    color: \"#FFCC63\",\r\n    fontSize: \"16px\",\r\n    fontWeight: 600,\r\n    // paddingLeft: \"45px\"\r\n    // borderBottom: '3px solid #FFCC63'\r\n  },\r\n  // bgcolor: \"background.paper\",\r\n  // \".MuiTabs-root\": {\r\n\r\n  // },\r\n  \"& .MuiTabs-flexContainer\": {\r\n    display: { xs: \"block\", md: \"flex\" },\r\n    justifyContent: { xs: \"center\", sm: \"flex-start\" },\r\n  },\r\n  \"& .MuiTab-root:not(:last-of-type)\": {\r\n    mr: \"12px \",\r\n  },\r\n  \"& .MuiTab-root:last-of-type\": {\r\n    // mr: '12px '\r\n    p: { xs: \"11px 30px\", md: \"22px 60px\" },\r\n  },\r\n\r\n  \"& .MuiTabs-scrollButtons\": {\r\n    height: { xs: \"45px\", md: \"60px\" },\r\n    width: { xs: \"45px\", md: \"60px\" },\r\n    padding: \"8px!important\",\r\n    // p: { xs: '11px 20px', md: '22px 25px' }\r\n  },\r\n  \"& .MuiButtonBase-root\": {\r\n    minWidth: \"fit-content\",\r\n    minHeight: \"auto\",\r\n    lineHeight: \"16px\",\r\n    p: { xs: \"11px 20px\", md: \"22px 35px\" },\r\n  },\r\n  \"& .MuiButtonBase-root:not(.Mui-selected)\": {\r\n    color: \"#535353\",\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    fontSize: \"20px\",\r\n    color: \"#FFCC63\",\r\n    border: \"1px solid #FFCC63\",\r\n    borderRadius: \"50%\",\r\n  },\r\n};\r\n\r\nconst styleClickableTab = {\r\n  borderRadius: \"8px\",\r\n  paddingRight: \"8px\",\r\n  paddingLeft: \"8px\",\r\n  minHeight: \"3.5px\",\r\n  minWidth: \"134px\",\r\n};\r\n\r\nconst styleTab = {\r\n  minHeight: \"35px\",\r\n  minWidth: \"134px\",\r\n};\r\n\r\nexport default function ContactUsHeader({ onChangeTab, selectedTab }) {\r\n  const { translate } = useLocales();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [currentTab, setCurrentTab] = useState(selectedTab);\r\n\r\n  const theme = useTheme();\r\n\r\n  const { direction } = theme;\r\n\r\n  const { inquiry, isLoading, badge } = useSelector(\r\n    (state) => state.employeeFacility\r\n  );\r\n\r\n  // console.log(direction)\r\n\r\n  const TABS = [\r\n    {\r\n      value: \"sendInquiry\",\r\n      label: \"send_inquiry\",\r\n    },\r\n    {\r\n      value: \"inbox\",\r\n      label: \"inbox\",\r\n    },\r\n  ];\r\n\r\n  // // to handle fullWidth of header when the component render and after dead\r\n  /* useEffect(() => {\r\n    function editPadding() {\r\n      const main = document.querySelector(\"main\");\r\n      main.style.paddingTop = \"45px\";\r\n      main.style.paddingLeft = \"0px\";\r\n      main.style.paddingRight = \"0px\";\r\n    }\r\n    editPadding();\r\n    return () => {\r\n      const main = document.querySelector(\"main\");\r\n      main.style.paddingTop = \"\";\r\n      main.style.paddingLeft = \"\";\r\n      main.style.paddingRight = \"\";\r\n    };\r\n  }, []);*/\r\n\r\n  useEffect(() => {\r\n    dispatch(getInquiry());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Box sx={{ ...containerTab }}>\r\n        <Typography variant=\"h5\" sx={{ ...titleStyle }}>\r\n          {translate(\"contact_us\")}\r\n        </Typography>\r\n        <Box position=\"relative\">\r\n          <Tabs\r\n            // position=\"relative\"\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n            TabIndicatorProps={{\r\n              style: {\r\n                border: \"2px solid #FFCC63\",\r\n                borderRadius: \"13px\",\r\n                // width: \"160px\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              },\r\n            }}\r\n            textColor=\"primary\"\r\n            value={currentTab}\r\n            onChange={(event, newValue) => {\r\n              setCurrentTab(newValue);\r\n              onChangeTab(newValue);\r\n            }}\r\n            sx={{ ...styleTabs }}\r\n          >\r\n            {TABS.map((tab) => (\r\n              <Tab\r\n                sx={\r\n                  tab.value === currentTab\r\n                    ? { styleClickableTab }\r\n                    : { styleTab }\r\n                }\r\n                key={tab.value}\r\n                value={tab.value}\r\n                label={translate(tab.label)}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n          <Badge\r\n            badgeContent={badge}\r\n            sx={{\r\n              position: \"absolute\",\r\n              fontSize: \"12px\",\r\n              top: \"50%\",\r\n              backgroundColor: \"red\",\r\n              color: \"#fff\",\r\n              left:\r\n                direction === \"rtl\"\r\n                  ? { xs: \"250px\", md: \"310px\" }\r\n                  : { xs: \"225px\", md: \"290px\" },\r\n              \"& .MuiBadge-badge\": {\r\n                backgroundColor: \"red\",\r\n                color: \"#fff\",\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\HighestIcomeChart.js",["3430","3431","3432","3433","3434","3435","3436"],[],"import React from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../locales\";\r\n// apex Chart\r\nimport Chart from \"react-apexcharts\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  Grid,\r\n  Select,\r\n  Stack,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@mui/material\";\r\n// Icons\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useSelector } from \"react-redux\";\r\n//url\r\nimport * as URLS from \"../../../urls\";\r\n\r\n// -------------------------------------------------------------------------------------\r\n\r\n// ---------- Styles ----------\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst earnTextSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"4px 8px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  lineHeight: \"8px\",\r\n  color: \"white\",\r\n  background: \"#4EE476\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  p: \"33px 28px 45px 28px\",\r\n  borderRadius: \"25px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst monthSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#535353\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nexport default function HighestIcomeChart({ selectedBranch }) {\r\n  const { annualEarningsAnalysis } = useSelector((state) => state.performance);\r\n\r\n  const { highestIncomeBranchesSales } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n  // const selectedBranchInfo = localStorage.getItem('selectedBranchInfo') && JSON.parse(localStorage.getItem('selectedBranchInfo'))\r\n  const { translate } = useLocales();\r\n\r\n  const currentYear = new Date().getFullYear();\r\n\r\n  const calculateTotalEarnings = (year, annualEarningsAnalysis) => {\r\n    if (year === \"previous\" && annualEarningsAnalysis) {\r\n      let totalEarnings = annualEarningsAnalysis?.previous?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n    if (year === \"current\" && annualEarningsAnalysis) {\r\n      let totalEarnings = annualEarningsAnalysis?.current?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n  };\r\n\r\n  let currentYearEarning = +calculateTotalEarnings(\r\n    \"current\",\r\n    annualEarningsAnalysis\r\n  );\r\n\r\n  let previousYearEarning = +calculateTotalEarnings(\r\n    \"previous\",\r\n    annualEarningsAnalysis\r\n  );\r\n\r\n  const calDifferenceFromPrev = () => {\r\n    if (previousYearEarning > 0) {\r\n      let result = +(\r\n        ((currentYearEarning - previousYearEarning) / previousYearEarning) *\r\n        100\r\n      ).toFixed(1);\r\n      return result;\r\n    }\r\n    if (previousYearEarning === 0 && currentYearEarning !== 0) {\r\n      return 100;\r\n    }\r\n    if (previousYearEarning === 0 && currentYearEarning === 0) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // Chart Data And Options\r\n  const barChartData = {\r\n    series: [\r\n      {\r\n        name: translate(`current_year`),\r\n        data: annualEarningsAnalysis?.current,\r\n        // data: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120],\r\n      },\r\n    ],\r\n    categories: [...Array(12)].map((_, index) => index + 1),\r\n  };\r\n\r\n  // option\r\n  const customOption = {\r\n    plotOptions: {\r\n      bar: {\r\n        columnWidth: \"40px\",\r\n      },\r\n    },\r\n    colors: [\"#FFCC63\", \"#535353\"],\r\n    theme: { mode: \"light\" },\r\n    xaxis: {\r\n      tickPlacement: \"on\",\r\n      labels: {\r\n        style: { fontSize: \"12\", colors: \"#BCBCBC\" },\r\n      },\r\n      categories: barChartData.categories,\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        formatter: (val) => {\r\n          return `${val}`;\r\n        },\r\n        style: { fontSize: \"12\", colors: [\"#BCBCBC\"] },\r\n      },\r\n    },\r\n    legend: {\r\n      show: false,\r\n      position: \"right\",\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n      style: {\r\n        colors: [\"#f4f4f4\"],\r\n        fontSize: 12,\r\n      },\r\n    },\r\n    stroke: {\r\n      colors: [\"transparent\"],\r\n      width: 3,\r\n    },\r\n  };\r\n\r\n  // ------------------ JSX Code ---------------\r\n  return (\r\n    <>\r\n      {/* {!isLoading && ( */}\r\n      <Box>\r\n        {/* **********  Line Chart Data Section *********** */}\r\n        <Box sx={{ ...contentHolderSx }}>\r\n          <Grid container>\r\n            {/***************** Monthes  Data *************/}\r\n            <Grid item xs={12} md={2}>\r\n              {/************* heading and monthes ***************/}\r\n              <Typography sx={{ ...TilteSx }} mb=\"24px\">\r\n                {translate(`highest_income`)}\r\n              </Typography>\r\n\r\n              {/* -------- Branch name and Logo -------- */}\r\n              <Stack direction=\"row\" mb=\"12px\">\r\n                <img\r\n                  // src={\"/assets/images/dashboard/kfc_logo.png\"}\r\n                  src={\r\n                    localStorage.getItem(\"facilityType\") === \"0\"\r\n                      ? `${URLS.baseImageURL}resturant/${selectedBranch && selectedBranch.imageUrl\r\n                      }`\r\n                      : `${URLS.baseImageURL}market/${selectedBranch && selectedBranch.imageUrl\r\n                      }`\r\n                  }\r\n                  alt=\"\"\r\n                  style={{\r\n                    width: \"24px\",\r\n                    height: \"24px\",\r\n                    borderRadius: \"50%\",\r\n                  }}\r\n                />\r\n                <Typography\r\n                  ml=\"12px\"\r\n                  fontSize=\"14px\"\r\n                  fontWeight={600}\r\n                  color=\"#ffcc63\"\r\n                >\r\n                  {selectedBranch && selectedBranch.name}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              {/* ************* Earning monthes data ************ */}\r\n              <Stack\r\n                direction={{ xs: \"row\", md: \"column\" }}\r\n                alignItems=\"left\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                {/* *----- Monthes Earning ----- */}\r\n                <Box mb=\"20px\">\r\n                  {/* --- earning this month --- */}\r\n                  <Stack direction=\"row\" alignItems=\"center\">\r\n                    <Box>\r\n                      <Typography sx={{ ...subTitleSx }}>\r\n                        {translate(`total_income`)}\r\n                      </Typography>\r\n                      <Typography fontSize=\"9px\" color=\"#bcbcbc\">\r\n                        {translate(`this_year`)} {' '}{' '}\r\n                        {`${currentYear}`}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Typography ml=\"24px\" sx={{ ...earnTextSx }}>\r\n                      {annualEarningsAnalysis?.currency} {currentYearEarning}\r\n                    </Typography>\r\n                  </Stack>\r\n\r\n                  {/* change of earning */}\r\n                  {\r\n                    calDifferenceFromPrev() !== 0 ?\r\n                      <>\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          mt=\"20px\"\r\n                          mb=\"20px\"\r\n                        >\r\n                          <Typography sx={{ ...changeTextSx }}>\r\n                            {calDifferenceFromPrev()} %\r\n                          </Typography>\r\n\r\n                          <Typography ml=\"5px\" sx={{ ...miniTextSx }}>\r\n                            {translate(`from_previous_year`)}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </>\r\n                      :\r\n                      <Stack height='50px' />\r\n                  }\r\n\r\n\r\n                  {/* ---  earning last month ----*/}\r\n                  <Stack direction=\"row\" alignItems=\"center\">\r\n                    <Typography sx={{ ...subTitleSx }}>\r\n                      {translate(`last_year`)}{' '}{' '}\r\n                      {`${currentYear - 1}`}\r\n                      {/* {translate(`${secondMonth}`)} */}\r\n                    </Typography>\r\n\r\n                    <Typography ml=\"24px\" sx={{ ...earnTextSx }}>\r\n                      {annualEarningsAnalysis?.currency} {previousYearEarning}\r\n                    </Typography>\r\n                  </Stack>\r\n                </Box>\r\n\r\n                {/* ------ Last Year Select ------ */}\r\n                {/* <Box display=\"flex\" alignItems=\"center\">\r\n                    <img\r\n                      src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                      alt=\"\"\r\n                    />\r\n                    <FormControl sx={{ ...monthSelectSx }}>\r\n                      <Select\r\n                        IconComponent={(props) => (\r\n                          <ArrowDropDownIcon {...props} />\r\n                        )}\r\n                        value={firstMonth}\r\n                        onChange={changeFirstMonthHandler}\r\n                        displayEmpty\r\n                        inputProps={{ \"aria-label\": \"Without label\" }}\r\n                      >\r\n                        <MenuItem sx={{ ...titleStyle }} value=\"last-year\">\r\n                          last-year\r\n                        </MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Box> */}\r\n              </Stack>\r\n            </Grid>\r\n\r\n            {/************* Bar Chart data ****************/}\r\n            <Grid item xs={12} md={10}>\r\n              <Chart\r\n                type=\"bar\"\r\n                width=\"102%\"\r\n                height=\"308px\"\r\n                series={barChartData.series}\r\n                options={{ ...customOption }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n      {/* )} */}\r\n    </>\r\n  );\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\PerformanceChartsSection.js",["3437","3438","3439","3440","3441","3442","3443","3444"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// apex Chart\r\nimport Chart from \"react-apexcharts\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  Grid,\r\n  Select,\r\n  Stack,\r\n  MenuItem,\r\n  Typography,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// component\r\n// import DountChartCard from '../branches/details/DountChartCard'\r\n// import HighestMealCard from './details/HighestMealCard';\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getRestaurantMonthlyEarnings,\r\n  getRestaurantOrderNumber,\r\n  getRestaurantReviewNumber,\r\n  getMarketOrdersNumber,\r\n  // getAllRestaurantMonthlyEarnings,\r\n} from \"../../../redux/services/restaurant_service\";\r\n// import Person from '@material-ui/icons/Person'\r\nimport DountChartCard2 from \"../../../components/cards/DountChartCard/DountChartCard2\";\r\nimport BranchLineChart2 from \"../../../section/@dashboard/finacial/BranchLineChart2\";\r\nimport {\r\n  getAllMarketsMonthlyEarnings,\r\n  getAllRestaurantMonthlyEarnings,\r\n} from \"../../../redux/services/performance_service\";\r\nimport { CoPresentOutlined } from \"@mui/icons-material\";\r\nimport LoadingCharts from \"../../../components/loadingSkeleton/LoadingCharts\";\r\nimport LoadingCards from \"../../../components/loadingSkeleton/LoadingCards\";\r\n// -------------------------------------------------------------------------------------\r\n\r\n// ---------- Styles ----------\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst earnTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#495057\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"3px 8px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  lineHeight: \"8px\",\r\n  color: \"white\",\r\n  background: \"#4EE476\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  p: { xs: \"20px\", sm: \"30px\", md: \"40px\" },\r\n  borderRadius: \"25px\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst monthSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#535353\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nexport default function PerformanceChartsSection() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingBranchesEarningMonthly, AllBranchesEarningMonthly } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n\r\n  const { isLoadingReviewsNumbers, isLoadingOrderNumbers, allOrdersNumber, reviewNumbers } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const currentYear = new Date().getFullYear();\r\n  // console.log(currentYear) // 2023\r\n\r\n  const currentMonth = new Date().getMonth() + 1; //05\r\n  const previousMonth = new Date().getMonth(); //04\r\n\r\n  const currentDate = `${currentYear}-${currentMonth}-1`;\r\n  const previousDate = `${currentYear}-${previousMonth}-1`;\r\n  // console.log(currentDate) // 2023-5-1\r\n  // console.log(previousDate) // 2023-4-1\r\n\r\n  const [firstMonth, setFirstMonth] = useState(`${currentDate}`);\r\n  const [secondMonth, setSecondMonth] = useState(`${previousDate}`);\r\n\r\n  const months = [\r\n    {\r\n      name: \"january\",\r\n      value: `${currentYear}-1-1`,\r\n    },\r\n    {\r\n      name: \"february\",\r\n      value: `${currentYear}-2-1`,\r\n    },\r\n    {\r\n      name: \"march\",\r\n      value: `${currentYear}-3-1`,\r\n    },\r\n    {\r\n      name: \"april\",\r\n      value: `${currentYear}-4-1`,\r\n    },\r\n    {\r\n      name: \"may\",\r\n      value: `${currentYear}-5-1`,\r\n    },\r\n    {\r\n      name: \"june\",\r\n      value: `${currentYear}-6-1`,\r\n    },\r\n    {\r\n      name: \"july\",\r\n      value: `${currentYear}-7-1`,\r\n    },\r\n    {\r\n      name: \"august\",\r\n      value: `${currentYear}-8-1`,\r\n    },\r\n    {\r\n      name: \"september\",\r\n      value: `${currentYear}-9-1`,\r\n    },\r\n    {\r\n      name: \"october\",\r\n      value: `${currentYear}-10-1`,\r\n    },\r\n    {\r\n      name: \"november\",\r\n      value: `${currentYear}-11-1`,\r\n    },\r\n    {\r\n      name: \"december\",\r\n      value: `${currentYear}-12-1`,\r\n    },\r\n  ];\r\n\r\n  const firstDateName = months?.find((e) => e[\"value\"] === firstMonth)[\"name\"];\r\n  const secondDateName = months?.find((e) => e[\"value\"] === secondMonth)[\r\n    \"name\"\r\n  ];\r\n\r\n  const firstMonthChangeHandler = (event) => {\r\n    setFirstMonth(event.target.value);\r\n  };\r\n\r\n  const secondMonthChangeHandler = (event) => {\r\n    setSecondMonth(event.target.value);\r\n  };\r\n\r\n  const calculateTotalEarnings = (month, allRestaurantMonthlyEarnings) => {\r\n    if (month === \"previous\" && allRestaurantMonthlyEarnings) {\r\n      let totalEarnings = allRestaurantMonthlyEarnings?.previous?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n    if (month === \"current\" && allRestaurantMonthlyEarnings) {\r\n      let totalEarnings = allRestaurantMonthlyEarnings?.current?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n  };\r\n\r\n  let currentMonthEarning = +calculateTotalEarnings(\r\n    \"current\",\r\n    AllBranchesEarningMonthly\r\n  );\r\n\r\n  let previousMonthEarning = +calculateTotalEarnings(\r\n    \"previous\",\r\n    AllBranchesEarningMonthly\r\n  );\r\n\r\n  const calDifferenceFromPrev = () => {\r\n    if (previousMonthEarning > 0) {\r\n      let result = +(\r\n        ((currentMonthEarning - previousMonthEarning) / previousMonthEarning) *\r\n        100\r\n      ).toFixed(1);\r\n      return result;\r\n    }\r\n    if (previousMonthEarning === 0 && currentMonthEarning !== 0) {\r\n      return 100;\r\n    }\r\n    if (previousMonthEarning === 0 && previousMonthEarning === 0) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  calDifferenceFromPrev();\r\n\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getAllRestaurantMonthlyEarnings({\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(\r\n        getAllMarketsMonthlyEarnings({\r\n          monthDate: firstMonth,\r\n          monthDate2: secondMonth,\r\n        })\r\n      );\r\n    }\r\n  }, [dispatch, firstMonth, secondMonth]);\r\n\r\n  //-------------- JSX Code -----------\r\n  return (\r\n    <>\r\n      <Box>\r\n        {/* **********  Dount Chart Cards Section *********** */}\r\n        <Grid container spacing={3} mb=\"48px\">\r\n          <Grid item xs={12} sm={6} md={6}>\r\n            {\r\n              !isLoadingOrderNumbers ?\r\n            <DountChartCard2\r\n              title=\"total_number_of_orders\"\r\n              data={allOrdersNumber}\r\n            />\r\n                :\r\n                <LoadingCards />\r\n            }\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={6}>\r\n            {\r\n              !isLoadingReviewsNumbers ?\r\n                <DountChartCard2\r\n                  title=\"reviews\"\r\n                  data={reviewNumbers}\r\n                />\r\n                :\r\n                <LoadingCards />\r\n            }\r\n\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* **********  Line Chart Data Section *********** */}\r\n        <Box sx={{ ...contentHolderSx }}>\r\n          <Grid container>\r\n\r\n            <Grid item xs={12} mb=\"14px\">\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <Typography sx={{ ...TilteSx }}>\r\n                  {translate(`earning`)}\r\n                </Typography>\r\n              </Stack>\r\n            </Grid>\r\n\r\n            {\r\n              !isLoadingBranchesEarningMonthly ?\r\n                <>\r\n                  {/***** Monthes  Data *****/}\r\n                  <Grid item xs={12} md={2}>\r\n\r\n                    {/* **** Earning monthes data **** */}\r\n                    <Stack\r\n                      direction={{ xs: \"row\", md: \"column\" }}\r\n                      alignItems=\"left\"\r\n                      mt={{ xs: \"35px\", lg: \"49px\" }}\r\n                      justifyContent=\"space-between\"\r\n                    >\r\n                      {/* *----- Monthes Earning ----- */}\r\n                      <Box mb={{ xs: \"35px\", lg: \"50px\" }}>\r\n                        {/* --- earning this month --- */}\r\n                        <Stack direction=\"row\" alignItems=\"center\">\r\n                          <Typography sx={{ ...subTitleSx }}>\r\n                            {translate(firstDateName)}\r\n                          </Typography>\r\n\r\n                          <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                            {AllBranchesEarningMonthly?.currency}{\" \"}\r\n                            {calculateTotalEarnings(\r\n                              \"current\",\r\n                              AllBranchesEarningMonthly\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n\r\n                        {/* change of earning */}\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          mt=\"14px\"\r\n                          mb=\"26px\"\r\n                        >\r\n                          <Typography sx={{ ...changeTextSx }}>\r\n                            {calDifferenceFromPrev()} %\r\n                          </Typography>\r\n\r\n                          <Typography ml=\"5px\" sx={{ ...miniTextSx }}>\r\n                            {translate(`from_previous_month`)}\r\n                          </Typography>\r\n                        </Stack>\r\n\r\n                        {/* ---  earning last month ----*/}\r\n                        <Stack direction=\"row\" alignItems=\"center\">\r\n                          <Typography sx={{ ...subTitleSx }}>\r\n                            {translate(secondDateName)}\r\n                          </Typography>\r\n\r\n                          <Typography ml=\"34px\" sx={{ ...earnTextSx }}>\r\n                            {AllBranchesEarningMonthly?.currency}{\" \"}\r\n                            {calculateTotalEarnings(\r\n                              \"previous\",\r\n                              AllBranchesEarningMonthly\r\n                            )}\r\n                          </Typography>\r\n                        </Stack>\r\n                      </Box>\r\n\r\n                      {/* ------ Monthes Earning labels and percentage ------ */}\r\n                      <Box>\r\n                        {/* *** First Month select *** */}\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"space-between\"\r\n                          mb=\"6px\"\r\n                        >\r\n                          <Box display=\"flex\" alignItems=\"center\">\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                              alt=\"\"\r\n                            />\r\n                            <FormControl sx={{ ...monthSelectSx }}>\r\n                              <Select\r\n                                IconComponent={(props) => (\r\n                                  <ArrowDropDownIcon {...props} />\r\n                                )}\r\n                                value={firstMonth}\r\n                                onChange={firstMonthChangeHandler}\r\n                                displayEmpty\r\n                                inputProps={{ \"aria-label\": \"Without label\" }}\r\n                              >\r\n                                {months?.map((month, index) => (\r\n                                  <MenuItem\r\n                                    sx={{ ...titleStyle }}\r\n                                    value={month[\"value\"]}\r\n                                    id={month[\"name\"]}\r\n                                    key={index}\r\n                                  >\r\n                                    {translate(`${month[\"name\"]}`)}\r\n                                  </MenuItem>\r\n                                ))}\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Box>\r\n                        </Stack>\r\n\r\n                        {/* *** Second Month Data *** */}\r\n                        <Stack\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"space-between\"\r\n                          mb=\"6px\"\r\n                        >\r\n                          <Box display=\"flex\" alignItems=\"center\">\r\n                            <img\r\n                              src=\"/assets/icons/dashboard/ic_purpleBox.svg\"\r\n                              alt=\"\"\r\n                            />\r\n\r\n                            <FormControl sx={{ ...monthSelectSx }}>\r\n                              <Select\r\n                                IconComponent={(props) => (\r\n                                  <ArrowDropDownIcon {...props} />\r\n                                )}\r\n                                value={secondMonth}\r\n                                onChange={secondMonthChangeHandler}\r\n                                displayEmpty\r\n                                inputProps={{ \"aria-label\": \"Without label\" }}\r\n                              >\r\n                                {months.map((month, index) => (\r\n                                  <MenuItem\r\n                                    sx={{ ...titleStyle }}\r\n                                    value={month[\"value\"]}\r\n                                    key={index}\r\n                                  >\r\n                                    {translate(`${month[\"name\"]}`)}\r\n                                  </MenuItem>\r\n                                ))}\r\n                              </Select>\r\n                            </FormControl>\r\n                          </Box>\r\n                        </Stack>\r\n                      </Box>\r\n                    </Stack>\r\n                  </Grid>\r\n\r\n                  {/***** Line Chart data *****/}\r\n                  <Grid item xs={12} sm={12} md={10}>\r\n                    <BranchLineChart2\r\n                      firstDateName={firstDateName}\r\n                      secondDateName={secondDateName}\r\n                    />\r\n                  </Grid>\r\n                </>\r\n                :\r\n                <LoadingCharts />\r\n            }\r\n\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n// ---------------------------------------------------------------------------------------\r\n\r\n// Customization on  line Chart\r\nconst customOption = {\r\n  // title: { text: \"Product sell in 2021\" },\r\n  xaxis: {\r\n    // title: { text: \"Product Sell in Months\" },\r\n    categories: [...Array(20).keys()],\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: \"#BCBCBC\",\r\n        fontSize: \"16px\",\r\n        fontWeight: 400,\r\n        cssClass: \"apexcharts-xaxis-label\",\r\n      },\r\n    },\r\n  },\r\n  yaxis: {\r\n    // title: { text: translate('earning')  },\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n        colors: \"#BCBCBC\",\r\n        fontSize: \"16px\",\r\n        fontWeight: 400,\r\n        cssClass: \"apexcharts-xaxis-label\",\r\n      },\r\n    },\r\n  },\r\n  stroke: {\r\n    curve: \"smooth\",\r\n    width: 3,\r\n  },\r\n  colors: [\"#FFCC63\", \"#BB85FF\"],\r\n  dataLabels: {\r\n    enabled: false,\r\n  },\r\n  legend: {\r\n    show: false,\r\n  },\r\n};\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\NewBranchesSection.js",["3445","3446","3447","3448","3449","3450","3451","3452","3453","3454","3455","3456","3457","3458","3459","3460","3461","3462","3463","3464","3465","3466","3467","3468","3469","3470","3471","3472"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  CircularProgress,\r\n  Stack,\r\n  Typography,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\n\r\n// _mock_\r\nimport { _newBranchesList, _newBranchesList2 } from \"../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\n// sections\r\n// import BranchTableRow from \"./details/BranchTableRow\";\r\n// locales\r\nimport { useLocales } from \"../../../locales\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// import TableTopSection from \"./details/TableTopSection\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\nimport NewBranchTableRow from \"./details/NewBranchTableRow\";\r\nimport TablePaginationCustomized from \"../../../components/table/TablePaginationCustomized\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// serrvices\r\nimport { getPendingRestaurantBranches } from \"../../../redux/services/restaurant_service\";\r\n\r\nimport CustomCalender from \"../../../components/iconify/CustomCalender\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport { getPendingMarketBranches } from \"../../../redux/services/markets_service\";\r\nimport moment from \"moment\";\r\nimport OverViewPendingBranches from \"../../../components/pagination/OverViewPendingBranches\";\r\nimport SpecialDatePicker from \"../../../components/custom-datepicker/SpecialDatePicker\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n\r\n// -----------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  // { id: \"branch_id\", label: \"branch_id\", align: \"center\" },\r\n  { id: \"branche_name\", label: \"branch_name\", align: \"center\" },\r\n  // { id: \"second_name\", label: \"second_name\", align: \"center\" },\r\n  { id: \"branche_status\", label: \"branch_status\", align: \"center\" },\r\n  { id: \"location\", label: \"location\", align: \"left\" },\r\n  // { id: \"data_completeness\", label: \"data_completeness\", align: \"left\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\n// ---------- Styles --------------\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  border: \"0px solid\",\r\n  borderColor: theme.palette.primary.main,\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"10px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    padding: \"12px 35px\",\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\n\r\nconst txtFieldBorderStyle = {\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#BCBCBC\",\r\n    cursor: \"pointer\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#BCBCBC\",\r\n    fontWeight: 500,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    height: \"48px\",\r\n    pr: \"3px\",\r\n    width: \"120px\",\r\n    flexDirection: \"row-reverse\",\r\n    \"& fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"transparent\",\r\n    },\r\n  },\r\n};\r\n\r\nconst defaulttxtFieldSx = {\r\n  width: \"100%\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    \"& fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n      \"&:hover\": {\r\n        background: \"#fdcd855c\",\r\n      },\r\n    },\r\n  },\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n// -----------------------------------------------------------------\r\n\r\nexport default function NewBranchesSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const customFormat = \"YYYY-MM-DD\";\r\n\r\n  const { isLoadingPendingRestaurantBranches, pendingRestaurantBranches } =\r\n    useSelector((state) => state.branches);\r\n\r\n  const { pendingMarketBranches } = useSelector((state) => state.market);\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage?.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [dates, setDates] = useState({\r\n    fromDate: \"2023-02-26\",\r\n    // toDate: moment().format(customFormat),\r\n    toDate: moment().format(customFormat),\r\n  });\r\n  const [openDatePicker, setOpenDatePicker] = useState(false);\r\n  const [openSecondPicker, setOpenSecondPicker] = useState(false);\r\n\r\n  const newBranchesRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => newBranchesRef.current,\r\n  });\r\n  // for restaurents\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getPendingRestaurantBranches({ pageNumber: 1, ...dates }));\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getPendingMarketBranches({ pageNumber: 1, ...dates }));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setTableData(\r\n      localStorage.getItem(\"facilityType\") === \"0\"\r\n        ? pendingRestaurantBranches\r\n        : pendingMarketBranches\r\n    );\r\n  }, [pendingRestaurantBranches, pendingMarketBranches]);\r\n\r\n  const handleFirstDatePicker = (handleValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        fromDate: moment(handleValue).format(customFormat),\r\n      };\r\n    });\r\n\r\n    dispatch(\r\n      getPendingRestaurantBranches({\r\n        pageNumber: 1,\r\n        fromDate: moment(handleValue).format(customFormat),\r\n        toDate: dates.toDate,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSecondtDatePicker = (handleSecondValue) => {\r\n    setDates((prev) => {\r\n      return {\r\n        ...prev,\r\n        toDate: moment(handleSecondValue).format(customFormat),\r\n      };\r\n    });\r\n    dispatch(\r\n      getPendingRestaurantBranches({\r\n        pageNumber: 1,\r\n        fromDate: dates.fromDate,\r\n        toDate: moment(handleSecondValue).format(customFormat),\r\n      })\r\n    );\r\n  };\r\n\r\n  // ------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Box mt=\"64px\">\r\n        <Stack sx={{ ...actionHolderSx }}>\r\n          {/* ***** total user **** */}\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n            mb={{ xs: \"10px\", md: \"0px\" }}\r\n          >\r\n            <>\r\n              <Typography sx={{ ...totalUserSx }}>\r\n                {translate(\"new_branches\")} : {/*totalPendingBranch */}\r\n              </Typography>\r\n\r\n              <Typography sx={{ ...totalUserSx, ml: \"4px\" }}>{\"\"}</Typography>\r\n            </>\r\n          </Stack>\r\n\r\n          <Stack sx={{ ...subHolderSx }}>\r\n            {/* ---- Date Range ---- */}\r\n            <Stack\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              spacing=\"18px\"\r\n              mr={{ xs: \"0px\", md: \"30px\" }}\r\n            >\r\n              {/* ---- form Date ---- */}\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                {/* <DatePicker\r\n                  components={{\r\n                    OpenPickerIcon: CustomCalender,\r\n                  }}\r\n                  componentsProps={{\r\n                    actionBar: { actions: [\"accept\"] },\r\n                  }}\r\n                  PopperProps={{\r\n                    sx: defaultPopperSx,\r\n                  }}\r\n                  disableFuture\r\n                  inputFormat=\"yyyy-MM-dd\"\r\n                  value={dates.fromDate}\r\n                  onChange={(newValue) => {\r\n                    handleFirstDatePicker(newValue);\r\n                  }}\r\n                  renderInput={({ inputRef, inputProps, InputProps }) => (\r\n                    <Box\r\n                      sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        //  border: \"1px solid red\",\r\n                        height: \"48px\",\r\n\r\n                        paddingRight: {\r\n                          xs: \"24px\",\r\n                          sm: \"24px\",\r\n                          md: \"24px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                        paddingLeft: {\r\n                          xs: \"14px\",\r\n                          sm: \"14px\",\r\n                          md: \"14px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                      }}\r\n                      ref={inputRef}\r\n                      {...inputProps}\r\n                    >\r\n                      {InputProps?.endAdornment}\r\n                      \r\n                    </Box>\r\n                  )}\r\n                /> */}\r\n\r\n                {/* <Typography sx={{ ...dateTextSx, ml: \"18px\", mr: \"12px\" }}>\r\n                  {dates.fromDate}\r\n                </Typography>\r\n\r\n                <DatePicker\r\n                  fullWidth\r\n                  sx={defaulttxtFieldSx}\r\n                  openTo=\"day\"\r\n                  open={openDatePicker}\r\n                  onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                  onClose={() => setOpenDatePicker(false)}\r\n                  dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                  // inputFormat=\"DD/MM/YYYY\"\r\n                  value={dates.fromDate}\r\n                  onChange={(newValue) => {\r\n                    handleFirstDatePicker(newValue);\r\n                  }}\r\n                  views={[\"day\", \"month\", \"year\"]}\r\n                  showDaysOutsideCurrentMonth\r\n                  components={{ OpenPickerIcon: CustomCalender }}\r\n                  componentsProps={{\r\n                    actionBar: { actions: [\"accept\"] },\r\n                  }}\r\n                  PopperProps={{\r\n                    sx: defaultPopperSx,\r\n                  }}\r\n                  inputProps={{ readOnly: true }}\r\n                  // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      onClick={() => setOpenDatePicker(!openDatePicker)}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      id=\"dateOfBirth\"\r\n                      {...params}\r\n                    />\r\n                  )}\r\n                />\r\n                <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" /> */}\r\n              </Stack>\r\n\r\n              {/* ----- to date ----- */}\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                {/* <DatePicker\r\n                  components={{\r\n                    OpenPickerIcon: CustomCalender,\r\n                  }}\r\n                  componentsProps={{\r\n                    actionBar: {\r\n                      // The actions will be the same between desktop and mobile\r\n                      actions: [\"no\", \"accept\"],\r\n                    },\r\n                  }}\r\n                  PopperProps={{\r\n                    sx: defaultPopperSx,\r\n                  }}\r\n                  disableFuture\r\n                  inputFormat=\"yyyy-MM-dd\"\r\n                  value={dates.toDate}\r\n                  onChange={(newValue) => {\r\n                    handleSecondtDatePicker(newValue);\r\n                  }}\r\n                  renderInput={({ inputRef, inputProps, InputProps }) => (\r\n                    <Box\r\n                      sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        //  border: \"1px solid red\",\r\n                        height: \"48px\",\r\n                        paddingRight: {\r\n                          xs: \"24px\",\r\n                          sm: \"24px\",\r\n                          md: \"24px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                        paddingLeft: {\r\n                          xs: \"14px\",\r\n                          sm: \"14px\",\r\n                          md: \"14px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                      }}\r\n                      ref={inputRef}\r\n                      {...inputProps}\r\n                    >\r\n                      {InputProps?.endAdornment}\r\n                    </Box>\r\n                  )}\r\n                />\r\n\r\n                <Typography sx={{ ...dateTextSx, ml: \"18px\", mr: \"12px\" }}>\r\n                  {dates.toDate}\r\n                </Typography> \r\n\r\n                <DatePicker\r\n                  fullWidth\r\n                  sx={defaulttxtFieldSx}\r\n                  openTo=\"day\"\r\n                  open={openSecondPicker}\r\n                  onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                  onClose={() => setOpenSecondPicker(false)}\r\n                  dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                  // inputFormat=\"DD/MM/YYYY\"\r\n                  value={dates.toDate}\r\n                  onChange={(newValue) => {\r\n                    handleSecondtDatePicker(newValue);\r\n                  }}\r\n                  views={[\"day\", \"month\", \"year\"]}\r\n                  showDaysOutsideCurrentMonth\r\n                  components={{ OpenPickerIcon: CustomCalender }}\r\n                  componentsProps={{\r\n                    actionBar: { actions: [\"accept\"] },\r\n                  }}\r\n                  PopperProps={{\r\n                    sx: defaultPopperSx,\r\n                  }}\r\n                  inputProps={{ readOnly: true }}\r\n                  // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      onClick={() => setOpenSecondPicker(!openSecondPicker)}\r\n                      sx={{ ...txtFieldBorderStyle, cursor: \"pointer\" }}\r\n                      id=\"dateOfBirth\"\r\n                      {...params}\r\n                    />\r\n                  )}\r\n                />\r\n\r\n                <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />*/}\r\n              </Stack>\r\n            </Stack>\r\n\r\n            {/* ---- print and export ---- */}\r\n            <Stack\r\n              mt={{ xs: \"15px\", md: \"0px\" }}\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              spacing=\"18px\"\r\n              alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n            >\r\n              {/* ----- Print ----- */}\r\n              <Button onClick={handlePrint}>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_print.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                  {translate(\"print\")}\r\n                </Typography>\r\n              </Button>\r\n\r\n              {/* ----- Export ----- */}\r\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                <DownloadTableExcel\r\n                  filename=\"newBranchesTable\"\r\n                  sheet=\"newBranches\"\r\n                  currentTableRef={newBranchesRef.current}\r\n                >\r\n                  <Button disableRipple>\r\n                    <Image\r\n                      disabledEffect\r\n                      src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                    />\r\n\r\n                    <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                      {translate(\"export\")}\r\n                    </Typography>\r\n                  </Button>\r\n                </DownloadTableExcel>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n\r\n        <StyledTableContainer>\r\n          <TableSelectedAction\r\n            dense={dense}\r\n            numSelected={selected.length}\r\n            rowCount={tableData?.length}\r\n            onSelectAllRows={(checked) =>\r\n              onSelectAllRows(\r\n                checked,\r\n                tableData?.map((row) => row.id)\r\n              )\r\n            }\r\n            action={\r\n              <Tooltip title=\"Delete\">\r\n                <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                  <Iconify icon=\"eva:trash-2-outline\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            }\r\n          />\r\n\r\n          <Scrollbar>\r\n            <Table\r\n              size={dense ? \"small\" : \"medium\"}\r\n              sx={{ ...tableHolderSx }}\r\n              ref={newBranchesRef}\r\n            >\r\n              <TableHeadCustom\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={tableData?.length}\r\n                numSelected={selected.length}\r\n                onSort={onSort}\r\n                onSelectAllRows={(checked) =>\r\n                  onSelectAllRows(\r\n                    checked,\r\n                    tableData?.map((row) => row.id)\r\n                  )\r\n                }\r\n              />\r\n\r\n              <TableBody>\r\n                {!isLoadingPendingRestaurantBranches ? (\r\n                  <>\r\n                    {dataFiltered\r\n                      ?.slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((row, index) => (\r\n                        <NewBranchTableRow\r\n                          key={row.id}\r\n                          // key={index * 2}\r\n                          row={row}\r\n                          selected={selected.includes(row.id)}\r\n                          onSelectRow={() => onSelectRow(row.id)}\r\n                          onDeleteRow={() => handleDeleteRow(row.id)}\r\n                        />\r\n                      ))}\r\n                    <TableEmptyRows\r\n                      height={denseHeight}\r\n                      emptyRows={emptyRows(\r\n                        page,\r\n                        rowsPerPage,\r\n                        tableData?.length\r\n                      )}\r\n                    />\r\n                    <TableNoData\r\n                      isNotFound={isNotFound}\r\n                      title=\"pending_branches\"\r\n                    />\r\n                  </>\r\n                ) : (\r\n                  <LoadingTableRows number={5} cellsNum={6} />\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n            {/* )} */}\r\n          </Scrollbar>\r\n          {/* --- Strat Table Pagenation --- */}\r\n\r\n          {/**OverViewPendingBranches */}\r\n          <OverViewPendingBranches\r\n            dates={dates}\r\n            count={dataFiltered?.length}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            onPageChange={onChangePage}\r\n            onRowsPerPageChange={onChangeRowsPerPage}\r\n            dense={dense}\r\n            onChangeDense={onChangeDense}\r\n          />\r\n        </StyledTableContainer>\r\n\r\n        {/* ***************** Confirm Daialog popup ***************** */}\r\n        <CustomConfirmDialog\r\n          open={openConfirm}\r\n          onClose={handleCloseConfirm}\r\n          title={translate(\"delete_item\")}\r\n          content={\r\n            <>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>\r\n          }\r\n          action={\r\n            <>\r\n              <Button\r\n                sx={cancelBtnSx}\r\n                onClick={() => {\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"cancel\")}\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\" sx={confirmBtnSx}>\r\n                {translate(\"delete\")}\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData?.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData?.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData?.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchesSection.js",["3473","3474","3475","3476","3477","3478","3479","3480","3481","3482","3483","3484"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// react router dom\r\nimport { useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Box,\r\n  CircularProgress,\r\n  Stack,\r\n  Typography,\r\n} from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../components/table\";\r\nimport BranchTableRow from \"./details/BranchTableRow\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// import TableTopSection from \"./details/TableTopSection\";\r\nimport { getAllBranchesMarket } from \"../../../redux/services/markets_service\";\r\nimport TableTopSection from \"../../../components/table/TableTopSection\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport { getAllBranches } from \"../../../redux/services/restaurant_service\";\r\nimport { Initialize } from \"../../../redux/slices/branches\";\r\nimport OverViewAllBranchesPagination from \"../../../components/pagination/OverViewAllBranchesPagination\";\r\nimport { DownloadTableExcel } from \"react-export-table-to-excel\";\r\nimport { useRef } from \"react\";\r\nimport Image from \"../../../components/image/Image\";\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport LoadingTableRows from \"../../../components/loadingSkeleton/LoadingTableRows\";\r\n// -----------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  { id: \"branch_name\", label: \"branch_name\", align: \"center\" },\r\n  { id: \"branch_status\", label: \"branch_status\", align: \"center\" },\r\n  { id: \"location\", label: \"location\", align: \"left\" },\r\n  { id: \"total_orders\", label: \"total_orders\", align: \"left\" },\r\n  { id: \"completed_orders\", label: \"completed_orders\", align: \"center\" },\r\n  { id: \"reviews\", label: \"reviews\", align: \"left\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\n// ---------- Styles --------------\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  border: \"1px solid #ECECEC\",\r\n  borderRadius: \"15px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\nexport default function BranchesSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, error, branches, isDeleted, totalNewBranch } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const { isLoadingMarket, branchesMarket } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState(\r\n    localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n  );\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    // inputData: [],\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n  const denseHeight = dense ? 52 : 72;\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n\r\n  const BranchesRef = useRef(null);\r\n\r\n  const handlePrint = useReactToPrint({\r\n    content: () => BranchesRef.current,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTableData(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n\r\n    // fetch data again after delete item\r\n    if (isDeleted) {\r\n      if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n        dispatch(\r\n          getAllBranches({\r\n            pageNumber: 1,\r\n          })\r\n        );\r\n      }\r\n      if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n        dispatch(getAllBranchesMarket({ pageNumber: 1 }));\r\n      }\r\n    }\r\n    dispatch(Initialize());\r\n  }, [dispatch, isDeleted, branches, branchesMarket]);\r\n\r\n  // ------------ JSX Code ----------\r\n  return (\r\n    <>\r\n      {/* ********* Table title and actions Row *********** */}\r\n      {/* <TableTopSection counter={branches.length} counterTilte=\"branches\" /> */}\r\n      <Stack\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        mb=\"24px\"\r\n      >\r\n        <Typography sx={{ ...totalUserSx }}>\r\n          {translate(\"total_branches\")}: {totalNewBranch}\r\n        </Typography>\r\n\r\n        {/* ---- print and export ---- */}\r\n        <Stack\r\n          mt={{ xs: \"15px\", md: \"0px\" }}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          spacing=\"18px\"\r\n          alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n        >\r\n          {/* ----- Print ----- */}\r\n\r\n          <Button onClick={handlePrint}>\r\n            <Image disabledEffect src=\"/assets/icons/dashboard/ic_print.svg\" />\r\n\r\n            <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Button>\r\n\r\n          {/* ----- Export ----- */}\r\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <DownloadTableExcel\r\n              filename=\"BranchesTable\"\r\n              sheet=\"Branches\"\r\n              currentTableRef={BranchesRef.current}\r\n            >\r\n              <Button disableRipple>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n\r\n                <Typography sx={{ ...infoSx, ml: \"8px\" }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Button>\r\n            </DownloadTableExcel>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n      {/* ***************** Table ***************** */}\r\n      <StyledTableContainer>\r\n        <TableSelectedAction\r\n          dense={dense}\r\n          numSelected={selected.length}\r\n          rowCount={tableData?.length}\r\n          onSelectAllRows={(checked) =>\r\n            onSelectAllRows(\r\n              checked,\r\n              tableData?.map((row) => row.id)\r\n            )\r\n          }\r\n          action={\r\n            <Tooltip title=\"Delete\">\r\n              <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                <Iconify icon=\"eva:trash-2-outline\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          }\r\n        />\r\n\r\n        <Scrollbar>\r\n          <Table\r\n            size={dense ? \"small\" : \"medium\"}\r\n            sx={{ ...tableHolderSx }}\r\n            ref={BranchesRef}\r\n          >\r\n            <TableHeadCustom\r\n              order={order}\r\n              orderBy={orderBy}\r\n              headLabel={TABLE_HEAD}\r\n              rowCount={tableData?.length}\r\n              numSelected={selected.length}\r\n              onSort={onSort}\r\n              onSelectAllRows={(checked) =>\r\n                onSelectAllRows(\r\n                  checked,\r\n                  tableData?.map((row) => row.id)\r\n                )\r\n              }\r\n            />\r\n            <TableBody>\r\n              {!isLoading || !isLoadingMarket ? (\r\n                <>\r\n                  {dataFiltered\r\n                    ?.slice(\r\n                      page * rowsPerPage,\r\n                      page * rowsPerPage + rowsPerPage\r\n                    )\r\n                    .map((row, index) => (\r\n                      <BranchTableRow\r\n                        key={row.id}\r\n                        // key={index * 2}\r\n                        row={row}\r\n                        selected={selected.includes(row.id)}\r\n                        onSelectRow={() => onSelectRow(row.id)}\r\n                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                      />\r\n                    ))}\r\n\r\n                  <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                  />\r\n\r\n                  <TableNoData isNotFound={isNotFound} title=\"new_branches\" />\r\n                </>\r\n              ) : (\r\n                <LoadingTableRows number={5} cellsNum={8} />\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </Scrollbar>\r\n\r\n        {/* --- Strat Table Pagenation --- */}\r\n        <OverViewAllBranchesPagination\r\n          count={dataFiltered?.length}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          onPageChange={onChangePage}\r\n          onRowsPerPageChange={onChangeRowsPerPage}\r\n          dense={dense}\r\n          onChangeDense={onChangeDense}\r\n        />\r\n      </StyledTableContainer>\r\n\r\n      {/* ***************** Confirm Daialog popup ***************** */}\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" sx={confirmBtnSx}>\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\details\\BranchInfoHeader.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\rank\\details\\LowestRate.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\details\\BranchIcomIngCard2.js",["3485"],[],"import React from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n//mui\r\nimport { Box, Grid, Typography } from \"@mui/material\";\r\n//url\r\nimport * as URLS from \"../../../../urls\";\r\n\r\n// -------------------------------------------------------\r\n\r\n//  ----------- Styles ----------\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  alignContent: \"center\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  p: { xs: \"8px 15px\", sm: \"8px 24px\" },\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"20px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  pl: { xs: \"15px\", sm: \"21px\" },\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"left\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst iconImgSx = {\r\n  width: \"10px\",\r\n  height: \"7.5px\",\r\n  margin: \"auto 16px auto 16px\",\r\n};\r\n\r\nconst logoImgSx = {\r\n  width: \"56px\",\r\n  height: \"56px\",\r\n  borderRadius: \"50%\",\r\n  margin: \"auto\",\r\n  border: \"1px solid #ffcc63\",\r\n  margingRight: \"21px\",\r\n  // marginLeft: \"16px\"\r\n};\r\n\r\nconst mainTitleSx = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"16px\",\r\n  textAlign: \"left\",\r\n};\r\n\r\nconst rateNumberSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"16px\",\r\n  paddingLeft: \"6px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"11.61px\",\r\n  height: \"11.11px\",\r\n  // margin: \"auto\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  textAlign: \"left\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  color: \"#4EE476\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n};\r\n\r\nexport default function BranchIncomingCard2({ row }) {\r\n  const { translate } = useLocales();\r\n\r\n  // --------- JSX Code ---------\r\n  return (\r\n    <>\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        <Box display=\"flex\" flexGrow={0.6}>\r\n          {/* ------- branch Status ------ */}\r\n\r\n          {/* ------- branch Logo  ------ */}\r\n          <img\r\n            // src={logoUrl}\r\n            src={\r\n              localStorage.getItem(\"facilityType\") === \"0\"\r\n                ? `${URLS.baseImageURL}resturant/${row?.imageUrl}`\r\n                : `${URLS.baseImageURL}market/${row?.imageUrl}`\r\n            }\r\n            alt=\"\"\r\n            style={{ ...logoImgSx }}\r\n          />\r\n\r\n          {/* -------- Content Holder ----- */}\r\n          <Box sx={{ ...contentHolderSx }} flexGrow={1}>\r\n            <Grid container width=\"100%\" alignItems='center'>\r\n              {/* name */}\r\n              <Grid item xs={12} md={4} >\r\n                <Box>\r\n                  <Typography sx={{ ...mainTitleSx }}>\r\n                    {/* {branchName} */}\r\n                    {row?.name}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n\r\n              {/* rate */}\r\n              <Grid item xs={12} md={4}>\r\n                <Box\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    border: '1px solid rgba(103, 103, 103, 0.1)',\r\n                    width: 'fit-content',\r\n                    p: '4px 8px',\r\n                    borderRadius: '10px'\r\n                  }}\r\n                >\r\n                  <img\r\n                    src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                    alt=\"star\"\r\n                    style={{ ...startIconSx }}\r\n                  />\r\n\r\n                  <Typography sx={{ ...rateNumberSx }}>\r\n                    {row?.rating}\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n\r\n              {/* manager */}\r\n              <Grid item xs={12} md={4}>\r\n                <Typography sx={{ ...subTitleSx }}>\r\n                  {translate(\"manager\")}{' '}:{' '}\r\n                  <Typography component={'span'} sx={{ ...subTitleSx }}>\r\n                    {row?.managerName}\r\n                  </Typography>\r\n                </Typography>\r\n\r\n                {/* <Typography sx={{ ...subTitleSx }}>\r\n                  {row?.managerName}\r\n                </Typography> */}\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* --------Branch Earning ----- */}\r\n        <Typography sx={{ ...highLightTextSx }}>\r\n          {row?.currency} {\"\"} {row?.totalIncome}\r\n        </Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\ChartsRow.js",["3486","3487"],[],"import React, { useEffect, useState } from \"react\";\r\n// @Mui\r\nimport { Grid } from \"@mui/material\";\r\n// components\r\nimport ProfileCard from \"../../../../components/cards/profile/ProfileCard\";\r\nimport DountChartCard2 from \"../../../../components/cards/DountChartCard/DountChartCard2\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getAllRestaurantOrdersNumber,\r\n  getAllMarketsOrdersNumber,\r\n} from \"../../../../redux/services/performance_service\";\r\nimport * as URLS from \"../../../../urls\";\r\nimport LoadingCards from \"../../../../components/loadingSkeleton/LoadingCards\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ChartsRow() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoadingOrderNumbers, allOrdersNumber } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getAllRestaurantOrdersNumber());\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllMarketsOrdersNumber());\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // -------------- JSX Code --------------\r\n  return (\r\n    <>\r\n      <Grid container spacing={2.5}>\r\n        <Grid item xs={12} md={6}>\r\n          <ProfileCard />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n\r\n          {\r\n            !isLoadingOrderNumbers ?\r\n              < DountChartCard2\r\n                title=\"total_number_of_orders\"\r\n                data={allOrdersNumber}\r\n              />\r\n              :\r\n              <LoadingCards />\r\n          }\r\n\r\n          {/*<DountChardCard2 title='total_number_of_orders' row={orderData} />*/}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\list\\pending\\AllBranchesSection.js",["3488","3489","3490","3491","3492","3493","3494","3495","3496","3497","3498","3499","3500","3501","3502"],[],"import React, { useEffect, useState } from \"react\";\r\nimport CustomConfirmDialog from \"../../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\nimport {\r\n  CircularProgress,\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { _newBranchesList } from \"../../../../../_mock/arrays\";\r\nimport Iconify from \"../../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../../components/scrollbar\";\r\nimport { useSettingsContext } from \"../../../../../components/settings\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n} from \"../../../../../components/table\";\r\nimport { useLocales } from \"../../../../../locales\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport NewBranchTableRow from \"../../detailes/NewBranchTableRow\";\r\nimport TableTopSection from \"../../../../../components/table/TableTopSection\";\r\nimport TablePaginationCustomized from \"../../../../../components/table/TablePaginationCustomized\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport { getAllBranches } from \"../../../../../redux/services/restaurant_service\";\r\n\r\nimport OverViewAllBranchesPagination from \"../../../../../components/pagination/OverViewAllBranchesPagination\";\r\n// -----------------------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\nconst TABLE_HEAD = [\r\n  { id: \"branche_name\", label: \"branche_name\", align: \"center\" },\r\n  { id: \"branche_status\", label: \"branche_status\", align: \"center\" },\r\n  { id: \"location\", label: \"location\", align: \"left\" },\r\n  { id: \"total_orders\", label: \"total_orders\", align: \"center\" },\r\n  { id: \"completed_orders\", label: \"completed_orders\", align: \"left\" },\r\n  { id: \"reviews\", label: \"reviews\", align: \"left\" },\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  width: \"100%\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n};\r\n\r\n// -----------------------------------------------------------------\r\n\r\nexport default function AllBranchesSection() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, error, branches, isDeleted } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const { branchesMarket } = useSelector((state) => state.market);\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState(branches);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n\r\n  const dataInPage = dataFiltered?.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const denseHeight = dense ? 52 : 72;\r\n\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n\r\n  const isNotFound =\r\n    (!dataFiltered?.length && !!filterName) ||\r\n    (!dataFiltered?.length && !!filterRole) ||\r\n    (!dataFiltered?.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData?.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage?.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData?.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage?.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered?.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage?.length) {\r\n        const newPage =\r\n          Math.ceil((tableData?.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  useEffect(() => {\r\n    setTableData(\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? branches : branchesMarket\r\n    );\r\n  }, [dispatch, branches, branchesMarket]);\r\n\r\n  // ------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Box>\r\n        {/* <TableTopSection title='new_branches' /> */}\r\n\r\n        <TableTopSection title=\"all_branches_overview\" />\r\n\r\n        <StyledTableContainer>\r\n          <TableSelectedAction\r\n            dense={dense}\r\n            numSelected={selected.length}\r\n            rowCount={tableData?.length}\r\n            onSelectAllRows={(checked) =>\r\n              onSelectAllRows(\r\n                checked,\r\n                tableData?.map((row) => row.id)\r\n              )\r\n            }\r\n            action={\r\n              <Tooltip title=\"Delete\">\r\n                <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                  <Iconify icon=\"eva:trash-2-outline\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            }\r\n          />\r\n\r\n          <Scrollbar>\r\n            {isLoading && Spinner}\r\n            {!isLoading && (\r\n              <Table\r\n                size={dense ? \"small\" : \"medium\"}\r\n                sx={{ ...tableHolderSx }}\r\n              >\r\n                <TableHeadCustom\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={tableData?.length}\r\n                  numSelected={selected?.length}\r\n                  onSort={onSort}\r\n                  onSelectAllRows={(checked) =>\r\n                    onSelectAllRows(\r\n                      checked,\r\n                      tableData?.map((row) => row.id)\r\n                    )\r\n                  }\r\n                />\r\n\r\n                {/* ****** table body **** */}\r\n                <TableBody>\r\n                  {dataFiltered\r\n                    ?.slice(\r\n                      page * rowsPerPage,\r\n                      page * rowsPerPage + rowsPerPage\r\n                    )\r\n                    .map((row, index) => (\r\n                      <NewBranchTableRow\r\n                        // key={row.id}\r\n                        key={index}\r\n                        row={row}\r\n                        selected={selected.includes(row.id)}\r\n                        onSelectRow={() => onSelectRow(row.id)}\r\n                        onDeleteRow={() => handleDeleteRow(row.id)}\r\n                      />\r\n                    ))}\r\n\r\n                  <TableEmptyRows\r\n                    height={denseHeight}\r\n                    emptyRows={emptyRows(page, rowsPerPage, tableData?.length)}\r\n                  />\r\n\r\n                  <TableNoData isNotFound={isNotFound} />\r\n                </TableBody>\r\n              </Table>\r\n            )}\r\n          </Scrollbar>\r\n          <OverViewAllBranchesPagination\r\n            count={dataFiltered?.length}\r\n            page={page}\r\n            rowsPerPage={rowsPerPage}\r\n            onPageChange={onChangePage}\r\n            onRowsPerPageChange={onChangeRowsPerPage}\r\n            dense={dense}\r\n            onChangeDense={onChangeDense}\r\n          />\r\n        </StyledTableContainer>\r\n\r\n        <CustomConfirmDialog\r\n          open={openConfirm}\r\n          onClose={handleCloseConfirm}\r\n          title={translate(\"delete_item\")}\r\n          content={\r\n            <>{translate(\"are_you_sure_you_want_to_delete_this_branch\")}</>\r\n          }\r\n          action={\r\n            <>\r\n              <Button\r\n                sx={cancelBtnSx}\r\n                onClick={() => {\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"cancel\")}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={confirmBtnSx}\r\n                onClick={() => {\r\n                  handleDeleteRows(selected);\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"delete\")}\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData?.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis?.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData?.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData?.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData?.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\list\\pending\\NewBranchwsSection.js",["3503","3504","3505","3506","3507","3508","3509","3510","3511","3512","3513","3514","3515","3516","3517","3518","3519","3520","3521"],[],"import React, { useEffect, useState } from \"react\";\r\n// react router dom\r\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport {\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  Tooltip,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n  Stack,\r\n} from \"@mui/material\";\r\n// _mock_\r\nimport {\r\n  _mybranchesList2,\r\n  _newBranchesList2,\r\n} from \"../../../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../../../components/iconify\";\r\nimport Scrollbar from \"../../../../../components/scrollbar\";\r\nimport CustomConfirmDialog from \"../../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { useSettingsContext } from \"../../../../../components/settings\";\r\nimport PaginationItem from \"@mui/material/PaginationItem\";\r\nimport {\r\n  useTable,\r\n  getComparator,\r\n  emptyRows,\r\n  TableNoData,\r\n  TableEmptyRows,\r\n  TableHeadCustom,\r\n  TableSelectedAction,\r\n  TablePaginationCustom,\r\n} from \"../../../../../components/table\";\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useLocales } from \"../../../../../locales\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport TableTopSection2 from \"../../detailes/TableTopSection2\";\r\n//import TablePaginationCustom2 from \"../../../../../components/table/TablePaginationCustom2\";\r\nimport NewBranchTableRow2 from \"../../detailes/NewBranchTableRow2\";\r\nimport TableTopSection from \"../../../../../components/table/TableTopSection\";\r\nimport TablePaginationCustomized from \"../../../../../components/table/TablePaginationCustomized\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// serrvices\r\nimport {\r\n  getPendingRestaurantBranches,\r\n  getPendingMarketBranches,\r\n} from \"../../../../../redux/services/restaurant_service\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport CustomCalender from \"../../../../../components/iconify/CustomCalender\";\r\nimport Image from \"../../../../../components/image/Image\";\r\n// -----------------------------------------------------------\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\nconst TABLE_HEAD = [\r\n  { id: \"branche_id\", label: \"branche_id\", align: \"center\" },\r\n  { id: \"branche_name\", label: \"branche_name\", align: \"center\" },\r\n  { id: \"branche_status\", label: \"branche_status\", align: \"center\" },\r\n  { id: \"location\", label: \"location\", align: \"left\" },\r\n  { id: \"data_completeness\", label: \"data_completeness\", align: \"left\" },\r\n\r\n  { id: \"action\", label: \"action\", align: \"left\" },\r\n];\r\n\r\n// ---------- Styles --------------\r\nconst StyledTableContainer = styled(TableContainer)(({ theme }) => ({\r\n  position: \"relative\",\r\n  overflow: \"unset\",\r\n  borderRadius: \"25px\",\r\n  background: \"#FFFFFF\",\r\n  border: \"1.5px solid #ECECEC\",\r\n}));\r\n\r\nconst tableHolderSx = {\r\n  minWidth: 800,\r\n  borderCollapse: \"separate\",\r\n  borderSpacing: \"0px 16px\",\r\n  paddingRight: \"19px\",\r\n  paddingLeft: \"19px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"14px\",\r\n  fontWeight: 500,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#BCBCBC\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst dateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#BCBCBC\",\r\n  lineHeight: \"15px\",\r\n};\r\n\r\nconst defaultPopperSx = {\r\n  \"& .MuiPaper-root\": {\r\n    // border: \"1px solid black\",\r\n  },\r\n  \"& .MuiCalendarPicker-root\": {\r\n    // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n    \"& .MuiPickersPopper-root\": {\r\n      inset: \"25% auto auto 60%!important\",\r\n    },\r\n  },\r\n  \"& .Mui-selected\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    color: \"#fff !important\",\r\n  },\r\n  \"& .PrivatePickersSlideTransition-root\": {},\r\n  \"& .MuiPickersDay-dayWithMargin\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n    color: \"#5C5C5C\",\r\n    fontSize: \"12px\",\r\n    fontWeight: 700,\r\n  },\r\n  \"& .MuiPickersDay-dayOutsideMonth\": {\r\n    color: \"#B3B2B2\",\r\n  },\r\n  \"& .MuiDayPicker-weekDayLabel\": {\r\n    color: \"rgb(255, 166, 0)\",\r\n    fontWeight: 700,\r\n    // backgroundColor: \"rgba(50, 136, 153)\"\r\n  },\r\n  \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n    borderColor: \"transparent\",\r\n  },\r\n  \"& .MuiButton-root\": {\r\n    background:\r\n      \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n    margin: \"auto\",\r\n    color: \"#fff\",\r\n    borderRadius: \"100px\",\r\n    marginBottom: \"20px\",\r\n    padding: \"12px 35px\",\r\n  },\r\n  \"& .MuiIconButton-root\": {\r\n    \"&:hover\": {\r\n      background: \"#fdcd855c\",\r\n    },\r\n  },\r\n  \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n  \".MuiBox-root\": {\r\n    margin: \"0px\",\r\n  },\r\n};\r\n// -----------------------------------------------------------------\r\n\r\nexport default function NewBranchwsSection() {\r\n  const [dates, setDates] = useState({\r\n    fromDate: \"1990-04-10\",\r\n    toDate: \"1990-04-18\",\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { allbranches, allbranchesMarket } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    dense,\r\n    page,\r\n    order,\r\n    orderBy,\r\n    rowsPerPage,\r\n    setPage,\r\n    //\r\n    selected,\r\n    setSelected,\r\n    onSelectRow,\r\n    onSelectAllRows,\r\n    //\r\n    onSort,\r\n    onChangeDense,\r\n    onChangePage,\r\n    onChangeRowsPerPage,\r\n  } = useTable();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { themeStretch } = useSettingsContext();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [filterName, setFilterName] = useState(\"\");\r\n\r\n  const [filterRole, setFilterRole] = useState(\"all\");\r\n\r\n  const [filterStatus, setFilterStatus] = useState(\"all\");\r\n\r\n  const dataFiltered = applyFilter({\r\n    inputData: tableData,\r\n    comparator: getComparator(order, orderBy),\r\n    filterName,\r\n    filterRole,\r\n    filterStatus,\r\n  });\r\n\r\n  const dataInPage = dataFiltered.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage\r\n  );\r\n\r\n  const denseHeight = dense ? 52 : 72;\r\n\r\n  const isFiltered =\r\n    filterName !== \"\" || filterRole !== \"all\" || filterStatus !== \"all\";\r\n\r\n  const isNotFound =\r\n    (!dataFiltered.length && !!filterName) ||\r\n    (!dataFiltered.length && !!filterRole) ||\r\n    (!dataFiltered.length && !!filterStatus);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    const deleteRow = tableData.filter((row) => row.id !== id);\r\n    setSelected([]);\r\n    setTableData(deleteRow);\r\n\r\n    if (page > 0) {\r\n      if (dataInPage.length < 2) {\r\n        setPage(page - 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDeleteRows = (selected) => {\r\n    const deleteRows = tableData.filter((row) => !selected.includes(row.id));\r\n    setSelected([]);\r\n    setTableData(deleteRows);\r\n\r\n    if (page > 0) {\r\n      if (selected.length === dataInPage.length) {\r\n        setPage(page - 1);\r\n      } else if (selected.length === dataFiltered.length) {\r\n        setPage(0);\r\n      } else if (selected.length > dataInPage.length) {\r\n        const newPage =\r\n          Math.ceil((tableData.length - selected.length) / rowsPerPage) - 1;\r\n        setPage(newPage);\r\n      }\r\n    }\r\n  };\r\n  // for restaurents\r\n  useEffect(() => {\r\n    dispatch(getPendingRestaurantBranches(dates));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    setTableData(allbranches);\r\n  }, [allbranches]);\r\n  // ------------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Box>\r\n        {/* <TableTopSection2 title='new_branches' /> */}\r\n        <Stack sx={{ ...actionHolderSx }}>\r\n          {/* ***** total user **** */}\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n            mb={{ xs: \"10px\", md: \"0px\" }}\r\n          >\r\n            <>\r\n              <Typography sx={{ ...totalUserSx }}>\r\n                {translate(\"new_branches\")}:\r\n              </Typography>\r\n\r\n              <Typography sx={{ ...totalUserSx, ml: \"4px\" }}>{}</Typography>\r\n            </>\r\n          </Stack>\r\n\r\n          <Stack sx={{ ...subHolderSx }}>\r\n            {/* ---- Date Range ---- */}\r\n            <Stack\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              spacing=\"18px\"\r\n              mr={{ xs: \"0px\", md: \"30px\" }}\r\n            >\r\n              {/* ---- form Date ---- */}\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                <DatePicker\r\n                  components={{\r\n                    OpenPickerIcon: CustomCalender,\r\n                  }}\r\n                  componentsProps={{\r\n                    actionBar: { actions: [\"accept\"] },\r\n                  }}\r\n                  PopperProps={{\r\n                    sx: defaultPopperSx,\r\n                  }}\r\n                  disableFuture\r\n                  inputFormat=\"yyyy-MM-dd\"\r\n                  value={dates.fromDate}\r\n                  onChange={(newValue) => {\r\n                    setDates((prev) => {\r\n                      return {\r\n                        ...prev,\r\n                        fromDate: `${newValue.getFullYear()}-${\r\n                          newValue.getMonth() + 1\r\n                        }-${newValue.getDate()}`,\r\n                      };\r\n                    });\r\n                    dispatch(\r\n                      getPendingRestaurantBranches({\r\n                        fromDate: `${newValue.getFullYear()}-${\r\n                          newValue.getMonth() + 1\r\n                        }-${newValue.getDate()}`,\r\n                        toDate: dates.toDate,\r\n                      })\r\n                    );\r\n                  }}\r\n                  renderInput={({ inputRef, inputProps, InputProps }) => (\r\n                    <Box\r\n                      sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        //  border: \"1px solid red\",\r\n                        height: \"48px\",\r\n\r\n                        paddingRight: {\r\n                          xs: \"24px\",\r\n                          sm: \"24px\",\r\n                          md: \"24px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                        paddingLeft: {\r\n                          xs: \"14px\",\r\n                          sm: \"14px\",\r\n                          md: \"14px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                      }}\r\n                      ref={inputRef}\r\n                      {...inputProps}\r\n                    >\r\n                      {InputProps?.endAdornment}\r\n                    </Box>\r\n                  )}\r\n                />\r\n\r\n                <Typography sx={{ ...dateTextSx, ml: \"18px\", mr: \"12px\" }}>\r\n                  {dates.fromDate}\r\n                </Typography>\r\n                <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n              </Stack>\r\n\r\n              {/* ----- to date ----- */}\r\n              <Stack direction=\"row\" alignItems=\"center\">\r\n                <Typography fontSize=\"12px\" fontWeight={700} color=\"#FFCC63\">\r\n                  {translate(`to`)}\r\n                </Typography>\r\n                <DatePicker\r\n                  components={{\r\n                    OpenPickerIcon: CustomCalender,\r\n                  }}\r\n                  componentsProps={{\r\n                    actionBar: {\r\n                      // The actions will be the same between desktop and mobile\r\n                      actions: [\"no\", \"accept\"],\r\n                    },\r\n                  }}\r\n                  PopperProps={{\r\n                    sx: defaultPopperSx,\r\n                  }}\r\n                  disableFuture\r\n                  inputFormat=\"yyyy-MM-dd\"\r\n                  value={dates.toDate}\r\n                  onChange={(newValue) => {\r\n                    setDates((prev) => {\r\n                      return {\r\n                        ...prev,\r\n                        toDate: `${newValue.getFullYear()}-${\r\n                          newValue.getMonth() + 1\r\n                        }-${newValue.getDate()}`,\r\n                      };\r\n                    });\r\n                    dispatch(\r\n                      getPendingRestaurantBranches({\r\n                        toDate: `${newValue.getFullYear()}-${\r\n                          newValue.getMonth() + 1\r\n                        }-${newValue.getDate()}`,\r\n                        fromDate: dates.fromDate,\r\n                      })\r\n                    );\r\n                  }}\r\n                  renderInput={({ inputRef, inputProps, InputProps }) => (\r\n                    <Box\r\n                      sx={{\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        //  border: \"1px solid red\",\r\n                        height: \"48px\",\r\n                        paddingRight: {\r\n                          xs: \"24px\",\r\n                          sm: \"24px\",\r\n                          md: \"24px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                        paddingLeft: {\r\n                          xs: \"14px\",\r\n                          sm: \"14px\",\r\n                          md: \"14px\",\r\n                          lg: \"0px!important\",\r\n                        },\r\n                      }}\r\n                      ref={inputRef}\r\n                      {...inputProps}\r\n                    >\r\n                      {InputProps?.endAdornment}\r\n                    </Box>\r\n                  )}\r\n                />\r\n\r\n                <Typography sx={{ ...dateTextSx, ml: \"18px\", mr: \"12px\" }}>\r\n                  {dates.toDate}\r\n                </Typography>\r\n                <img src=\"/assets/icons/dashboard/arrowNew.svg\" alt=\"\" />\r\n              </Stack>\r\n            </Stack>\r\n\r\n            {/* ---- print and export ---- */}\r\n            <Stack\r\n              mt={{ xs: \"15px\", md: \"0px\" }}\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              spacing=\"18px\"\r\n              alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n            >\r\n              {/* ----- Print ----- */}\r\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_print.svg\"\r\n                />\r\n                <Typography sx={{ ...infoSx }}>{translate(\"print\")}</Typography>\r\n              </Stack>\r\n\r\n              {/* ----- Export ----- */}\r\n              <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n                <Image\r\n                  disabledEffect\r\n                  src=\"/assets/icons/dashboard/ic_export.svg\"\r\n                />\r\n                <Typography sx={{ ...infoSx }}>\r\n                  {translate(\"export\")}\r\n                </Typography>\r\n              </Stack>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n        <StyledTableContainer>\r\n          <TableSelectedAction\r\n            dense={dense}\r\n            numSelected={selected.length}\r\n            rowCount={tableData.length}\r\n            onSelectAllRows={(checked) =>\r\n              onSelectAllRows(\r\n                checked,\r\n                tableData.map((row) => row.id)\r\n              )\r\n            }\r\n            action={\r\n              <Tooltip title=\"Delete\">\r\n                <IconButton color=\"primary\" onClick={handleOpenConfirm}>\r\n                  <Iconify icon=\"eva:trash-2-outline\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n            }\r\n          />\r\n\r\n          <Scrollbar>\r\n            <Table size={dense ? \"small\" : \"medium\"} sx={{ ...tableHolderSx }}>\r\n              <TableHeadCustom\r\n                order={order}\r\n                orderBy={orderBy}\r\n                headLabel={TABLE_HEAD}\r\n                rowCount={tableData.length}\r\n                numSelected={selected.length}\r\n                onSort={onSort}\r\n                onSelectAllRows={(checked) =>\r\n                  onSelectAllRows(\r\n                    checked,\r\n                    tableData.map((row) => row.id)\r\n                  )\r\n                }\r\n              />\r\n\r\n              {/* ****** table body **** */}\r\n              <TableBody>\r\n                {dataFiltered\r\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row) => (\r\n                    <NewBranchTableRow2\r\n                      key={row.id}\r\n                      row={row}\r\n                      selected={selected.includes(row.id)}\r\n                      onSelectRow={() => onSelectRow(row.id)}\r\n                      onDeleteRow={() => handleDeleteRow(row.id)}\r\n                    />\r\n                  ))}\r\n\r\n                <TableEmptyRows\r\n                  height={denseHeight}\r\n                  emptyRows={emptyRows(page, rowsPerPage, tableData.length)}\r\n                />\r\n\r\n                <TableNoData isNotFound={isNotFound} />\r\n              </TableBody>\r\n            </Table>\r\n\r\n            {/* <Box \r\n                        textAlign={\"center\"} \r\n                        alignItems={\"center\"} \r\n                        paddingBottom={\"41px\"} \r\n                        paddingRight={\"24px\"} \r\n                        paddingLeft={\"24px\"} \r\n                        display={\"flex\"} justifyContent={\"space-between\"}\r\n                        >\r\n                            <Box display={\"flex\"}>\r\n                                <Typography sx={titleStyle}>\r\n                                    {translate(\"rows_per_page\")}\r\n                                </Typography>\r\n                                <img\r\n                                    src=\"/assets/icons/arrow/arrowDown.svg\"\r\n                                    alt=\"arrow\"\r\n                                    style={arrowStyle} />\r\n                            </Box>\r\n                            <Stack className={classes.root} textAlign={\"right\"}>\r\n                                <Pagination\r\n                                    count={5}\r\n                                    renderItem={(item) => (\r\n                                        <PaginationItem\r\n                                            slots={{ previous: KeyboardDoubleArrowLeftIcon, next: KeyboardDoubleArrowRightIcon }}\r\n                                            {...item}\r\n                                        />\r\n                                    )}\r\n                                    color=\"primary\" />\r\n                            </Stack>\r\n                        </Box> */}\r\n          </Scrollbar>\r\n          {/* --- Strat Table Pagenation --- */}\r\n\r\n          <TablePaginationCustomized\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={dataInPage.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={onChangePage}\r\n            onRowsPerPageChange={onChangeRowsPerPage}\r\n          />\r\n        </StyledTableContainer>\r\n\r\n        {/* ***************** Confirm Daialog popup ***************** */}\r\n        <CustomConfirmDialog\r\n          open={openConfirm}\r\n          onClose={handleCloseConfirm}\r\n          title={translate(\"delete_item\")}\r\n          content={\r\n            <>{translate(\"are_you_sure_you_want_to_delete_this_branch\")}</>\r\n          }\r\n          action={\r\n            <>\r\n              <Button\r\n                sx={cancelBtnSx}\r\n                onClick={() => {\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"cancel\")}\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                sx={confirmBtnSx}\r\n                onClick={() => {\r\n                  handleDeleteRows(selected);\r\n                  handleCloseConfirm();\r\n                }}\r\n              >\r\n                {translate(\"delete\")}\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction applyFilter({\r\n  inputData,\r\n  comparator,\r\n  filterName,\r\n  filterStatus,\r\n  filterRole,\r\n}) {\r\n  const stabilizedThis = inputData.map((el, index) => [el, index]);\r\n\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n\r\n  inputData = stabilizedThis.map((el) => el[0]);\r\n\r\n  if (filterName) {\r\n    inputData = inputData.filter(\r\n      (user) => user.name.toLowerCase().indexOf(filterName.toLowerCase()) !== -1\r\n    );\r\n  }\r\n\r\n  if (filterStatus !== \"all\") {\r\n    inputData = inputData.filter((user) => user.status === filterStatus);\r\n  }\r\n\r\n  if (filterRole !== \"all\") {\r\n    inputData = inputData.filter((user) => user.role === filterRole);\r\n  }\r\n\r\n  return inputData;\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\config.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\theme\\overrides\\CustomIcons.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scrollbar\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\logo\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\nav\\config.js",["3522"],[],"// routes\r\nimport { PATH_DASHBOARD } from \"../../../routes/paths\";\r\n\r\nimport SvgColor from \"../../../components/svg-color\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst icon = (name) => (\r\n  <SvgColor\r\n    src={`/assets/icons/navbar/employee/${name}.svg`}\r\n    sx={{ width: 1, height: 1 }}\r\n  />\r\n);\r\n\r\nconst ICONS = {\r\n  mainDashboard: icon(\"main_dashboard_ic\"),\r\n  branchDashboard: icon(\"branch_dashboard_ic\"),\r\n  menu: icon(\"menu_ic\"),\r\n  order: icon(\"order_ic\"),\r\n  branchInfo: icon(\"branch_info_ic\"),\r\n  financial: icon(\"finance_ic\"),\r\n  performance: icon(\"performance_ic\"),\r\n  employees: icon(\"employee_ic\"),\r\n  opportunity: icon(\"opportunity_ic\"),\r\n  setting: icon(\"setting_ic\"),\r\n  profile: icon(\"profile_ic\"),\r\n  help: icon(\"help_ic\"),\r\n  contact: icon(\"contact_us_ic\"),\r\n};\r\n\r\nconst navConfig = [\r\n  // EMPLOYEE\r\n  // ----------------------------------------------------------------------\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"main_dashboard\",\r\n    icon: ICONS.mainDashboard,\r\n    path: \"\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"branch_dashboard\",\r\n    icon: ICONS.branchDashboard,\r\n    path: \"/branch-dashboard\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"menu\",\r\n    icon: ICONS.menu,\r\n    path:\r\n      localStorage.getItem(\"facilityType\") === \"0\" ? \"/menu\" : \"/market-menu\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"orders\",\r\n    icon: ICONS.order,\r\n    path: \"/orders\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"branch_info\",\r\n    icon: ICONS.branchInfo,\r\n    path: \"/branch-info\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"financial\",\r\n    icon: ICONS.financial,\r\n    path: \"/financial\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"performance\",\r\n    icon: ICONS.performance,\r\n    path: \"/performance\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"employees\",\r\n    icon: ICONS.employees,\r\n    path: \"/users\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"opportunity_center\",\r\n    icon: ICONS.opportunity,\r\n    path: \"/opportunity-center\",\r\n  },\r\n\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"my_profile\",\r\n    icon: ICONS.profile,\r\n    path: \"/profile\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"Help\",\r\n    icon: ICONS.help,\r\n    path: \"/help\",\r\n  },\r\n  {\r\n    subheader: \"employee\",\r\n    title: \"contact_us\",\r\n    icon: ICONS.contact,\r\n    path: \"/contact-us\",\r\n  },\r\n];\r\n\r\nexport default navConfig;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\nav\\config.js",["3523"],[],"// routes\r\nimport { PATH_DASHBOARD } from \"../../../routes/paths\";\r\n\r\nimport SvgColor from \"../../../components/svg-color\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst icon = (name) => (\r\n  <SvgColor\r\n    src={`/assets/icons/navbar/${name}.svg`}\r\n    sx={{ width: 1, height: 1 }}\r\n  />\r\n);\r\n\r\nconst ICONS = {\r\n  dashboard: icon(\"dashboard_ic\"),\r\n  branches: icon(\"branches_ic\"),\r\n  users: icon(\"users_ic\"),\r\n  financial: icon(\"financial_ic\"),\r\n  performance: icon(\"performance_ic\"),\r\n  rank: icon(\"rank_ic\"),\r\n  opportunity: icon(\"opportunity_ic\"),\r\n  help: icon(\"help_ic\"),\r\n\r\n  chat: icon(\"chat_ic\"),\r\n  profile: icon(\"profile_ic\"),\r\n  contact: icon(\"contact_us_ic\"),\r\n};\r\n\r\nconst navConfig = [\r\n  // Admin\r\n  // ----------------------------------------------------------------------\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"dashboard\",\r\n    icon: ICONS.dashboard,\r\n    path: \"/overview\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"branches\",\r\n    icon: ICONS.branches,\r\n    path: \"/branches\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"users\",\r\n    icon: ICONS.users,\r\n    path: \"/users\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"financial\",\r\n    icon: ICONS.financial,\r\n    path: \"/financial\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"performance\",\r\n    icon: ICONS.performance,\r\n    path: \"/performance\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"rank\",\r\n    icon: ICONS.rank,\r\n    path: \"/rank\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"opportunity_center\",\r\n    icon: ICONS.opportunity,\r\n    path: \"/opportunity-center\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"help\",\r\n    icon: ICONS.help,\r\n    path: \"/help\",\r\n  },\r\n  /* {\r\n    subheader: \"dashboard\",\r\n    title: \"chats\",\r\n    icon: ICONS.chat,\r\n    path: \"/chats\",\r\n  },*/\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"my_profile\",\r\n    icon: ICONS.profile,\r\n    path: \"/profile\",\r\n  },\r\n  {\r\n    subheader: \"dashboard\",\r\n    title: \"contact_us\",\r\n    icon: ICONS.contact,\r\n    path: \"/contact-us\",\r\n  },\r\n];\r\n\r\nexport default navConfig;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\Header.js",["3524","3525","3526","3527","3528","3529","3530","3531"],[],"import PropTypes from \"prop-types\";\r\nimport NotificationsPopover from \"./NotificationsPopover\";\r\n// @mui\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport {\r\n  Stack,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Avatar,\r\n  Typography,\r\n  MenuItem,\r\n  Link,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport * as URLS from \"../../../urls\";\r\nimport { useState } from \"react\";\r\n// utils\r\nimport { bgBlur } from \"../../../utils/cssStyles\";\r\n// hooks\r\nimport useOffSetTop from \"../../../hooks/useOffSetTop\";\r\nimport useResponsive from \"../../../hooks/useResponsive\";\r\n// config\r\nimport { HEADER, NAV } from \"../../../config\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n//\r\nimport Searchbar from \"./Searchbar\";\r\n// locales\r\nimport { useLocales } from \"../../../locales\";\r\n\r\nimport Image from \"../../../components/image\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport { IconButtonAnimate } from \"../../../components/animate\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nHeader.propTypes = {\r\n  onOpenNav: PropTypes.func,\r\n};\r\n\r\nexport default function Header({ onOpenNav }) {\r\n  const theme = useTheme();\r\n\r\n  const { themeLayout } = useSettingsContext();\r\n\r\n  const isNavHorizontal = themeLayout === \"horizontal\";\r\n\r\n  const isNavMini = themeLayout === \"mini\";\r\n\r\n  const isDesktop = useResponsive(\"up\", \"lg\");\r\n\r\n  const isOffset = useOffSetTop(HEADER.H_DASHBOARD_DESKTOP) && !isNavHorizontal;\r\n\r\n  const { allLangs, currentLang, onChangeLang } = useLocales();\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n    var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const handleChangeLang = (newLang) => {\r\n    onChangeLang(newLang);\r\n    handleClosePopover();\r\n  };\r\n\r\n  const renderContent = (\r\n    <>\r\n      {isDesktop && isNavHorizontal}\r\n\r\n      {!isDesktop && (\r\n        <IconButton onClick={onOpenNav} sx={{ mr: 1, color: \"text.primary\" }}>\r\n          <Iconify icon=\"eva:menu-2-fill\" />\r\n        </IconButton>\r\n      )}\r\n\r\n      <Stack\r\n        flexGrow={1}\r\n        direction=\"row\"\r\n        // spacing={{ xs: 0.5, sm: 1.5 }}\r\n        alignItems=\"center\"\r\n        justifyContent={\"flex-end\"}\r\n      >\r\n        {!isDesktop ? (\r\n          <>\r\n              <Link\r\n                underline=\"none\"\r\n                sx={{\r\n                  color: \"#535353\",\r\n                  fontWeight: 600,\r\n                  fontSize: \"16px\",\r\n                  cursor: \"pointer\",\r\n                  paddingRight: \"16px\",\r\n                }}\r\n                onClick={() =>\r\n                  handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                }\r\n              >\r\n                {currentLang.label}\r\n              </Link>\r\n              <img src=\"/assets/icons/navbar/setting_ic.svg\" alt=\"arrow\" />\r\n          </>\r\n        ) : (\r\n          <>\r\n            {/* <Box sx={{ width: \"252px\" }}>\r\n              {\" \"}\r\n              <img src=\"assets/icons/navbar/logo.png\" alt=\"logo\" />\r\n        </Box>*/}\r\n\r\n            <Stack\r\n              //  sx={{ paddingLeft: `calc(100% - ${NAV.W_DASHBOARD - 1}px)` }}\r\n              flexGrow={1}\r\n              direction=\"row\"\r\n              //  spacing={{ xs: 0.5, sm: 1.5 }}\r\n              alignItems=\"center\"\r\n            // justifyContent={\"space-between\"}\r\n            >\r\n              <Searchbar />\r\n\r\n              <Stack\r\n                flexGrow={1}\r\n                direction=\"row\"\r\n                //  spacing={{ xs: 0.5, sm: 1.5 }}\r\n                alignItems=\"center\"\r\n                justifyContent={\"flex-end\"}\r\n              >\r\n                <Link\r\n                  underline=\"none\"\r\n                  sx={{\r\n                    color: \"#535353\",\r\n                    fontWeight: 600,\r\n                    fontSize: \"16px\",\r\n                    cursor: \"pointer\",\r\n                    paddingRight: \"16px\",\r\n                  }}\r\n                  onClick={() =>\r\n                    handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                  }\r\n                >\r\n                  {currentLang.label}\r\n                </Link>\r\n                <NotificationsPopover />\r\n                <Stack mr=\"16px\" />\r\n                 <Avatar src={`${URLS.baseImageURL}user/${userInfo?.profilePictureUrl}`} />\r\n                <Stack mr=\"8px\" />\r\n                <Typography\r\n                  sx={{\r\n                    color: \"#535353\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"13px\",\r\n                    paddingRight: \"3px\",\r\n                  }}\r\n                >\r\n                     {`${userInfo?.firstName} ${userInfo?.lastName}`}\r\n                </Typography>\r\n           \r\n              </Stack>\r\n            </Stack>\r\n          </>\r\n        )}\r\n      </Stack>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <AppBar\r\n      sx={{\r\n        position: \"realtive\",\r\n        background: \"#FFFFFF\",\r\n        boxShadow: \"0px 4px 4px rgba(202, 199, 199, 0.25)\",\r\n        height: HEADER.H_MOBILE,\r\n        zIndex: theme.zIndex.appBar + 1,\r\n        border: \"1px solid rgba(255, 197, 41, 0.1)\",\r\n        ...bgBlur({\r\n          color: theme.palette.background.default,\r\n        }),\r\n        transition: theme.transitions.create([\"height\"], {\r\n          duration: theme.transitions.duration.shorter,\r\n        }),\r\n        ...(isDesktop && {\r\n          width: `calc(100% - ${NAV.W_DASHBOARD - 1}px)`,\r\n          height: HEADER.H_DASHBOARD_DESKTOP,\r\n          ...(isOffset && {\r\n            height: HEADER.H_DASHBOARD_DESKTOP_OFFSET,\r\n          }),\r\n          ...(isNavHorizontal && {\r\n            width: 1,\r\n            bgcolor: \"background.default\",\r\n            height: HEADER.H_DASHBOARD_DESKTOP_OFFSET,\r\n            borderBottom: (theme) => `dashed 1px ${theme.palette.divider}`,\r\n          }),\r\n          ...(isNavMini && {\r\n            width: `calc(100% - ${NAV.W_DASHBOARD_MINI + 1}px)`,\r\n          }),\r\n        }),\r\n      }}\r\n    >\r\n      <Toolbar\r\n        sx={{\r\n          height: 1,\r\n          px: { lg: 5 },\r\n        }}\r\n      >\r\n        {renderContent}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\Header.js",["3532","3533","3534","3535","3536","3537","3538","3539"],[],"import PropTypes from \"prop-types\";\r\nimport NotificationsPopover from \"./NotificationsPopover\";\r\n// @mui\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport {\r\n  Stack,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Avatar,\r\n  Typography,\r\n  MenuItem,\r\n  Link,\r\n  Box,\r\n} from \"@mui/material\";\r\n\r\nimport { useState } from \"react\";\r\n// utils\r\nimport { bgBlur } from \"../../../utils/cssStyles\";\r\n// hooks\r\nimport useOffSetTop from \"../../../hooks/useOffSetTop\";\r\nimport useResponsive from \"../../../hooks/useResponsive\";\r\n// config\r\nimport { HEADER, NAV } from \"../../../config\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport { useSettingsContext } from \"../../../components/settings\";\r\n//\r\nimport Searchbar from \"./Searchbar\";\r\n// locales\r\nimport { useLocales } from \"../../../locales\";\r\n\r\nimport Image from \"../../../components/image\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport { IconButtonAnimate } from \"../../../components/animate\";\r\nimport * as URLS from \"../../../urls\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAdminProfileInfo } from \"../../../redux/services/admin_profile_service\";\r\n// ----------------------------------------------------------------------\r\n\r\nHeader.propTypes = {\r\n  onOpenNav: PropTypes.func,\r\n};\r\n\r\nexport default function Header({ onOpenNav }) {\r\n  const theme = useTheme();\r\n  const { personalInfo } = useSelector((state) => state.adminProfile);\r\n  const dispatch = useDispatch()\r\n\r\n  var userInfo = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const { themeLayout } = useSettingsContext();\r\n\r\n  const isNavHorizontal = themeLayout === \"horizontal\";\r\n\r\n  const isNavMini = themeLayout === \"mini\";\r\n\r\n  const isDesktop = useResponsive(\"up\", \"lg\");\r\n\r\n  const isOffset = useOffSetTop(HEADER.H_DASHBOARD_DESKTOP) && !isNavHorizontal;\r\n\r\n  const { allLangs, currentLang, onChangeLang } = useLocales();\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const handleChangeLang = (newLang) => {\r\n    onChangeLang(newLang);\r\n    handleClosePopover();\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getAdminProfileInfo(\"en-US\"));\r\n  }, [dispatch]);\r\n\r\n  const renderContent = (\r\n    <>\r\n      {isDesktop && isNavHorizontal}\r\n\r\n      {!isDesktop && (\r\n        <IconButton onClick={onOpenNav} sx={{ mr: 1, color: \"text.primary\" }}>\r\n          <Iconify icon=\"eva:menu-2-fill\" />\r\n        </IconButton>\r\n      )}\r\n\r\n      <Stack\r\n        flexGrow={1}\r\n        direction=\"row\"\r\n        // spacing={{ xs: 0.5, sm: 1.5 }}\r\n        alignItems=\"center\"\r\n        justifyContent={\"flex-end\"}\r\n      >\r\n        {!isDesktop ? (\r\n          <>\r\n            <Link\r\n              underline=\"none\"\r\n              sx={{\r\n                color: \"#535353\",\r\n                fontWeight: 600,\r\n                fontSize: \"16px\",\r\n                cursor: \"pointer\",\r\n                paddingRight: \"16px\",\r\n              }}\r\n              onClick={() =>\r\n                handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n              }\r\n            >\r\n              {currentLang.label}\r\n            </Link>\r\n            <img src=\"/assets/icons/navbar/setting_ic.svg\" alt=\"arrow\" />\r\n          </>\r\n        ) : (\r\n          <>\r\n            {/* <Box sx={{ width: \"252px\" }}>\r\n              {\" \"}\r\n              <img src=\"assets/icons/navbar/logo.png\" alt=\"logo\" />\r\n        </Box>*/}\r\n\r\n            <Stack\r\n              //  sx={{ paddingLeft: `calc(100% - ${NAV.W_DASHBOARD - 1}px)` }}\r\n              flexGrow={1}\r\n              direction=\"row\"\r\n              //  spacing={{ xs: 0.5, sm: 1.5 }}\r\n              alignItems=\"center\"\r\n            // justifyContent={\"space-between\"}\r\n            >\r\n              <Searchbar />\r\n\r\n              <Stack\r\n                flexGrow={1}\r\n                direction=\"row\"\r\n                //  spacing={{ xs: 0.5, sm: 1.5 }}\r\n                alignItems=\"center\"\r\n                justifyContent={\"flex-end\"}\r\n              >\r\n                <Link\r\n                  underline=\"none\"\r\n                  sx={{\r\n                    color: \"#535353\",\r\n                    fontWeight: 600,\r\n                    fontSize: \"16px\",\r\n                    cursor: \"pointer\",\r\n                    paddingRight: \"16px\",\r\n                  }}\r\n                  onClick={() =>\r\n                    handleChangeLang(currentLang.value === \"en\" ? \"ar\" : \"en\")\r\n                  }\r\n                >\r\n                  {currentLang.label}\r\n                </Link>\r\n                <NotificationsPopover />\r\n                <Stack mr=\"16px\" />\r\n\r\n                  <Avatar src={`${URLS.baseImageURL}user/${userInfo?.profilePictureUrl}`} />\r\n\r\n              \r\n                <Stack mr=\"8px\" />\r\n                <Typography\r\n                  sx={{\r\n                    color: \"#535353\",\r\n                    fontWeight: 400,\r\n                    fontSize: \"13px\",\r\n                    paddingRight: \"3px\",\r\n                  }}\r\n                >\r\n                    {`${personalInfo?.firstName} ${personalInfo?.lastName}`}\r\n                </Typography>\r\n             \r\n              </Stack>\r\n            </Stack>\r\n          </>\r\n        )}\r\n      </Stack>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <AppBar\r\n      sx={{\r\n        position: \"realtive\",\r\n        background: \"#FFFFFF\",\r\n        boxShadow: \"0px 4px 4px rgba(202, 199, 199, 0.25)\",\r\n        height: HEADER.H_MOBILE,\r\n        zIndex: theme.zIndex.appBar + 1,\r\n        border: \"1px solid rgba(255, 197, 41, 0.1)\",\r\n        ...bgBlur({\r\n          color: theme.palette.background.default,\r\n        }),\r\n        transition: theme.transitions.create([\"height\"], {\r\n          duration: theme.transitions.duration.shorter,\r\n        }),\r\n        ...(isDesktop && {\r\n          width: `calc(100% - ${NAV.W_DASHBOARD - 1}px)`,\r\n          height: HEADER.H_DASHBOARD_DESKTOP,\r\n          ...(isOffset && {\r\n            height: HEADER.H_DASHBOARD_DESKTOP_OFFSET,\r\n          }),\r\n          ...(isNavHorizontal && {\r\n            width: 1,\r\n            bgcolor: \"background.default\",\r\n            height: HEADER.H_DASHBOARD_DESKTOP_OFFSET,\r\n            borderBottom: (theme) => `dashed 1px ${theme.palette.divider}`,\r\n          }),\r\n          ...(isNavMini && {\r\n            width: `calc(100% - ${NAV.W_DASHBOARD_MINI + 1}px)`,\r\n          }),\r\n        }),\r\n      }}\r\n    >\r\n      <Toolbar\r\n        sx={{\r\n          height: 1,\r\n          px: { lg: 5 },\r\n        }}\r\n      >\r\n        {renderContent}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFSwitch.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFCheckbox.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFCodes.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\image\\getRatio.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFTextField.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFAutocomplete.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\CustomAlert.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFRadioGroup.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFSlider.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\Calender.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\hook-form\\RHFSelect.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-stepper\\CustomStepper.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\CustomConfirmDialog.js",["3540"],[],"import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// @mui\r\nimport { Dialog, DialogTitle, DialogActions, DialogContent, Typography } from '@mui/material';\r\nimport CustomAlert from '../CustomAlert';\r\nimport { Box } from '@mui/system';\r\n\r\n//---------------------------------------------------------------------------\r\n\r\nCustomConfirmDialog.propTypes = {\r\n    open: PropTypes.bool,\r\n    title: PropTypes.node,\r\n    action: PropTypes.node,\r\n    content: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n};\r\n\r\nexport default function CustomConfirmDialog({ title, content, action, open, onClose, ...other }) {\r\n\r\n    //  -------- JSX Code ---------\r\n    return (\r\n        <Dialog\r\n            sx={{\r\n                p: \"18px!important\",\r\n                '& .MuiDialog-paper': {\r\n                    borderRadius: '9px!important'\r\n                }\r\n            }}\r\n            maxWidth=\"xs\"\r\n            open={open}\r\n            onClose={onClose}\r\n            {...other}\r\n        >\r\n\r\n            <DialogTitle\r\n                sx={{\r\n                    padding: \"18px 18px 6px 18px\",\r\n                    width: '300px!important',\r\n                }}\r\n                >\r\n                <CustomAlert />\r\n                <Typography color='#535353'>\r\n                    {title}\r\n                </Typography>\r\n            </DialogTitle>\r\n\r\n            {content &&\r\n                <DialogContent\r\n                    sx={{\r\n                        color: '#BCBCBC',\r\n                        fontWeight: \"400\",\r\n                        fontSize: \"11px\",\r\n                        lineHeight: \"15px\",\r\n                        p: '0px 18px!important'\r\n                    }}\r\n                >\r\n                    {content}\r\n                </DialogContent>}\r\n\r\n            <DialogActions\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                    p: '24px 18px 18px 18px!important'\r\n                }}\r\n            >\r\n                {action}\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingTableRows.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\MenuRestaurentPagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OffersRestaurentsPgination.js",["3541"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\n// services\r\nimport { getMarketMenu } from \"../../redux/services/markets_service\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRestaurantOffers } from \"../../redux/services/menu_restaurant_service\";\r\n// ----------------------------------------------------------------------\r\n\r\nOffersRestaurentsPgination.propTypes = {\r\n  dense: PropTypes.bool,\r\n  onChangeDense: PropTypes.func,\r\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\r\n  sx: PropTypes.object,\r\n};\r\n\r\n// ------ Style -----\r\n// to handle color when switch is checked\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  paddingBottom: \"27px\",\r\n  paddingRight: \"24px\",\r\n  paddingLeft: \"24px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n};\r\n\r\nexport default function OffersRestaurentsPgination({\r\n  dense,\r\n  onRowsPerPageChange,\r\n  onChangeDense,\r\n  onPageChange,\r\n  rowsPerPageOptions = [5, 10],\r\n  sx,\r\n  ...other\r\n}) {\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const diapatch = useDispatch();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n    diapatch(\r\n      getRestaurantOffers({\r\n        pageNumber: 1,\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n    onRowsPerPageChange(event);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const handlePaginate = (e) => {\r\n    diapatch(\r\n      getRestaurantOffers({\r\n        pageNumber: +e.target.innerText,\r\n        restaurantId: branchId,\r\n      })\r\n    );\r\n  };\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n        <Stack className={classes.root} textAlign={\"right\"}>\r\n          <Pagination\r\n            onChange={(e) => handlePaginate(e)}\r\n            count={5}\r\n            color=\"primary\"\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                slots={{\r\n                  previous: KeyboardDoubleArrowLeftIcon,\r\n                  next: KeyboardDoubleArrowRightIcon,\r\n                }}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TablePaginationCustomized.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\details\\Header.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\MarketSubCategoryPagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\MenuTableRow.js",["3542","3543","3544","3545","3546","3547","3548","3549","3550"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Divider,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as URLS from \"../../../../urls\";\r\nimport {\r\n  deleteRestaurentProduct,\r\n  getRestaurantProductDetails,\r\n} from \"../../../../redux/services/menu_restaurant_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateMealStatus } from \"../../../../redux/services/menu_restaurant_service\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\nimport { setMealId } from \"../../../../redux/slices/control\";\r\nimport { getResturantProductDetails } from \"../../../../redux/services/menu_restaurant_service\";\r\nimport {\r\n  setRestaurantProductDetails,\r\n  setRestaurantProductId,\r\n} from \"../../../../redux/slices/control\";\r\n//________________________________________________________________________\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\nMenuTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst img2Style = {\r\n  width: \"59px\",\r\n  height: \"46px\",\r\n};\r\nconst innerBoxStyle = {\r\n  paddingBottom: \"6px\",\r\n  alignItems: \"center\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n};\r\nconst typoStyle2 = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"700\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"16px\",\r\n};\r\nconst smallBoxStyle = {\r\n  paddingLeft: \"9px\",\r\n  paddingRight: \"1px\",\r\n  paddingTop: \"4px\",\r\n  paddingBottom: \"4px\",\r\n  display: \"flex\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n};\r\nconst typoStyle4 = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  paddingLeft: \"5px\",\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\nconst availableSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4EE476\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst notAvailableSelectSx = {\r\n  ...availableSelectSx,\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4E6FE4\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\n\r\n//______________________________________________________\r\nexport default function MenuTableRow(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate(\"\");\r\n\r\n  const theme = useTheme();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { mealStatusIsUpdated } = useSelector((state) => state.menuRestaurant);\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const { isDeletedProduct } = useSelector((state) => state.menuRestaurant);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const [orderStatus, setOrderStatus] = useState(row?.available);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    /*if (isDeletedProduct) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }*/\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeletedProduct, mealStatusIsUpdated]);\r\n\r\n  const onChangeStatusHandler = (e) => {\r\n    e.stopPropagation();\r\n    setOrderStatus(e.target.value);\r\n    dispatch(\r\n      updateMealStatus({\r\n        id: row?.id,\r\n        val: e.target.value,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <StyledTableRow\r\n        hover\r\n        selected={selected}\r\n        onClick={(e) => {\r\n          dispatch(setMealId(row?.id));\r\n\r\n          navigate(\"meal-details\");\r\n\r\n          dispatch(getResturantProductDetails(row?.id));\r\n        }}\r\n      >\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.name)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <img\r\n              src={`${URLS.baseImageURL}product/${row?.imageUrl}`}\r\n              alt=\"\"\r\n              style={img2Style}\r\n            />\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{translate(row?.name)}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.category}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {row?.price}\r\n            {row?.currency}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Box alignItems={\"center\"} sx={smallBoxStyle}>\r\n            <img src=\"/assets/icons/employee/Vector.svg\" alt=\"img\" />\r\n            <Typography sx={typoStyle4}>{row?.rate}</Typography>\r\n          </Box>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.numOfOrders}</Typography>\r\n        </TableCell>\r\n\r\n        {/**  <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{preparation_time}</Typography>\r\n        </TableCell> */}\r\n\r\n        <TableCell\r\n          align=\"center\"\r\n          sx={innerCellBorderStyle}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n          }}\r\n        >\r\n          {/* <Typography sx={{ ...cellTextSx }}>\r\n            {`${deliveredFromFacility}`}\r\n          </Typography> */}\r\n          <FormControl\r\n            sx={\r\n              orderStatus === true\r\n                ? { ...availableSelectSx }\r\n                : { ...notAvailableSelectSx }\r\n            }\r\n          >\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={orderStatus}\r\n              onChange={onChangeStatusHandler}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem\r\n                sx={{ ...userNameStyle, color: \"#4E6FE4\" }}\r\n                value={false}\r\n              >\r\n                {translate(\"pending\")}\r\n              </MenuItem>\r\n              <MenuItem\r\n                sx={{ ...userNameStyle, color: \"#4EE476\" }}\r\n                value={true}\r\n              >\r\n                {translate(\"delivered\")}\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            dispatch(setRestaurantProductId(row?.id));\r\n            dispatch(\r\n              getRestaurantProductDetails({\r\n                productId: row?.id,\r\n              })\r\n            ).then((response) => {\r\n              dispatch(setRestaurantProductDetails(response.payload.data));\r\n              navigate(\"edit-single-meal\", { state: { id: row?.id } });\r\n            });\r\n            // onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem onClick={handleOpenConfirm}>\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                dispatch(deleteRestaurentProduct(row?.id));\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\CategoryTableRow.js",["3551","3552","3553","3554","3555","3556","3557","3558","3559","3560","3561","3562","3563","3564","3565","3566"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Divider,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { deleteRestaurantCategoryById } from \"../../../../redux/services/employee_facility_service\";\r\n//react-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setCategoryId } from \"../../../../redux/slices/control\";\r\nimport { updateCategoriesRestStatus } from \"../../../../redux/services/menu_restaurant_service\";\r\n\r\n//________________________________________________________________________\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst idStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nCategoryTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\nconst imgStyle = {};\r\n\r\nconst availableSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4EE476\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\nconst notAvailableSelectSx = {\r\n  ...availableSelectSx,\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#FF0000\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n};\r\nconst titleStyle = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\n//__________________________________________________________________________\r\nexport default function CategoryTableRow(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = useTheme();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { isLoading, error, restaurantCategories, deleteCategorySuccessfully } =\r\n    useSelector((state) => state.employeeFacility);\r\n\r\n  const cancelBtnSx = {\r\n    background: \"#FFFFFF\",\r\n    color: \"#535353\",\r\n    border: \"0.75px solid #BCBCBC\",\r\n    fontSize: \"12px\",\r\n    lineHeight: \"18px\",\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n      bgcolor: \"text.primary\",\r\n      color: (theme) =>\r\n        theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  const confirmBtnSx = {\r\n    fontSize: \"12px\",\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n      bgcolor: \"text.primary\",\r\n      color: (theme) =>\r\n        theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    width: \"100%\",\r\n  };\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const { name, id, numberOfItems, numberOfOrders, status } = row;\r\n\r\n  const [orderStatus, setOrderStatus] = useState(row?.status);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleCloseConfirm2 = () => {\r\n    setOpenConfirm2(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n  const handleClosePopover2 = () => {\r\n    setOpenPopover2(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (deleteCategorySuccessfully) {\r\n      handleCloseConfirm();\r\n    }\r\n  }, [deleteCategorySuccessfully]);\r\n  const onChangeStatusHandler = (e) => {\r\n    var x;\r\n    setOrderStatus(e.target.value);\r\n    if (orderStatus == \"0\") {\r\n      x = false;\r\n    } else {\r\n      x = true;\r\n    }\r\n\r\n    dispatch(\r\n      updateCategoriesRestStatus({\r\n        id: row?.id,\r\n        isAvailable: x,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(name)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...idStyle }}>{name}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {/* {translate(`${number_of_items}`)} */}\r\n            {numberOfItems}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {/* {number_of_orders} */}\r\n            {numberOfOrders}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <FormControl\r\n            sx={\r\n              orderStatus == 0\r\n                ? { ...notAvailableSelectSx }\r\n                : { ...availableSelectSx }\r\n            }\r\n          >\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={orderStatus}\r\n              onChange={onChangeStatusHandler}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...userNameStyle, color: \"#FF0000\" }} value={0}>\r\n                {translate(\"not_available\")}\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...userNameStyle, color: \"#4EE476\" }} value={1}>\r\n                {translate(\"available\")}\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            dispatch(\r\n              setCategoryId({\r\n                id: row?.id,\r\n                oldCategoryName: row?.name,\r\n              })\r\n            );\r\n            navigate(`edit-category`, { state: { id: row?.id } });\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem onClick={handleOpenConfirm}>\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                // handleCloseConfirm();\r\n                dispatch(deleteRestaurantCategoryById(id));\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\menu\\lists\\OfferTableRow.js",["3567","3568","3569","3570","3571","3572","3573"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Divider,\r\n} from \"@mui/material\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport {\r\n  deleteRestaurentOffer,\r\n  getComboOfferDetails,\r\n} from \"../../../../redux/services/menu_restaurant_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as URLS from \"../../../../urls\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  clear,\r\n  resetComboDetails,\r\n} from \"../../../../redux/slices/menuRestaurant\";\r\nimport { setComboId, setComboInfo } from \"../../../../redux/slices/control\";\r\nimport moment from \"moment\";\r\n\r\n//________________________________________________________________________\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nOfferTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst img2Style = {\r\n  width: \"59px\",\r\n  height: \"46px\",\r\n};\r\n\r\nconst smallBoxStyle = {\r\n  paddingLeft: \"9px\",\r\n  paddingRight: \"9px\",\r\n  paddingTop: \"4px\",\r\n  paddingBottom: \"4px\",\r\n  display: \"flex\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n};\r\nconst typoStyle4 = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  paddingLeft: \"5px\",\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n//__________________________________________________________________________\r\nexport default function OfferTableRow(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isDeletedOffer } = useSelector((state) => state.menuRestaurant);\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const theme = useTheme();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDeletedOffer) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeletedOffer]);\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.name)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <img\r\n              src={`${URLS.baseImageURL}product/${row?.imageUrl}`}\r\n              alt=\"\"\r\n              style={img2Style}\r\n            />\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{translate(row?.name)}</Typography>\r\n        </TableCell>\r\n\r\n        {row?.offerType ? (\r\n          <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n            <Typography sx={userNameStyle}>Combo offer</Typography>\r\n          </TableCell>\r\n        ) : (\r\n          <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n            <Typography sx={userNameStyle}>Discount offer</Typography>\r\n          </TableCell>\r\n        )}\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {row?.price}\r\n            {\"\"}\r\n            {row?.currency}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Box alignItems={\"center\"} sx={smallBoxStyle}>\r\n            <img src=\"/assets/icons/employee/Vector.svg\" alt=\"img\" />\r\n            <Typography sx={typoStyle4}>{row?.rate}</Typography>\r\n          </Box>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.numOfOrders}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {moment(row?.startDate).format(\"DD/MM/YYYY\")}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {moment(row?.endDate).format(\"DD/MM/YYYY\")}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            dispatch(resetComboDetails());\r\n            dispatch(setComboId(row?.id));\r\n            dispatch(\r\n              getComboOfferDetails({\r\n                id: row?.id,\r\n              })\r\n            )\r\n              .then((response) => {\r\n                dispatch(setComboInfo(response.payload.data[0]));\r\n                navigate(\"edit-combo\", { state: { id: row?.id } });\r\n              })\r\n              .catch((_) => alert(\"Failed\"));\r\n            // onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem onClick={handleOpenConfirm}>\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n                dispatch(deleteRestaurentOffer(row?.id));\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketCategoryTableRow.js",["3574","3575","3576","3577","3578","3579","3580"],[],"import React, { useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// PropTypes\r\nimport PropTypes from \"prop-types\";\r\n// @ Mui\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  TableRow,\r\n  TableCell,\r\n  Typography,\r\n  MenuItem,\r\n  Stack,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Components\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\n// --------------------------------------------------------------------------------------------------\r\n\r\n// ------------- Style -------------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst idStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nMarketCategoryTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function MarketCategoryTableRow(props) {\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const { category_name, number_of_items, number_of_orders, category_status } =\r\n    row;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleCloseConfirm2 = () => {\r\n    setOpenConfirm2(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n  const handleClosePopover2 = () => {\r\n    setOpenPopover2(null);\r\n  };\r\n\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      {/* ------------Start Table Row  ---------*/}\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(category_name)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...idStyle }}>{category_name}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {/* {translate(`${number_of_items}`)} */}\r\n            {number_of_items}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {/* {number_of_orders} */}\r\n            {number_of_orders}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Box\r\n            justifyContent={\"center\"}\r\n            display={\"flex\"}\r\n            alignItems={\"center\"}\r\n            alignContent={\"center\"}\r\n          >\r\n            <Typography\r\n              sx={\r\n                category_status === 0\r\n                  ? { ...userNameStyle, color: \"#FF0000\" }\r\n                  : { ...userNameStyle, color: \"#4EE476\" }\r\n              }\r\n            >\r\n              {translate(\r\n                `${category_status === 0 ? \"not_available\" : \"available\"}`\r\n              )}\r\n              {/* {translate(`${status}`)} */}\r\n            </Typography>\r\n            <img src=\"/assets/icons/employee/arrow.svg\" alt=\"img\" />\r\n          </Box>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      {/* ------------Start Popover  ---------*/}\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow=\"top-right\"\r\n        sx={menuStyle}\r\n      >\r\n        {/* <MenuItem\r\n                    onClick={() => { onEditRow(); handleClosePopover(); }}>\r\n                    <img src=\"/assets/icons/arrow/pen.svg\" alt='' />\r\n                    <Typography sx={itemMenuStyle} >\r\n                        {translate(`edit`)}\r\n                    </Typography>\r\n                </MenuItem> */}\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem onClick={handleOpenConfirm}>\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      {/* -------Start Delete Confirm Dialog -------*/}\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n                // dispatch(deleteRestaurantCategoryById(id))\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\details\\Header.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketSubCategoryTableRow.js",["3581","3582","3583","3584","3585","3586","3587","3588","3589","3590","3591","3592","3593"],[],"import React, { useEffect, useState } from \"react\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// PropTypes\r\nimport PropTypes from \"prop-types\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// @ Mui\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  TableRow,\r\n  TableCell,\r\n  Typography,\r\n  MenuItem,\r\n  Stack,\r\n  IconButton,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// Components\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteMarketCategories } from \"../../../../redux/services/markets_service\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setSubCategoryId } from \"../../../../redux/slices/control\";\r\n\r\nimport { updateMarketSubCategoryStatus } from \"../../../../redux/services/markets_service\";\r\n// --------------------------------------------------------------------------------------------------\r\n\r\n// ------------- Style -------------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst idStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nMarketSubCategoryTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\nconst availableSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4EE476\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst notAvailableSelectSx = {\r\n  ...availableSelectSx,\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4E6FE4\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n};\r\nexport default function MarketSubCategoryTableRow(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const theme = useTheme();\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const [orderStatus, setOrderStatus] = useState(`${row?.status}`);\r\n\r\n  const { marketCategories, isLoadingmarketCategories, isDeletedCategories } =\r\n    useSelector((state) => state.market);\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {};\r\n\r\n  useEffect(() => {\r\n    if (isDeletedCategories) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeletedCategories]);\r\n\r\n  const onChangeStatusHandler = (e) => {\r\n    var x;\r\n    setOrderStatus(e.target.value);\r\n    if (orderStatus == \"0\") {\r\n      x = false;\r\n    } else {\r\n      x = true;\r\n    }\r\n\r\n    dispatch(\r\n      updateMarketSubCategoryStatus({\r\n        id: row?.id,\r\n        isAvailable: x,\r\n      })\r\n    );\r\n  };\r\n  // ------------- JSX Code ---------------\r\n  return (\r\n    <>\r\n      {/* ------------Start Table Row  ---------*/}\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.categoryName)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...idStyle }}>{row?.subCategoryName}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...idStyle }}>{row?.categoryName}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {/* {translate(`${number_of_items}`)} */}\r\n            {row?.numberOfItems}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {/* {number_of_orders} */}\r\n            {row?.numberOfOrders}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <FormControl\r\n            sx={\r\n              row?.status === 1\r\n                ? { ...availableSelectSx }\r\n                : { ...notAvailableSelectSx }\r\n            }\r\n          >\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={orderStatus}\r\n              onChange={onChangeStatusHandler}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...userNameStyle, color: \"#4E6FE4\" }} value={\"0\"}>\r\n                {translate(\"pending\")}\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...userNameStyle, color: \"#4EE476\" }} value={\"1\"}>\r\n                {translate(\"delivered\")}\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      {/* ------------Start Popover  ---------*/}\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            navigate(\"/employee/market-menu/edit-market-subCategory\");\r\n            dispatch(\r\n              setSubCategoryId({\r\n                id: row?.id,\r\n                //  categoryName: row?.categoryName,\r\n                subCategoryName: row?.subCategoryName,\r\n              })\r\n            );\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      {/* -------S tart Delete Confirm Dialog -------*/}\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n                dispatch(deleteMarketCategories(row?.id));\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableTopSection.js",["3594"],[],"\r\nimport React from \"react\";\r\n// locales\r\nimport { useLocales } from \"../../locales\";\r\n// mui\r\nimport { Stack, Typography } from \"@mui/material\";\r\n// component\r\nimport Image from \"../../components/image/Image\";\r\n\r\n//-------------------------------------------\r\n\r\n// ---------- Styles -----------------\r\n\r\nconst actionHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n  spacing: 2,\r\n  mb: \"24px\",\r\n};\r\n\r\nconst totalUserSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst infoSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 700,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst titleSx = {\r\n  fontWeight: 600,\r\n  color: \"#333333\",\r\n};\r\n\r\nconst subHolderSx = {\r\n  flexDirection: { xs: \"column\", md: \"row\" },\r\n  alignItems: \"center\",\r\n  width: { xs: \"100%\", md: \"auto\" },\r\n};\r\n\r\nconst dateTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#535353\",\r\n};\r\n\r\nexport default function TableTopSection({\r\n  title = null,\r\n  counter = null,\r\n  counterTilte = null,\r\n}) {\r\n  const { translate } = useLocales();\r\n\r\n  // ---------- JSX Code ------------\r\n  return (\r\n    <>\r\n      <Stack sx={{ ...actionHolderSx }}>\r\n        {/* ***** total user **** */}\r\n        <Stack\r\n          direction=\"row\"\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          mb={{ xs: \"10px\", md: \"0px\" }}\r\n        >\r\n          {title ? (\r\n            <Typography variant=\"h5\" sx={{ ...titleSx }}>\r\n              {translate(`${title}`)}\r\n            </Typography>\r\n          ) : (\r\n            <>\r\n              <Typography sx={{ ...totalUserSx }}>\r\n                {translate(`total_${counterTilte}`)}:\r\n              </Typography>\r\n\r\n              <Typography sx={{ ...totalUserSx, ml: \"4px\" }}>\r\n                {counter}\r\n              </Typography>\r\n            </>\r\n          )}\r\n        </Stack>\r\n\r\n        <Stack sx={{ ...subHolderSx }}>\r\n          {/* ---- print and export ---- */}\r\n          <Stack\r\n            mt={{ xs: \"15px\", md: \"0px\" }}\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing=\"18px\"\r\n            alignSelf={{ xs: \"end\", md: \"auto\" }}\r\n          >\r\n            {/* ----- Print ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_print.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx }}>{translate(\"print\")}</Typography>\r\n            </Stack>\r\n\r\n            {/* ----- Export ----- */}\r\n            <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\r\n              <Image\r\n                disabledEffect\r\n                src=\"/assets/icons/dashboard/ic_export.svg\"\r\n              />\r\n              <Typography sx={{ ...infoSx }}>{translate(\"export\")}</Typography>\r\n            </Stack>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\EmployeePagination.js",["3595"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\n// services\r\nimport { getRestaurantAdmins } from \"../../redux/services/restaurant_service\";\r\nimport {\r\n  getMarketAdminsBranches,\r\n  getRestaurantAdminsForBranches,\r\n} from \"../../redux/services/users_service\";\r\nimport { useSelector } from \"../../redux/store\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeePagination.propTypes = {\r\n  dense: PropTypes.bool,\r\n  onChangeDense: PropTypes.func,\r\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\r\n  sx: PropTypes.object,\r\n};\r\n\r\n// ------ Style -----\r\n// to handle color when switch is checked\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  paddingBottom: \"27px\",\r\n  paddingRight: \"24px\",\r\n  paddingLeft: \"24px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n};\r\n\r\nexport default function EmployeePagination({\r\n  dense,\r\n  requestName = null,\r\n  onRowsPerPageChange,\r\n  onChangeDense,\r\n  onPageChange,\r\n  rowsPerPageOptions = [5, 10],\r\n  sx,\r\n  ...other\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getRestaurantAdminsForBranches({\r\n          id: branchId,\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getMarketAdminsBranches({ id: branchId, pageNumber: 1 }));\r\n    }\r\n\r\n    onRowsPerPageChange(event);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n        <Stack className={classes.root} textAlign={\"right\"}>\r\n          <Pagination\r\n            onChange={(e) => {\r\n              if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n                dispatch(\r\n                  getRestaurantAdminsForBranches({\r\n                    id: branchId,\r\n                    pageNumber: +e.target.innerText,\r\n                  })\r\n                );\r\n              }\r\n              if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n                dispatch(\r\n                  getMarketAdminsBranches({\r\n                    id: branchId,\r\n                    pageNumber: +e.target.innerText,\r\n                  })\r\n                );\r\n              }\r\n            }}\r\n            count={5}\r\n            color=\"primary\"\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                slots={{\r\n                  previous: KeyboardDoubleArrowLeftIcon,\r\n                  next: KeyboardDoubleArrowRightIcon,\r\n                }}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\UsersPagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingAccordion.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\ProductPagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\EmployeeTableRow.js",["3596","3597","3598","3599","3600","3601"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport CustomConfirmDialog2 from \"../../../components/confirm-dialog/UserInfoDialog\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Divider,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport Iconify from \"../../../components/iconify\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport UserInfoDialog from \"../../../components/confirm-dialog/UserInfoDialog\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { deleteFacilityAdmin } from \"../../../redux/services/get_resturant_admins_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { setAdminId, setEmployeeData } from \"../../../redux/slices/control\";\r\nimport { getEmployeeData } from \"../../../redux/services/restaurant_service\";\r\n//________________________________________________________________________\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst idStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\nEmployeeTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  height: \"33px\",\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  height: \"33px\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\n//__________________________________________________________________________\r\nexport default function EmployeeTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, isDeleted } = useSelector((state) => state.employees);\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openInfoDialog, setOpenInfoDialog] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseInfoDialog = () => {\r\n    setOpenInfoDialog(false);\r\n  };\r\n\r\n  const handleCloseConfirm2 = () => {\r\n    setOpenConfirm2(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const defineRole = (role) => {\r\n    if (role === 0) {\r\n      return translate(\"owner\");\r\n    }\r\n    if (role === 1) {\r\n      return translate(\"regional_manager\");\r\n    }\r\n    if (role === 2) {\r\n      return translate(\"branch_manager\");\r\n    }\r\n    if (role === 3) {\r\n      return translate(\"chasher\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isDeleted) {\r\n      handleClosePopover();\r\n      handleCloseConfirm2();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeleted]);\r\n\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.id)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...idStyle }}>{row?.id}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {translate(`${row?.name}`)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.facilityName}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{defineRole(row?.role)}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.email}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.phoneNumber}</Typography>\r\n        </TableCell>\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow=\"top-right\"\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            // onEditRow();\r\n            navigate(\"edit-user-info\");\r\n            dispatch(setAdminId(row?.id));\r\n            dispatch(\r\n              getEmployeeData({\r\n                Id: row?.id,\r\n              })\r\n            ).then((response) => {\r\n              dispatch(setEmployeeData(response.payload.data));\r\n              navigate(\"edit-user-info\");\r\n            });\r\n            handleClosePopover();\r\n          }}\r\n\r\n          // onClick={() => { onEditRow(); handleClosePopover(); }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm2();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      <UserInfoDialog\r\n        open={openInfoDialog}\r\n        onClose={handleCloseInfoDialog}\r\n        title={translate(\"user_data\")}\r\n        content={\r\n          <Box display=\"flex\" flexDirection=\"column\">\r\n            <Box display=\"flex\" justifyContent=\"space-between\">\r\n              <Box display=\"flex\">\r\n                <Typography>{translate(\"user_name\")}:</Typography>\r\n                <Typography>{translate(`${row?.name}`)}</Typography>\r\n              </Box>\r\n              <img src=\"/assets/icons/arrow/img.svg\" alt=\"\" />\r\n            </Box>\r\n            <Box display=\"flex\" justifyContent=\"space-between\">\r\n              <Box display={\"flex\"}>\r\n                <Typography>{translate(\"password\")}:</Typography>\r\n                <Typography>{row?.id}</Typography>\r\n              </Box>\r\n              <img src=\"/assets/icons/arrow/img.svg\" alt=\"\" />\r\n            </Box>\r\n          </Box>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseInfoDialog();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleOpenConfirm2();\r\n                handleCloseInfoDialog();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm2}\r\n        onClose={handleCloseConfirm2}\r\n        title={translate(\"delete_employee_information\")}\r\n        content={\r\n          <>{translate(\"are_you_sure_you_want_to_delete_this_employee\")}</>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm2();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                dispatch(deleteFacilityAdmin(row?.id));\r\n                handleCloseConfirm2();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\userPages\\UserTableRow.js",["3602","3603","3604","3605","3606","3607"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport CustomConfirmDialog2 from \"../../../components/confirm-dialog/UserInfoDialog\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Divider,\r\n  Box,\r\n} from \"@mui/material\";\r\nimport Iconify from \"../../../components/iconify\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport UserInfoDialog from \"../../../components/confirm-dialog/UserInfoDialog\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { deleteFacilityAdmin } from \"../../../redux/services/get_resturant_admins_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { setAdminId, setEmployeeData } from \"../../../redux/slices/control\";\r\nimport { getEmployeeData } from \"../../../redux/services/restaurant_service\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n//________________________________________________________________________\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst idStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\nUserTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  height: \"33px\",\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  height: \"33px\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\n//__________________________________________________________________________\r\nexport default function UserTableRow(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = useTheme();\r\n  const { isLoading, isDeleted } = useSelector((state) => state.employees);\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openInfoDialog, setOpenInfoDialog] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseInfoDialog = () => {\r\n    setOpenInfoDialog(false);\r\n  };\r\n\r\n  const handleCloseConfirm2 = () => {\r\n    setOpenConfirm2(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const defineRole = (role) => {\r\n    if (role === 0) {\r\n      return translate(\"owner\");\r\n    }\r\n    if (role === 1) {\r\n      return translate(\"regional_manager\");\r\n    }\r\n    if (role === 2) {\r\n      return translate(\"branch_manager\");\r\n    }\r\n    if (role === 3) {\r\n      return translate(\"chasher\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isDeleted) {\r\n      handleClosePopover();\r\n      handleCloseConfirm2();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeleted]);\r\n\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.id)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...idStyle }}>{row?.id}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {translate(`${row?.name}`)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.facilityName}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{defineRole(row?.role)}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.email}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.phoneNumber}</Typography>\r\n        </TableCell>\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            // onEditRow();\r\n            dispatch(setAdminId(row?.id));\r\n            dispatch(\r\n              getEmployeeData({\r\n                Id: row?.id,\r\n              })\r\n            ).then((response) => {\r\n              dispatch(setEmployeeData(response.payload.data));\r\n              navigate(\"edit-user-info\");\r\n            });\r\n            handleClosePopover();\r\n          }}\r\n\r\n          // onClick={() => { onEditRow(); handleClosePopover(); }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm2();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      <UserInfoDialog\r\n        open={openInfoDialog}\r\n        onClose={handleCloseInfoDialog}\r\n        title={translate(\"user_data\")}\r\n        content={\r\n          <Box display=\"flex\" flexDirection=\"column\">\r\n            <Box display=\"flex\" justifyContent=\"space-between\">\r\n              <Box display=\"flex\">\r\n                <Typography>{translate(\"user_name\")}:</Typography>\r\n                <Typography>{translate(`${row?.name}`)}</Typography>\r\n              </Box>\r\n              <img src=\"/assets/icons/arrow/img.svg\" alt=\"\" />\r\n            </Box>\r\n            <Box display=\"flex\" justifyContent=\"space-between\">\r\n              <Box display={\"flex\"}>\r\n                <Typography>{translate(\"password\")}:</Typography>\r\n                <Typography>{row?.id}</Typography>\r\n              </Box>\r\n              <img src=\"/assets/icons/arrow/img.svg\" alt=\"\" />\r\n            </Box>\r\n          </Box>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseInfoDialog();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleOpenConfirm2();\r\n                handleCloseInfoDialog();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm2}\r\n        onClose={handleCloseConfirm2}\r\n        title={translate(\"delete_employee_information\")}\r\n        content={\r\n          <>{translate(\"are_you_sure_you_want_to_delete_this_employee\")}</>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm2();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                dispatch(deleteFacilityAdmin(row?.id));\r\n                handleCloseConfirm2();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\market-menu\\lists\\MarketProductTableRow.js",["3608","3609","3610","3611","3612","3613","3614","3615","3616","3617"],[],"import React, { useEffect, useState } from \"react\";\r\n// PropsTypes\r\nimport PropTypes from \"prop-types\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// @ Mui\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Divider,\r\n  TableRow,\r\n  TableCell,\r\n  Typography,\r\n  Stack,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { deleteMarketProduct } from \"../../../../redux/services/markets_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as URLS from \"../../../../urls\";\r\nimport { setProductId } from \"../../../../redux/slices/control\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// ----------------------------------------------------------------------------------------------------\r\n\r\n// ----------- Style ------------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nconst menuStyle = {\r\n  width: \"191px\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"8px\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst itemMenuStyle = {\r\n  ml: \"16px\",\r\n  fontSize: \"14px\",\r\n  lineHeight: \"20px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst borderStyle = {\r\n  border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst img2Style = {\r\n  width: \"59px\",\r\n  height: \"46px\",\r\n};\r\n\r\nconst smallBoxStyle = {\r\n  paddingLeft: \"9px\",\r\n  paddingRight: \"1px\",\r\n  paddingTop: \"4px\",\r\n  paddingBottom: \"4px\",\r\n  display: \"flex\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  background: \"#FFFFFF\",\r\n};\r\n\r\nconst typoStyle4 = {\r\n  color: \"#535353\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  paddingLeft: \"5px\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\n\r\nMarketProductTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function MarketProductTableRow(props) {\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { products, isLoadingProduct, isDeletedProduct } = useSelector(\r\n    (state) => state.market\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openConfirm2, setOpenConfirm2] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [openPopover2, setOpenPopover2] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleOpenConfirm2 = () => {\r\n    setOpenConfirm2(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDeletedProduct) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeletedProduct]);\r\n  // ---------------- JSX Code ------------------\r\n  return (\r\n    <>\r\n      {/* ------------Start Table Row  ---------*/}\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.name)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <img\r\n              src={`${URLS.baseImageURL}product/${row?.imageUrl}`}\r\n              alt=\"\"\r\n              style={img2Style}\r\n            />\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.name}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.category}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>\r\n            {row?.price}\r\n            {row?.currency}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={userNameStyle}>{row?.numOfOrders}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Box\r\n            justifyContent={\"center\"}\r\n            display={\"flex\"}\r\n            alignItems={\"center\"}\r\n            alignContent={\"center\"}\r\n          >\r\n            <Typography\r\n              sx={\r\n                row?.available === false\r\n                  ? { ...userNameStyle, color: \"#FF0000\" }\r\n                  : { ...userNameStyle, color: \"#4EE476\" }\r\n              }\r\n            >{`${row?.available}`}</Typography>\r\n            <img src=\"/assets/icons/employee/arrow.svg\" alt=\"img\" />\r\n          </Box>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"red\" : \"blue\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify\r\n              color={openPopover ? \"#FFCC63\" : \"default\"}\r\n              icon=\"eva:more-horizontal-fill\"\r\n            />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      {/* ------------Start Popover  ---------*/}\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow=\"top-right\"\r\n        sx={menuStyle}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            navigate(\"/employee/market-menu/edit-market-product\");\r\n            dispatch(\r\n              setProductId({\r\n                id: row?.id,\r\n                productName: row?.name,\r\n              })\r\n            );\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`edit`)}</Typography>\r\n        </MenuItem>\r\n        <Divider sx={borderStyle} />\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n          <Typography sx={itemMenuStyle}>{translate(`delete`)}</Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      {/* -------Start Delete Confirm Dialog -------*/}\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n                dispatch(deleteMarketProduct(row?.id));\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\details\\MeetingInfo.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\SearchBar.js",["3618","3619","3620","3621","3622","3623"],["3624"],"import { useState, memo, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport { InputBase } from \"@mui/material\";\r\nimport { IconButtonAnimate } from \"../../../../components/animate\";\r\nimport { useLocales } from \"../../../../locales\";\r\n// ____________________________________________________________________\r\n\r\nconst APPBAR_MOBILE = 64;\r\nconst APPBAR_DESKTOP = 92;\r\nconst StyledSearchbar = styled(\"div\")(({ theme }) => ({\r\n  display: \"block\",\r\n  marginLeft: \"auto\",\r\n  marginRight: \"auto\",\r\n  width: \"100%\",\r\n  //padding: theme.spacing(0, 3),\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    padding: theme.spacing(0, 0),\r\n  },\r\n  [theme.breakpoints.down(\"md\")]: {\r\n    width: \"100%\",\r\n    \"&:focus\": {\r\n      width: \"100%\",\r\n    },\r\n  },\r\n}));\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  marginLeft: \"32px\",\r\n  marginRight: \"32px\",\r\n  \"&:hover\": {\r\n    // backgroundColor: \"#BCBCBC\",\r\n  },\r\n  //marginLeft: 0,\r\n  background: \"#F5F5F5\",\r\n  borderRadius: \"8px\",\r\n  borderCollapse: \"collapse\",\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    // marginLeft: theme.spacing(0.1),\r\n    width: \"auto\",\r\n  },\r\n}));\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  padding: theme.spacing(0, 1),\r\n  height: \"100%\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n}));\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 2),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    color: \"black\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"100%\",\r\n      \"&:focus\": {\r\n        width: \"80%\",\r\n      },\r\n    },\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: \"60%\",\r\n      \"&:focus\": {\r\n        width: \"80%\",\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst searchIconStyle = {\r\n  marginTop: \"2px\",\r\n};\r\n// __________________________________________________________________________\r\n\r\nexport default function SearchBar({\r\n  placeholder,\r\n  query,\r\n  sx,\r\n  onChange,\r\n  ...other\r\n}) {\r\n  const navigate = useNavigate();\r\n  const { translate } = useLocales();\r\n  const { pathname } = useLocation();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      handleClose();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pathname]);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledSearchbar>\r\n        <Search>\r\n          <SearchIconWrapper>\r\n            <IconButtonAnimate>\r\n              <img\r\n                src=\"/assets/icons/employee/search.svg\"\r\n                alt=\"\"\r\n                style={searchIconStyle}\r\n              />\r\n            </IconButtonAnimate>\r\n          </SearchIconWrapper>\r\n          <StyledInputBase\r\n            placeholder={translate(`${placeholder}`)}\r\n            onChange={onChange}\r\n            inputProps={{\r\n              sx: {\r\n                \"&::placeholder\": {\r\n                  textAlign: \"left\",\r\n                  color: \"#BCBCBC\",\r\n                  fontWeight: \"400\",\r\n                  fontSize: \"12.5374px\",\r\n                  lineHeight: \"19px\",\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        </Search>\r\n      </StyledSearchbar>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\BoxColumn.js",["3625","3626","3627","3628","3629"],[],"import React from \"react\";\r\nimport { Box, Grid, CircularProgress } from \"@mui/material\";\r\nimport BoxItem from \"./BoxItem\";\r\nimport { getInquiry } from \"../../../../redux/services/employee_facility_service\";\r\n// redux\r\nimport { dispatch, useDispatch, useSelector } from \"../../../../redux/store\";\r\n// useEffect\r\nimport { useEffect } from \"react\";\r\n//_________________________________________________________________\r\n\r\nexport default function BoxRow({ BoxRow }) {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, id } = useSelector((state) => state.employeeFacility);\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoading && Spinner}\r\n\r\n      {!isLoading && (\r\n        <Box display={\"flex\"} flexDirection={\"column\"}>\r\n          <Grid container>\r\n            {BoxRow?.map((row, index) => (\r\n              <BoxItem key={index} row={row} />\r\n            ))}\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\pages\\auth\\LocationSearch.js",["3630","3631","3632","3633","3634","3635","3636"],["3637"],"import { useState, memo, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport { InputBase } from \"@mui/material\";\r\nimport { IconButtonAnimate } from \"../../components/animate\";\r\nimport { useLocales } from \"../../locales\";\r\n// ____________________________________________________________________\r\n\r\nconst APPBAR_MOBILE = 64;\r\nconst APPBAR_DESKTOP = 92;\r\n\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  border: \"1px solid #D8D8D8\",\r\n  borderRight: \"8px\",\r\n  background: \"transparent\",\r\n  borderRadius: \"8px\",\r\n  boxShadow: \"4px 4px 25px 0px rgba(0, 0, 0, 0.03)\",\r\n}));\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  padding: theme.spacing(0, 1),\r\n  height: \"100%\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n}));\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 2),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    color: \"black\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"100%\",\r\n      \"&:focus\": {\r\n        width: \"80%\",\r\n      },\r\n    },\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: \"60%\",\r\n      \"&:focus\": {\r\n        width: \"80%\",\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst searchIconStyle = {\r\n  marginTop: \"2px\",\r\n};\r\n// __________________________________________________________________________\r\n\r\nexport default function LocationSearch({ placeholder, query, sx, ...other }) {\r\n  const { translate } = useLocales();\r\n  const { pathname } = useLocation();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      handleClose();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pathname]);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Search>\r\n        <SearchIconWrapper>\r\n          <IconButtonAnimate>\r\n            <img\r\n              src=\"/assets/icons/akar-icons_search.svg\"\r\n              alt=\"\"\r\n              style={searchIconStyle}\r\n            />\r\n          </IconButtonAnimate>\r\n        </SearchIconWrapper>\r\n        <StyledInputBase\r\n          placeholder={translate(`${placeholder}`)}\r\n          inputProps={{\r\n            sx: {\r\n              \"&::placeholder\": {\r\n                textAlign: \"left\",\r\n                color: \"#BCBCBC\",\r\n                fontWeight: \"400\",\r\n                fontSize: \"12.5374px\",\r\n                lineHeight: \"19px\",\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      </Search>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\iconify\\CustomCalender.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceTableRowInvoice.js",["3638","3639","3640","3641","3642"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// @mui\r\nimport {\r\n    Stack,\r\n    Button,\r\n    TableRow,\r\n    MenuItem,\r\n    TableCell,\r\n    IconButton,\r\n    Typography,\r\n    Checkbox,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport Image from \"../../../components/image\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// ----------------------------------------------------------------------------\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n    color: '#FFCC63',\r\n    '&.Mui-checked': {\r\n        color: '#FFCC63'\r\n    }\r\n}\r\n\r\nconst rightCellBorderStyle = {\r\n    borderWidth: \"1px 1px 1px 0px\",\r\n    borderRadius: \"0px 16px 16px 0px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n    borderWidth: \"1px 0px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n    borderWidth: \"1px 0px 1px 1px\",\r\n    borderRadius: \"16px 0px 0px 16px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n    fontSize: '12px',\r\n    fontWeight: 400,\r\n    color: '#535353',\r\n}\r\n\r\nconst rateCellSx = {\r\n    ...cellTextSx,\r\n    fontWeight: 500,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '55px',\r\n    borderRadius: '10px',\r\n    mx: 'auto',\r\n    py: '2px',\r\n    justifyContent: 'space-evenly',\r\n    border: '1px solid rgba(103, 103, 103, 0.1)'\r\n}\r\n\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nFinanceTableRowInvoice.propTypes = {\r\n    row: PropTypes.object,\r\n    selected: PropTypes.bool,\r\n    onEditRow: PropTypes.func,\r\n    onDeleteRow: PropTypes.func,\r\n    onSelectRow: PropTypes.func,\r\n};\r\n\r\n\r\nexport default function FinanceTableRowInvoice(props) {\r\n\r\n    const { row, selected, onEditRow, onSelectRow, onDeleteRow, } = props\r\n\r\n\r\n    const {invoiceNo,userName,requestDate,invoiceValue,status,withdrawDate} = row;\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n    const [openPopover, setOpenPopover] = useState(null);\r\n\r\n    const handleOpenConfirm = () => {\r\n        setOpenConfirm(true);\r\n    };\r\n\r\n    const handleCloseConfirm = () => {\r\n        setOpenConfirm(false);\r\n    };\r\n\r\n    const handleOpenPopover = (event) => {\r\n        event.stopPropagation()\r\n        setOpenPopover(event.currentTarget);\r\n    };\r\n\r\n    const handleClosePopover = () => {\r\n        setOpenPopover(null);\r\n    };\r\n\r\n    // ---------------- JSX Code -------------\r\n    return (\r\n        <>\r\n\r\n            <StyledTableRow hover selected={selected} >\r\n\r\n                <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n\r\n                    <Checkbox\r\n                        checked={selected}\r\n                        onClick={(e) => {\r\n                            e.stopPropagation()\r\n                            onSelectRow(invoiceNo)\r\n                        }}\r\n                        sx={{ ...checkBoxSx }}/>\r\n                </TableCell>\r\n\r\n                <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <Typography sx={{ ...cellTextSx }}>\r\n                            {invoiceNo}\r\n                        </Typography>\r\n                    </Stack>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={{ ...cellTextSx }}>\r\n                        {userName}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={{ ...cellTextSx }}>\r\n                        {requestDate}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={{ ...cellTextSx }}>\r\n                        {withdrawDate}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography  sx={{ ...cellTextSx }}>\r\n                        {invoiceValue}\r\n                    </Typography>\r\n                </TableCell>\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography\r\n                        sx={\r\n                            status === 'failed' ?\r\n                                { ...cellTextSx, color: '#FF0000' }\r\n                                :\r\n                                { ...cellTextSx, color: '#4EE476' }\r\n                        }\r\n                    >\r\n                        {translate(`${status}`)}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n              \r\n\r\n\r\n\r\n                <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n                    <IconButton\r\n                        color={openPopover ? \"inherit\" : \"default\"}\r\n                        onClick={handleOpenPopover}\r\n                    >\r\n                        <Iconify icon=\"eva:more-horizontal-fill\" />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </StyledTableRow>\r\n\r\n            <MenuPopover\r\n                open={openPopover}\r\n                onClose={handleClosePopover}\r\n                arrow=\"right-top\"\r\n                sx={{\r\n                    width: '130px',\r\n                    boxShadow: ' 2px 2px 10px rgba(0, 0, 0, 0.1)',\r\n                    borderRadius: '8px',\r\n                    border: '1px solid rgba(103, 103, 103, 0.1)'\r\n                }}\r\n            >\r\n                <MenuItem\r\n                    onClick={(e) => {\r\n                        e.stopPropagation()\r\n                        handleOpenConfirm();\r\n                        handleClosePopover();\r\n                    }}\r\n                >\r\n                    <Image disabledEffect src=\"/assets/icons/dashboard/ic_trash.svg\" />\r\n\r\n                    <Typography ml='16px' fontSize='14px' fontWeight={400} color=\"#535353\">\r\n                        {translate(`delete`)}\r\n                    </Typography>\r\n                </MenuItem>\r\n\r\n                {/* <MenuItem\r\n          onClick={() => {\r\n            onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Iconify icon=\"eva:edit-fill\" />\r\n          Edit\r\n        </MenuItem> */}\r\n            </MenuPopover>\r\n\r\n            <ConfirmDialog\r\n                open={openConfirm}\r\n                onClose={handleCloseConfirm}\r\n                title=\"Delete\"\r\n                content=\"Are you sure want to delete?\"\r\n                action={\r\n                    <Button variant=\"contained\" color=\"error\" onClick={onDeleteRow}>\r\n                        Delete\r\n                    </Button>\r\n                }\r\n            />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingCharts.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\RecentReviewsPagination.js",["3643","3644","3645","3646","3647","3648"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as URLS from \"../../urls\";\r\n// services\r\nimport {\r\n  getResturantReviews,\r\n  getMarketReviews,\r\n} from \"../../redux/services/orders_service\";\r\n\r\nimport { useSelector } from \"../../redux/store\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  paddingTop: \"25px\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  position: \"absolute\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n  bottom: '25px',\r\n  left: '0px',\r\n  width:'100%'\r\n};\r\n\r\nexport default function RecentReviewsPagination() {\r\n  const diapatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  // this is for restaurent\r\n  var resturantId = branchId;\r\n\r\n  // this is for market\r\n  var MarketId = branchId;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n\r\n    diapatch(getResturantReviews({ pageNumber: 1, resturantId }));\r\n\r\n    //For Market\r\n    //diapatch(getMarketReviews({ pageNumber: 1, MarketId }));\r\n\r\n    //onRowsPerPageChange(event);\r\n  };\r\n\r\n  const handlePaginate = (e) => {\r\n    diapatch(\r\n      getResturantReviews({ pageNumber: e.target.innerText, resturantId })\r\n    );\r\n\r\n    // For Market\r\n    // diapatch(getMarketReviews({ pageNumber: e.target.innerText, MarketId }));\r\n  };\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n\r\n        <Pagination\r\n          sx={{\r\n            \"& .MuiPagination-ul\": { justifyContent: \"center\" },\r\n          }}\r\n          onChange={(e) => handlePaginate(e)}\r\n          count={5}\r\n          color=\"primary\"\r\n          renderItem={(item) => (\r\n            <PaginationItem\r\n              slots={{\r\n                previous: KeyboardDoubleArrowLeftIcon,\r\n                next: KeyboardDoubleArrowRightIcon,\r\n              }}\r\n              {...item}\r\n            />\r\n          )}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OrdersPendingPagination.js",["3649","3650","3651","3652"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"../../redux/store\";\r\n// services\r\nimport {\r\n  getRestaurantPendingOrder,\r\n  getMarketPendingOrder,\r\n} from \"../../redux/services/orders_service\";\r\n// ----------------------------------------------------------------------\r\n\r\nOrdersPendingPagination.propTypes = {\r\n  dense: PropTypes.bool,\r\n  onChangeDense: PropTypes.func,\r\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\r\n  sx: PropTypes.object,\r\n};\r\n\r\n// ------ Style -----\r\n// to handle color when switch is checked\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  paddingBottom: \"27px\",\r\n  paddingRight: \"24px\",\r\n  paddingLeft: \"24px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n};\r\n\r\nexport default function OrdersPendingPagination({\r\n  dense,\r\n  onRowsPerPageChange,\r\n  onChangeDense,\r\n  onPageChange,\r\n  rowsPerPageOptions = [5, 10],\r\n  sx,\r\n  ...other\r\n}) {\r\n  const diapatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  // this is for restaurent\r\n  var resturantId = branchId;\r\n\r\n  // this is for market\r\n  var marketId = branchId;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n    diapatch(\r\n      getRestaurantPendingOrder({\r\n        pageNumber: 1,\r\n        resturantId,\r\n      })\r\n    );\r\n    // for market\r\n    {\r\n      /**  diapatch(\r\n      getMarketPendingOrder({\r\n        pageNumber: 1,\r\n        marketId,\r\n      })\r\n    ); */\r\n    }\r\n    onRowsPerPageChange(event);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const handlePaginate = (e) => {\r\n    diapatch(\r\n      getRestaurantPendingOrder({\r\n        pageNumber: +e.target.innerText,\r\n        resturantId,\r\n      })\r\n    );\r\n    // for market\r\n    {\r\n      /**  diapatch(\r\n      getMarketPendingOrder({\r\n         pageNumber: +e.target.innerText,\r\n        marketId,\r\n      })\r\n    ); */\r\n    }\r\n  };\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n        <Stack className={classes.root} textAlign={\"right\"}>\r\n          <Pagination\r\n            onChange={(e) => handlePaginate(e)}\r\n            count={5}\r\n            color=\"primary\"\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                slots={{\r\n                  previous: KeyboardDoubleArrowLeftIcon,\r\n                  next: KeyboardDoubleArrowRightIcon,\r\n                }}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\MostSellingPagination.js",["3653","3654","3655","3656"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\nimport * as URLS from \"../../urls\";\r\n// services\r\nimport {\r\n  getRestaurantHighestSellingMeals,\r\n  getMarketHighestSellingMeals,\r\n} from \"../../redux/services/orders_service\";\r\n\r\nimport { useSelector } from \"../../redux/store\";\r\n// ----------------------------------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  paddingTop: \"25px\",\r\n  textAlign: \"center\",\r\n  width: '100%',\r\n  alignItems: \"center\",\r\n  position: \"absolute\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n  bottom: '25px',\r\n  left: '0px'\r\n};\r\n\r\nexport default function RecentReviewsPagination() {\r\n  const diapatch = useDispatch();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  // this is for restaurent\r\n  var restaurantId = branchId;\r\n\r\n  // this is for market\r\n  var marketId = branchId;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n\r\n    diapatch(getRestaurantHighestSellingMeals({ pageNumber: 1, restaurantId }));\r\n\r\n    //For Market\r\n    // diapatch(getMarketHighestSellingMeals({ pageNumber: 1, marketId }));\r\n\r\n    //onRowsPerPageChange(event);\r\n  };\r\n\r\n  const handlePaginate = (e) => {\r\n    // if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      console.log(+e.target.innerText)\r\n      diapatch(\r\n        getRestaurantHighestSellingMeals({\r\n          pageNumber: e.target.innerText,\r\n          restaurantId: restaurantId,\r\n        })\r\n      );\r\n    // }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      // For Market\r\n      diapatch(\r\n        getMarketHighestSellingMeals({\r\n          pageNumber: +e.target.innerText,\r\n          marketId,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n        <Box>\r\n          <Pagination\r\n            sx={{\r\n              \"& .MuiPagination-ul\": { justifyContent: \"center\" },\r\n            }}\r\n            onChange={(e) => handlePaginate(e)}\r\n            count={5}\r\n            color=\"primary\"\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                slots={{\r\n                  previous: KeyboardDoubleArrowLeftIcon,\r\n                  next: KeyboardDoubleArrowRightIcon,\r\n                }}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </Box>\r\n\r\n\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\loadingSkeleton\\LoadingVertical.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\FinancePagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OrdersPagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableHeadCustom2.js",["3657"],[],"import PropTypes from \"prop-types\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableSortLabel,\r\n} from \"@mui/material\";\r\nimport { useLocales } from \"../../locales\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst visuallyHidden = {\r\n  border: 0,\r\n  margin: -1,\r\n  padding: 0,\r\n  width: \"1px\",\r\n  height: \"1px\",\r\n  overflow: \"hidden\",\r\n  position: \"absolute\",\r\n  whiteSpace: \"nowrap\",\r\n  clip: \"rect(0 0 0 0)\",\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nTableHeadCustom2.propTypes = {\r\n  sx: PropTypes.object,\r\n  onSort: PropTypes.func,\r\n  orderBy: PropTypes.string,\r\n  headLabel: PropTypes.array,\r\n  rowCount: PropTypes.number,\r\n  numSelected: PropTypes.number,\r\n  onSelectAllRows: PropTypes.func,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]),\r\n};\r\n\r\nexport default function TableHeadCustom2({\r\n  order,\r\n  orderBy,\r\n  rowCount = 0,\r\n  headLabel,\r\n  numSelected = 0,\r\n  onSort,\r\n  onSelectAllRows,\r\n  sx,\r\n}) {\r\n  const { translate } = useLocales();\r\n\r\n  return (\r\n    <tbody>\r\n      <TableRow>\r\n        {onSelectAllRows && (\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            sx={{ color: \"primary.main\" }}\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={(event) => onSelectAllRows(event.target.checked)}\r\n          />\r\n        </TableCell>\r\n      )}\r\n\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={\"center\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{\r\n              width: headCell.width,\r\n              minWidth: headCell.minWidth,\r\n              color: \"#121212\",\r\n              fontSize: \"12px\",\r\n              fontWeight: 600\r\n            }}\r\n          >\r\n            {onSort ? (\r\n              <TableSortLabel\r\n                hideSortIcon\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : \"asc\"}\r\n                onClick={() => onSort(headCell.id)}\r\n                sx={{ textTransform: \"capitalize\" }}\r\n              >\r\n                {/* {headCell.label} */}\r\n                {translate(`${headCell.label}`)}\r\n                {orderBy === headCell.id ? (\r\n                  <Box sx={{ ...visuallyHidden }}>\r\n                    {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                  </Box>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            ) : (\r\n              headCell.label\r\n            )}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </tbody>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\EmployeeFinancePagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\RankPagination.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OverViewPendingBranches.js",["3658","3659","3660","3661","3662","3663","3664","3665","3666"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\n// services\r\n\r\nimport { getPendingRestaurantBranches } from \"../../redux/services/restaurant_service\";\r\nimport { getPendingMarketBranches } from \"../../redux/services/markets_service\";\r\n//_______________________________________________________________________\r\nOverViewPendingBranches.propTypes = {\r\n  dense: PropTypes.bool,\r\n  onChangeDense: PropTypes.func,\r\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\r\n  sx: PropTypes.object,\r\n};\r\n\r\n// ------ Style -----\r\n// to handle color when switch is checked\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  paddingBottom: \"27px\",\r\n  paddingRight: \"24px\",\r\n  paddingLeft: \"24px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n};\r\n\r\nexport default function OverViewPendingBranches({\r\n  dates,\r\n  dense,\r\n  onRowsPerPageChange,\r\n  onChangeDense,\r\n  onPageChange,\r\n  rowsPerPageOptions = [5, 10],\r\n  sx,\r\n\r\n  ...other\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n    dispatch(\r\n      getPendingRestaurantBranches({\r\n        pageNumber: 1,\r\n        ...dates,\r\n      })\r\n    );\r\n    onRowsPerPageChange(event);\r\n    // console.log(\"dates\", dates);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          {/*   <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n  </FormControl>*/}\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n        <Stack className={classes.root} textAlign={\"right\"}>\r\n          <Pagination\r\n            onChange={(e) => {\r\n              if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n                dispatch(\r\n                  getPendingRestaurantBranches({\r\n                    pageNumber: +e.target.innerText,\r\n                    ...dates,\r\n                  })\r\n                );\r\n              }\r\n              if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n                dispatch(\r\n                  getPendingMarketBranches({\r\n                    pageNumber: +e.target.innerText,\r\n                    ...dates,\r\n                  })\r\n                );\r\n              }\r\n            }}\r\n            count={5}\r\n            color=\"primary\"\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                slots={{\r\n                  previous: KeyboardDoubleArrowLeftIcon,\r\n                  next: KeyboardDoubleArrowRightIcon,\r\n                }}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\custom-datepicker\\SpecialDatePicker.js",["3667","3668","3669","3670","3671","3672","3673","3674","3675","3676","3677"],[],"import * as React from \"react\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\r\nimport Calender from \"../iconify/Calender\";\r\nimport { useState } from \"react\";\r\nimport { Box } from \"@mui/system\";\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\nimport { Dialog, Modal } from \"@mui/material\";\r\nimport { useLocales } from \"../../locales\";\r\nimport moment from \"moment/moment\";\r\nimport dayjs from \"dayjs\";\r\nimport CustomCalender from \"../iconify/CustomCalender\";\r\n\r\n// ---------------------------------------------\r\n\r\nconst defaulttxtFieldSx = {\r\n    width: \"100%\",\r\n    \"& .MuiOutlinedInput-root\": {\r\n        \"& fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n        \"&:hover fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n        \"&.Mui-focused fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n        \"& .MuiIconButton-root\": {\r\n            \"&:hover\": {\r\n                background: \"#fdcd855c\",\r\n            },\r\n        },\r\n    },\r\n};\r\n\r\nconst defaultPopperSx = {\r\n    \"& .MuiPaper-root\": {\r\n        // border: \"1px solid black\",\r\n    },\r\n    \"& .MuiCalendarPicker-root\": {\r\n        // backgroundColor: \"rgba(45, 85, 255, 0.4)\"\r\n        \"& .MuiPickersPopper-root\": {\r\n            inset: \"20% auto auto 60%!important\",\r\n        },\r\n    },\r\n    \"& .Mui-selected\": {\r\n        background:\r\n            \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n        color: \"#fff !important\",\r\n    },\r\n    \"& .PrivatePickersSlideTransition-root\": {},\r\n    \"& .MuiPickersDay-dayWithMargin\": {\r\n        \"&:hover\": {\r\n            background: \"#fdcd855c\",\r\n        },\r\n        color: \"#5C5C5C\",\r\n        fontSize: \"12px\",\r\n        fontWeight: 700,\r\n    },\r\n    \"& .MuiPickersDay-dayOutsideMonth\": {\r\n        color: \"#B3B2B2\",\r\n    },\r\n    \"& .MuiDayPicker-weekDayLabel\": {\r\n        color: \"rgb(255, 166, 0)\",\r\n        fontWeight: 700,\r\n        // backgroundColor: \"rgba(50, 136, 153)\"\r\n    },\r\n    \"& .MuiPickersDay-root:not(.Mui-selected)\": {\r\n        borderColor: \"transparent\",\r\n    },\r\n    \"& .MuiButton-root\": {\r\n        background:\r\n            \"linear-gradient(178.18deg, #FFD00D -13.56%, #FF6E3A 158.3%) !important\",\r\n        margin: \"auto\",\r\n        color: \"#fff\",\r\n        borderRadius: \"100px\",\r\n        marginBottom: \"20px\",\r\n        padding: \"12px 35px\",\r\n    },\r\n    \"& .MuiIconButton-root\": {\r\n        \"&:hover\": {\r\n            background: \"#fdcd855c\",\r\n        },\r\n    },\r\n    \"& .MuiTabs-root\": { backgroundColor: \"rgba(120, 120, 120, 0.4)\" },\r\n    \".MuiBox-root\": {\r\n        margin: \"0px\",\r\n    },\r\n};\r\n\r\nexport default function SpecialDatePicker({\r\n    hideInput = false,\r\n    textLabel,\r\n    inputFormat,\r\n    onChange,\r\n    open,\r\n    ...other\r\n}) {\r\n    const today = new Date();\r\n    const [value, setValue] = useState(\"\");\r\n    const { translate } = useLocales();\r\n    return (\r\n        <Box\r\n            sx={{\r\n                padding: hideInput ? \"20px\" : \"0px\",\r\n                width: \"100%\",\r\n            }}\r\n        >\r\n            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n\r\n                <DatePicker\r\n                    fullWidth\r\n                    sx={defaulttxtFieldSx}\r\n                    openTo=\"day\"\r\n                    open={open}\r\n                    // onClose={}\r\n                    // formatDate={(date) => moment(date).format()}\r\n                    dayOfWeekFormatter={(day) => day.toUpperCase()}\r\n                    // label={translate(`${textLabel}`)}\r\n                    // InputProps={{\r\n                    //     classes: { root: classes.root }\r\n                    // }}\r\n                    inputFormat={\r\n                        inputFormat === \"MM/YYYY\" ? inputFormat : \"DD/MM/YYYY\"\r\n                    }\r\n                    // value={value['$d']}\r\n                    // onChange={(e) => {\r\n                    //     console.log(e)\r\n                    //     onChange(moment(value).format())\r\n                    // }}\r\n                    // onChange={() => setValue(dayjs(field.value).format())}\r\n                    views={\r\n                        inputFormat === \"MM/YYYY\"\r\n                            ? [\"month\", \"year\"]\r\n                            : [\"day\", \"month\", \"year\"]\r\n                    }\r\n                    showDaysOutsideCurrentMonth\r\n                    components={{ OpenPickerIcon: CustomCalender, }}\r\n                    componentsProps={{\r\n                        actionBar: { actions: [\"accept\"] },\r\n                    }}\r\n                    PopperProps={{\r\n                        sx: defaultPopperSx,\r\n                    }}\r\n                    // InputProps={{ sx: { \"& .MuiSvgIcon-root\": { color: \"red\" } } }}\r\n                    renderInput={\r\n                        (params) => (\r\n                            <TextField\r\n                                sx={defaulttxtFieldSx}\r\n                                id=\"dateOfBirth\"\r\n                                {...other}\r\n                                {...params}\r\n                            />\r\n                        )\r\n                    }\r\n                />\r\n\r\n            </LocalizationProvider>\r\n        </Box>\r\n    );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\pagination\\OverViewAllBranchesPagination.js",["3678","3679","3680","3681","3682","3683","3684","3685","3686"],[],"import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { useLocales } from \"../../locales\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  Pagination,\r\n  PaginationItem,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// icons\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// redux\r\nimport { useDispatch } from \"react-redux\";\r\n// services\r\nimport { getAllBranches } from \"../../redux/services/restaurant_service\";\r\nimport { getAllBranchesMarket } from \"../../redux/services/markets_service\";\r\n\r\nOverViewAllBranchesPagination.propTypes = {\r\n  dense: PropTypes.bool,\r\n  onChangeDense: PropTypes.func,\r\n  rowsPerPageOptions: PropTypes.arrayOf(PropTypes.number),\r\n  sx: PropTypes.object,\r\n};\r\n\r\n// ------ Style -----\r\n// to handle color when switch is checked\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiPaginationItem-icon\": {\r\n      color: \"#FFCC63;\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst selectSx = {\r\n  minWidth: \"70px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#BCBCBC\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#BCBCBC\",\r\n    right: \"0px !important\",\r\n  },\r\n\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  color: \"#BCBCBC\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12.9807px\",\r\n  lineHeight: \"19px\",\r\n};\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  paddingBottom: \"27px\",\r\n  paddingRight: \"24px\",\r\n  paddingLeft: \"24px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n};\r\n\r\nexport default function OverViewAllBranchesPagination({\r\n  dense,\r\n  onRowsPerPageChange,\r\n  onChangeDense,\r\n  onPageChange,\r\n  rowsPerPageOptions = [5, 10],\r\n  sx,\r\n  ...other\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [rows, setRows] = useState(5);\r\n\r\n  const handleChange = (event) => {\r\n    setRows(event.target.value);\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(\r\n        getAllBranches({\r\n          pageNumber: 1,\r\n        })\r\n      );\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllBranchesMarket({ pageNumber: 1 }));\r\n    }\r\n    onRowsPerPageChange(event);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  // ------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* --- Strat Table Pagenation --- */}\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        {/* *** number of Rows Select *** */}\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          {/*\r\n          <FormControl sx={{ ...selectSx }}>\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={rows}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem sx={{ ...titleStyle }} value={5}>\r\n                <em>5 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n              <MenuItem sx={{ ...titleStyle }} value={10}>\r\n                <em>10 {translate(`rows_per_page`)}</em>\r\n              </MenuItem>\r\n            </Select>\r\n  </FormControl>*/}\r\n        </Box>\r\n\r\n        {/* ***  number of Pages *** */}\r\n        <Stack className={classes.root} textAlign={\"right\"}>\r\n          <Pagination\r\n            onChange={(e) => {\r\n              if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n                dispatch(getAllBranches({ pageNumber: +e.target.innerText }));\r\n              }\r\n\r\n              if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n                dispatch(\r\n                  getAllBranchesMarket({ pageNumber: +e.target.innerText })\r\n                );\r\n              }\r\n            }}\r\n            count={5}\r\n            color=\"primary\"\r\n            renderItem={(item) => (\r\n              <PaginationItem\r\n                slots={{\r\n                  previous: KeyboardDoubleArrowLeftIcon,\r\n                  next: KeyboardDoubleArrowRightIcon,\r\n                }}\r\n                {...item}\r\n              />\r\n            )}\r\n          />\r\n        </Stack>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\progress-bar\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\FinanceTableRow.js",["3687","3688","3689","3690"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../components/confirm-dialog\";\r\nimport Image from \"../../../components/image\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\n// ----------------------------------------------------------------------------\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst rateCellSx = {\r\n  ...cellTextSx,\r\n  fontWeight: 500,\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  width: \"55px\",\r\n  borderRadius: \"10px\",\r\n  mx: \"auto\",\r\n  py: \"2px\",\r\n  justifyContent: \"space-evenly\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nFinanceTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function FinanceTableRow(props) {\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const {\r\n    id,\r\n    userName,\r\n    requestDate,\r\n    invoiceValue,\r\n    status,\r\n    withdrawDate,\r\n    currency,\r\n  } = row;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const theme = useTheme();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  // ---------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onSelectRow(id);\r\n            }}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{id}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{userName}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{requestDate}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{withdrawDate}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{currency}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{invoiceValue}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography\r\n            sx={\r\n              status === \"failed\"\r\n                ? { ...cellTextSx, color: \"#FF0000\" }\r\n                : { ...cellTextSx, color: \"#4EE476\" }\r\n            }\r\n          >\r\n            {translate(`${status}`)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"inherit\" : \"default\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify icon=\"eva:more-horizontal-fill\" />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={{\r\n          width: \"130px\",\r\n          boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n        }}\r\n      >\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Image disabledEffect src=\"/assets/icons/dashboard/ic_trash.svg\" />\r\n\r\n          <Typography\r\n            ml=\"16px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`delete`)}\r\n          </Typography>\r\n        </MenuItem>\r\n\r\n        {/* <MenuItem\r\n          onClick={() => {\r\n            onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Iconify icon=\"eva:edit-fill\" />\r\n          Edit\r\n        </MenuItem> */}\r\n      </MenuPopover>\r\n\r\n      {/* <ConfirmDialog\r\n                open={openConfirm}\r\n                onClose={handleCloseConfirm}\r\n                title=\"Delete\"\r\n                content=\"Are you sure want to delete?\"\r\n                action={\r\n                    <Button variant=\"contained\" color=\"error\" onClick={onDeleteRow}>\r\n                        Delete\r\n                    </Button>\r\n                }\r\n            /> */}\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(`delete_invoice`)}\r\n        content={\r\n          <>{translate(\"are_you_sure_you_want_to_delete_this_invoice\")}</>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                // handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\finacial\\BranchLineChart2.js",["3691","3692"],[],"import React from 'react';\r\n// apex Chart\r\nimport Chart from 'react-apexcharts';\r\n// @mui\r\nimport { Box, CircularProgress } from '@mui/material';\r\n// redux\r\nimport { useSelector } from 'react-redux';\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nexport default function BranchLineChart({ firstDateName, secondDateName }) {\r\n\r\n    const { AllBranchesEarningMonthly } = useSelector((state) => state.performance);\r\n    console.log(firstDateName, secondDateName)\r\n\r\n    const product =\r\n        [\r\n            {\r\n                name: firstDateName,\r\n                data: AllBranchesEarningMonthly?.current\r\n            },\r\n            {\r\n                name: secondDateName,\r\n                data: AllBranchesEarningMonthly?.previous\r\n            },\r\n        ]\r\n\r\n\r\n    // ------------ JSX Code -------------\r\n    return (\r\n        <>\r\n            <Chart type='line'\r\n                width='102%'\r\n                height='250px'\r\n                series={product}\r\n                options={{ ...option }}\r\n            >\r\n            </Chart>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n// ------------------------------------------------\r\nconst option = {\r\n    // title: { text: \"Product sell in 2021\" },\r\n    xaxis: {\r\n        // title: { text: \"Product Sell in Months\" },\r\n        // categories: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],\r\n        categories: [...Array(31).keys()].map(e => e + 1),\r\n        labels: {\r\n            show: true,\r\n            style: {\r\n                colors: '#BCBCBC',\r\n                fontSize: '12px',\r\n                fontWeight: 500,\r\n                cssClass: 'apexcharts-xaxis-label',\r\n            },\r\n        },\r\n    },\r\n    yaxis: {\r\n        // title: { text: translate('earning')  },\r\n        labels: {\r\n            show: true,\r\n            style: {\r\n                colors: '#BCBCBC',\r\n                fontSize: '12px',\r\n                fontWeight: 500,\r\n                cssClass: 'apexcharts-xaxis-label',\r\n            },\r\n        },\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 3,\r\n    },\r\n    colors: [\"#FFCC63\", \"#BB85FF\"],\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    legend: {\r\n        show: false\r\n    },\r\n    // tooltip: {\r\n    //     custom: function ({ series, seriesIndex, dataPointIndex, w }) {\r\n    //         return `\r\n    //         <div class=\"arrow_box\">' \r\n    //             <span> ${series[seriesIndex]['month']} :${series[seriesIndex][dataPointIndex]}  </span> \r\n    //         </div>`\r\n    //     }\r\n    // } \r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\cards\\DountChartCard\\DountChartCard.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\finance\\FinanceTableRow.js",["3693","3694","3695","3696","3697","3698"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport Image from \"../../../components/image\";\r\nimport CustomConfirmDialog from \"../../../components/confirm-dialog/CustomConfirmDialog\";\r\n// ----------------------------------------------------------------------------\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  height: \"33px\",\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  height: \"33px\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nFinanceTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function FinanceTableRow(props) {\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const {\r\n    invoice_id,\r\n    user_name,\r\n    request_date,\r\n    invoice_value,\r\n    invoice_statue,\r\n    withdraw_date,\r\n  } = row;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  // ---------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onSelectRow(invoice_id);\r\n            }}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{invoice_id}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{user_name}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{request_date}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{withdraw_date}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{invoice_value}</Typography>\r\n        </TableCell>\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography\r\n            sx={\r\n              invoice_statue === \"failed\"\r\n                ? { ...cellTextSx, color: \"#FF0000\" }\r\n                : { ...cellTextSx, color: \"#4EE476\" }\r\n            }\r\n          >\r\n            {translate(`${invoice_statue}`)}\r\n          </Typography>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow=\"right-top\"\r\n        sx={{\r\n          width: \"130px\",\r\n          boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n        }}\r\n      >\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Image disabledEffect src=\"/assets/icons/dashboard/ic_trash.svg\" />\r\n\r\n          <Typography\r\n            ml=\"16px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`delete`)}\r\n          </Typography>\r\n        </MenuItem>\r\n\r\n        {/* <MenuItem\r\n          onClick={() => {\r\n            onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Iconify icon=\"eva:edit-fill\" />\r\n          Edit\r\n        </MenuItem> */}\r\n      </MenuPopover>\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(`delete_invoice`)}\r\n        content={\r\n          <>{translate(\"are_you_sure_you_want_to_delete_this_invoice\")}</>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\profilePages\\details\\PaymentCard.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchDetails.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\details\\PendingOrdersTableRow.js",["3699","3700","3701","3702"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  // IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  IconButton,\r\n  FormControl,\r\n  Select,\r\n  // Checkbox,\r\n} from \"@mui/material\";\r\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\r\n// components\r\n// import Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../../components/confirm-dialog\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Image from \"../../../../components/image\";\r\nimport Iconify from \"../../../../components/iconify/Iconify\";\r\nimport {\r\n  changeMarketOrderStatus,\r\n  changeRestaurantOrderStatus,\r\n} from \"../../../../redux/services/orders_service\";\r\nimport { useDispatch } from \"react-redux\";\r\n//moment\r\nimport moment from \"moment\";\r\n\r\n// ------------------------------------------------------------------\r\n// ------- Styles --------\r\n// const checkBoxSx = {\r\n//     color: '#FFCC63',\r\n//     '&.Mui-checked': {\r\n//         color: '#FFCC63'\r\n//     }\r\n// }\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  py: \"5px\",\r\n};\r\n\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst availableSelectSx = {\r\n  minWidth: \"70px\",\r\n  width: \"110px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    // pr: '8px!important'\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4EE476\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& .MuiSvgIcon-root\": {\r\n    color: \"#535353\",\r\n    right: \"0px !important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst notAvailableSelectSx = {\r\n  ...availableSelectSx,\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"20px!important\",\r\n    color: \"#4E6FE4\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"12.9807px\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n};\r\n\r\nconst userNameStyle = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  lineHeight: \"163.42%\",\r\n  paddingRight: \"9px\",\r\n};\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nPendingOrdersTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function PendingOrdersTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const theme = useTheme();\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const [orderStatus, setOrderStatus] = useState(row?.deliveredFromFacility);\r\n\r\n  const {\r\n    orderId,\r\n    orderNumber,\r\n    orderTime,\r\n    orderLocation,\r\n    meals,\r\n    price,\r\n    currency,\r\n    deliveryName,\r\n    deliveredFromFacility,\r\n    //orderStatus\r\n  } = row;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const onChangeStatusHandler = (e) => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      setOrderStatus(e.target.value);\r\n      dispatch(\r\n        changeRestaurantOrderStatus({\r\n          orderId: row?.orderId,\r\n          delivered: e.target.value,\r\n        })\r\n      );\r\n    }\r\n\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      setOrderStatus(e.target.value);\r\n      dispatch(\r\n        changeMarketOrderStatus({\r\n          orderId: row?.orderId,\r\n          delivered: e.target.value,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  // ------------- JSX Code -----------\r\n  return (\r\n    <>\r\n      {/* ********** Cells Table Row ********** */}\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(row?.orderId)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={{ ...innerCellBorderStyle }}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{orderNumber}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {orderTime.slice(0, 8)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{orderLocation}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{meals}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {price} {currency}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{deliveryName}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          {/* <Typography sx={{ ...cellTextSx }}>\r\n            {`${deliveredFromFacility}`}\r\n          </Typography> */}\r\n          <FormControl\r\n            sx={\r\n              orderStatus === true\r\n                ? { ...availableSelectSx }\r\n                : { ...notAvailableSelectSx }\r\n            }\r\n          >\r\n            <Select\r\n              IconComponent={(props) => <ArrowDropDownIcon {...props} />}\r\n              value={orderStatus}\r\n              onChange={onChangeStatusHandler}\r\n            >\r\n              <MenuItem\r\n                sx={{ ...userNameStyle, color: \"#4E6FE4\" }}\r\n                value={false}\r\n              >\r\n                {translate(\"pending\")}\r\n              </MenuItem>\r\n              <MenuItem\r\n                sx={{ ...userNameStyle, color: \"#4EE476\" }}\r\n                value={true}\r\n              >\r\n                {translate(\"delivered\")}\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </TableCell>\r\n\r\n        {/**  <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography\r\n                        sx={{ ...cellTextSx, color: '#4E6FE4' }}\r\n                    >\r\n                        {translate(`${orderStatus}`)}\r\n                    </Typography>\r\n                </TableCell> */}\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"inherit\" : \"default\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify icon=\"eva:more-horizontal-fill\" />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={{\r\n          width: \"130px\",\r\n          boxShadow: \" 2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n        }}\r\n      >\r\n        <MenuItem\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Image disabledEffect src=\"/assets/icons/dashboard/ic_trash.svg\" />\r\n\r\n          <Typography\r\n            ml=\"16px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`delete`)}\r\n          </Typography>\r\n        </MenuItem>\r\n\r\n        {/* <MenuItem\r\n          onClick={() => {\r\n            onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <Iconify icon=\"eva:edit-fill\" />\r\n          Edit\r\n        </MenuItem> */}\r\n      </MenuPopover>\r\n\r\n      <ConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title=\"Delete\"\r\n        content=\"Are you sure want to delete?\"\r\n        action={\r\n          <Button variant=\"contained\" color=\"error\" onClick={onDeleteRow}>\r\n            Delete\r\n          </Button>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branchDashboard\\details\\SellingMealsCard.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\details\\OrdersTableRow.js",["3703","3704","3705","3706","3707","3708","3709","3710","3711","3712","3713","3714","3715","3716","3717","3718","3719","3720","3721","3722"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  // IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Collapse,\r\n  Box,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  // Checkbox,\r\n} from \"@mui/material\";\r\n// components\r\n// import Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../../components/confirm-dialog\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Image from \"../../../../components/image\";\r\nimport OrdersListSection from \"../OrdersListSection\";\r\nimport MenuList from \"../../menu/lists/MenuList\";\r\nimport OrderDetailTable from \"../OrderDetailTable\";\r\n\r\n// -------------------------------------------------------------\r\n\r\n// ------- Styles --------\r\n// const checkBoxSx = {\r\n//     color: '#FFCC63',\r\n//     '&.Mui-checked': {\r\n//         color: '#FFCC63'\r\n//     }\r\n// }\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n  py: \"5px\",\r\n};\r\n\r\nconst statusTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 700,\r\n  color: \"#FFFFFF\",\r\n  p: \"6px 16px\",\r\n  borderRadius: \"60px\",\r\n  width: \"90px\",\r\n  m: \"auto\",\r\n};\r\n\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nOrdersTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function OrdersTableRow(props) {\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const [openChildTable, setOpenChildTable] = useState(false);\r\n\r\n  const {\r\n    id,\r\n    orderTime,\r\n    preapringTime,\r\n    formattedAddress,\r\n    meals,\r\n    price,\r\n    orderStatus,\r\n    orderNumber,\r\n    currency,\r\n    deliveryName,\r\n  } = row;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const renderSwitch = (param) => {\r\n    switch (param) {\r\n      case 0:\r\n        return \"order_pending\";\r\n      case 1:\r\n        return \"order_on_way\";\r\n      case 2:\r\n        return \"order_on_progress\";\r\n      case 3:\r\n        return \"order_delivered\";\r\n      case 4:\r\n        return \"order_canceled\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n  // ------------- JSX Code --------\r\n  return (\r\n    <>\r\n      {/* ********** Cells Table Row ********** */}\r\n      <StyledTableRow\r\n        hover\r\n        selected={selected}\r\n        aria-label=\"expand row\"\r\n        size=\"small\"\r\n        onClick={() => setOpenChildTable(!openChildTable)}\r\n        sx={{\r\n          background: openChildTable && \"#ECECEC\",\r\n        }}\r\n      >\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onSelectRow(id);\r\n            }}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={{ ...innerCellBorderStyle }}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{orderNumber}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {\" \"}\r\n            {orderTime.slice(0, 8)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {preapringTime.slice(0, 8)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{formattedAddress}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{meals}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {price} {currency}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{deliveryName}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <Typography\r\n            sx={{\r\n              ...cellTextSx,\r\n              color:\r\n                orderStatus === 1\r\n                  ? \"#4E6FE4\"\r\n                  : orderStatus === 4\r\n                  ? \"#FF0000\"\r\n                  : \"#4EE476\",\r\n            }}\r\n          >\r\n            {translate(`${renderSwitch(orderStatus)}`)}\r\n          </Typography>\r\n        </TableCell>\r\n        {/*                 \r\n                <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n                    <IconButton\r\n                        color={openPopover ? \"inherit\" : \"default\"}\r\n                        onClick={handleOpenPopover}\r\n                    >\r\n                        <Iconify icon=\"eva:more-horizontal-fill\" />\r\n                    </IconButton>\r\n                </TableCell> */}\r\n      </StyledTableRow>\r\n\r\n      {/* ********** OrderDetailTable  ********** */}\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={9}>\r\n          <Collapse in={openChildTable} timeout=\"auto\" unmountOnExit>\r\n            <OrderDetailTable />\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\orders\\details\\OrderDetailTableRow.js",["3723","3724","3725","3726","3727","3728","3729","3730","3731","3732","3733","3734","3735","3736"],[],"import React, { useState } from \"react\";\r\n// PropsTypes\r\nimport PropTypes from \"prop-types\";\r\n// Locales\r\nimport { useLocales } from \"../../../../locales\";\r\n// react-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Stack,\r\n    Checkbox,\r\n    TableRow,\r\n    Divider,\r\n    TableCell,\r\n    Typography,\r\n    MenuItem,\r\n    IconButton,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// Components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { position } from \"stylis\";\r\n// -------------------------------------------------------------------------------------------\r\n//----------- Style ------------\r\nconst checkBoxSx = {\r\n    color: '#FFCC63',\r\n    '&.Mui-checked': {\r\n        color: '#FFCC63'\r\n    }\r\n}\r\n\r\nconst rightCellBorderStyle = {\r\n    borderWidth: \"1px 1px 1px 0px\",\r\n    borderRadius: \"0px 16px 16px 0px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n    borderWidth: \"1px 0px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n    borderWidth: \"1px 0px 1px 1px\",\r\n    borderRadius: \"16px 0px 0px 16px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst userNameStyle = {\r\n    fontSize: '12px',\r\n    fontWeight: 400,\r\n    color: '#535353',\r\n    lineHeight: \"163.42%\",\r\n    paddingRight: \"9px\"\r\n}\r\n\r\nconst menuStyle = {\r\n    width: '191px',\r\n    boxShadow: '2px 2px 10px rgba(0, 0, 0, 0.1)',\r\n    borderRadius: '8px',\r\n    border: '1px solid rgba(103, 103, 103, 0.1)',\r\n    top: '70%!important',\r\n    left: '74%!important',\r\n}\r\nconst itemMenuStyle = {\r\n    ml: '16px',\r\n    fontSize: '14px',\r\n    lineHeight: \"20px\",\r\n    fontWeight: 400,\r\n    color: \"#535353\",\r\n}\r\n\r\nconst borderStyle = {\r\n    border: \" 1px solid rgba(103, 103, 103, 0.1)\",\r\n}\r\n\r\nconst img2Style = {\r\n    width: \"59px\",\r\n    height: \"46px\"\r\n}\r\n\r\nconst smallBoxStyle = {\r\n    paddingLeft: \"9px\",\r\n    paddingRight: \"1px\",\r\n    paddingTop: \"4px\",\r\n    paddingBottom: \"4px\",\r\n    display: \"flex\",\r\n    border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n    borderRadius: \"16px\",\r\n    background: \"#FFFFFF\"\r\n}\r\n\r\nconst typoStyle4 = {\r\n    color: \"#535353\",\r\n    fontWeight: \"500\",\r\n    fontSize: \"12px\",\r\n    lineHeight: \"18px\",\r\n    paddingLeft: \"5px\",\r\n}\r\n\r\nconst cancelBtnSx = {\r\n    background: '#FFFFFF',\r\n    color: '#535353',\r\n    border: '0.75px solid #BCBCBC',\r\n    fontSize: '12px',\r\n    lineHeight: \"18px\",\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    width: '100%'\r\n}\r\n\r\nconst confirmBtnSx = {\r\n    fontSize: '12px',\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    width: '100%',\r\n}\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nOrderDetailTableRow.propTypes = {\r\n    row: PropTypes.object,\r\n    selected: PropTypes.bool,\r\n    onEditRow: PropTypes.func,\r\n    onDeleteRow: PropTypes.func,\r\n    onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function OrderDetailTableRow(props) {\r\n    const {\r\n        row,\r\n        selected,\r\n        onEditRow,\r\n        onSelectRow,\r\n        onDeleteRow,\r\n    } = props\r\n\r\n    const {\r\n        photo,\r\n        name,\r\n        category,\r\n        price,\r\n        rate,\r\n        no_of_orders,\r\n        preparation_time,\r\n        item_status\r\n    } = row;\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n    const [openPopover, setOpenPopover] = useState(false);\r\n\r\n    const handleOpenConfirm = () => {\r\n        setOpenConfirm(true);\r\n    };\r\n\r\n    const handleCloseConfirm = () => {\r\n        setOpenConfirm(false);\r\n    };\r\n\r\n    const handleOpenPopover = (event) => {\r\n        setOpenPopover(true);\r\n    };\r\n    const handleClosePopover = () => {\r\n        setOpenPopover(null);\r\n    };\r\n\r\n    // ---------- JSX Code ----------\r\n    return (\r\n        <>\r\n            <StyledTableRow\r\n                hover\r\n                selected={selected}\r\n            // onClick={() => navigate('meal-details')}\r\n            >\r\n\r\n                <TableCell padding=\"checkbox\" sx={leftCellBorderStyle} >\r\n                    <Checkbox\r\n                        checked={selected}\r\n                        onClick={() => onSelectRow(name)}\r\n                        sx={{ ...checkBoxSx }}\r\n                    />\r\n                </TableCell>\r\n\r\n                <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <img\r\n                            src=\"/assets/images/employee/meal.png\"\r\n                            alt=\"\"\r\n                            style={img2Style} />\r\n                    </Stack>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={userNameStyle}>\r\n                        {translate(name)}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={userNameStyle}>\r\n                        {category}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={userNameStyle}>\r\n                        {price}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Box alignItems={\"center\"} sx={smallBoxStyle}>\r\n                        <img\r\n                            src=\"/assets/icons/employee/Vector.svg\"\r\n                            alt=\"img\" />\r\n                        <Typography sx={typoStyle4}>{translate(\"4.9\")}</Typography>\r\n                    </Box>\r\n\r\n\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={userNameStyle}>\r\n                        {no_of_orders}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={userNameStyle}>\r\n                        {preparation_time}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Box justifyContent={\"center\"} display={\"flex\"} alignItems={\"center\"} alignContent={\"center\"}>\r\n                        <Typography\r\n                            sx={\r\n                                item_status === 'Available' ?\r\n                                    { ...userNameStyle, color: '#4EE476' }\r\n                                    :\r\n                                    { ...userNameStyle, color: '#FF0000' }\r\n                            }>\r\n                            {translate(`${item_status}`)}\r\n                        </Typography>\r\n\r\n                        <img\r\n                            src=\"/assets/icons/employee/arrow.svg\"\r\n                            alt=\"img\"\r\n                        />\r\n                    </Box>\r\n\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n                    <IconButton\r\n                        color={openPopover ? \"red\" : \"blue\"}\r\n                        onClick={(e) => {\r\n                            // e.stopPropagation();\r\n                            handleOpenPopover();\r\n                        }}\r\n                    >\r\n                        <Iconify color={openPopover ? \"#FFCC63\" : \"default\"} icon=\"eva:more-horizontal-fill\" />\r\n                    </IconButton>\r\n                </TableCell>\r\n\r\n            </StyledTableRow>\r\n\r\n            {/* <Box position='relative'>\r\n                <MenuPopover\r\n                    open={openPopover}\r\n                    onClose={handleClosePopover}\r\n                    // arrow=\"left-top\"\r\n                    sx={menuStyle}>\r\n                    <MenuItem\r\n                        onClick={() => {\r\n                            onEditRow();\r\n                            handleClosePopover();\r\n                        }}\r\n                    >\r\n                        <img src=\"/assets/icons/arrow/pen.svg\" alt=\"\" />\r\n                        <Typography sx={itemMenuStyle} >\r\n                            {translate(`edit`)}\r\n                        </Typography>\r\n                    </MenuItem>\r\n\r\n                    <Divider sx={borderStyle} />\r\n\r\n                    <MenuItem onClick={handleOpenConfirm}>\r\n                        <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n                        <Typography sx={itemMenuStyle}>\r\n                            {translate(`delete`)}\r\n                        </Typography>\r\n                    </MenuItem>\r\n\r\n                </MenuPopover>\r\n            </Box> */}\r\n\r\n\r\n            <CustomConfirmDialog\r\n                open={openPopover}\r\n                onClose={handleClosePopover}\r\n                // title={translate(\"delete_item\")}\r\n                content={<> </>}\r\n                action={\r\n                    <>\r\n                        <Button\r\n                            sx={cancelBtnSx}\r\n                            onClick={() => {\r\n                                handleCloseConfirm();\r\n                            }} >\r\n                            {translate(\"edit\")}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            sx={confirmBtnSx}\r\n                            onClick={() => {\r\n                                handleCloseConfirm();\r\n                            }} >\r\n                            {translate(\"delete\")}\r\n                        </Button>\r\n                    </>}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@employee\\branch-info\\details\\EditWorkingDaysModal.js",["3737","3738","3739","3740","3741","3742","3743","3744","3745","3746","3747","3748","3749"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n//mui\r\nimport {\r\n  Alert,\r\n  Box,\r\n  Button,\r\n  Stack,\r\n  Typography,\r\n  Modal,\r\n  InputAdornment,\r\n  IconButton,\r\n  Grid,\r\n  Switch,\r\n} from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// components\r\nimport { RHFSwitch, RHFTextField } from \"../../../../components/hook-form\";\r\nimport FormProvider from \"../../../../components/hook-form/FormProvider\";\r\n//Services\r\nimport {\r\n  setResturantWorkTimes,\r\n  getWorkingDays,\r\n} from \"../../../../redux/services/restaurant_service\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setMarketWorkTimes } from \"../../../../redux/services/markets_service\";\r\nimport { Link as RouterLink, useLocation, useNavigate } from \"react-router-dom\";\r\nimport Link from \"@mui/material/Link\";\r\n\r\n// -----------------------------------------------------------------------\r\n\r\n// -------- Modal Style -------\r\nconst modalSx = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  height: \"80%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"95%\", sm: \"475px\" },\r\n  bgcolor: \"#ffffff\",\r\n  boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n  borderRadius: \"16px\",\r\n  p: { xs: \"40px 20px 40px 20px\", md: \"40px\" },\r\n  maxHeight: \"630px\",\r\n  overflowY: \"auto !important\",\r\n  scrollbarWidth: \"none\",\r\n};\r\n\r\nconst dayInfoHolderSx = {\r\n  \"> label\": {\r\n    mr: \"0px\",\r\n    ml: \"0px\",\r\n  },\r\n  flexDirection: { xs: \"row-reverse\", sm: \"row\" },\r\n  width: { xs: \"100%\", sm: \"auto\" },\r\n  justifyContent: \"space-between\",\r\n  alignItems: \"center\",\r\n};\r\nconst txtFieldBorderStyle = {\r\n  width: \"193px\",\r\n  \"& .MuiOutlinedInput-input\": {\r\n    fontSize: \"16px\",\r\n    fontWeight: 400,\r\n    lineHeight: \"16px\",\r\n    color: \"#121212\",\r\n  },\r\n  \"& .MuiInputLabel-root\": {\r\n    color: \"#9DA0A4\",\r\n    fontWeight: 400,\r\n    fontSize: \"14px\",\r\n  },\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"20px\",\r\n    height: \"48px\",\r\n    width: \"193px\",\r\n    // alignItems: 'baseline',\r\n    \"& fieldset\": {\r\n      border: \"1.5px solid #bcbcbc\",\r\n    },\r\n    \"&:hover fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n    \"&.Mui-focused fieldset\": {\r\n      borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n    },\r\n  },\r\n};\r\nconst dayHolderSx = {\r\n  flexDirection: { xs: \"column\", sm: \"row\" },\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst titleSx = {\r\n  lineHeight: \"30px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"16px\",\r\n  lineHeight: \"22px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nconst disabledTextSx = {\r\n  ...subTitleSx,\r\n  opacity: \".5\",\r\n};\r\n\r\nconst loadingButtonStyle = {\r\n  bgcolor: \"#FFCC63\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  fontSize: \"14px\",\r\n  fontWeight: 600,\r\n  // minWidth: { xs: '145px', sm: '206px' },\r\n  // boxShadow:\r\n  //     \"0px 2px 4px rgba(44, 39, 56, 0.08), 0px 4px 8px rgba(44, 39, 56, 0.08)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  ...loadingButtonStyle,\r\n  bgcolor: \"#fff\",\r\n  border: \"1px solid rgba(255, 204, 99)\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n  \":hover\": {\r\n    bgcolor: \"#ffcc63\",\r\n    color: \"#fff\",\r\n  },\r\n};\r\n\r\nconst activeSwitchSx = {\r\n  // '& .MuiSwitch-root': {\r\n  width: \"75px!important\",\r\n  height: \"29px\",\r\n  p: \"9px -1px 9px 0px\",\r\n  // },\r\n  \"& .MuiSwitch-switchBase\": {\r\n    left: \"-5px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(28px)\",\r\n    \"& .MuiSwitch-thumb\": {\r\n      background: \"#ffcc63\",\r\n    },\r\n  },\r\n  \"& .MuiSwitch-track\": {\r\n    width: \"39px\",\r\n    height: \"14px\",\r\n  },\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#fff\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .Mui-checked+.MuiSwitch-track\": {\r\n    background: \"rgba(255, 204, 99, 0.3)\",\r\n  },\r\n};\r\n\r\nconst dividerSx = {\r\n  display: { xs: \"block\", md: \"none\" },\r\n  height: \"1px\",\r\n  my: \"16px\",\r\n  background: \"#bcbcbc\",\r\n};\r\n\r\nconst inActiveSwitchSx = {\r\n  ...activeSwitchSx,\r\n  \"& .MuiSwitch-thumb\": {\r\n    background: \"#FFFFFF\",\r\n    boxShadow: \"0px 2.375px 9.5px rgba(37, 96, 63, 0.299798)\",\r\n    transform: \"translateY(-6px)\",\r\n    width: \"20px\",\r\n    height: \"20px\",\r\n  },\r\n  \"& .MuiSwitch-switchBase.Mui-checked\": {\r\n    transform: \"translateX(28px)\",\r\n    \"& .MuiSwitch-thumb\": {\r\n      background: \"#ffcc63\",\r\n    },\r\n  },\r\n};\r\nconst disabledLinkSx = {\r\n  fontWeight: 400,\r\n  fontSize: \"12px\",\r\n  color: \"#9DA0A4\",\r\n};\r\n\r\nconst activeLinkSx = {\r\n  fontWeight: \"700 !important\",\r\n  fontSize: \"12px !important\",\r\n  color: \"#121212\",\r\n};\r\n// array of working day\r\nconst workingDays = [\r\n  {\r\n    dayName: \"saturday\",\r\n    controlName: \"saturdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"sunday\",\r\n    controlName: \"sundayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"monday\",\r\n    controlName: \"mondayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"tuesday\",\r\n    controlName: \"thusdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"wednesday\",\r\n    controlName: \"wendnesdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"thursday\",\r\n    controlName: \"thursdayIsOpen\",\r\n    isOpened: true,\r\n  },\r\n  {\r\n    dayName: \"friday\",\r\n    controlName: \"firdayIsOpen\",\r\n    isOpened: false,\r\n  },\r\n];\r\n\r\nexport default function EditWorkingDayModal({ open, onClose, workTimes }) {\r\n  const { translate } = useLocales();\r\n\r\n  const { branchId } = useSelector((state) => state.control);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, days, isLoadingSetWorkTime } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const facilityType = localStorage.getItem(\"facilityType\");\r\n\r\n  const initialState = {\r\n    SaturdayIsOpen: false,\r\n    SundayIsOpen: false,\r\n    MondayIsOpen: false,\r\n    TuesdayIsOpen: false,\r\n    WednesdayIsOpen: false,\r\n    ThursdayIsOpen: false,\r\n    FridayIsOpen: false,\r\n  };\r\n\r\n  const [dayIsOpen, setDayIsOpen] = useState(initialState);\r\n\r\n  const TimeRangRegEx =\r\n    /^((?:[01]\\d:[0-5][0-9]|2[0-3]:[0-5][0-9])(?:\\s?)-(?:\\s?)(?:[01]\\d:[0-5][0-9]|2[0-3]:[0-5][0-9])(?:\\s?,\\s?)?)+$/g;\r\n\r\n  const WorkingDaysSchema = Yup.object().shape({\r\n    Saturday: dayIsOpen[\"SaturdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Sunday: dayIsOpen[\"SundayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Monday: dayIsOpen[\"MondayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Tuesday: dayIsOpen[\"TuesdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Wednesday: dayIsOpen[\"WednesdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Thursday: dayIsOpen[\"ThursdayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n    Friday: dayIsOpen[\"FridayIsOpen\"]\r\n      ? Yup.string().matches(\r\n          TimeRangRegEx,\r\n          translate(`must_be_this_format_08_00_22_00`)\r\n        )\r\n      : Yup.string(),\r\n  });\r\n\r\n  const defaultValues = {\r\n    Saturday: \"\",\r\n    Sunday: \"\",\r\n    Monday: \"\",\r\n    Tuesday: \"\",\r\n    Wednesday: \"\",\r\n    Thursday: \"\",\r\n    Friday: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(WorkingDaysSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n  } = methods;\r\n\r\n  const getOpenHour = (str) => (str ? +str.split(\"-\")[0].split(\":\")[0] : 0);\r\n\r\n  const getOpenMinte = (str) => (str ? +str?.split(\"-\")[0].split(\":\")[1] : 0);\r\n\r\n  const getCloseHour = (str) => (str ? +str?.split(\"-\")[1].split(\":\")[0] : 0);\r\n\r\n  const getCloseMinte = (str) => (str ? +str?.split(\"-\")[1].split(\":\")[1] : 0);\r\n\r\n  // to convertDate after validation to array of objects then send to database\r\n  const convertToSend = (obj, days) => {\r\n    let result = [];\r\n    let daysName = days.map((day) => day.enName);\r\n    for (let i = 0; i < daysName.length; i++) {\r\n      if (obj.hasOwnProperty(daysName[i])) {\r\n        result.push({\r\n          dayId: days.find((e) => e.enName === `${daysName[i]}`)?.id,\r\n          openTime: {\r\n            hour: getOpenHour(obj[`${daysName[i]}`]),\r\n            minute: getOpenMinte(obj[`${daysName[i]}`]),\r\n          },\r\n          closeTime: {\r\n            hour: getCloseHour(obj[`${daysName[i]}`]),\r\n            minute: getCloseMinte(obj[`${daysName[i]}`]),\r\n          },\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const onSubmit = async (data, event) => {\r\n    localStorage.setItem(\"newRestaurantId\", branchId);\r\n    localStorage.setItem(\"newMarketId\", branchId);\r\n    console.log(\"branchId\", branchId);\r\n    const workingDays = convertToSend(data, days);\r\n    try {\r\n      if (facilityType === \"0\") {\r\n        dispatch(setResturantWorkTimes(workingDays)).then(() => {\r\n          onClose()\r\n        });\r\n      }\r\n      if (facilityType === \"1\") {\r\n        dispatch(setMarketWorkTimes(workingDays)).then(() => {\r\n          onClose()\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getWorkingDays());\r\n  }, [dispatch]);\r\n\r\n  // ------- JSX Code ---------\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={open}\r\n        onClose={onClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...modalSx, overflow: \"hidden\" }}>\r\n          {/* ********************** Start add new offer Form ******************* */}\r\n          <Typography variant=\"h5\" sx={{ ...titleSx, mb: \"30px\" }}>\r\n            {translate(`edit_working_days`)}\r\n          </Typography>\r\n\r\n          <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n            <Stack>\r\n              {/* error Message after submit */}\r\n              {!!errors.afterSubmit && (\r\n                <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n              )}\r\n\r\n              {days?.map((day, index) => (\r\n                <Box key={index}>\r\n                  <Stack sx={{ ...dayHolderSx }} mb=\"16px\">\r\n                    <Stack sx={{ ...dayInfoHolderSx }}>\r\n                      {/*--- Day Status --- */}\r\n                      <Switch\r\n                        sx={{ ...activeSwitchSx }}\r\n                        onChange={(e) => {\r\n                          setDayIsOpen((prev) => ({\r\n                            ...prev,\r\n                            [`${day.enName}IsOpen`]: e.target.checked,\r\n                          }));\r\n                        }}\r\n                      />\r\n\r\n                      {/*--- Day Name --- */}\r\n                      <Typography\r\n                        ml=\"20px\"\r\n                        sx={\r\n                          dayIsOpen[`${day.enName}IsOpen`]\r\n                            ? { ...subTitleSx }\r\n                            : { ...disabledTextSx }\r\n                        }\r\n                      >\r\n                        {translate(`${day.enName}`)}\r\n                      </Typography>\r\n                    </Stack>\r\n\r\n                    <RHFTextField\r\n                      name={`${day.enName}`}\r\n                      label={\"from(08:00) - to(22:00)\"}\r\n                      disabled={!dayIsOpen[`${day.enName}IsOpen`]}\r\n                      sx={{ ...txtFieldBorderStyle }}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment position=\"end\">\r\n                            <IconButton\r\n                              color=\"primary\"\r\n                              aria-label=\"upload picture\"\r\n                              component=\"label\"\r\n                              sx={{ p: \"0px\" }}\r\n                            >\r\n                              <label htmlFor=\"branchLogo\">\r\n                                <img\r\n                                  src=\"/assets/icons/dashboard/ic_grayTimer.svg\"\r\n                                  alt=\"upload_icon\"\r\n                                />\r\n                              </label>\r\n                            </IconButton>\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                  {index < workingDays.length - 1 && (\r\n                    <Box sx={{ ...dividerSx }} />\r\n                  )}\r\n                </Box>\r\n              ))}\r\n\r\n              {/* =================@@ Action Button  @@================*/}\r\n              <Stack direction=\"row\" mt=\"27px\">\r\n                <Button\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  variant=\"Contained\"\r\n                  onClick={onClose}\r\n                  // loading={isSubmitSuccessful || isSubmitting}\r\n                  sx={{ ...cancelBtnSx, width: \"100%\", mr: \"16px\" }}\r\n                >\r\n                  {translate(\"cancel\")}\r\n                </Button>\r\n\r\n                <LoadingButton\r\n                  color=\"inherit\"\r\n                  size=\"large\"\r\n                  type=\"submit\"\r\n                  variant=\"Contained\"\r\n                  loading={isLoadingSetWorkTime}\r\n                  sx={{ ...loadingButtonStyle, width: \"100%\" }}\r\n                >\r\n                  {translate(\"save_changes\")}\r\n                </LoadingButton>\r\n              </Stack>\r\n            </Stack>\r\n          </FormProvider>\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\rank\\details\\RankTableRow.js",["3750","3751","3752","3753","3754","3755","3756","3757","3758","3759","3760","3761","3762","3763"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../../components/confirm-dialog\";\r\nimport Image from \"../../../../components/image\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\n// ----------------------------------------------------------------------------\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst rateCellSx = {\r\n  ...cellTextSx,\r\n  fontWeight: 500,\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  width: \"55px\",\r\n  borderRadius: \"10px\",\r\n  mx: \"auto\",\r\n  py: \"2px\",\r\n  justifyContent: \"space-evenly\",\r\n  border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nRankTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function RankTableRow(props) {\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const {\r\n    id,\r\n    manager,\r\n    name,\r\n    rate,\r\n    //totalReviews,\r\n    goodReviews,\r\n    badReviews,\r\n    creationDate,\r\n  } = row;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const theme = useTheme();\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  // ---------------- JSX Code -------------\r\n  return (\r\n    <>\r\n      {/* ********** Cells Table Row ********** */}\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onSelectRow(id);\r\n            }}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{id}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{manager}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{name}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...rateCellSx }}>\r\n            <img\r\n              src=\"/assets/icons/dashboard/ic_star.svg\"\r\n              alt=\"\"\r\n              style={{ width: \"12px\", height: \"12px\" }}\r\n            />\r\n            {rate}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {goodReviews + badReviews}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx, color: \"#4EE476\" }}>\r\n            {goodReviews}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx, color: \"#FF0000\" }}>\r\n            {badReviews}\r\n          </Typography>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(`delete_branch`)}\r\n        content={\r\n          <>{translate(\"are_you_sure_you_want_to_delete_this_branch\")}</>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                // handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\performance\\details\\BranchIncomingCard.js",["3764"],[],"import React from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n//mui\r\nimport { Box, Typography } from \"@mui/material\";\r\n//url\r\nimport * as URLS from \"../../../../urls\";\r\n\r\n// -------------------------------------------------------\r\n\r\n//  ----------- Styles ----------\r\n\r\nconst mainHolderSx = {\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  alignContent: \"center\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\",\r\n  p: { xs: \"8px 15px\", sm: \"8px 24px\" },\r\n  border: \"1.5px solid #ECECEC\",\r\n  borderRadius: \"20px\",\r\n};\r\n\r\nconst contentHolderSx = {\r\n  pl: { xs: \"15px\", sm: \"21px\" },\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"left\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nconst iconImgSx = {\r\n  width: \"10px\",\r\n  height: \"7.5px\",\r\n  margin: \"auto 16px auto 16px\",\r\n};\r\n\r\nconst logoImgSx = {\r\n  width: \"56px\",\r\n  height: \"56px\",\r\n  borderRadius: \"50%\",\r\n  margin: \"auto\",\r\n  border: \"1px solid #ffcc63\",\r\n  margingRight: \"21px\",\r\n  // marginLeft: \"16px\"\r\n};\r\n\r\nconst mainTitleSx = {\r\n  color: \"#FFCC63\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"16px\",\r\n  marginRight: \"20px\",\r\n};\r\n\r\nconst rateNumberSx = {\r\n  color: \"#121212\",\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"16px\",\r\n  paddingLeft: \"6px\",\r\n};\r\n\r\nconst startIconSx = {\r\n  width: \"11.61px\",\r\n  height: \"11.11px\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  color: \"#535353\",\r\n  fontWeight: \"400\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n};\r\n\r\nconst highLightTextSx = {\r\n  color: \"#4EE476\",\r\n  fontWeight: \"600\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n};\r\n\r\nexport default function BranchIncomingCard({ row }) {\r\n  const { translate } = useLocales();\r\n\r\n  // --------- JSX Code ---------\r\n  return (\r\n    <>\r\n      <Box sx={{ ...mainHolderSx }}>\r\n        <Box display=\"flex\">\r\n          <img\r\n            // src={logoUrl}\r\n            src={\r\n              localStorage.getItem(\"facilityType\") === \"0\"\r\n                ? `${URLS.baseImageURL}resturant/${row?.imageUrl}`\r\n                : `${URLS.baseImageURL}market/${row?.imageUrl}`\r\n            }\r\n            alt=\"\"\r\n            style={{ ...logoImgSx }}\r\n          />\r\n\r\n          {/* -------- Content Holder ----- */}\r\n          <Box sx={{ ...contentHolderSx }}>\r\n            {/* branch name and rate */}\r\n            <Box display=\"flex\" alignItems='center'>\r\n              <Typography sx={{ ...mainTitleSx }}>\r\n                {/* {branchName} */}\r\n                {row?.name}\r\n              </Typography>\r\n              <img\r\n                src=\"/assets/icons/dashboard/ic_star.svg\"\r\n                alt=\"star\"\r\n                style={{ ...startIconSx }}\r\n              />\r\n              <Typography sx={{ ...rateNumberSx }}>{row?.rating}</Typography>\r\n            </Box>\r\n\r\n            {/* manger */}\r\n            <Box display=\"flex\" pt=\"10px\">\r\n              <Typography sx={{ ...subTitleSx }}>\r\n                {translate(\"manager\")}: {row?.managerName}\r\n              </Typography>\r\n              {/* <Typography sx={{ ...subTitleSx,ml:'5px' }}>{row?.managerName}</Typography> */}\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* --------Branch Earning ----- */}\r\n        <Typography sx={{ ...highLightTextSx }}>\r\n          {row?.currency} {\"\"} {row?.totalIncome}\r\n        </Typography>\r\n      </Box>\r\n      {/* <Divider sx={{ width: \"100%\" }}></Divider> */}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\TableTopSection2.js",["3765","3766","3767","3768","3769"],[],"import React, { useState } from 'react';\r\n// locales\r\nimport { useLocales } from '../../../../locales';\r\n// mui\r\nimport {\r\n    MenuItem,\r\n    Select,\r\n    Stack,\r\n    Typography\r\n} from '@mui/material';\r\n// component\r\nimport Image from '../../../../components/image/Image';\r\n\r\n\r\nexport default function TableTopSection2({ title = null, totalUser = null }) {\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const [fromDate, setfromDate] = useState('12 / Oct / 2022');\r\n\r\n    const changeFromDataHandler = (event) => {\r\n        setfromDate(event.target.value);\r\n    };\r\n\r\n\r\n    // ---------- JSX Code ------------\r\n    return (\r\n        <>\r\n      <Stack\r\n        direction=\"row\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        spacing={1}\r\n        paddingBottom={\"24px\"}\r\n        paddingTop={\"64px\"}\r\n      >\r\n        <Typography  variant=\"h5\">\r\n          {translate(\"new_branches\")}\r\n        </Typography>\r\n\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n        <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            sx={{ cursor: \"pointer\" }}\r\n          >\r\n            {\" \"}\r\n            <Image disabledEffect src=\"/assets/icons/table/time.svg\" />\r\n            <Typography paddingLeft={\"18px\"}\r\n              sx={{ fontSize: \"12px\", fontWeight: 500, color: \"#535353\",lineHeight:\"15px\" }}\r\n              >\r\n              {translate(\"12 /Oct/2022\")}\r\n            </Typography>\r\n          </Stack>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            sx={{ cursor: \"pointer\" }}\r\n          >\r\n            {\" \"}\r\n            <Image disabledEffect src=\"/assets/icons/table/arrow.svg\" />\r\n            <Typography paddingRight={\"8px\"} paddingLeft={\"16px\"}\r\n              sx={{ fontSize: \"12px\", fontWeight: 700, color: \"#FFCC63\",lineHeight:\"15px\" }}\r\n              >\r\n              {translate(\"to\")}\r\n            </Typography>\r\n            <Typography paddingRight={\"12px\"}\r\n              sx={{ fontSize: \"12px\", fontWeight: 500, color: \"#535353\",lineHeight:\"15px\" }}\r\n              >\r\n              {translate(\"12 /Oct/2022\")}\r\n            </Typography>\r\n            <Image disabledEffect src=\"/assets/icons/table/arrow.svg\" />\r\n\r\n          </Stack>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            sx={{ cursor: \"pointer\" }}\r\n            paddingLeft={\"20px\"}\r\n          >\r\n            {\" \"}\r\n            <Image disabledEffect src=\"/assets/icons/table/ic_print.svg\" />\r\n            <Typography\r\n              sx={{ fontSize: \"10px\", fontWeight: 700, color: \"#535353\",lineHeight:\"150%\" }}\r\n              >\r\n              {translate(\"print\")}\r\n            </Typography>\r\n          </Stack>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            sx={{ cursor: \"pointer\" }}\r\n          >\r\n            <img style={{color:\"#535353\"}}  disabledEffect src=\"/assets/icons/table/export.svg\" />\r\n            <Typography\r\n              sx={{ fontSize: \"10px\", fontWeight: 700, color: \"#535353\",lineHeight:\"150%\" }}\r\n            >\r\n              {translate(\"export\")}\r\n            </Typography>\r\n          </Stack>\r\n        </Stack>\r\n      </Stack>\r\n          </>\r\n                    \r\n\r\n\r\n           \r\n\r\n\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\NewBranchTableRow.js",["3770","3771","3772","3773","3774","3775","3776"],[],"import PropTypes from \"prop-types\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Box,\r\n} from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../../components/confirm-dialog\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Image from \"../../../../components/image\";\r\n//redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// services\r\nimport { deleteBranchById } from \"../../../../redux/services/restaurant_service\";\r\n// ----------------------------------------------------------------------\r\n\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst statusTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 700,\r\n  color: \"#FFFFFF\",\r\n  p: \"6px 16px\",\r\n  borderRadius: \"215px\",\r\n  width: \"90px\",\r\n  m: \"auto\",\r\n};\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nNewBranchTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"43px\",\r\n  paddingRight: \"43px\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  paddingLeft: \"44px\",\r\n  paddingRight: \"44px\",\r\n};\r\nexport default function NewBranchTableRow(props) {\r\n  const { isLoading, isDeleted } = useSelector((state) => state.branches);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDeleted) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeleted]);\r\n  // ----------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              onSelectRow(row?.id);\r\n            }}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{row?.name}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography\r\n            sx={\r\n              row?.currentStatus === 0\r\n                ? { ...statusTextSx, background: \"#D5A154\" }\r\n                : { ...statusTextSx, background: \"#4EE476\" }\r\n            }\r\n          >\r\n            {row?.currentStatus === 0\r\n              ? translate(`busy`)\r\n              : translate(`available`)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {/* {location} */}\r\n            {row?.lat}\r\n            {row?.lon}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{row?.totalOrders}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{row?.completedOrders}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{row?.reviewsCount}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"inherit\" : \"default\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify icon=\"eva:more-horizontal-fill\" />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        arrow=\"right-top\"\r\n        sx={{\r\n          width: \"130px\",\r\n          boxShadow: \"2px 2px 10px rgba(0, 0, 0, 0.1)\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n        }}\r\n      >\r\n        <MenuItem\r\n          onClick={() => {\r\n            onEditRow();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/pen.svg\" />\r\n          <Typography\r\n            ml=\"15px\"\r\n            fontSize=\"14px\"\r\n            lineHeight={\"20px\"}\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`edit`)}\r\n          </Typography>\r\n        </MenuItem>\r\n        <MenuItem\r\n          onClick={() => {\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img src=\"/assets/icons/arrow/tooltip.svg\" />\r\n          <Typography\r\n            ml=\"16px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`delete`)}\r\n          </Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={\r\n          <>{translate(\"are_you_sure_you_want_to_delete_this_branch\")}</>\r\n        }\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                // handleCloseConfirm();\r\n                dispatch(deleteBranchById(row?.id));\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\overview\\detailes\\NewBranchTableRow2.js",["3777","3778","3779"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n// @mui\r\nimport {\r\n    Stack,\r\n    Button,\r\n    TableRow,\r\n    MenuItem,\r\n    TableCell,\r\n    IconButton,\r\n    Typography,\r\n    Checkbox,\r\n    Box,\r\n} from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\n// import ConfirmDialog from \"../../../../components/confirm-dialog\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Image from \"../../../../components/image\";\r\n\r\n// ----------------------------------------------------------------------\r\nconst pointStyle = {\r\n    width: \"7px\",\r\n    height: \"7px\",\r\n    marginRight: \"2px\"\r\n}\r\n\r\nconst checkBoxSx = {\r\n    color: '#FFCC63',\r\n    '&.Mui-checked': {\r\n        color: '#FFCC63'\r\n    }\r\n}\r\n\r\nconst rightCellBorderStyle = {\r\n    borderWidth: \"1px 1px 1px 0px\",\r\n    borderRadius: \"0px 16px 16px 0px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n    borderWidth: \"1px 0px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n    borderWidth: \"1px 0px 1px 1px\",\r\n    borderRadius: \"16px 0px 0px 16px\",\r\n    borderColor: \"#eee\",\r\n    borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n    fontSize: '12px',\r\n    fontWeight: 400,\r\n    color: '#535353',\r\n}\r\n\r\nconst statusTextSx = {\r\n    fontSize: '12px',\r\n    fontWeight: 700,\r\n    color: '#FFFFFF',\r\n    p: '6px 16px',\r\n    borderRadius: '215px',\r\n    width: '90px',\r\n    m: 'auto'\r\n}\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\n\r\n\r\nNewBranchTableRow2.propTypes = {\r\n    row: PropTypes.object,\r\n    selected: PropTypes.bool,\r\n    onEditRow: PropTypes.func,\r\n    onDeleteRow: PropTypes.func,\r\n    onSelectRow: PropTypes.func,\r\n};\r\nconst cancelBtnSx = {\r\n    background: '#FFFFFF',\r\n    color: '#535353',\r\n    border: '0.75px solid #BCBCBC',\r\n    fontSize: '12px',\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    paddingLeft: \"43px\",\r\n    paddingRight: \"43px\",\r\n}\r\n\r\nconst confirmBtnSx = {\r\n\r\n    fontSize: '12px',\r\n    fontWeight: \"500\",\r\n    \"&:hover\": {\r\n        bgcolor: \"text.primary\",\r\n        color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    },\r\n    boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n    borderRadius: \"6px\",\r\n    paddingLeft: \"44px\",\r\n    paddingRight: \"44px\",\r\n}\r\n//___________________________________________________________________\r\nexport default function NewBranchTableRow2(props) {\r\n \r\n    const { row, selected, onEditRow, onSelectRow, onDeleteRow, } = props\r\n\r\n    const {id,name,secondName,status,lat,lon,dataCompleteness} = row;\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n    const [openPopover, setOpenPopover] = useState(null);\r\n\r\n    const handleOpenConfirm = () => {\r\n        setOpenConfirm(true);\r\n    };\r\n\r\n    const handleCloseConfirm = () => {\r\n        setOpenConfirm(false);\r\n    };\r\n\r\n    const handleOpenPopover = (event) => {\r\n        setOpenPopover(event.currentTarget);\r\n    };\r\n\r\n    const handleClosePopover = () => {\r\n        setOpenPopover(null);\r\n    };\r\n\r\n\r\n\r\n    // ----------- JSX Code -------------\r\n    return (\r\n        <>\r\n            <StyledTableRow hover selected={selected}>\r\n\r\n                <TableCell padding=\"checkbox\" sx={leftCellBorderStyle} >\r\n                    <Checkbox\r\n                        checked={selected}\r\n                        onClick={() => onSelectRow(id)}\r\n                        sx={{ ...checkBoxSx }}\r\n                    />\r\n                </TableCell>\r\n                <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <Typography sx={{ ...cellTextSx }}>\r\n                        {id}\r\n                        </Typography>\r\n                    </Stack>\r\n                </TableCell>\r\n\r\n                <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <Typography sx={{ ...cellTextSx }}>\r\n                        {name}\r\n                        </Typography>\r\n                    </Stack>\r\n                </TableCell>\r\n\r\n                <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <Typography sx={{ ...cellTextSx }}>\r\n                            {secondName}\r\n                        </Typography>\r\n                    </Stack>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={\r\n                        status === 'pending' ?\r\n                            { ...statusTextSx, background: '#4E6FE4' }\r\n                            :\r\n                            { ...statusTextSx, background: '#FF0000' }\r\n                    }\r\n                    >\r\n                        {translate(`${status}`)}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n                    <Typography sx={{ ...cellTextSx }}>\r\n                        {lat}{lon}\r\n                    </Typography>\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" style={{ justifyContent: \"center\" }} sx={innerCellBorderStyle}>\r\n                    <Box display={\"flex\"} alignItems={\"center\"} justifyContent={\"center\"}>\r\n                        <img\r\n                            src=\"/assets/icons/arrow/point.svg\"\r\n                            alt=\"fav-icon\"\r\n                            style={pointStyle} />\r\n                        <Typography ml={\"4px\"} sx={{ ...cellTextSx }}>\r\n                        {dataCompleteness} %\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                </TableCell>\r\n\r\n                <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n                    <IconButton\r\n                        color={openPopover ? \"inherit\" : \"default\"}\r\n                        onClick={handleOpenPopover}\r\n                    >\r\n                        <Iconify icon=\"eva:more-horizontal-fill\" />\r\n                    </IconButton>\r\n                </TableCell>\r\n            </StyledTableRow>\r\n\r\n            <MenuPopover\r\n                open={openPopover}\r\n                onClose={handleClosePopover}\r\n                arrow=\"right-top\"\r\n                sx={{\r\n                    width: '130px',\r\n                    boxShadow: '2px 2px 10px rgba(0, 0, 0, 0.1)',\r\n                    borderRadius: '8px',\r\n                    border: '1px solid rgba(103, 103, 103, 0.1)'\r\n                }}\r\n            >\r\n\r\n\r\n\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        handleOpenConfirm();\r\n                        handleClosePopover();\r\n                    }}\r\n                >\r\n                    <img src=\"/assets/icons/arrow/tooltip.svg\" alt=\"\" />\r\n                    <Typography ml='16px' fontSize='14px' fontWeight={400} color=\"#535353\">\r\n                        {translate(`delete`)}\r\n                    </Typography>\r\n                </MenuItem>\r\n            </MenuPopover>\r\n\r\n            <CustomConfirmDialog\r\n                open={openConfirm}\r\n                onClose={handleCloseConfirm}\r\n                title={translate(\"delete_item\")}\r\n                content={\r\n                    <>\r\n                        {translate(\"are_you_sure_you_want_to_delete_this_branch\")}\r\n                    </>}\r\n                action={\r\n                    <>\r\n                        <Button\r\n                            sx={cancelBtnSx}\r\n                            onClick={() => {\r\n                                handleCloseConfirm();\r\n                            }}\r\n                        >\r\n                            {translate(\"cancel\")}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            sx={confirmBtnSx}\r\n                            onClick={() => {\r\n\r\n                                handleCloseConfirm();\r\n                            }}\r\n                        >\r\n                            {translate(\"delete\")}\r\n                        </Button>\r\n                    </>\r\n                }\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\details\\NewBranchTableRow.js",["3780","3781","3782","3783","3784","3785","3786","3787","3788","3789"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  Box,\r\n} from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport ConfirmDialog from \"../../../../components/confirm-dialog\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Image from \"../../../../components/image\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteBranchById } from \"../../../../redux/services/restaurant_service\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// ----------------------------------------------------------------------\r\n\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst statusTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 700,\r\n  color: \"#FFFFFF\",\r\n  p: \"6px 16px\",\r\n  borderRadius: \"60px\",\r\n  width: \"90px\",\r\n  m: \"auto\",\r\n};\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nNewBranchTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function NewBranchTableRow(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const theme = useTheme();\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n\r\n  const { id, name, secondName, status, lat, lon, dataCompleteness } = row;\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  // ----------- JSX Code -------------\r\n  return (\r\n    <>\r\n      <StyledTableRow hover selected={selected}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={() => onSelectRow(id)}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        {/* <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <Typography sx={{ ...cellTextSx }}>\r\n                            {id}\r\n                        </Typography>\r\n                    </Stack>\r\n                </TableCell> */}\r\n\r\n        <TableCell sx={innerCellBorderStyle}>\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{name}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        {/* <TableCell sx={innerCellBorderStyle}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent='center' spacing={2}>\r\n                        <Typography sx={{ ...cellTextSx }}>\r\n                            {secondName}\r\n                        </Typography>\r\n                    </Stack>\r\n                </TableCell> */}\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography\r\n            sx={status === 0 ? { ...statusTextSx, background: \"#4E6FE4\" } : {}}\r\n          >\r\n            {translate(`${status === 0 && \"pending\"}`)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}></Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"inherit\" : \"default\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify icon=\"eva:more-horizontal-fill\" />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        // arrow=\"right-top\"\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={{\r\n          width: \"130px\",\r\n          boxShadow: \"2px 2px 10px 0px rgba(0, 0, 0, 0.10)\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n          padding: \"0px 0px 8px 0px\",\r\n        }}\r\n      >\r\n        <MenuItem\r\n          sx={{ padding: \"14px 16px 8px 14px\" }}\r\n          onClick={() => {\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n          sx={{ pl: \"15px!important\" }}\r\n        >\r\n          <img\r\n            alt=\"\"\r\n            src=\"/assets/icons/dashboard/ic_trash.svg\"\r\n            style={{ height: \"20px\", width: \"20px\" }}\r\n          />\r\n          <Typography\r\n            ml=\"12px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`delete`)}\r\n          </Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                // handleCloseConfirm();\r\n                dispatch(deleteBranchById(row?.id)).then(() => {\r\n                  handleCloseConfirm();\r\n                });\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\details\\BranchTableRow.js",["3790","3791","3792","3793","3794","3795","3796"],[],"import PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../../locales\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// @mui\r\nimport {\r\n  Stack,\r\n  Button,\r\n  TableRow,\r\n  MenuItem,\r\n  TableCell,\r\n  IconButton,\r\n  Typography,\r\n  Checkbox,\r\n  CircularProgress,\r\n  Box,\r\n  Divider,\r\n} from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../../../components/iconify\";\r\nimport MenuPopover from \"../../../../components/menu-popover\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Image from \"../../../../components/image\";\r\nimport BranchDetails from \"../BranchDetails\";\r\nimport CustomConfirmDialog from \"../../../../components/confirm-dialog/CustomConfirmDialog\";\r\n//react-router-dom\r\nimport { useNavigate } from \"react-router-dom\";\r\n//redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// services\r\nimport {\r\n  deleteBranchById,\r\n  getResturantInfo,\r\n} from \"../../../../redux/services/restaurant_service\";\r\nimport {\r\n  setBranchId,\r\n  setBranchInfo,\r\n  setBranchName,\r\n} from \"../../../../redux/slices/control\";\r\nimport { getMarketBasicInfo } from \"../../../../redux/services/markets_service\";\r\n\r\n// -----------------------------------------------------------------------------------------\r\n\r\n// ------- Styles --------\r\nconst checkBoxSx = {\r\n  color: \"#FFCC63\",\r\n  \"&.Mui-checked\": {\r\n    color: \"#FFCC63\",\r\n  },\r\n};\r\n\r\nconst rightCellBorderStyle = {\r\n  borderWidth: \"1px 1px 1px 0px\",\r\n  borderRadius: \"0px 16px 16px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst innerCellBorderStyle = {\r\n  borderWidth: \"1px 0px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\nconst leftCellBorderStyle = {\r\n  borderWidth: \"1px 0px 1px 1px\",\r\n  borderRadius: \"16px 0px 0px 16px\",\r\n  borderColor: \"#eee\",\r\n  borderStyle: \"solid\",\r\n};\r\n\r\nconst cellTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 400,\r\n  color: \"#535353\",\r\n};\r\n\r\nconst statusTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 700,\r\n  color: \"#FFFFFF\",\r\n  p: \"6px 16px\",\r\n  borderRadius: \"60px\",\r\n  width: \"90px\",\r\n  m: \"auto\",\r\n};\r\n\r\nconst cancelBtnSx = {\r\n  background: \"#FFFFFF\",\r\n  color: \"#535353\",\r\n  border: \"0.75px solid #BCBCBC\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"18px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst confirmBtnSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: \"500\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n  boxShadow: \" 0px 0.75px 1.5px rgba(16, 24, 40, 0.05)\",\r\n  borderRadius: \"6px\",\r\n  width: \"100%\",\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({}));\r\n\r\nBranchTableRow.propTypes = {\r\n  row: PropTypes.object,\r\n  selected: PropTypes.bool,\r\n  onEditRow: PropTypes.func,\r\n  onDeleteRow: PropTypes.func,\r\n  onSelectRow: PropTypes.func,\r\n};\r\n\r\nexport default function BranchTableRow(props) {\r\n  const { isLoading, isDeleted, isDeletedMarket } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const theme = useTheme();\r\n\r\n  const { row, selected, onEditRow, onSelectRow, onDeleteRow } = props;\r\n  const { translate } = useLocales();\r\n\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const handleOpenConfirm = () => {\r\n    setOpenConfirm(true);\r\n  };\r\n\r\n  const handleCloseConfirm = () => {\r\n    setOpenConfirm(false);\r\n  };\r\n\r\n  const handleOpenPopover = (event) => {\r\n    event.stopPropagation();\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  // state for open restaurnat details pop up\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    navigate(\"/employee\", { state: { id: row?.id } });\r\n    dispatch(setBranchId(row?.id));\r\n    dispatch(setBranchName(row?.name));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDeleted) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeleted]);\r\n\r\n  /**  useEffect(() => {\r\n    if (isDeletedMarket) {\r\n      handleClosePopover();\r\n      handleCloseConfirm();\r\n    }\r\n    // dispatch(Initialize())\r\n  }, [dispatch, isDeletedMarket]);\r\n  // this is for market */\r\n\r\n  return (\r\n    <>\r\n      {/* ************ Branch Detail Pop up *********** */}\r\n      <BranchDetails\r\n        branchId={row?.id}\r\n        open={open}\r\n        branchData={row}\r\n        onCloseModel={handleClose}\r\n      />\r\n\r\n      {/* ********** Cells Table Row ********** */}\r\n      <StyledTableRow hover selected={selected} onClick={handleOpen}>\r\n        <TableCell padding=\"checkbox\" sx={leftCellBorderStyle}>\r\n          <Checkbox\r\n            checked={selected}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n\r\n              onSelectRow(row?.id);\r\n            }}\r\n            sx={{ ...checkBoxSx }}\r\n          />\r\n        </TableCell>\r\n\r\n        <TableCell\r\n          sx={innerCellBorderStyle}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            dispatch(setBranchId(row?.id));\r\n            navigate(\"/dashboard/branches/branch-info\");\r\n          }}\r\n        >\r\n          <Stack\r\n            direction=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Typography sx={{ ...cellTextSx }}>{row?.name}</Typography>\r\n          </Stack>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography\r\n            sx={\r\n              row?.currentStatus === 0\r\n                ? { ...statusTextSx, background: \"#D5A154\" }\r\n                : { ...statusTextSx, background: \"#4EE476\" }\r\n            }\r\n          >\r\n            {row?.currentStatus === 0\r\n              ? translate(`busy`)\r\n              : translate(`available`)}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>\r\n            {/* {location} */}\r\n            {row?.lat}\r\n            {row?.lon}\r\n          </Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{row?.totalOrders}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{row?.completedOrders}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={innerCellBorderStyle}>\r\n          <Typography sx={{ ...cellTextSx }}>{row?.reviewsCount}</Typography>\r\n        </TableCell>\r\n\r\n        <TableCell align=\"center\" sx={rightCellBorderStyle}>\r\n          <IconButton\r\n            color={openPopover ? \"inherit\" : \"default\"}\r\n            onClick={handleOpenPopover}\r\n          >\r\n            <Iconify icon=\"eva:more-horizontal-fill\" />\r\n          </IconButton>\r\n        </TableCell>\r\n      </StyledTableRow>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        // arrow=\"right-top\"\r\n        arrow={theme.direction === \"ltr\" ? \"right-top\" : \"left-top\"}\r\n        sx={{\r\n          width: \"130px\",\r\n          boxShadow: \"2px 2px 10px 0px rgba(0, 0, 0, 0.10)\",\r\n          borderRadius: \"8px\",\r\n          border: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n          padding: \"0px 0px 8px 0px\",\r\n        }}\r\n      >\r\n        <MenuItem\r\n          sx={{ padding: \"14px 16px 8px 14px\" }}\r\n          onClick={() => {\r\n            // onEditRow();\r\n            dispatch(setBranchInfo({}));\r\n            handleClosePopover();\r\n            if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n              dispatch(getResturantInfo(row?.id)).then((response) => {\r\n                dispatch(setBranchInfo(response.payload.data));\r\n                navigate(`/dashboard/branches/edit-branch`, {\r\n                  state: { id: row?.id },\r\n                });\r\n              });\r\n            }\r\n            if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n              dispatch(getMarketBasicInfo(row?.id)).then((response) => {\r\n                dispatch(setBranchInfo(response.payload.data));\r\n                navigate(`/dashboard/branches/edit-branch`, {\r\n                  state: { id: row?.id },\r\n                });\r\n              });\r\n            }\r\n            // navigate(`edit-branch/${row?.id}`)\r\n          }}\r\n        >\r\n          <img\r\n            alt=\"\"\r\n            src=\"/assets/icons/dashboard/material-symbols_edit.svg\"\r\n            style={{ height: \"20px\", width: \"20px\" }}\r\n          />\r\n\r\n          <Typography\r\n            ml=\"12px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`edit`)}\r\n          </Typography>\r\n        </MenuItem>\r\n\r\n        <Divider />\r\n\r\n        <MenuItem\r\n          sx={{ padding: \"14px 16px 8px 16px\" }}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            handleOpenConfirm();\r\n            handleClosePopover();\r\n          }}\r\n        >\r\n          <img\r\n            alt=\"\"\r\n            src=\"/assets/icons/dashboard/ic_trash.svg\"\r\n            style={{ height: \"20px\", width: \"20px\" }}\r\n          />\r\n\r\n          <Typography\r\n            ml=\"12px\"\r\n            fontSize=\"14px\"\r\n            fontWeight={400}\r\n            color=\"#535353\"\r\n          >\r\n            {translate(`delete`)}\r\n          </Typography>\r\n        </MenuItem>\r\n      </MenuPopover>\r\n\r\n      <CustomConfirmDialog\r\n        open={openConfirm}\r\n        onClose={handleCloseConfirm}\r\n        title={translate(\"delete_item\")}\r\n        content={<>{translate(\"are_you_sure_you_want_to_delete_this_item\")}</>}\r\n        action={\r\n          <>\r\n            <Button\r\n              sx={cancelBtnSx}\r\n              onClick={() => {\r\n                handleCloseConfirm();\r\n              }}\r\n            >\r\n              {translate(\"cancel\")}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={confirmBtnSx}\r\n              onClick={() => {\r\n                // handleCloseConfirm();\r\n                dispatch(deleteBranchById(row?.id));\r\n              }}\r\n            >\r\n              {translate(\"delete\")}\r\n            </Button>\r\n          </>\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\logo\\Logo.js",["3797","3798","3799","3800"],[],"import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Box, Link } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst Logo = forwardRef(({ disabledLink = false, sx, ...other }, ref) => {\r\n  const theme = useTheme();\r\n\r\n  const PRIMARY_LIGHT = theme.palette.primary.light;\r\n\r\n  const PRIMARY_MAIN = theme.palette.primary.main;\r\n\r\n  const PRIMARY_DARK = theme.palette.primary.dark;\r\n\r\n  // OR using local (public folder)\r\n  // -------------------------------------------------------\r\n  // const logo = (\r\n  //   <Box\r\n  //     component=\"img\"\r\n  //     src=\"\" => your path\r\n  //     sx={{ width: 40, height: 40, cursor: 'pointer', ...sx }}\r\n  //   />\r\n  // );\r\n\r\n  const logo = (\r\n    <Box\r\n      ref={ref}\r\n      component=\"div\"\r\n      sx={{\r\n        width: 40,\r\n        height: 40,\r\n        display: 'inline-flex',\r\n        ...sx,\r\n      }}\r\n      {...other}\r\n    >\r\n     <img />\r\n    </Box>\r\n  );\r\n\r\n  if (disabledLink) {\r\n    return <>{logo}</>;\r\n  }\r\n\r\n  return (\r\n    <Link to=\"/\" component={RouterLink} sx={{ display: 'contents' }}>\r\n      {logo}\r\n    </Link>\r\n  );\r\n});\r\n\r\nLogo.propTypes = {\r\n  sx: PropTypes.object,\r\n  disabledLink: PropTypes.bool,\r\n};\r\n\r\nexport default Logo;\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scrollbar\\Scrollbar.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useOffSetTop.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\NotificationsPopover.js",["3801","3802","3803","3804"],[],"import PropTypes from \"prop-types\";\r\nimport { noCase } from \"change-case\";\r\nimport { useState } from \"react\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  List,\r\n  Badge,\r\n  Button,\r\n  Avatar,\r\n  Tooltip,\r\n  Divider,\r\n  IconButton,\r\n  Typography,\r\n  ListItemText,\r\n  ListSubheader,\r\n  ListItemAvatar,\r\n  ListItemButton,\r\n} from \"@mui/material\";\r\n// utils\r\nimport { fToNow } from \"../../../utils/formatTime\";\r\n// _mock_\r\nimport { _notifications } from \"../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport { IconButtonAnimate } from \"../../../components/animate\";\r\nimport { useLocales } from \"../../../locales\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function NotificationsPopover() {\r\n  const { translate } = useLocales();\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [notifications, setNotifications] = useState(_notifications);\r\n\r\n  const pathname = window.location.pathname;\r\n\r\n  const totalUnRead = notifications.filter(\r\n    (item) => item.isUnRead === true\r\n  ).length;\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const handleMarkAllAsRead = () => {\r\n    setNotifications(\r\n      notifications.map((notification) => ({\r\n        ...notification,\r\n        isUnRead: false,\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButtonAnimate\r\n        color={openPopover ? \"primary\" : \"default\"}\r\n        onClick={handleOpenPopover}\r\n        sx={{ width: 40, height: 40 }}\r\n      >\r\n        <Badge badgeContent={totalUnRead} color=\"error\">\r\n          <img src=\"/assets/icons/navbar/notification_ic.svg\" alt=\"\" />\r\n        </Badge>\r\n      </IconButtonAnimate>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        sx={{\r\n          marginTop: \"25px\",\r\n          borderRadius: \"0px\",\r\n          /*  paddingLeft: \"22px\",\r\n          paddingRight: \"22px\",\r\n          paddingTop: \"25px\",*/\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            width: \"391px\",\r\n            alignItems: \"center\",\r\n            paddingLeft: \"22px\",\r\n            paddingRight: \"22px\",\r\n            paddingTop: \"25px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <Box sx={{ flexGrow: 1 }}>\r\n            <Typography\r\n              sx={{ fontSize: \"14px\", fontWeight: 600, lineHeight: \"21px\" }}\r\n            >\r\n              {translate(\"Notifications\")}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\r\n              {`${translate(\"you_have\")} ${totalUnRead} ${translate(\r\n                \"unread_messages\"\r\n              )} `}\r\n            </Typography>\r\n          </Box>\r\n\r\n          {totalUnRead > 0 && (\r\n            <Tooltip title={translate(\"mark_all_as_read\")}>\r\n              <IconButton color=\"primary\" onClick={handleMarkAllAsRead}>\r\n                <Iconify icon=\"eva:done-all-fill\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n\r\n        <Divider borderStyle=\"dash\" />\r\n\r\n        <Scrollbar sx={{ height: { xs: 340, sm: \"auto\" } }}>\r\n          <List\r\n            disablePadding\r\n            subheader={\r\n              <ListSubheader\r\n                disableSticky\r\n                sx={{\r\n                  py: 1,\r\n                  px: 2.5,\r\n                  typography: \"overline\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                {translate(\"new\")}\r\n              </ListSubheader>\r\n            }\r\n          >\r\n            {notifications.slice(0, 2).map((notification) => (\r\n              <NotificationItem\r\n                key={notification.id}\r\n                notification={notification}\r\n              />\r\n            ))}\r\n          </List>\r\n\r\n          <List\r\n            disablePadding\r\n            subheader={\r\n              <ListSubheader\r\n                disableSticky\r\n                sx={{ py: 1, px: 2.5, typography: \"overline\" }}\r\n              >\r\n                {translate(\"before_that\")}\r\n              </ListSubheader>\r\n            }\r\n          >\r\n            {notifications.slice(2, 5).map((notification) => (\r\n              <NotificationItem\r\n                key={notification.id}\r\n                notification={notification}\r\n              />\r\n            ))}\r\n          </List>\r\n        </Scrollbar>\r\n\r\n        <Divider sx={{ borderStyle: \"dashed\" }} />\r\n\r\n        <Box sx={{ p: 1 }}>\r\n          <Button fullWidth disableRipple>\r\n            {translate(\"view_all\")}\r\n          </Button>\r\n        </Box>\r\n      </MenuPopover>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nNotificationItem.propTypes = {\r\n  notification: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    avatar: PropTypes.node,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    isUnRead: PropTypes.bool,\r\n    description: PropTypes.string,\r\n    createdAt: PropTypes.instanceOf(Date),\r\n  }),\r\n};\r\n\r\nfunction NotificationItem({ notification }) {\r\n  const { translate } = useLocales();\r\n  const { avatar, title } = renderContent(notification);\r\n  console.log(fToNow(notification.createdAt));\r\n\r\n  return (\r\n    <ListItemButton\r\n      sx={{\r\n        py: 1.5,\r\n        px: 2.5,\r\n        mt: \"1px\",\r\n        ...(notification.isUnRead && {\r\n          bgcolor: \"action.selected\",\r\n        }),\r\n      }}\r\n    >\r\n      <ListItemAvatar>\r\n        <Avatar sx={{ bgcolor: \"background.neutral\" }}>{avatar}</Avatar>\r\n      </ListItemAvatar>\r\n\r\n      <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n        <Typography>{title}</Typography>\r\n      </Box>\r\n    </ListItemButton>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction renderContent(notification) {\r\n  const title = (\r\n    <Typography sx={{ color: \"#535353\", fontWeight: 500, fontSize: \"12px\" }}>\r\n      {notification.title}\r\n\r\n      <Typography\r\n        component=\"p\"\r\n        sx={{ color: \"#535353\", fontWeight: 400, fontSize: \"10px\" }}\r\n      >\r\n        &nbsp; {noCase(notification.description)}\r\n      </Typography>\r\n    </Typography>\r\n  );\r\n\r\n  if (notification.type === \"warning\") {\r\n    return {\r\n      avatar: (\r\n        <img\r\n          alt={notification.title}\r\n          src=\"/assets/icons/notification/ic_warnning.svg\"\r\n        />\r\n      ),\r\n      title,\r\n    };\r\n  }\r\n  if (notification.type === \"succesed\") {\r\n    return {\r\n      avatar: (\r\n        <img\r\n          alt={notification.title}\r\n          src=\"/assets/icons/notification/ic_success.svg\"\r\n        />\r\n      ),\r\n      title,\r\n    };\r\n  }\r\n\r\n  return {\r\n    avatar: notification.avatar ? (\r\n      <img alt={notification.title} src={notification.avatar} />\r\n    ) : null,\r\n    title,\r\n  };\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\employee-dashboard\\header\\Searchbar.js",["3805","3806","3807","3808","3809","3810","3811"],["3812"],"import { useState, memo, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n// @mui\r\nimport { styled, alpha } from \"@mui/material/styles\";\r\nimport { InputBase } from \"@mui/material\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport { IconButtonAnimate } from \"../../../components/animate\";\r\nimport { useLocales } from \"../../../locales\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst APPBAR_MOBILE = 64;\r\nconst APPBAR_DESKTOP = 92;\r\nconst StyledSearchbar = styled(\"div\")(({ theme }) => ({\r\n  height: \"40px\",\r\n  width: \"233px\",\r\n  paddingLeft: \"10px\",\r\n  position: \"relative\",\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    width: \"233px\",\r\n    // left: \"50%\",\r\n    // top: \"50%\",\r\n    // transform: \"translate(-50%, -50%)\",\r\n  },\r\n  [theme.breakpoints.down(\"md\")]: {\r\n    // width: \"60%\",\r\n    /* right: 0,\r\n    \"&:focus\": {\r\n      width: \"90%\",\r\n    },*/\r\n  },\r\n}));\r\nconst Search = styled(\"div\")(({ theme }) => ({\r\n  position: \"relative\",\r\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n  \"&:hover\": {\r\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n  },\r\n  marginLeft: \"10px\",\r\n  border: \"1px solid #D8D8D8\",\r\n  borderRadius: \"8px\",\r\n  borderCollapse: \"collapse\",\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    marginLeft: \"10px\",\r\n    width: \"auto\",\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\r\n  height: \"100%\",\r\n  width: \"16px\",\r\n  position: \"absolute\",\r\n  pointerEvents: \"none\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: \"inherit\",\r\n  \"& .MuiInputBase-input\": {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: \"37px\",\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    color: \"black\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"12ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction Searchbar() {\r\n  const { translate } = useLocales();\r\n  const navigate = useNavigate();\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      handleClose();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [pathname]);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <>\r\n      <StyledSearchbar>\r\n        <Search>\r\n          <SearchIconWrapper>\r\n            <IconButtonAnimate>\r\n              <img\r\n                height=\"16px\"\r\n                width=\"16px\"\r\n                alt=\"search\"\r\n                src=\"/assets/icons/navbar/search_ic.svg\"\r\n              />\r\n            </IconButtonAnimate>\r\n          </SearchIconWrapper>\r\n          <StyledInputBase placeholder=\"ابحث\" />\r\n        </Search>\r\n      </StyledSearchbar>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(Searchbar);\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\image\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\svg-color\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\NotificationsPopover.js",["3813","3814","3815","3816"],[],"import PropTypes from \"prop-types\";\r\nimport { noCase } from \"change-case\";\r\nimport { useState } from \"react\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Stack,\r\n  List,\r\n  Badge,\r\n  Button,\r\n  Avatar,\r\n  Tooltip,\r\n  Divider,\r\n  IconButton,\r\n  Typography,\r\n  ListItemText,\r\n  ListSubheader,\r\n  ListItemAvatar,\r\n  ListItemButton,\r\n} from \"@mui/material\";\r\n// utils\r\nimport { fToNow } from \"../../../utils/formatTime\";\r\n// _mock_\r\nimport { _notifications } from \"../../../_mock/arrays\";\r\n// components\r\nimport Iconify from \"../../../components/iconify\";\r\nimport Scrollbar from \"../../../components/scrollbar\";\r\nimport MenuPopover from \"../../../components/menu-popover\";\r\nimport { IconButtonAnimate } from \"../../../components/animate\";\r\nimport { useLocales } from \"../../../locales\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function NotificationsPopover() {\r\n  const { translate } = useLocales();\r\n  const [openPopover, setOpenPopover] = useState(null);\r\n\r\n  const [notifications, setNotifications] = useState(_notifications);\r\n\r\n  const pathname = window.location.pathname;\r\n\r\n  const totalUnRead = notifications.filter(\r\n    (item) => item.isUnRead === true\r\n  ).length;\r\n\r\n  const handleOpenPopover = (event) => {\r\n    setOpenPopover(event.currentTarget);\r\n  };\r\n\r\n  const handleClosePopover = () => {\r\n    setOpenPopover(null);\r\n  };\r\n\r\n  const handleMarkAllAsRead = () => {\r\n    setNotifications(\r\n      notifications.map((notification) => ({\r\n        ...notification,\r\n        isUnRead: false,\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButtonAnimate\r\n        color={openPopover ? \"primary\" : \"default\"}\r\n        onClick={handleOpenPopover}\r\n        sx={{ width: 40, height: 40 }}\r\n      >\r\n        <Badge badgeContent={totalUnRead} color=\"error\">\r\n          <img src=\"/assets/icons/navbar/notification_ic.svg\" alt='' />\r\n        </Badge>\r\n      </IconButtonAnimate>\r\n\r\n      <MenuPopover\r\n        open={openPopover}\r\n        onClose={handleClosePopover}\r\n        sx={{\r\n          marginTop: \"25px\",\r\n          borderRadius: \"0px\",\r\n          /*  paddingLeft: \"22px\",\r\n          paddingRight: \"22px\",\r\n          paddingTop: \"25px\",*/\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            width: \"391px\",\r\n            alignItems: \"center\",\r\n            paddingLeft: \"22px\",\r\n            paddingRight: \"22px\",\r\n            paddingTop: \"25px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <Box sx={{ flexGrow: 1 }}>\r\n            <Typography\r\n              sx={{ fontSize: \"14px\", fontWeight: 600, lineHeight: \"21px\" }}\r\n            >\r\n              {translate(\"Notifications\")}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\r\n              {`${translate(\"you_have\")} ${totalUnRead} ${translate(\r\n                \"unread_messages\"\r\n              )} `}\r\n            </Typography>\r\n          </Box>\r\n\r\n          {totalUnRead > 0 && (\r\n            <Tooltip title={translate(\"mark_all_as_read\")}>\r\n              <IconButton color=\"primary\" onClick={handleMarkAllAsRead}>\r\n                <Iconify icon=\"eva:done-all-fill\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </Box>\r\n\r\n        <Divider borderStyle=\"dash\" />\r\n\r\n        <Scrollbar sx={{ height: { xs: 340, sm: \"auto\" } }}>\r\n          <List\r\n            disablePadding\r\n            subheader={\r\n              <ListSubheader\r\n                disableSticky\r\n                sx={{\r\n                  py: 1,\r\n                  px: 2.5,\r\n                  typography: \"overline\",\r\n                  marginTop: \"10px\",\r\n                }}\r\n              >\r\n                {translate(\"new\")}\r\n              </ListSubheader>\r\n            }\r\n          >\r\n            {notifications.slice(0, 2).map((notification) => (\r\n              <NotificationItem\r\n                key={notification.id}\r\n                notification={notification}\r\n              />\r\n            ))}\r\n          </List>\r\n\r\n          <List\r\n            disablePadding\r\n            subheader={\r\n              <ListSubheader\r\n                disableSticky\r\n                sx={{ py: 1, px: 2.5, typography: \"overline\" }}\r\n              >\r\n                {translate(\"before_that\")}\r\n              </ListSubheader>\r\n            }\r\n          >\r\n            {notifications.slice(2, 5).map((notification) => (\r\n              <NotificationItem\r\n                key={notification.id}\r\n                notification={notification}\r\n              />\r\n            ))}\r\n          </List>\r\n        </Scrollbar>\r\n\r\n        <Divider sx={{ borderStyle: \"dashed\" }} />\r\n\r\n        <Box sx={{ p: 1 }}>\r\n          <Button fullWidth disableRipple>\r\n            {translate(\"view_all\")}\r\n          </Button>\r\n        </Box>\r\n      </MenuPopover>\r\n    </>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nNotificationItem.propTypes = {\r\n  notification: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    avatar: PropTypes.node,\r\n    type: PropTypes.string,\r\n    title: PropTypes.string,\r\n    isUnRead: PropTypes.bool,\r\n    description: PropTypes.string,\r\n    createdAt: PropTypes.instanceOf(Date),\r\n  }),\r\n};\r\n\r\nfunction NotificationItem({ notification }) {\r\n  const { translate } = useLocales();\r\n  const { avatar, title } = renderContent(notification);\r\n  console.log(fToNow(notification.createdAt));\r\n\r\n  return (\r\n    <ListItemButton\r\n      sx={{\r\n        py: 1.5,\r\n        px: 2.5,\r\n        mt: \"1px\",\r\n        ...(notification.isUnRead && {\r\n          bgcolor: \"action.selected\",\r\n        }),\r\n      }}\r\n    >\r\n      <ListItemAvatar>\r\n        <Avatar sx={{ bgcolor: \"background.neutral\" }}>{avatar}</Avatar>\r\n      </ListItemAvatar>\r\n\r\n      <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n        <Typography>{title}</Typography>\r\n      </Box>\r\n    </ListItemButton>\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction renderContent(notification) {\r\n  const title = (\r\n    <Typography sx={{ color: \"#535353\", fontWeight: 500, fontSize: \"12px\" }}>\r\n      {notification.title}\r\n\r\n      <Typography\r\n        component=\"p\"\r\n        sx={{ color: \"#535353\", fontWeight: 400, fontSize: \"10px\" }}\r\n      >\r\n        &nbsp; {noCase(notification.description)}\r\n      </Typography>\r\n    </Typography>\r\n  );\r\n\r\n  if (notification.type === \"warning\") {\r\n    return {\r\n      avatar: (\r\n        <img\r\n          alt={notification.title}\r\n          src=\"/assets/icons/notification/ic_warnning.svg\"\r\n        />\r\n      ),\r\n      title,\r\n    };\r\n  }\r\n  if (notification.type === \"succesed\") {\r\n    return {\r\n      avatar: (\r\n        <img\r\n          alt={notification.title}\r\n          src=\"/assets/icons/notification/ic_success.svg\"\r\n        />\r\n      ),\r\n      title,\r\n    };\r\n  }\r\n\r\n  return {\r\n    avatar: notification.avatar ? (\r\n      <img alt={notification.title} src={notification.avatar} />\r\n    ) : null,\r\n    title,\r\n  };\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\layouts\\dashboard\\header\\Searchbar.js",["3817","3818","3819","3820","3821","3822","3823"],["3824"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\vertical\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useEventListener.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\TextAnimate.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\FabButtonAnimate.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\DialogAnimate.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\IconButtonAnimate.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\MotionLazyContainer.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\MotionContainer.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\MotionViewport.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\utils.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\useTable.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableNoData.js",["3825","3826"],[],"import PropTypes from \"prop-types\";\r\n// @mui\r\nimport { TableRow, TableCell } from \"@mui/material\";\r\n//\r\nimport EmptyContent from \"../empty-content\";\r\nimport { useLocales } from \"../../locales\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nTableNoData.propTypes = {\r\n  isNotFound: PropTypes.bool,\r\n};\r\n\r\nexport default function TableNoData({ isNotFound, title }) {\r\n  const { translate } = useLocales();\r\n\r\n  const pathname = window.location.pathname;\r\n\r\n  const renderSwitch = () => {\r\n    switch (pathname.split(\"/\")[2]) {\r\n      case \"financial\":\r\n        return \"/assets/images/tables/no_transactions.svg\";\r\n      case \"users\":\r\n        return \"/assets/images/tables/no_employee.svg\";\r\n      case \"rank\":\r\n        return \"/assets/images/tables/new_branches.svg\";\r\n      case \"overview\":\r\n        if (title === \"new_branches\") {\r\n          return \"/assets/images/tables/new_branches.svg\";\r\n        }\r\n        if (title === \"pending_branches\") {\r\n          return \"/assets/images/tables/pending_branches.svg\";\r\n        }\r\n        return \"/assets/images/tables/new_branches.svg\";\r\n      case \"branches\":\r\n        if (title === \"new_branches\") {\r\n          return \"/assets/images/tables/new_branches.svg\";\r\n        }\r\n        if (title === \"pending_branches\") {\r\n          return \"/assets/images/tables/pending_branches.svg\";\r\n        }\r\n        return \"/assets/images/tables/new_branches.svg\";\r\n      default:\r\n        return \"/assets/images/tables/no_transactions\";\r\n    }\r\n  };\r\n  return (\r\n    <TableRow>\r\n      {isNotFound ? (\r\n        <TableCell colSpan={12}>\r\n          <img\r\n            src={`${renderSwitch()}`}\r\n            alt=\"\"\r\n            style={{\r\n              height: \"50%\",\r\n              width: \"30%\",\r\n              display: \"block\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              marginTop: \"10px\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          />\r\n        </TableCell>\r\n      ) : (\r\n        <TableCell colSpan={12} sx={{ p: 0 }} />\r\n      )}\r\n    </TableRow>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableEmptyRows.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableSkeleton.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableHeadCustom.js",["3827"],[],"import PropTypes from \"prop-types\";\r\n// @mui\r\nimport {\r\n  Box,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  TableHead,\r\n  TableSortLabel,\r\n} from \"@mui/material\";\r\nimport { useLocales } from \"../../locales\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst visuallyHidden = {\r\n  border: 0,\r\n  margin: -1,\r\n  padding: 0,\r\n  width: \"1px\",\r\n  height: \"1px\",\r\n  overflow: \"hidden\",\r\n  position: \"absolute\",\r\n  whiteSpace: \"nowrap\",\r\n  clip: \"rect(0 0 0 0)\",\r\n};\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nTableHeadCustom.propTypes = {\r\n  sx: PropTypes.object,\r\n  onSort: PropTypes.func,\r\n  orderBy: PropTypes.string,\r\n  headLabel: PropTypes.array,\r\n  rowCount: PropTypes.number,\r\n  numSelected: PropTypes.number,\r\n  onSelectAllRows: PropTypes.func,\r\n  order: PropTypes.oneOf([\"asc\", \"desc\"]),\r\n};\r\n\r\nexport default function TableHeadCustom({\r\n  order,\r\n  orderBy,\r\n  rowCount = 0,\r\n  headLabel,\r\n  numSelected = 0,\r\n  onSort,\r\n  onSelectAllRows,\r\n  sx,\r\n}) {\r\n  const { translate } = useLocales();\r\n\r\n  return (\r\n    <tbody>\r\n      <TableRow>\r\n\r\n        {onSelectAllRows && (\r\n          <TableCell padding=\"checkbox\">\r\n            <Checkbox\r\n              sx={{ color: \"primary.main\" }}\r\n              indeterminate={numSelected > 0 && numSelected < rowCount}\r\n              checked={rowCount > 0 && numSelected === rowCount}\r\n              onChange={(event) => onSelectAllRows(event.target.checked)}\r\n            />\r\n          </TableCell>\r\n        )}\r\n\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={\"center\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{\r\n              width: headCell.width,\r\n              minWidth: headCell.minWidth,\r\n              color: \"#121212\",\r\n              fontSize: \"12px\",\r\n              fontWeight: 600\r\n            }}\r\n          >\r\n            {onSort ? (\r\n              <TableSortLabel\r\n                hideSortIcon\r\n                active={orderBy === headCell.id}\r\n                direction={orderBy === headCell.id ? order : \"asc\"}\r\n                onClick={() => onSort(headCell.id)}\r\n                sx={{ textTransform: \"capitalize\" }}\r\n              >\r\n                {/* {headCell.label} */}\r\n                {translate(`${headCell.label}`)}\r\n                {orderBy === headCell.id ? (\r\n                  <Box sx={{ ...visuallyHidden }}>\r\n                    {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                  </Box>\r\n                ) : null}\r\n              </TableSortLabel>\r\n            ) : (\r\n              headCell.label\r\n            )}\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </tbody> \r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TableSelectedAction.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\table\\TablePaginationCustom.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_user.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_app.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_files.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_plans.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_invoice.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_others.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_banking.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_booking.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_ecommerce.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_branches.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_opportunities.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_analytics.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\arrays\\_operations.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\confirm-dialog\\UserInfoDialog.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\contactUsPages\\details\\BoxItem.js",["3828","3829","3830","3831"],[],"import * as React from \"react\";\r\nimport { Box, Typography, CircularProgress } from \"@mui/material\";\r\nimport { useLocales } from \"../../../../locales\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"../../../../redux/store\";\r\n//moment\r\nimport moment from \"moment\";\r\nimport { getInquirybyId } from \"../../../../redux/services/employee_facility_service\";\r\nimport { setMessageId } from \"../../../../redux/slices/control\";\r\n\r\n// -------------------------------------------------------------\r\n\r\nconst boxMessageStyle = {\r\n  width: \"100%\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  p: \"12px 0px 16px 0px\",\r\n\r\n  borderBottom: \"1px solid rgba(103, 103, 103, 0.1)\",\r\n  \"&:hover\": {\r\n    backgroundColor: \"#F5F5F5\",\r\n  },\r\n};\r\n\r\nconst titleStyle = {\r\n  fontWeight: \"500\",\r\n  fontSize: \"12px\",\r\n  lineHeight: \"19.3px\",\r\n  color: \"#121212\",\r\n};\r\n\r\nconst firstLineBox = {\r\n  display: \"flex\",\r\n  paddingBottom: \"4px\",\r\n  justifyContent: \"space-between\",\r\n  paddingLeft: \"32px\",\r\n  paddingRight: \"32px\",\r\n};\r\n\r\nconst contentStyle = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"10px\",\r\n  lineHeight: \"17px\",\r\n  color: \"#535353\",\r\n  paddingLeft: \"32px\",\r\n  paddingRight: \"32px\",\r\n  wordWrap: \"break-word\",\r\n};\r\n\r\nconst timeStyle = {\r\n  fontWeight: \"400\",\r\n  fontSize: \"6px\",\r\n  lineHeight: \"15px\",\r\n  color: \"#535353\",\r\n};\r\n\r\nexport default function BoxItem({ row, onClick }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const { subjet, subject, details, creationDate, id } = row;\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={boxMessageStyle}\r\n        onClick={() => {\r\n          dispatch(getInquirybyId(id));\r\n          dispatch(setMessageId(id));\r\n        }}\r\n      >\r\n        <Box sx={firstLineBox}>\r\n          <Typography sx={titleStyle}>{subject}</Typography>\r\n\r\n          <Typography sx={timeStyle}>\r\n            {moment(creationDate).format(\"DD/MM/YYYY\")}\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Typography sx={contentStyle}>{details}</Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\common\\helpPages\\details\\BookMeeting.js",["3832","3833","3834","3835"],[],"import React, { useState } from 'react'\r\n// reac-router-dom\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n// Locales\r\nimport { useLocales } from '../../../../locales';\r\n//mui\r\nimport {\r\n    Alert,\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    Grid,\r\n    Stack,\r\n    Typography,\r\n    MenuItem,\r\n} from '@mui/material'\r\nimport { LoadingButton } from '@mui/lab';\r\nimport Link from '@mui/material/Link';\r\n// form\r\nimport * as Yup from \"yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// components\r\nimport { RHFSelect, RHFTextField } from '../../../../components/hook-form';\r\nimport FormProvider from '../../../../components/hook-form/FormProvider';\r\nimport Calender from '../../../../components/datePicker/Calender';\r\nimport BreadCrumbs from '../../../../components/breadCrumbs/BreadCrumbs';\r\n//section Component\r\n// import ScheduleMeetingSuccessfully from './ScheduleMeetingSuccessfully';\r\n\r\n// ------------------------------------------------------------------------------------------\r\n// ------ Style ------\r\nconst formHolderSx = {\r\n    background: '#FFFFFF',\r\n    boxShadow: '2px 2px 10px rgba(0, 0, 0, 0.1)',\r\n    borderRadius: '16px',\r\n    // p: { xs: '40px 20px', sm: '20px', lg: '40px' }\r\n    p: '40px'\r\n}\r\n\r\nconst mainHolderSx = {\r\n    display: 'flex',\r\n    alignItems: { xs: 'center', lg: 'flex-start' },\r\n    flexDirection: { xs: 'column', sm: 'column', md: 'column' }\r\n}\r\n\r\nconst subHolderSx = {\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: { xs: 'center', sm: 'flex-start', md: 'center' },\r\n    flexDirection: { xs: 'column', sm: 'row', md: 'column' }\r\n}\r\n\r\nconst miniHolderSx = {\r\n    ml: { sm: '20px', md: '0px', },\r\n    flexGrow: 1,\r\n    width: '100%',\r\n    alignSelf: { lg: 'flex-start' },\r\n}\r\n\r\nconst txtFieldBorderStyle = {\r\n    \"& .MuiOutlinedInput-input\": {\r\n        fontSize: '16px',\r\n        fontWeight: 400,\r\n        lineHeight: '16px',\r\n        color: '#535353',\r\n    },\r\n    \"& .MuiInputLabel-root\": {\r\n        color: '#9DA0A4',\r\n        fontWeight: 500,\r\n        fontSize: '14px'\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n        pr: '20px',\r\n        height: '48px',\r\n        // alignItems: 'baseline',\r\n        \"& fieldset\": {\r\n            borderColor: \"#9DA0A4\",\r\n        },\r\n        \"&:hover fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n        \"&.Mui-focused fieldset\": {\r\n            borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n        },\r\n    },\r\n};\r\n\r\nconst titleSx = {\r\n    lineHeight: '30px',\r\n    color: '#535353',\r\n}\r\n\r\nconst subTilteSx = {\r\n    fontWeight: '500',\r\n    fontSize: '14px',\r\n    lineHeight: '20px',\r\n    letterSpacing: '0.8px',\r\n    color: '#535353'\r\n}\r\n\r\nconst activeSx = {\r\n    p: { xs: '14px 15px', sm: '14px 10px', md: '14px 15px' },\r\n    fontSize: '12px',\r\n    textAlign: 'center',\r\n    borderRadius: '6px',\r\n    cursor: 'pointer',\r\n    background: '#ffcc63',\r\n    color: '#fff',\r\n    fontWeight: 600,\r\n    border: '1px solid #fff',\r\n    height: '48px',\r\n}\r\n\r\nconst inActiveSx = {\r\n    ...activeSx,\r\n    background: '#fff',\r\n    color: '#535353',\r\n    fontWeight: 400,\r\n    border: '1px solid #ffcc63'\r\n}\r\n\r\nconst loadingButtonStyle = {\r\n    bgcolor: \"#FFCC63\",\r\n    color: (theme) =>\r\n        theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n    \"&:hover\": {\r\n        bgcolor: \"#FFCC63\",\r\n        color: '#fff'\r\n    },\r\n    fontSize: \"14px\",\r\n    fontWeight: 600,\r\n};\r\n\r\nconst cancelBtnSx = {\r\n    ...loadingButtonStyle,\r\n    bgcolor: \"#fff\",\r\n    border: '1px solid rgba(255, 204, 99)',\r\n    color: (theme) =>\r\n        theme.palette.mode === \"light\" ? \"primary.light\" : \"grey.800\",\r\n    ':hover': {\r\n        bgcolor: \"#ffcc63\",\r\n        color: '#fff'\r\n    }\r\n}\r\n\r\n\r\n// data \r\nconst availableTimes = [\r\n    {\r\n        time: \"10:00 AM - 11:00 AM\",\r\n    },\r\n    {\r\n        time: \"11:00 AM - 12:00 PM\",\r\n    },\r\n    {\r\n        time: \"8:00 AM - 9:00 AM\",\r\n    },\r\n    {\r\n        time: \"9:00 AM - 10:00 AM\",\r\n    },\r\n    {\r\n        time: \"10:00 AM - 11:00 AM\",\r\n    },\r\n    {\r\n        time: \"10:00 AM - 11:00 AM\",\r\n    },\r\n    {\r\n        time: \"10:00 AM - 11:00 AM\",\r\n    },\r\n    {\r\n        time: \"10:00 AM - 11:00 a.m\",\r\n    },\r\n];\r\n\r\n\r\nexport default function BookMeeting({ onChangeState }) {\r\n\r\n\r\n    const { translate } = useLocales();\r\n\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n    const BookMeetingSchema = Yup.object().shape({\r\n        meetingTitle: Yup.string().required(translate(\"meeting_title_is_required\")),\r\n        phoneNumber: Yup.string().required(translate(\"phone_number_is_required\")),\r\n        meetingLocation: Yup.string().required(translate(\"meeting_location_is_required\")),\r\n        question: Yup.string().required(translate(\"question_is_required\")),\r\n        day: Yup.string().required(translate(\"day_is_required\")),\r\n        time: Yup.string().required(translate(\"time_is_required\")),\r\n    });\r\n\r\n    const defaultValues = {\r\n        meetingTitle: '',\r\n        phoneNumber: '',\r\n        meetingLocation: '',\r\n        question: '',\r\n        day: '',\r\n        time: ''\r\n    };\r\n\r\n    const methods = useForm({\r\n        resolver: yupResolver(BookMeetingSchema),\r\n        defaultValues,\r\n    });\r\n\r\n    const {\r\n        reset,\r\n        setError,\r\n        setValue,\r\n        // watch,\r\n        handleSubmit,\r\n        formState: { errors, isSubmitting, isSubmitSuccessful, isDirty },\r\n    } = methods;\r\n\r\n\r\n    const onSubmit = async (data, event) => {\r\n        try {\r\n            console.log(data)\r\n        } catch (error) {\r\n            console.error(error);\r\n            reset();\r\n            setError(\"afterSubmit\", {\r\n                ...error,\r\n                message: error.message,\r\n            });\r\n        }\r\n    };\r\n\r\n    const breadcrumbs = [\r\n        <Link\r\n            sx={{\r\n                fontWeight: 400,\r\n                fontSize: '12px',\r\n                color: \"#9DA0A4\",\r\n                cursor: 'pointer'\r\n            }}\r\n            underline=\"hover\"\r\n            key=\"1\"\r\n            onClick={onChangeState}\r\n        >\r\n            {translate(`booking_meeting`)}\r\n        </Link >,\r\n\r\n        <Typography\r\n            sx={{\r\n                fontWeight: \"700!important\",\r\n                fontSize: '12px!important',\r\n                color: \"#121212\"\r\n            }}\r\n            key=\"2\"\r\n        >\r\n            {translate(`book_new_meeting`)}\r\n        </Typography>,\r\n    ];\r\n\r\n\r\n\r\n    // -------------- JSX Code ----------------\r\n    return (\r\n        <>\r\n\r\n            {/* ******** Schedule Meeting Successfully Modal *********  */}\r\n            {/* <ScheduleMeetingSuccessfully\r\n                open={openModal}\r\n                onCloseModal={closeModalHandler}\r\n                meetingInfo={meetingData}\r\n            /> */}\r\n\r\n\r\n            <Box >\r\n\r\n                <BreadCrumbs breadcrumbs={breadcrumbs} />\r\n\r\n                <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                    <Grid\r\n                        container\r\n                        rowSpacing={{ xs: '40px' }}\r\n                        columnSpacing={{\r\n                            xs: '10px',\r\n                            md: '25px',\r\n                            lg: '40px'\r\n                        }}\r\n                    >\r\n\r\n                        {/* *************** Left Side **************  */}\r\n                        <Grid item xs={12} md={5} lg={5}>\r\n\r\n                            <Box sx={{ ...formHolderSx }}>\r\n\r\n                                <Box sx={{ ...mainHolderSx }}>\r\n\r\n                                    <Typography variant='h5' sx={{ ...titleSx, mb: '37px' }} >\r\n                                        {translate(\"book_meeting\")}\r\n                                    </Typography>\r\n\r\n                                    {/* ********** Bookink Day and Time ********** */}\r\n\r\n                                    <Box sx={{ ...subHolderSx }} >\r\n\r\n                                        {/* ------ Select day (calender) ----- */}\r\n                                        <Box>\r\n                                            <Typography sx={{ ...subTilteSx, mb: '16px' }}>\r\n                                                {translate(`select_date`)}\r\n                                            </Typography>\r\n\r\n                                            <Calender name='day' />\r\n                                        </Box>\r\n\r\n\r\n                                        {/* ------ Select  time  ----- */}\r\n                                        <Box sx={{ ...miniHolderSx }} >\r\n                                            <Typography\r\n                                                sx={{\r\n                                                    ...subTilteSx,\r\n                                                    mt: { xs: '32px', sm: '0px', md: '32px' },\r\n                                                    mb: '16px',\r\n                                                }}>\r\n                                                {translate(\"available_time_slots\")}\r\n                                            </Typography>\r\n\r\n                                            <Grid container spacing='16px' >\r\n                                                {availableTimes.map((row, index) =>\r\n                                                    <Grid item xs={12} sm={12} md={6} key={index}>\r\n                                                        <Typography\r\n                                                            onClick={(e) => {\r\n                                                                setCurrentIndex(index)\r\n                                                                setValue('time', e.target.innerText, { shouldValidate: true })\r\n                                                            }}\r\n                                                            sx={\r\n                                                                (currentIndex === index)\r\n                                                                    ?\r\n                                                                    { ...activeSx }\r\n                                                                    :\r\n                                                                    { ...inActiveSx }\r\n                                                            }\r\n                                                        >\r\n                                                            {row?.time}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                )}\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                    </Box>\r\n\r\n                                </Box>\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n\r\n                        {/* ************ Right Side ************** */}\r\n                        <Grid item xs={12} md={7} lg={7}>\r\n\r\n                            {/* ****** Meeting  Details Form ***** */}\r\n                            <Box sx={{ ...formHolderSx }}>\r\n\r\n                                <Typography variant='h5' sx={{ ...titleSx, mb: '43px' }} >\r\n                                    {translate(`meeting_details`)}\r\n                                </Typography>\r\n\r\n                                {/* --- Meeting Details Form Inputs  --- */}\r\n                                <Grid container rowSpacing={2} columnSpacing={8}>\r\n                                    {/* error Message after submit */}\r\n                                    {!!errors.afterSubmit && (\r\n                                        <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n                                    )}\r\n\r\n                                    {/*======= Meeting Title  ======= */}\r\n                                    <Grid item xs={12}   >\r\n                                        <RHFTextField\r\n                                            name=\"meetingTitle\"\r\n                                            label={translate(\"meeting_title\")}\r\n                                            sx={{ ...txtFieldBorderStyle }}\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    {/*======= Phone Number  ======= */}\r\n                                    <Grid item xs={12}   >\r\n                                        <RHFTextField\r\n                                            name=\"phoneNumber\"\r\n                                            type='number'\r\n                                            label={translate(\"phone_number\")}\r\n                                            sx={{ ...txtFieldBorderStyle }}\r\n                                        />\r\n                                    </Grid>\r\n\r\n\r\n                                    {/*======= Meeting Location  ======= */}\r\n                                    <Grid item xs={12}  >\r\n                                        <RHFSelect\r\n                                            name=\"meetingLocation\"\r\n                                            type='text'\r\n                                            label={translate(\"meeting_locatoin\")}\r\n                                            sx={{ ...txtFieldBorderStyle }}\r\n                                            onChange={(e) => {\r\n                                                setValue('meetingLocation', e.target.value, { shouldValidate: true })\r\n                                            }}\r\n                                            SelectProps={{\r\n                                                native: false,\r\n                                                IconComponent: () => <img src='/assets/icons/dashboard/ic_expandMore.svg' alt='' />\r\n                                            }}\r\n                                        >\r\n                                            <MenuItem value={'DNNDON main branch - DUbai'}  >\r\n                                                {translate(`DNNDON main branch - DUbai`)}\r\n                                            </MenuItem>\r\n                                            <Divider />\r\n                                            <MenuItem value={'DNNDON main branch - DUbai'}  >\r\n                                                {translate(`DNNDON main branch - DUbai`)}\r\n                                            </MenuItem>\r\n                                            <Divider />\r\n                                            <MenuItem value={'DNNDON main branch - DUbai'}  >\r\n                                                {translate(`DNNDON main branch - DUbai`)}\r\n                                            </MenuItem>\r\n                                        </RHFSelect>\r\n                                    </Grid>\r\n\r\n                                    {/*======= Question Here  ======= */}\r\n                                    <Grid item xs={12} >\r\n                                        <RHFTextField\r\n                                            name=\"question\"\r\n                                            // label={translate(\"question_here\")}\r\n                                            placeholder={translate(`type_your_question_here`)}\r\n                                            inputProps={{\r\n                                                sx: {\r\n                                                    \"&::placeholder\": {\r\n                                                        textAlign: \"left\",\r\n                                                        color: \"#9DA0A4\",\r\n                                                        fontWeight: \"400\",\r\n                                                        fontSize: \"14px\",\r\n                                                        lineHeight: \"22px\"\r\n                                                    },\r\n                                                },\r\n                                            }}\r\n                                            sx={{\r\n                                                ...txtFieldBorderStyle,\r\n                                                \"& .MuiOutlinedInput-root\": {\r\n                                                    pr: '20px',\r\n                                                    height: '76px',\r\n                                                    // alignItems: 'baseline',\r\n                                                    \"& fieldset\": {\r\n                                                        borderColor: \"#9DA0A4\",\r\n                                                    },\r\n                                                    \"&:hover fieldset\": {\r\n                                                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                                                    },\r\n                                                    \"&.Mui-focused fieldset\": {\r\n                                                        borderColor: \"rgba(255, 204, 99, 0.3)\",\r\n                                                    },\r\n                                                },\r\n                                                \"& .MuiOutlinedInput-input\": {\r\n                                                    // height:'76px',\r\n                                                    padding: '16px 14px 35px 14px'\r\n                                                },\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    {/* =========@@ Button  @@========*/}\r\n                                    <Grid item xs={12} mt='24px' >\r\n                                        <Stack direction='row'>\r\n                                            <Button\r\n                                                color=\"inherit\"\r\n                                                size=\"large\"\r\n                                                variant=\"Contained\"\r\n                                                // onClick={onClose}\r\n                                                // loading={isSubmitSuccessful || isSubmitting}\r\n                                                sx={{ ...cancelBtnSx, width: '100%', mr: '16px' }}\r\n                                            >\r\n                                                {translate(\"cancel\")}\r\n                                            </Button>\r\n                                            <LoadingButton\r\n                                                color=\"inherit\"\r\n                                                size=\"large\"\r\n                                                type=\"submit\"\r\n                                                variant=\"Contained\"\r\n                                                // loading={isSubmitSuccessful || isSubmitting}\r\n                                                sx={{ ...loadingButtonStyle, width: '100%' }}\r\n                                            >\r\n                                                {translate(\"book_meeting\")}\r\n                                            </LoadingButton>\r\n                                        </Stack>\r\n                                    </Grid>\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </FormProvider>\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\utils\\formatTime.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\progress-bar\\ProgressBar.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\progress-bar\\styles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\scrollbar\\styles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchReview.js",["3836","3837"],[],"import React, { useEffect } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, Typography, Stack, CircularProgress } from \"@mui/material\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getRestaurantReview } from \"../../../redux/services/restaurant_service\";\r\n\r\nimport * as URLS from \"../../../urls\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n// ---------- Styles ------\r\nconst reviewsHolder = {\r\n  pl: { xs: \"15px\", md: \"50px\", lg: \"80px\" },\r\n  pr: { xs: \"15px\", md: \"50px\", lg: \"80px\" },\r\n  pb: { md: \"50px\", lg: \"91px\" },\r\n};\r\n\r\nconst reveiwTextSx = {\r\n  color: \"#535353\",\r\n  opacity: \".6\",\r\n  letterSpacing: \".5px\",\r\n  lineHeight: \"26px\",\r\n  fontSize: \"14px\",\r\n};\r\n\r\nconst highLightSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 600,\r\n  color: \"#FFCC63\",\r\n  textDecoration: \"underline\",\r\n};\r\n\r\nconst nameTextSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 400,\r\n  color: \"#121212\",\r\n  letterSpacing: \".3px\",\r\n};\r\n\r\nconst rateTextsx = {\r\n  color: \"#fff\",\r\n  background: \"#FFCC63\",\r\n  fontSize: \"13px\",\r\n  fontWeight: 600,\r\n  padding: \"3px 10px\",\r\n  borderRadius: \"7px\",\r\n};\r\n\r\n// const reviews = [\r\n//   {\r\n//     name: 'Mahmoud Sabri',\r\n//     avatar: \"/assets/images/dashboard/avatar1.png\",\r\n//     rate: '5.0',\r\n//     notes: ` Great food I like this place, I think best place of Colarodo. Chilling with Friends :),\r\n//             Great food I like this place, I think best place of Colarodo. Chilling with Friends :)\r\n//             `\r\n//   },\r\n//   {\r\n//     name: 'Mohamed Jomani',\r\n//     avatar: \"/assets/images/dashboard/avatar2.png\",\r\n//     rate: '5.0',\r\n//     notes: ` Great food I like this place, I think best place of Colarodo. Chilling with Friends :),\r\n//             Great food I like this place, I think best place of Colarodo. Chilling with Friends :)\r\n//             `\r\n//   },\r\n//   {\r\n//     name: 'Mahmoud Sabri',\r\n//     avatar: \"/assets/images/dashboard/avatar2.png\",\r\n//     rate: '5.0',\r\n//     notes: ` Great food I like this place, I think best place of Colarodo. Chilling with Friends :),\r\n//             Great food I like this place, I think best place of Colarodo. Chilling with Friends :)\r\n//             `\r\n//   },\r\n//   {\r\n//     name: 'Mahmoud Sabri',\r\n//     avatar: \"/assets/images/dashboard/avatar1.png\",\r\n//     rate: '5.0',\r\n//     notes: ` Great food I like this place, I think best place of Colarodo. Chilling with Friends :),\r\n//             Great food I like this place, I think best place of Colarodo. Chilling with Friends :)\r\n//             `\r\n//   },\r\n// ]\r\n\r\nexport default function BranchReview({ branchId }) {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, error, RestaurantsReviews } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n  // console.log(RestaurantsReviews)\r\n  const { translate } = useLocales();\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      getRestaurantReview({\r\n        resturantId: branchId,\r\n        pageNumber: 1,\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  // ------- JSX Code -------\r\n  return (\r\n    <>\r\n      <Box sx={{ ...reviewsHolder }}>\r\n        {/* ********** Title ********* */}\r\n        <Stack\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          mb=\"32px\"\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Typography variant=\"h5\">{translate(`recent_reviews`)}</Typography>\r\n\r\n          <Typography sx={{ ...highLightSx, cursor: \"pointer\" }}>\r\n            {translate(`view_all`)}\r\n          </Typography>\r\n        </Stack>\r\n\r\n        {isLoading && Spinner}\r\n\r\n        {/* ********** Review Box ********* */}\r\n\r\n        {!isLoading &&\r\n          Array.isArray(RestaurantsReviews) &&\r\n          RestaurantsReviews.map((review, index) => (\r\n            <Box mb=\"32px\" key={index}>\r\n              <Stack direction=\"row\" justifyContent=\"space-between\" mb=\"8px\">\r\n                <Box display=\"flex\">\r\n                  <img\r\n                    // src={review.avatar}\r\n                    alt=\"\"\r\n                    src={\r\n                      review?.profilePictureUrl !== null\r\n                        ? `${URLS.baseImageURL}user/${review?.profilePictureUrl}`\r\n                        : \"/assets/images/dashboard/admin.png\"\r\n                    }\r\n                    style={{\r\n                      height: \"32px\",\r\n                      width: \"32px\",\r\n                      borderRadius: \"50%\",\r\n                    }}\r\n                  />\r\n\r\n                  <Typography ml=\"8px\" sx={{ ...nameTextSx }}>\r\n                    {review?.userName}\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Typography sx={{ ...rateTextsx }}>\r\n                  {review?.starsCount}\r\n                </Typography>\r\n              </Stack>\r\n\r\n              <Typography sx={{ ...reveiwTextSx }}>\r\n                {review?.comment}\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n        {/* {Array.isArray(RestaurantsReviews) && RestaurantsReviews.map((review, index) =>\r\n\r\n          <Box mb='32px' key={index}>\r\n\r\n            <Stack direction='row' justifyContent='space-between' mb='8px'>\r\n\r\n              <Box display='flex' >\r\n                <img\r\n                  // src={review.avatar} \r\n                  alt=\"\"\r\n                  src={\r\n                    review?.profilePictureUrl !== null ?\r\n                      `${URLS.baseImageURL}user/${review?.profilePictureUrl}`\r\n                      :\r\n                      \"/assets/images/dashboard/admin.png\"\r\n                  }\r\n                  style={{\r\n                    height: '32px',\r\n                    width: '32px',\r\n                    borderRadius:'50%'\r\n                  }}\r\n                />\r\n\r\n                <Typography ml='8px' sx={{ ...nameTextSx }}>\r\n                  {review?.userName}\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Typography sx={{ ...rateTextsx }}>\r\n                {review?.starsCount}\r\n              </Typography>\r\n\r\n            </Stack>\r\n\r\n            <Typography sx={{ ...reveiwTextSx }}>\r\n              {review?.comment}\r\n            </Typography>\r\n\r\n          </Box>\r\n        ) } */}\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchAnalysis.js",["3838","3839","3840"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  Select,\r\n  Stack,\r\n  MenuItem,\r\n  Typography,\r\n  useTheme,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\n\r\n// component\r\nimport DountChartCard from \"../../../components/cards/DountChartCard/DountChartCard\";\r\nimport BranchLineChart from \"./details/BranchLineChart\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport {\r\n  getRestaurantMonthlyEarnings,\r\n  getRestaurantReviewNumber,\r\n} from \"../../../redux/services/restaurant_service\";\r\n// import Person from '@material-ui/icons/Person'\r\n// service\r\nimport {\r\n  getRestaurantOrderNumber,\r\n  getAllMarketsOrdersNumber,\r\n} from \"../../../redux/services/performance_service\";\r\n// -----------------------------------------------\r\n\r\n// ---------- Styles ----------\r\nconst selectSx = {\r\n  minWidth: \"30px\",\r\n  \"& .MuiOutlinedInput-root\": {\r\n    pr: \"8px!important\",\r\n  },\r\n  \"& .MuiOutlinedInput-input\": {\r\n    pr: \"10px!important\",\r\n    fontSize: \"12px\", //8px\r\n    color: \"#495057\",\r\n    pt: \"5px!important\",\r\n    pb: \"5px!important\",\r\n  },\r\n  \"& fieldset\": {\r\n    borderWidth: \"0px!important\",\r\n  },\r\n};\r\n\r\nconst analysisHolder = {\r\n  pl: { xs: \"15px\", md: \"50px\", lg: \"72px\" },\r\n  pr: { xs: \"15px\", md: \"50px\", lg: \"86px\" },\r\n  pb: { md: \"50px\", lg: \"91px\" },\r\n};\r\n\r\nconst TilteSx = {\r\n  fontSize: \"16px\",\r\n  fontWeight: 600,\r\n  color: \"#495057\",\r\n};\r\n\r\nconst subTitleSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#74788D\",\r\n};\r\n\r\nconst earnTextSx = {\r\n  fontSize: \"12px\",\r\n  fontWeight: 500,\r\n  color: \"#495057\",\r\n};\r\n\r\nconst changeTextSx = {\r\n  padding: \"2px\",\r\n  borderRadius: \"3px\",\r\n  fontSize: \"8px\",\r\n  fontWeight: 500,\r\n  lineHeight: \"8px\",\r\n};\r\n\r\nconst smallTextSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 500,\r\n  color: \" #535353\",\r\n};\r\n\r\nconst miniTextSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#74788D\",\r\n};\r\n\r\nconst microTextSx = {\r\n  fontSize: \"12px\", // 8px\r\n  fontWeight: 400,\r\n  color: \"#495057\",\r\n};\r\n\r\nconst detailBtnSx = {\r\n  p: \"5px 20px\",\r\n  borderRadius: \"4px\",\r\n  mt: \"16px\",\r\n};\r\n\r\nconst labelTextSx = {\r\n  ...microTextSx,\r\n  p: \"3px 5px\",\r\n  borderLeft: \"2px solid #EFF2F7\",\r\n  height: \"33px\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n};\r\n\r\n// data\r\nconst monthes = [\r\n  {\r\n    name: \"Jan\",\r\n    value: 1,\r\n  },\r\n  {\r\n    name: \"Feb\",\r\n    value: 2,\r\n  },\r\n  {\r\n    name: \"Mar\",\r\n    value: 4,\r\n  },\r\n  {\r\n    name: \"Apr\",\r\n    value: 4,\r\n  },\r\n  {\r\n    name: \"May\",\r\n    value: 5,\r\n  },\r\n  {\r\n    name: \"Jun\",\r\n    value: 6,\r\n  },\r\n  {\r\n    name: \"Jul\",\r\n    value: 7,\r\n  },\r\n  {\r\n    name: \"Aug\",\r\n    value: 8,\r\n  },\r\n  {\r\n    name: \"Sep\",\r\n    value: 9,\r\n  },\r\n  {\r\n    name: \"Oct\",\r\n    value: 10,\r\n  },\r\n  {\r\n    name: \"Nov\",\r\n    value: 11,\r\n  },\r\n  {\r\n    name: \"Dec\",\r\n    value: 12,\r\n  },\r\n];\r\n\r\nexport default function BranchAnalysis({ branchId }) {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, error, reviewsNumber, restaurantMonthlyEarnings } =\r\n    useSelector((state) => state.branches);\r\n  const { isLoadingOrderNumbers, orderNumbers } = useSelector(\r\n    (state) => state.performance\r\n  );\r\n\r\n  // console.log(restaurantMonthlyEarnings)\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const theme = useTheme();\r\n\r\n  const [openChart, setOpenChart] = useState(true);\r\n\r\n  const currentYear = new Date().getFullYear();\r\n  const currentMonth = new Date().getMonth() + 1;\r\n\r\n  const [month, setMonth] = useState(`${currentYear}-${currentMonth}`);\r\n\r\n  const handleChange = (event) => {\r\n    setMonth(event.target.value);\r\n    // dispatch(\r\n    //   getRestaurantMonthlyEarnings({\r\n    //     restaurantId: branchId,\r\n    //     // restaurantId: '422bc56c-5b5a-4753-b704-a99e017faffa',\r\n    //     monthDate: event.target.value,\r\n    //   })\r\n    // );\r\n  };\r\n\r\n  const calculateTotalEarnings = (month, restaurantMonthlyEarnings) => {\r\n    if (month === \"previous\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.previous?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n    if (month === \"current\" && restaurantMonthlyEarnings) {\r\n      let totalEarnings = restaurantMonthlyEarnings?.current?.reduce(\r\n        (acc, cur) => acc + cur,\r\n        0\r\n      );\r\n      return totalEarnings;\r\n    }\r\n  };\r\n\r\n  let currentMonthEarning = +calculateTotalEarnings(\r\n    \"current\",\r\n    restaurantMonthlyEarnings\r\n  );\r\n  let previousMonthEarning = +calculateTotalEarnings(\r\n    \"previous\",\r\n    restaurantMonthlyEarnings\r\n  );\r\n\r\n  const calDifferenceFromPrev = (restaurantMonthlyEarnings) => {\r\n    if (previousMonthEarning > 0) {\r\n      let result = +(\r\n        ((currentMonthEarning - previousMonthEarning) / previousMonthEarning) *\r\n        100\r\n      ).toFixed(1);\r\n      return result;\r\n    }\r\n    if (previousMonthEarning === 0 && currentMonthEarning !== 0) {\r\n      return 100;\r\n    }\r\n    if (previousMonthEarning === 0 && previousMonthEarning === 0) {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // const calDifferenceFromCurr = (restaurantMonthlyEarnings) => {\r\n  //   let currentMonthEarning = +calculateTotalEarnings('current', restaurantMonthlyEarnings)\r\n  //   let previousMonthEarning = +calculateTotalEarnings('previous', restaurantMonthlyEarnings)\r\n  //   console.log(currentMonthEarning)\r\n  //   console.log(previousMonthEarning)\r\n  //   if (previousMonthEarning > 0) {\r\n  //     let result = +(((currentMonthEarning - previousMonthEarning) / currentMonthEarning) * 100).toFixed(1)\r\n  //     console.log(result)\r\n  //     return result\r\n  //   } else {\r\n  //     return 0\r\n  //   }\r\n  // }\r\n\r\n  calDifferenceFromPrev(restaurantMonthlyEarnings);\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"facilityType\") === \"0\") {\r\n      dispatch(getRestaurantOrderNumber());\r\n    }\r\n    if (localStorage.getItem(\"facilityType\") === \"1\") {\r\n      dispatch(getAllMarketsOrdersNumber());\r\n    }\r\n\r\n    dispatch(getRestaurantReviewNumber(branchId));\r\n    // // dispatch(\r\n    // //   getRestaurantMonthlyEarnings({\r\n    // //     restaurantId: branchId,\r\n    // //     // restaurantId: '422bc56c-5b5a-4753-b704-a99e017faffa',\r\n    // //     monthDate: `${currentYear}-${currentMonth}`,\r\n    // //   })\r\n    // );\r\n  }, [dispatch, currentYear, currentMonth, branchId]);\r\n\r\n  // ----------- JSX Code -----------\r\n  return (\r\n    <>\r\n      {isLoading && Spinner}\r\n\r\n      {!isLoading && (\r\n        <Box sx={{ ...analysisHolder }}>\r\n          <Grid container columnSpacing={{ xs: \"20px\", sm: \"30\", md: \"40px\" }}>\r\n            {/* **********  Left Side Section *********** */}\r\n            <Grid item xs={11} sm={8} md={5} mx=\"auto\" mb=\"16px\">\r\n              <DountChartCard\r\n                title=\"total_number_of_orders\"\r\n                data={orderNumbers}\r\n              />\r\n              <Stack mb=\"16px\"></Stack>\r\n\r\n              <DountChartCard title=\"reviews\" data={reviewsNumber} />\r\n              <Stack mb=\"16px\"></Stack>\r\n            </Grid>\r\n\r\n            {/* **********  Right Side Section *********** */}\r\n\r\n            <Grid item xs={11} sm={8} md={7} mx=\"auto\">\r\n              {/* // **** heading and monthes **** */}\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                <Typography sx={{ ...TilteSx }}>\r\n                  {translate(`earning`)}\r\n                </Typography>\r\n\r\n                {/* // *** Month Select *** */}\r\n                <Box\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  border=\"2px solid #EFF2F7\"\r\n                  borderRadius=\"5px\"\r\n                >\r\n                  <FormControl sx={{ ...selectSx, position: \"relative\" }}>\r\n                    <Select\r\n                      IconComponent={() => (\r\n                        <img src=\"/assets/icons/dashboard/upDown.svg\" alt=\"\" />\r\n                      )}\r\n                      value={month}\r\n                      onChange={handleChange}\r\n                      displayEmpty\r\n                      inputProps={{ \"aria-label\": \"Without label\" }}\r\n                    >\r\n                      {monthes.map((month, index) => (\r\n                        <MenuItem\r\n                          sx={{ ...miniTextSx }}\r\n                          value={`${currentYear}-${month.value}`}\r\n                          key={index}\r\n                        >\r\n                          <em>{month.name}</em>\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  <Typography sx={{ ...labelTextSx }}>\r\n                    {translate(`month`)}\r\n                  </Typography>\r\n                </Box>\r\n              </Stack>\r\n\r\n              {/* // **** Earning monthes data **** */}\r\n              <Stack\r\n                direction=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n              >\r\n                {/* Monthes Earning */}\r\n                <Box>\r\n                  <Stack direction=\"row\" alignItems=\"center\">\r\n                    <Typography sx={{ ...subTitleSx }}>\r\n                      {translate(`this_month`)}\r\n                    </Typography>\r\n\r\n                    <Typography ml=\"28px\" sx={{ ...earnTextSx }}>\r\n                      {restaurantMonthlyEarnings?.currency}{\" \"}\r\n                      {calculateTotalEarnings(\r\n                        \"current\",\r\n                        restaurantMonthlyEarnings\r\n                      )}\r\n                    </Typography>\r\n                  </Stack>\r\n\r\n                  <Stack\r\n                    direction=\"row\"\r\n                    alignItems=\"center\"\r\n                    mt=\"12px\"\r\n                    mb=\"18px\"\r\n                  >\r\n                    <Typography\r\n                      sx={{\r\n                        ...changeTextSx,\r\n                        color:\r\n                          calDifferenceFromPrev(restaurantMonthlyEarnings) > 0\r\n                            ? \"#34C38F\"\r\n                            : \"red\",\r\n                        background:\r\n                          calDifferenceFromPrev(restaurantMonthlyEarnings) > 0\r\n                            ? \"rgba(52, 195, 143, 0.180392)\"\r\n                            : \"#f30f0f5c\",\r\n                      }}\r\n                    >\r\n                      {calDifferenceFromPrev(restaurantMonthlyEarnings)} %\r\n                    </Typography>\r\n\r\n                    <Typography ml=\"5px\" sx={{ ...miniTextSx }}>\r\n                      {translate(`from_previous_month`)}\r\n                    </Typography>\r\n                  </Stack>\r\n\r\n                  <Stack direction=\"row\" alignItems=\"center\">\r\n                    <Typography sx={{ ...subTitleSx }}>\r\n                      {translate(`last_month`)}\r\n                    </Typography>\r\n\r\n                    <Typography ml=\"28px\" sx={{ ...earnTextSx }}>\r\n                      {restaurantMonthlyEarnings?.currency}{\" \"}\r\n                      {calculateTotalEarnings(\r\n                        \"previous\",\r\n                        restaurantMonthlyEarnings\r\n                      )}\r\n                    </Typography>\r\n                  </Stack>\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    sx={{ ...detailBtnSx }}\r\n                    onClick={() => setOpenChart((openChart) => !openChart)}\r\n                  >\r\n                    <Typography mr=\"5px\" fontSize=\"8px\" fontWeight={400}>\r\n                      {translate(`view_details`)}\r\n                    </Typography>\r\n                    <Box\r\n                      sx={{\r\n                        transform:\r\n                          theme.direction === \"rtl\" ? \"rotate(180deg)\" : \"\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src=\"/assets/icons/dashboard/ic_whiteAngle2.svg\"\r\n                        alt=\"\"\r\n                      />\r\n                    </Box>\r\n                  </Button>\r\n                </Box>\r\n\r\n                {/* ********* Monthes Earning labels and percentage ********* */}\r\n                <Box>\r\n                  {/* *** Current Month Data *** */}\r\n                  <Stack\r\n                    direction=\"row\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"space-between\"\r\n                    mb=\"6px\"\r\n                  >\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <img\r\n                        src=\"/assets/icons/dashboard/ic_orangeBox.svg\"\r\n                        alt=\"\"\r\n                      />\r\n                      <Typography ml=\"8px\" sx={{ ...smallTextSx }}>\r\n                        {translate(`this_month`)}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    {/* percentage */}\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <Typography\r\n                        ml=\"8px\"\r\n                        sx={{ ...subTitleSx, color: \"#FFCC63\" }}\r\n                      >\r\n                        {calDifferenceFromPrev(restaurantMonthlyEarnings)} %\r\n                      </Typography>\r\n                      {calculateTotalEarnings(\r\n                        \"current\",\r\n                        restaurantMonthlyEarnings\r\n                      ) >\r\n                      calculateTotalEarnings(\r\n                        \"previous\",\r\n                        restaurantMonthlyEarnings\r\n                      ) ? (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_greenUp.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_redDown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  </Stack>\r\n\r\n                  {/* *** Previous Month Data *** */}\r\n                  <Stack\r\n                    direction=\"row\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"space-between\"\r\n                    mb=\"6px\"\r\n                  >\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <img\r\n                        src=\"/assets/icons/dashboard/ic_purpleBox.svg\"\r\n                        alt=\"\"\r\n                      />\r\n                      <Typography ml=\"8px\" sx={{ ...smallTextSx }}>\r\n                        {translate(`last_month`)}\r\n                      </Typography>\r\n                    </Box>\r\n\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <Typography\r\n                        ml=\"8px\"\r\n                        sx={{ ...subTitleSx, color: \"#FFCC63\" }}\r\n                      >\r\n                        {previousMonthEarning === 0 &&\r\n                        previousMonthEarning === 0\r\n                          ? 0\r\n                          : 100 -\r\n                            Math.abs(\r\n                              calDifferenceFromPrev(restaurantMonthlyEarnings)\r\n                            )}{\" \"}\r\n                        %\r\n                        {/* {100 - Math.abs(calDifferenceFromPrev(restaurantMonthlyEarnings))} % */}\r\n                      </Typography>\r\n\r\n                      {calculateTotalEarnings(\r\n                        \"previous\",\r\n                        restaurantMonthlyEarnings\r\n                      ) >\r\n                      calculateTotalEarnings(\r\n                        \"current\",\r\n                        restaurantMonthlyEarnings\r\n                      ) ? (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_greenUp.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      ) : (\r\n                        <img\r\n                          src=\"/assets/icons/dashboard/ic_redDown.svg\"\r\n                          alt=\"\"\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                  </Stack>\r\n                </Box>\r\n              </Stack>\r\n\r\n              {/* // **** Branch Line Charts **** */}\r\n              {openChart && (\r\n                <Box sx={{ transform: \"translateX(-18px)\", mt: \"35px\" }}>\r\n                  <BranchLineChart currentDate={month} />\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\BranchInfo.js",["3841","3842"],[],"import React, { useEffect } from \"react\";\r\nimport { useLocales } from \"../../../locales\";\r\n// mui\r\nimport { Box, CircularProgress, Grid, Stack, Typography } from \"@mui/material\";\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// service\r\nimport { getRestaurantDetailsById } from \"../../../redux/services/restaurant_service\";\r\n\r\n// ----------------------------------------------------------------\r\n\r\n// ---------- Styles ------\r\nconst infoHolder = {\r\n  pl: { xs: \"15px\", md: \"50px\", lg: \"72px\" },\r\n  pr: { xs: \"15px\", md: \"50px\", lg: \"86px\" },\r\n  pb: { md: \"50px\", lg: \"91px\" },\r\n};\r\n\r\nconst contentHolderSx = {\r\n  p: { xs: \"9px 10px 9px 10px\", md: \"9px 20px 6px 23px\" },\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"0px 0px 7.39521px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst textSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 400,\r\n  color: \"#121212\",\r\n  overflowWrap: \"break-word\",\r\n};\r\n\r\nconst workingDaysHolder = {\r\n  p: \"20px 20px 16px 20px\",\r\n  background: \" #FFFFFF\",\r\n  boxShadow: \"0px 0px 7.39521px rgba(0, 0, 0, 0.1)\",\r\n};\r\n\r\nconst rowSx = {\r\n  py: \"10px\",\r\n  borderBottom: \"1px solid #D8D8D8\",\r\n  flexDirection: \"row\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n};\r\n\r\nconst highLightSx = {\r\n  fontSize: \"10px\",\r\n  fontWeight: 600,\r\n  color: \"#FFCC63\",\r\n};\r\n\r\n// data\r\nconst workingDays = [\r\n  {\r\n    day: \"saturday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n  {\r\n    day: \"sunday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n  {\r\n    day: \"monday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n  {\r\n    day: \"tuesday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n  {\r\n    day: \"wednesday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n  {\r\n    day: \"thursday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n  {\r\n    day: \"friday\",\r\n    time: \"8 A.M - 10 P.M\",\r\n  },\r\n];\r\n\r\nexport default function BranchInfo({ branchId, row }) {\r\n  const dispatch = useDispatch();\r\n  const { isLoading, error, restaurantDetails } = useSelector(\r\n    (state) => state.branches\r\n  );\r\n\r\n  const { translate } = useLocales();\r\n\r\n  const Spinner = (\r\n    <Box display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />{\" \"}\r\n    </Box>\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getRestaurantDetailsById(branchId));\r\n  }, [dispatch]);\r\n\r\n  // ------------ JSX Code ------------\r\n  return (\r\n    <>\r\n      {isLoading && Spinner}\r\n\r\n      {!isLoading && (\r\n        <Box sx={{ ...infoHolder }}>\r\n          <Grid\r\n            container\r\n            columnSpacing={{ xs: \"20px\", sm: \"20px\", md: \"26px\" }}\r\n            rowSpacing={{ xs: \"26px\", md: \"0px\" }}\r\n          >\r\n            {/* **************** Left Side Section ******************** */}\r\n            <Grid item xs={11} sm={8} md={8} mx=\"auto\">\r\n              <Box sx={{ ...contentHolderSx }}>\r\n                {/* ----- Manager ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`branch_manger`)}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={7}>\r\n                    <Stack direction=\"row\" alignItems=\"center\" flexGrow={1}>\r\n                      <Typography sx={{ ...textSx }}>\r\n                        {restaurantDetails?.user?.firstName}{\" \"}\r\n                        {restaurantDetails?.user?.lastName}\r\n                      </Typography>\r\n                      <Typography ml=\"12px\" sx={{ ...highLightSx }}>\r\n                        {translate(`contact_info`)}\r\n                      </Typography>\r\n                    </Stack>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ category ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5} sm={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`categories`)}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={7} sm={7}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {/* {stringifyCategories(restaurantDetails?.categories)} */}\r\n                      {restaurantDetails?.description}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ Location ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`location`)}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={7}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {restaurantDetails?.location}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ Rating ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`rating`)}{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={7}>\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <img src=\"/assets/icons/dashboard/ic_star.svg\" alt=\"\" />\r\n                      <Typography ml=\"8px\" sx={{ ...textSx }}>\r\n                        {restaurantDetails?.rate}\r\n                      </Typography>\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ phone1 ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`phoneNo1`)}{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={7}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {restaurantDetails?.phoneNo1}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ phone2 ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`phoneNo2`)}{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={7}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {restaurantDetails?.phoneNo2}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ Delivery Time ----- */}\r\n                {/* <Grid container sx={{ ...rowSx }} >\r\n\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`delivery_time`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    20 {translate(`mins`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n              </Grid> */}\r\n\r\n                {/* ------ Minimum Orders ----- */}\r\n                <Grid container sx={{ ...rowSx }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`minimum_order_amount`)}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={7}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      AED {restaurantDetails?.minimumOrderCost}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                {/* ------ Deliver Free ----- */}\r\n                {/* <Grid container sx={{ ...rowSx }} >\r\n\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>\r\n                    {translate(`delivery_free`)}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Typography sx={{ ...textSx }}>AED 10.00 </Typography>\r\n                </Grid>\r\n\r\n              </Grid> */}\r\n\r\n                {/* ------ Payment ----- */}\r\n                {/* <Grid container sx={{ ...rowSx }} >\r\n\r\n                <Grid item xs={5}>\r\n                  <Typography sx={{ ...textSx }}>{translate(`payment`)} </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={7}>\r\n                  <Stack direction='row' alignItems='center' spacing='8px'>\r\n                    <img src=\"/assets/icons/dashboard/ic_visa.svg\" alt=\"\" />\r\n                    <img src=\"/assets/icons/dashboard/ic_masterCard.svg\" alt=\"\" />\r\n                    <img src=\"/assets/icons/dashboard/ic_cash.svg\" alt=\"\" />\r\n                  </Stack>\r\n                </Grid>\r\n\r\n              </Grid> */}\r\n\r\n                {/* ------ Pre_order ----- */}\r\n                <Grid container sx={{ ...rowSx, borderColor: \"transparent\" }}>\r\n                  <Grid item xs={5}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {translate(`pre_order`)}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={7}>\r\n                    <Typography sx={{ ...textSx }}>\r\n                      {restaurantDetails?.preOrder === true\r\n                        ? translate(`yes`)\r\n                        : translate(`no`)}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n\r\n            {/* **************** Right Side Section ******************** */}\r\n            <Grid item xs={10} sm={4} md={4} mx=\"auto\">\r\n              <Box sx={{ ...workingDaysHolder }}>\r\n                {/* ****** Working Days Title ******/}\r\n                <Stack direction=\"row\" mb=\"18px\" justifyContent=\"space-between\">\r\n                  <Typography fontSize=\"12px\" fontWeight={600} color=\"#4EE476\">\r\n                    {translate(`open_now`)}\r\n                  </Typography>\r\n\r\n                  <Typography sx={{ ...highLightSx }}>\r\n                    {translate(`edit`)}\r\n                  </Typography>\r\n                </Stack>\r\n\r\n                {/* ****** Working days and Hours ******/}\r\n                <Box>\r\n                  <Typography mb=\"18px\" sx={{ ...textSx, fontWeight: 600 }}>\r\n                    {translate(`working_days`)}\r\n                  </Typography>\r\n\r\n                  {workingDays.map((row, index) => (\r\n                    <Stack\r\n                      key={index}\r\n                      direction=\"row\"\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"space-between\"\r\n                      mb=\"12px\"\r\n                    >\r\n                      <Typography sx={{ ...textSx }}>\r\n                        {translate(`${row.day}`)}\r\n                      </Typography>\r\n\r\n                      <Typography sx={{ ...highLightSx, fontWeight: 400 }}>\r\n                        {row.time}\r\n                      </Typography>\r\n                    </Stack>\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\svg-color\\SvgColor.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\MenuPopover.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\NavSectionHorizontal.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\vertical\\NavSectionVertical.js",["3843","3844"],[],"import PropTypes from \"prop-types\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n// @mui\r\nimport { ListItemText, Stack, useTheme, MenuItem } from \"@mui/material\";\r\n// locales\r\nimport { useLocales } from \"../../../locales\";\r\n//\r\nimport { StyledItem, StyledIcon } from \"./styles\";\r\n\r\nimport { useState } from \"react\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nNavSectionVertical.propTypes = {\r\n  sx: PropTypes.object,\r\n  data: PropTypes.array,\r\n};\r\n\r\nexport default function NavSectionVertical({ data, sx, ...other }) {\r\n  const { translate } = useLocales();\r\n  const navigate = useNavigate();\r\n  const theme = useTheme();\r\n  const selectedTab = Number(localStorage.getItem('selectedTabIndex'))\r\n  // console.log(selectedTab)\r\n  const [selectedIndex, setSelectedIndex] = useState(selectedTab);\r\n\r\n  // console.log(`/${window.location.pathname.split('/')[2]}`)\r\n\r\n  return (\r\n    <Stack>\r\n      <img\r\n        src=\"/assets/icons/navbar/logo.png\"\r\n        alt=\"logo\"\r\n        style={{\r\n          height: \"62px\",\r\n          width: \"67px\",\r\n          margin: 'auto'\r\n          // marginLeft: \"40px\",\r\n          // marginRight: \"40px\",\r\n        }}\r\n      />\r\n      {data.map((item, index) => {\r\n        return (\r\n          <StyledItem\r\n            key={index}\r\n            sx={\r\n              // selectedIndex === index\r\n              //   ||\r\n              `${item.path}` === `/${window.location.pathname.split('/')[2]}`\r\n                ? {\r\n                  backgroundColor: theme.palette.primary.main,\r\n                  borderTopRightRadius: \"15px\",\r\n                  borderBottomRightRadius: \"15px\",\r\n                  borderTopLeftRadius: \"0px\",\r\n                  borderBottomLeftRadius: \"0px\",\r\n                  color: \"#FFFFFF\",\r\n                }\r\n                : {}\r\n            }\r\n            onClick={() => {\r\n              setSelectedIndex(index);\r\n              localStorage.setItem('selectedTabIndex', index);\r\n              navigate(`/${item.subheader}${item.path}`);\r\n            }}\r\n          >\r\n            <StyledIcon\r\n              sx={\r\n                `${item.path}` === `/${window.location.pathname.split('/')[2]}`\r\n                  ? {\r\n                    color: \"#FFFFFF\",\r\n                  }\r\n                  : { color: \"#BCBCBC\" }\r\n              }\r\n            >\r\n              {item.icon}\r\n            </StyledIcon>\r\n            <ListItemText\r\n              primary={translate(item.title)}\r\n              primaryTypographyProps={{\r\n                color: `${item.path}` === `/${window.location.pathname.split('/')[2]}` ? \"#FFFFFF\" : \"#BCBCBC\",\r\n                padding: \"0px\",\r\n                component: \"span\",\r\n                fontWeight: 500,\r\n                fontSize: \"12px\",\r\n              }}\r\n\r\n            /* secondaryTypographyProps={{\r\n            noWrap: true,\r\n            variant: \"caption\",\r\n          }}*/\r\n            />\r\n          </StyledItem>\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n}\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\NavSectionMini.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\features.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\_mock.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\utils.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\CustomAlert2.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\empty-content\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\path.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\fade.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\zoom.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\slide.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\flip.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\scale.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\rotate.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\container.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\bounce.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\actions.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\background.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\animate\\variants\\transition.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\datePicker\\Calender.js",["3845"],[],"import React, { useState } from \"react\";\r\n// mui\r\nimport { Box, TextField } from \"@mui/material\";\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';\r\nimport { styled } from '@mui/material/styles';\r\n// import dayjs from 'dayjs';\r\n// import { DateCalendar } from \"@mui/x-date-pickers-pro\";\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\n// import { format, isValid } from \"date-fns\";\r\n// ------------------------------------------------------------------\r\nconst DateDisplay = styled(StaticDatePicker)(({ theme }) => ({\r\n    '& input': {\r\n    },\r\n    \".MuiPickersCalendarHeader-label\": {\r\n        color: '#535353',\r\n    },\r\n    \".MuiPickersArrowSwitcher-button\": {\r\n        ':hover': {\r\n            background: 'transparent',\r\n        }\r\n    },\r\n    \".css-91q5m5-MuiButtonBase-root-MuiIconButton-root-MuiPickersArrowSwitcher-button\": {\r\n        position: \"absolute\",\r\n        top: '14px',\r\n        left: '17px',\r\n    },\r\n    \".css-31ca4x-MuiPickersFadeTransitionGroup-root\": {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        right: 0,\r\n        marginRight: \"135px\",\r\n        marginTop: \"20px\",\r\n\r\n    },\r\n    \".css-xelq0e-MuiPickerStaticWrapper-content\": {\r\n        // width: { xs: \"295px\" },\r\n        // backgroundColor:\"red\"\r\n    },\r\n    \".css-1xk895m-MuiButtonBase-root-MuiPickersDay-root\": {\r\n        color: \"#121212\",\r\n        fontSize: \"14px\",\r\n        fontWeight: 500,\r\n        lineHeight: \"24px\",\r\n    },\r\n    \".css-1sx2dz7-MuiTypography-root-MuiDayPicker-weekDayLabel\": {\r\n        color: \"#BCBCBC\",\r\n        fontSize: \"10px\",\r\n        fontWeight: 500,\r\n        lineHeight: \"16px\",\r\n    },\r\n    \".css-236b4m-MuiPickersCalendarHeader-labelContainer\": {\r\n        color: \"#121212\",\r\n        fontSize: \"18px\",\r\n        fontWeight: 600,\r\n        lineHeight: \"24px\",\r\n        overflow: \"unset\",\r\n    },\r\n    \".css-14ckfpu-MuiButtonBase-root-MuiIconButton-root-MuiPickersCalendarHeader-switchViewButton\": {\r\n        color: \"#121212;\",\r\n        position: \"absolute\",\r\n        top: 0,\r\n        right: 0,\r\n        marginRight: \"90px\",\r\n        marginTop: \"17px\"\r\n    },\r\n    \".css-17ceore-MuiSvgIcon-root\": {\r\n        color: \"#121212\",\r\n        border: \" 1px solid #D8DAE5\",\r\n        borderRadius: \"4px\",\r\n    },\r\n    \".MuiPickersDay-root\": {\r\n        borderRadius: '6px'\r\n    },\r\n    \".css-1xk895m-MuiButtonBase-root-MuiPickersDay-root.Mui-selected\": {\r\n        color: \"#fff\",\r\n        backgroundColor: \"#ffcc63\",\r\n    },\r\n    \".css-reckqw-MuiPickerStaticWrapper-root .css-1xk895m-MuiButtonBase-root-MuiPickersDay-root.Mui-selected\": {\r\n        backgroundColor: \"transparent\",\r\n        background: \"theme.primary\"\r\n    },\r\n    \".css-sf5t6v-PrivatePickersSlideTransition-root-MuiDayPicker-slideTransition\": {\r\n        minHeight: \"240px\"\r\n    },\r\n    \".css-169iwlq-MuiCalendarPicker-root\": {\r\n\r\n    },\r\n    \".css-14tayut-MuiGrid-root\": {\r\n\r\n    }\r\n}));\r\n\r\nconst firstBoxStyle = {\r\n    display: \"flex\",\r\n    // paddingLeft: { lg: \"24px\", sm: \"24px\", xs: \"24px\" },\r\n    // paddingRight: { lg: \"24px\", sm: \"24px\", xs: \"24px\" },\r\n    // paddingTop: { lg: \"24px\", sm: \"24px\", xs: \"24px\" },\r\n    // paddingBottom: { lg: \"32px\", sm: \"24px\", xs: \"24px\" },\r\n    borderRadius: \"5px\",\r\n    background: \"#FFFFFF\",\r\n    // border: \"1px solid #D8DAE5\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    // width: { xs: \"350px\", lg: \"auto\", sm: \"auto\" },\r\n    position: \"relative\"\r\n    // backgroundColor:\"blue\"\r\n}\r\n\r\nconst innerStyle = {\r\n    filter: \"drop-shadow(0px 4px 8px rgba(5, 27, 68, 0.08))\",\r\n    borderRadius: \"6px\",\r\n    //paddingBottom:\"16px\",\r\n    // paddingTop:\"12px\",\r\n    // paddingLeft: { lg: \"12px\" },\r\n    // paddingRight: { lg: \"12px\" },\r\n}\r\n\r\nconst bigBoxStyle = {\r\n    display: { xs: \"flex\", lg: \"unset\" },\r\n    justifyContent: { xs: \"center\" },\r\n    alignItems: { xs: \"center\" },\r\n    width: 'fit-content'\r\n}\r\n\r\nexport default function Calender({ name }) {\r\n    // const [value, setValue] = useState(dayjs(new Date()));\r\n    // // console.log(value)\r\n    const { control } = useFormContext();\r\n    // ---------- JSX Code ------------------\r\n    return (\r\n        <>\r\n\r\n            <Box sx={bigBoxStyle}>\r\n                <Box sx={firstBoxStyle}>\r\n                    <Box sx={innerStyle}>\r\n\r\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                            <Controller\r\n                                name={name}\r\n                                control={control}\r\n                                render={({ field, fieldState: { error } }) => (\r\n                                    // console.log(dayjs(field.value)),\r\n                                    // console.log(field.value),\r\n                                    <DateDisplay\r\n                                        {...field}\r\n                                        displayStaticWrapperAs=\"desktop\"\r\n                                        // openTo=\"year\"\r\n                                        // value={value}\r\n                                        // onChange={(newValue) => {\r\n                                        //     setValue(newValue);\r\n                                        // }}\r\n                                        value={\r\n                                            typeof field.value !== 'number' ? field.value['$d'] : ''\r\n                                        }\r\n                                        // onChange={(newValue) => {\r\n                                        //     if (isValid(newValue)) {\r\n                                        //         field.onChange(format(newValue, 'MM/dd/yyyy'))\r\n                                        //         setValue(newValue)\r\n                                        //     } else {\r\n                                        //         setValue(newValue)\r\n                                        //     }\r\n                                        // }}\r\n                                        renderInput={(params) =>\r\n                                            <TextField\r\n                                                error={!!error}\r\n                                                helperText={error?.message}\r\n                                                {...params}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\section\\@dashboard\\branches\\details\\BranchLineChart.js",["3846"],[],"import React from 'react';\r\n// apex Chart\r\nimport Chart from 'react-apexcharts';\r\nimport { useSelector } from 'react-redux';\r\nimport { Box, CircularProgress } from '@mui/material';\r\n\r\n// ------------------------------------------------------------------------\r\n\r\nexport default function BranchLineChart({ currentDate }) {\r\n\r\n    const { isLoading, error, restaurantMonthlyEarnings } = useSelector(state => state.branches)\r\n\r\n    const currentMonthIndex = currentDate.split(`-`)[1] - 1\r\n\r\n    const monthNames =\r\n        [\r\n            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ]\r\n\r\n    const currentMonth = (monthNames[currentMonthIndex])\r\n    const LastMonth = (monthNames[currentMonthIndex - 1])\r\n    const product =\r\n        [\r\n            {\r\n                name: currentMonth,\r\n                data: restaurantMonthlyEarnings?.current\r\n                // data: [...restaurantMonthlyEarnings?.current]\r\n            },\r\n            {\r\n                name: LastMonth,\r\n                data: restaurantMonthlyEarnings?.previous\r\n                // data:[...restaurantMonthlyEarnings?.previous]\r\n            },\r\n        ]\r\n\r\n    // Customization on Chart\r\n\r\n    // const numberOfDays = restaurantMonthlyEarnings?.current.length > restaurantMonthlyEarnings?.previous?.length\r\n    //     ?\r\n    //     restaurantMonthlyEarnings?.previous?.length\r\n    //     :\r\n    //     restaurantMonthlyEarnings?.current?.length\r\n\r\n    const option = {\r\n        // title: { text: \"Product sell in 2021\" },\r\n        xaxis: {\r\n            // title: { text: \"Product Sell in Months\" },\r\n            // categories: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],\r\n            categories: [...Array(31).keys()].map(e => e + 1),\r\n            labels: {\r\n                show: true,\r\n                style: {\r\n                    colors: '#BCBCBC',\r\n                    fontSize: '12px',\r\n                    fontWeight: 500,\r\n                    cssClass: 'apexcharts-xaxis-label',\r\n                },\r\n            },\r\n        },\r\n        yaxis: {\r\n            // title: { text: translate('earning')  },\r\n            labels: {\r\n                show: true,\r\n                style: {\r\n                    colors: '#BCBCBC',\r\n                    fontSize: '12px',\r\n                    fontWeight: 500,\r\n                    cssClass: 'apexcharts-xaxis-label',\r\n                },\r\n            },\r\n        },\r\n        stroke: {\r\n            curve: 'smooth',\r\n            width: 3,\r\n        },\r\n        colors: [\"#FFCC63\", \"#BB85FF\"],\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            show: false\r\n        },\r\n        // tooltip: {\r\n        //     custom: function ({ series, seriesIndex, dataPointIndex, w }) {\r\n        //         return `\r\n        //         <div class=\"arrow_box\">' \r\n        //             <span> ${series[seriesIndex]['month']} :${series[seriesIndex][dataPointIndex]}  </span> \r\n        //         </div>`\r\n        //     }\r\n        // } \r\n    }\r\n\r\n    const Spinner = <Box display='flex' justifyContent='center'><CircularProgress /> </Box>\r\n\r\n    // ------------ JSX Code -------------\r\n    return (\r\n        <>\r\n            {isLoading && Spinner}\r\n            {!isLoading &&\r\n                <Chart type='line'\r\n                    width='102%'\r\n                    height='250px'\r\n                    series={product}\r\n                    options={{ ...option }}\r\n                >\r\n                </Chart>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\getPosition.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\menu-popover\\styles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\NavList.js",[],["3847"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\vertical\\styles.js",["3848","3849","3850"],[],"// @mui\nimport { alpha, styled } from \"@mui/material/styles\";\nimport { ListItemIcon, ListSubheader, ListItem } from \"@mui/material\";\n// config\nimport { ICON, NAV } from \"../../../config\";\n\n// ----------------------------------------------------------------------\n\nexport const StyledItem = styled(ListItem, {\n  shouldForwardProp: (prop) => prop !== \"active\" && prop !== \"caption\",\n})(({ theme }) => {\n  const isLight = theme.palette.mode === \"light\";\n  return {\n    position: \"relative\",\n    textTransform: \"capitalize\",\n    color: \"#BCBCBC\",\n    borderRadius: theme.shape.borderRadius,\n    height: NAV.H_DASHBOARD_ITEM,\n    paddingLeft: \"33px\",\n\n    \"&:hover\": {\n      backgroundColor: theme.palette.primary.main,\n      color: \"#FFFFFF\",\n      //  width: \"150px\",\n      //  borderTopRightRadius: \"100px\",\n      //  borderBottomRightRadius: \"100px\",\n      cursor: \"pointer\",\n    },\n    \"&:active\": {\n      backgroundColor: theme.palette.primary.main,\n      // width: \"150px\",\n      borderTopRightRadius: \"15px\",\n      borderBottomRightRadius: \"15px\",\n    },\n  };\n});\n\n// ----------------------------------------------------------------------\n\nexport const StyledIcon = styled(ListItemIcon)({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  minWidth: ICON.NAV_ITEM,\n  height: ICON.NAV_ITEM,\n  marginRight: \"16px\",\n  color: \"#FFFFFF\",\n});\n\n// ----------------------------------------------------------------------\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\NavList.js",[],["3851"],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\status.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\index.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\empty-content\\EmptyContent.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\hooks\\useActiveLink.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\styles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\horizontal\\NavItem.js",["3852"],[],"import PropTypes from \"prop-types\";\nimport { forwardRef } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n// @mui\nimport { Box, Tooltip, ListItemText, Link } from \"@mui/material\";\n// locales\nimport { useLocales } from \"../../../locales\";\n// auth\n\n//\nimport Iconify from \"../../iconify\";\nimport { StyledItem, StyledIcon } from \"./styles\";\n\n// ----------------------------------------------------------------------\n\nconst NavItem = forwardRef(\n  ({ item, depth, open, active, isExternalLink, ...other }, ref) => {\n    const { translate } = useLocales();\n\n    const { title, path, icon, info, children, disabled, caption, roles } =\n      item;\n\n    const subItem = depth !== 1;\n\n    const renderContent = (\n      <StyledItem\n        ref={ref}\n        open={open}\n        depth={depth}\n        active={active}\n        disabled={disabled}\n        {...other}\n      >\n        {icon && <StyledIcon>{icon}</StyledIcon>}\n\n        <ListItemText\n          primary={translate(title)}\n          primaryTypographyProps={{\n            noWrap: true,\n            component: \"span\",\n            variant: active ? \"subtitle2\" : \"body2\",\n          }}\n        />\n\n        {info && (\n          <Box component=\"span\" sx={{ ml: 1, lineHeight: 0 }}>\n            {info}\n          </Box>\n        )}\n\n        {caption && (\n          <Tooltip title={translate(caption)} arrow>\n            <Box component=\"span\" sx={{ ml: 0.5, lineHeight: 0 }}>\n              <Iconify icon=\"eva:info-outline\" width={16} />\n            </Box>\n          </Tooltip>\n        )}\n\n        {!!children && (\n          <Iconify\n            icon={subItem ? \"eva:chevron-right-fill\" : \"eva:chevron-down-fill\"}\n            width={16}\n            sx={{ ml: 0.5, flexShrink: 0 }}\n          />\n        )}\n      </StyledItem>\n    );\n\n    const renderItem = () => {\n      // ExternalLink\n      if (isExternalLink)\n        return (\n          <Link href={path} target=\"_blank\" rel=\"noopener\" underline=\"none\">\n            {renderContent}\n          </Link>\n        );\n\n      // Default\n      return (\n        <Link to={path} component={RouterLink} underline=\"none\">\n          {renderContent}\n        </Link>\n      );\n    };\n    return <>{renderItem()}</>;\n  }\n);\n\nNavItem.propTypes = {\n  open: PropTypes.bool,\n  active: PropTypes.bool,\n  item: PropTypes.object,\n  depth: PropTypes.number,\n  isExternalLink: PropTypes.bool,\n};\n\nexport default NavItem;\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\styles.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\components\\nav-section\\mini\\NavItem.js",["3853","3854"],[],"import PropTypes from \"prop-types\";\nimport { forwardRef } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n// @mui\nimport { Tooltip, Link, ListItemText } from \"@mui/material\";\n// locales\nimport { useLocales } from \"../../../locales\";\n\n//\nimport Iconify from \"../../iconify\";\nimport { StyledItem, StyledIcon } from \"./styles\";\n\n// ----------------------------------------------------------------------\n\nconst NavItem = forwardRef(\n  ({ item, depth, open, active, isExternalLink, ...other }, ref) => {\n    const { translate } = useLocales();\n\n    const { title, path, icon, children, disabled, caption, roles } = item;\n\n    const subItem = depth !== 1;\n\n    const renderContent = (\n      <StyledItem\n        ref={ref}\n        open={open}\n        depth={depth}\n        active={active}\n        disabled={disabled}\n        {...other}\n      >\n        {icon && <StyledIcon>{icon}</StyledIcon>}\n\n        <ListItemText\n          primary={translate(title)}\n          primaryTypographyProps={{\n            noWrap: true,\n            sx: {\n              width: 72,\n              fontSize: 10,\n              lineHeight: \"16px\",\n              textAlign: \"center\",\n              ...(active && {\n                fontWeight: \"fontWeightMedium\",\n              }),\n              ...(subItem && {\n                fontSize: 14,\n                width: \"auto\",\n                textAlign: \"left\",\n              }),\n            },\n          }}\n        />\n\n        {caption && (\n          <Tooltip title={translate(caption)} arrow placement=\"right\">\n            <Iconify\n              icon=\"eva:info-outline\"\n              width={16}\n              sx={{\n                top: 11,\n                left: 6,\n                position: \"absolute\",\n              }}\n            />\n          </Tooltip>\n        )}\n\n        {!!children && (\n          <Iconify\n            width={16}\n            icon=\"eva:chevron-right-fill\"\n            sx={{\n              top: 11,\n              right: 6,\n              position: \"absolute\",\n            }}\n          />\n        )}\n      </StyledItem>\n    );\n\n    const renderItem = () => {\n      // ExternalLink\n      if (isExternalLink)\n        return (\n          <Link href={path} target=\"_blank\" rel=\"noopener\" underline=\"none\">\n            {renderContent}\n          </Link>\n        );\n\n      // Default\n      return (\n        <Link component={RouterLink} to={path} underline=\"none\">\n          {renderContent}\n        </Link>\n      );\n    };\n  }\n);\n\nNavItem.propTypes = {\n  open: PropTypes.bool,\n  active: PropTypes.bool,\n  item: PropTypes.object,\n  depth: PropTypes.number,\n  isExternalLink: PropTypes.bool,\n};\n\nexport default NavItem;\n","C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\name.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\text.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\role.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\number.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\email.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\address.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\boolean.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\company.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\phoneNumber.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\brancheName.js",[],[],"C:\\Users\\PC\\Desktop\\food-new-admin\\src\\_mock\\assets\\statusValue.js",[],[],{"ruleId":"3855","severity":1,"message":"3856","line":204,"column":3,"nodeType":"3857","messageId":"3858","endLine":204,"endColumn":7},{"ruleId":"3855","severity":1,"message":"3859","line":253,"column":3,"nodeType":"3857","messageId":"3858","endLine":253,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3860","line":254,"column":3,"nodeType":"3857","messageId":"3858","endLine":254,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3859","line":258,"column":3,"nodeType":"3857","messageId":"3858","endLine":258,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3860","line":259,"column":3,"nodeType":"3857","messageId":"3858","endLine":259,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3859","line":271,"column":3,"nodeType":"3857","messageId":"3858","endLine":271,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3860","line":272,"column":3,"nodeType":"3857","messageId":"3858","endLine":272,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3861","line":274,"column":3,"nodeType":"3857","messageId":"3858","endLine":274,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3862","line":382,"column":3,"nodeType":"3857","messageId":"3858","endLine":382,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3863","line":394,"column":3,"nodeType":"3857","messageId":"3858","endLine":394,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3864","line":395,"column":3,"nodeType":"3857","messageId":"3858","endLine":395,"endColumn":11},{"ruleId":"3855","severity":1,"message":"3865","line":396,"column":3,"nodeType":"3857","messageId":"3858","endLine":396,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3866","line":397,"column":3,"nodeType":"3857","messageId":"3858","endLine":397,"endColumn":8},{"ruleId":"3855","severity":1,"message":"3862","line":398,"column":3,"nodeType":"3857","messageId":"3858","endLine":398,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3867","line":399,"column":3,"nodeType":"3857","messageId":"3858","endLine":399,"endColumn":10},{"ruleId":"3855","severity":1,"message":"3868","line":400,"column":3,"nodeType":"3857","messageId":"3858","endLine":400,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3869","line":401,"column":3,"nodeType":"3857","messageId":"3858","endLine":401,"endColumn":23},{"ruleId":"3855","severity":1,"message":"3870","line":402,"column":3,"nodeType":"3857","messageId":"3858","endLine":402,"endColumn":20},{"ruleId":"3855","severity":1,"message":"3871","line":403,"column":3,"nodeType":"3857","messageId":"3858","endLine":403,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3872","line":404,"column":3,"nodeType":"3857","messageId":"3858","endLine":404,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3873","line":405,"column":3,"nodeType":"3857","messageId":"3858","endLine":405,"endColumn":21},{"ruleId":"3855","severity":1,"message":"3874","line":406,"column":3,"nodeType":"3857","messageId":"3858","endLine":406,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3875","line":407,"column":3,"nodeType":"3857","messageId":"3858","endLine":407,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3876","line":408,"column":3,"nodeType":"3857","messageId":"3858","endLine":408,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3877","line":409,"column":3,"nodeType":"3857","messageId":"3858","endLine":409,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3862","line":455,"column":3,"nodeType":"3857","messageId":"3858","endLine":455,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3878","line":575,"column":3,"nodeType":"3857","messageId":"3858","endLine":575,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3879","line":576,"column":3,"nodeType":"3857","messageId":"3858","endLine":576,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3880","line":666,"column":3,"nodeType":"3857","messageId":"3858","endLine":666,"endColumn":10},{"ruleId":"3855","severity":1,"message":"3881","line":667,"column":3,"nodeType":"3857","messageId":"3858","endLine":667,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3882","line":668,"column":3,"nodeType":"3857","messageId":"3858","endLine":668,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3883","line":669,"column":3,"nodeType":"3857","messageId":"3858","endLine":669,"endColumn":35},{"ruleId":"3855","severity":1,"message":"3884","line":670,"column":3,"nodeType":"3857","messageId":"3858","endLine":670,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3863","line":753,"column":3,"nodeType":"3857","messageId":"3858","endLine":753,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3885","line":785,"column":3,"nodeType":"3857","messageId":"3858","endLine":785,"endColumn":7},{"ruleId":"3855","severity":1,"message":"3886","line":831,"column":3,"nodeType":"3857","messageId":"3858","endLine":831,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3887","line":832,"column":3,"nodeType":"3857","messageId":"3858","endLine":832,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3888","line":834,"column":3,"nodeType":"3857","messageId":"3858","endLine":834,"endColumn":21},{"ruleId":"3855","severity":1,"message":"3889","line":835,"column":3,"nodeType":"3857","messageId":"3858","endLine":835,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3890","line":845,"column":3,"nodeType":"3857","messageId":"3858","endLine":845,"endColumn":14},{"ruleId":"3855","severity":1,"message":"3891","line":846,"column":3,"nodeType":"3857","messageId":"3858","endLine":846,"endColumn":20},{"ruleId":"3855","severity":1,"message":"3892","line":849,"column":3,"nodeType":"3857","messageId":"3858","endLine":849,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3893","line":850,"column":3,"nodeType":"3857","messageId":"3858","endLine":850,"endColumn":6},{"ruleId":"3855","severity":1,"message":"3894","line":851,"column":3,"nodeType":"3857","messageId":"3858","endLine":851,"endColumn":14},{"ruleId":"3855","severity":1,"message":"3895","line":880,"column":3,"nodeType":"3857","messageId":"3858","endLine":880,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3896","line":890,"column":3,"nodeType":"3857","messageId":"3858","endLine":890,"endColumn":12},{"ruleId":"3855","severity":1,"message":"3859","line":262,"column":3,"nodeType":"3857","messageId":"3858","endLine":262,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3860","line":263,"column":3,"nodeType":"3857","messageId":"3858","endLine":263,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3861","line":266,"column":3,"nodeType":"3857","messageId":"3858","endLine":266,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3897","line":267,"column":3,"nodeType":"3857","messageId":"3858","endLine":267,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3859","line":268,"column":3,"nodeType":"3857","messageId":"3858","endLine":268,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3860","line":269,"column":3,"nodeType":"3857","messageId":"3858","endLine":269,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3897","line":270,"column":3,"nodeType":"3857","messageId":"3858","endLine":270,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3861","line":271,"column":3,"nodeType":"3857","messageId":"3858","endLine":271,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3898","line":272,"column":3,"nodeType":"3857","messageId":"3858","endLine":272,"endColumn":11},{"ruleId":"3855","severity":1,"message":"3899","line":273,"column":3,"nodeType":"3857","messageId":"3858","endLine":273,"endColumn":11},{"ruleId":"3855","severity":1,"message":"3900","line":274,"column":3,"nodeType":"3857","messageId":"3858","endLine":274,"endColumn":36},{"ruleId":"3855","severity":1,"message":"3901","line":275,"column":3,"nodeType":"3857","messageId":"3858","endLine":275,"endColumn":36},{"ruleId":"3855","severity":1,"message":"3902","line":276,"column":3,"nodeType":"3857","messageId":"3858","endLine":276,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3903","line":277,"column":3,"nodeType":"3857","messageId":"3858","endLine":277,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3904","line":278,"column":3,"nodeType":"3857","messageId":"3858","endLine":278,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3863","line":412,"column":3,"nodeType":"3857","messageId":"3858","endLine":412,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3865","line":413,"column":3,"nodeType":"3857","messageId":"3858","endLine":413,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3866","line":414,"column":3,"nodeType":"3857","messageId":"3858","endLine":414,"endColumn":8},{"ruleId":"3855","severity":1,"message":"3868","line":415,"column":3,"nodeType":"3857","messageId":"3858","endLine":415,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3869","line":416,"column":3,"nodeType":"3857","messageId":"3858","endLine":416,"endColumn":23},{"ruleId":"3855","severity":1,"message":"3870","line":417,"column":3,"nodeType":"3857","messageId":"3858","endLine":417,"endColumn":20},{"ruleId":"3855","severity":1,"message":"3871","line":418,"column":3,"nodeType":"3857","messageId":"3858","endLine":418,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3872","line":419,"column":3,"nodeType":"3857","messageId":"3858","endLine":419,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3875","line":420,"column":3,"nodeType":"3857","messageId":"3858","endLine":420,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3876","line":423,"column":3,"nodeType":"3857","messageId":"3858","endLine":423,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3877","line":424,"column":3,"nodeType":"3857","messageId":"3858","endLine":424,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3905","line":432,"column":3,"nodeType":"3857","messageId":"3858","endLine":432,"endColumn":16},{"ruleId":"3855","severity":1,"message":"3881","line":701,"column":3,"nodeType":"3857","messageId":"3858","endLine":701,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3882","line":702,"column":3,"nodeType":"3857","messageId":"3858","endLine":702,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3883","line":703,"column":3,"nodeType":"3857","messageId":"3858","endLine":703,"endColumn":35},{"ruleId":"3855","severity":1,"message":"3884","line":704,"column":3,"nodeType":"3857","messageId":"3858","endLine":704,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3906","line":706,"column":3,"nodeType":"3857","messageId":"3858","endLine":706,"endColumn":27},{"ruleId":"3855","severity":1,"message":"3907","line":707,"column":3,"nodeType":"3857","messageId":"3858","endLine":707,"endColumn":27},{"ruleId":"3855","severity":1,"message":"3908","line":708,"column":3,"nodeType":"3857","messageId":"3858","endLine":708,"endColumn":29},{"ruleId":"3855","severity":1,"message":"3909","line":709,"column":3,"nodeType":"3857","messageId":"3858","endLine":709,"endColumn":29},{"ruleId":"3855","severity":1,"message":"3910","line":710,"column":3,"nodeType":"3857","messageId":"3858","endLine":710,"endColumn":25},{"ruleId":"3855","severity":1,"message":"3911","line":711,"column":3,"nodeType":"3857","messageId":"3858","endLine":711,"endColumn":23},{"ruleId":"3855","severity":1,"message":"3912","line":712,"column":3,"nodeType":"3857","messageId":"3858","endLine":712,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3913","line":713,"column":3,"nodeType":"3857","messageId":"3858","endLine":713,"endColumn":22},{"ruleId":"3855","severity":1,"message":"3914","line":714,"column":3,"nodeType":"3857","messageId":"3858","endLine":714,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3915","line":715,"column":3,"nodeType":"3857","messageId":"3858","endLine":715,"endColumn":31},{"ruleId":"3855","severity":1,"message":"3916","line":716,"column":3,"nodeType":"3857","messageId":"3858","endLine":716,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3917","line":717,"column":3,"nodeType":"3857","messageId":"3858","endLine":717,"endColumn":19},{"ruleId":"3855","severity":1,"message":"3918","line":718,"column":3,"nodeType":"3857","messageId":"3858","endLine":718,"endColumn":15},{"ruleId":"3855","severity":1,"message":"3919","line":719,"column":3,"nodeType":"3857","messageId":"3858","endLine":719,"endColumn":12},{"ruleId":"3855","severity":1,"message":"3885","line":813,"column":3,"nodeType":"3857","messageId":"3858","endLine":813,"endColumn":7},{"ruleId":"3855","severity":1,"message":"3886","line":857,"column":3,"nodeType":"3857","messageId":"3858","endLine":857,"endColumn":30},{"ruleId":"3855","severity":1,"message":"3887","line":858,"column":3,"nodeType":"3857","messageId":"3858","endLine":858,"endColumn":18},{"ruleId":"3855","severity":1,"message":"3888","line":860,"column":3,"nodeType":"3857","messageId":"3858","endLine":860,"endColumn":21},{"ruleId":"3855","severity":1,"message":"3889","line":861,"column":3,"nodeType":"3857","messageId":"3858","endLine":861,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3920","line":863,"column":3,"nodeType":"3857","messageId":"3858","endLine":863,"endColumn":11},{"ruleId":"3855","severity":1,"message":"3921","line":865,"column":3,"nodeType":"3857","messageId":"3858","endLine":865,"endColumn":16},{"ruleId":"3855","severity":1,"message":"3890","line":871,"column":3,"nodeType":"3857","messageId":"3858","endLine":871,"endColumn":14},{"ruleId":"3855","severity":1,"message":"3891","line":872,"column":3,"nodeType":"3857","messageId":"3858","endLine":872,"endColumn":20},{"ruleId":"3855","severity":1,"message":"3922","line":873,"column":3,"nodeType":"3857","messageId":"3858","endLine":873,"endColumn":17},{"ruleId":"3855","severity":1,"message":"3892","line":875,"column":3,"nodeType":"3857","messageId":"3858","endLine":875,"endColumn":9},{"ruleId":"3855","severity":1,"message":"3893","line":876,"column":3,"nodeType":"3857","messageId":"3858","endLine":876,"endColumn":6},{"ruleId":"3855","severity":1,"message":"3894","line":877,"column":3,"nodeType":"3857","messageId":"3858","endLine":877,"endColumn":14},{"ruleId":"3855","severity":1,"message":"3895","line":906,"column":3,"nodeType":"3857","messageId":"3858","endLine":906,"endColumn":28},{"ruleId":"3855","severity":1,"message":"3896","line":916,"column":3,"nodeType":"3857","messageId":"3858","endLine":916,"endColumn":12},{"ruleId":"3923","severity":1,"message":"3924","line":9,"column":3,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3927","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3928","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":17},{"ruleId":"3923","severity":1,"message":"3929","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3930","line":17,"column":3,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":10},{"ruleId":"3923","severity":1,"message":"3931","line":19,"column":3,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":7},{"ruleId":"3923","severity":1,"message":"3932","line":20,"column":3,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":11},{"ruleId":"3923","severity":1,"message":"3933","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3934","line":27,"column":3,"nodeType":"3925","messageId":"3926","endLine":27,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3935","line":28,"column":3,"nodeType":"3925","messageId":"3926","endLine":28,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3936","line":33,"column":3,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":24},{"ruleId":"3923","severity":1,"message":"3937","line":35,"column":3,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":20},{"ruleId":"3923","severity":1,"message":"3938","line":36,"column":3,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":8},{"ruleId":"3923","severity":1,"message":"3939","line":37,"column":3,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":20},{"ruleId":"3923","severity":1,"message":"3940","line":38,"column":3,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":17},{"ruleId":"3923","severity":1,"message":"3941","line":39,"column":3,"nodeType":"3925","messageId":"3926","endLine":39,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3942","line":44,"column":3,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":17},{"ruleId":"3923","severity":1,"message":"3943","line":48,"column":3,"nodeType":"3925","messageId":"3926","endLine":48,"endColumn":23},{"ruleId":"3923","severity":1,"message":"3944","line":52,"column":3,"nodeType":"3925","messageId":"3926","endLine":52,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3945","line":53,"column":3,"nodeType":"3925","messageId":"3926","endLine":53,"endColumn":23},{"ruleId":"3923","severity":1,"message":"3946","line":68,"column":3,"nodeType":"3925","messageId":"3926","endLine":68,"endColumn":17},{"ruleId":"3923","severity":1,"message":"3947","line":69,"column":3,"nodeType":"3925","messageId":"3926","endLine":69,"endColumn":22},{"ruleId":"3923","severity":1,"message":"3948","line":70,"column":3,"nodeType":"3925","messageId":"3926","endLine":70,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3949","line":71,"column":3,"nodeType":"3925","messageId":"3926","endLine":71,"endColumn":29},{"ruleId":"3923","severity":1,"message":"3950","line":72,"column":3,"nodeType":"3925","messageId":"3926","endLine":72,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3951","line":73,"column":3,"nodeType":"3925","messageId":"3926","endLine":73,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3952","line":76,"column":3,"nodeType":"3925","messageId":"3926","endLine":76,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3953","line":99,"column":8,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":17},{"ruleId":"3954","severity":1,"message":"3955","line":65,"column":6,"nodeType":"3956","endLine":65,"endColumn":16,"suggestions":"3957","suppressions":"3958"},{"ruleId":"3923","severity":1,"message":"3959","line":1,"column":10,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":24},{"ruleId":"3923","severity":1,"message":"3960","line":2,"column":8,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3961","line":5,"column":3,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3962","line":16,"column":7,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":22},{"ruleId":"3855","severity":1,"message":"3963","line":42,"column":3,"nodeType":"3857","messageId":"3858","endLine":42,"endColumn":10},{"ruleId":"3923","severity":1,"message":"3964","line":3,"column":10,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":33},{"ruleId":"3923","severity":1,"message":"3965","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":34},{"ruleId":"3923","severity":1,"message":"3966","line":8,"column":3,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":28},{"ruleId":"3923","severity":1,"message":"3967","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":31},{"ruleId":"3923","severity":1,"message":"3968","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":27},{"ruleId":"3923","severity":1,"message":"3969","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":12},{"ruleId":"3923","severity":1,"message":"3970","line":21,"column":3,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":33},{"ruleId":"3923","severity":1,"message":"3971","line":26,"column":3,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3972","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":32},{"ruleId":"3923","severity":1,"message":"3960","line":2,"column":8,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3973","line":3,"column":10,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3974","line":5,"column":8,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3975","line":17,"column":11,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3976","line":17,"column":28,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":41},{"ruleId":"3923","severity":1,"message":"3973","line":3,"column":10,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3974","line":5,"column":8,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3975","line":17,"column":11,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3976","line":17,"column":28,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":41},{"ruleId":"3954","severity":1,"message":"3977","line":48,"column":5,"nodeType":"3956","endLine":48,"endColumn":29,"suggestions":"3978","suppressions":"3979"},{"ruleId":"3923","severity":1,"message":"3980","line":2,"column":8,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3981","line":6,"column":13,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3982","line":9,"column":10,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3983","line":16,"column":24,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":36},{"ruleId":"3923","severity":1,"message":"3984","line":29,"column":7,"nodeType":"3925","messageId":"3926","endLine":29,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3985","line":137,"column":5,"nodeType":"3925","messageId":"3926","endLine":137,"endColumn":10},{"ruleId":"3923","severity":1,"message":"3986","line":138,"column":5,"nodeType":"3925","messageId":"3926","endLine":138,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":140,"column":26,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":140,"column":40,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":58},{"ruleId":"3989","severity":1,"message":"3990","line":263,"column":40,"nodeType":"3991","messageId":"3858","endLine":263,"endColumn":42},{"ruleId":"3923","severity":1,"message":"3992","line":34,"column":10,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3993","line":174,"column":28,"nodeType":"3925","messageId":"3926","endLine":174,"endColumn":42},{"ruleId":"3923","severity":1,"message":"3987","line":289,"column":26,"nodeType":"3925","messageId":"3926","endLine":289,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":289,"column":40,"nodeType":"3925","messageId":"3926","endLine":289,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":289,"column":60,"nodeType":"3925","messageId":"3926","endLine":289,"endColumn":67},{"ruleId":"3923","severity":1,"message":"3995","line":294,"column":9,"nodeType":"3925","messageId":"3926","endLine":294,"endColumn":17},{"ruleId":"3923","severity":1,"message":"3996","line":9,"column":10,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3987","line":326,"column":26,"nodeType":"3925","messageId":"3926","endLine":326,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":326,"column":40,"nodeType":"3925","messageId":"3926","endLine":326,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":326,"column":60,"nodeType":"3925","messageId":"3926","endLine":326,"endColumn":67},{"ruleId":"3923","severity":1,"message":"3997","line":336,"column":5,"nodeType":"3925","messageId":"3926","endLine":336,"endColumn":15},{"ruleId":"3954","severity":1,"message":"3998","line":408,"column":6,"nodeType":"3956","endLine":408,"endColumn":16,"suggestions":"3999"},{"ruleId":"3923","severity":1,"message":"4000","line":5,"column":30,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4001","line":174,"column":5,"nodeType":"3925","messageId":"3926","endLine":174,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4002","line":194,"column":23,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":37},{"ruleId":"3923","severity":1,"message":"3987","line":347,"column":26,"nodeType":"3925","messageId":"3926","endLine":347,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":347,"column":40,"nodeType":"3925","messageId":"3926","endLine":347,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":347,"column":60,"nodeType":"3925","messageId":"3926","endLine":347,"endColumn":67},{"ruleId":"3954","severity":1,"message":"4003","line":425,"column":6,"nodeType":"3956","endLine":425,"endColumn":16,"suggestions":"4004"},{"ruleId":"3923","severity":1,"message":"4005","line":28,"column":10,"nodeType":"3925","messageId":"3926","endLine":28,"endColumn":15},{"ruleId":"3923","severity":1,"message":"3986","line":148,"column":5,"nodeType":"3925","messageId":"3926","endLine":148,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":150,"column":26,"nodeType":"3925","messageId":"3926","endLine":150,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":150,"column":40,"nodeType":"3925","messageId":"3926","endLine":150,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4006","line":43,"column":10,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4007","line":197,"column":10,"nodeType":"3925","messageId":"3926","endLine":197,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4008","line":197,"column":20,"nodeType":"3925","messageId":"3926","endLine":197,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4009","line":205,"column":9,"nodeType":"3925","messageId":"3926","endLine":205,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4010","line":259,"column":9,"nodeType":"3925","messageId":"3926","endLine":259,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3987","line":347,"column":26,"nodeType":"3925","messageId":"3926","endLine":347,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":347,"column":40,"nodeType":"3925","messageId":"3926","endLine":347,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":347,"column":60,"nodeType":"3925","messageId":"3926","endLine":347,"endColumn":67},{"ruleId":"3954","severity":1,"message":"3998","line":485,"column":6,"nodeType":"3956","endLine":485,"endColumn":16,"suggestions":"4011"},{"ruleId":"3923","severity":1,"message":"4012","line":7,"column":8,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4013","line":17,"column":3,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4014","line":21,"column":3,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4015","line":22,"column":3,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4016","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4017","line":38,"column":10,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4018","line":41,"column":10,"nodeType":"3925","messageId":"3926","endLine":41,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4019","line":79,"column":7,"nodeType":"3925","messageId":"3926","endLine":79,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4020","line":236,"column":7,"nodeType":"3925","messageId":"3926","endLine":236,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4021","line":257,"column":10,"nodeType":"3925","messageId":"3926","endLine":257,"endColumn":21},{"ruleId":"3954","severity":1,"message":"4022","line":316,"column":6,"nodeType":"3956","endLine":316,"endColumn":71,"suggestions":"4023"},{"ruleId":"3923","severity":1,"message":"4024","line":329,"column":9,"nodeType":"3925","messageId":"3926","endLine":329,"endColumn":30},{"ruleId":"3989","severity":1,"message":"4025","line":543,"column":37,"nodeType":"3991","messageId":"3858","endLine":543,"endColumn":39},{"ruleId":"3923","severity":1,"message":"3996","line":9,"column":10,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4026","line":39,"column":3,"nodeType":"3925","messageId":"3926","endLine":39,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4027","line":46,"column":8,"nodeType":"3925","messageId":"3926","endLine":46,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4028","line":47,"column":13,"nodeType":"3925","messageId":"3926","endLine":47,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4029","line":194,"column":5,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3987","line":357,"column":26,"nodeType":"3925","messageId":"3926","endLine":357,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":357,"column":40,"nodeType":"3925","messageId":"3926","endLine":357,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":357,"column":60,"nodeType":"3925","messageId":"3926","endLine":357,"endColumn":67},{"ruleId":"3954","severity":1,"message":"4030","line":451,"column":6,"nodeType":"3956","endLine":451,"endColumn":16,"suggestions":"4031"},{"ruleId":"3923","severity":1,"message":"3981","line":6,"column":13,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3982","line":9,"column":10,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3983","line":16,"column":24,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4032","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4033","line":24,"column":3,"nodeType":"3925","messageId":"3926","endLine":24,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3984","line":30,"column":7,"nodeType":"3925","messageId":"3926","endLine":30,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3985","line":138,"column":5,"nodeType":"3925","messageId":"3926","endLine":138,"endColumn":10},{"ruleId":"3923","severity":1,"message":"3986","line":139,"column":5,"nodeType":"3925","messageId":"3926","endLine":139,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":141,"column":26,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":141,"column":40,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":58},{"ruleId":"3989","severity":1,"message":"3990","line":263,"column":40,"nodeType":"3991","messageId":"3858","endLine":263,"endColumn":42},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4005","line":20,"column":10,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":15},{"ruleId":"3923","severity":1,"message":"3986","line":147,"column":5,"nodeType":"3925","messageId":"3926","endLine":147,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":149,"column":26,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":149,"column":40,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4035","line":6,"column":30,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4036","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4037","line":24,"column":10,"nodeType":"3925","messageId":"3926","endLine":24,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4038","line":36,"column":8,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":27},{"ruleId":"3954","severity":1,"message":"4039","line":216,"column":6,"nodeType":"3956","endLine":216,"endColumn":27,"suggestions":"4040"},{"ruleId":"3923","severity":1,"message":"3987","line":239,"column":26,"nodeType":"3925","messageId":"3926","endLine":239,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":239,"column":40,"nodeType":"3925","messageId":"3926","endLine":239,"endColumn":58},{"ruleId":"3954","severity":1,"message":"4041","line":244,"column":6,"nodeType":"3956","endLine":244,"endColumn":8,"suggestions":"4042"},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4028","line":33,"column":13,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4044","line":101,"column":11,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4045","line":101,"column":22,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4046","line":101,"column":29,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":52},{"ruleId":"3923","severity":1,"message":"3987","line":132,"column":26,"nodeType":"3925","messageId":"3926","endLine":132,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":132,"column":40,"nodeType":"3925","messageId":"3926","endLine":132,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4047","line":17,"column":3,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4036","line":18,"column":3,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4016","line":21,"column":3,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4048","line":80,"column":7,"nodeType":"3925","messageId":"3926","endLine":80,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4049","line":139,"column":7,"nodeType":"3925","messageId":"3926","endLine":139,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4050","line":146,"column":7,"nodeType":"3925","messageId":"3926","endLine":146,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4051","line":154,"column":7,"nodeType":"3925","messageId":"3926","endLine":154,"endColumn":25},{"ruleId":"3954","severity":1,"message":"4052","line":175,"column":6,"nodeType":"3956","endLine":175,"endColumn":8,"suggestions":"4053"},{"ruleId":"3923","severity":1,"message":"4054","line":179,"column":9,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4055","line":183,"column":29,"nodeType":"3925","messageId":"3926","endLine":183,"endColumn":49},{"ruleId":"3923","severity":1,"message":"4056","line":190,"column":10,"nodeType":"3925","messageId":"3926","endLine":190,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4057","line":190,"column":21,"nodeType":"3925","messageId":"3926","endLine":190,"endColumn":33},{"ruleId":"3923","severity":1,"message":"3987","line":219,"column":26,"nodeType":"3925","messageId":"3926","endLine":219,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":219,"column":40,"nodeType":"3925","messageId":"3926","endLine":219,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":219,"column":60,"nodeType":"3925","messageId":"3926","endLine":219,"endColumn":67},{"ruleId":"3923","severity":1,"message":"4058","line":223,"column":9,"nodeType":"3925","messageId":"3926","endLine":223,"endColumn":17},{"ruleId":"3954","severity":1,"message":"3998","line":158,"column":6,"nodeType":"3956","endLine":158,"endColumn":75,"suggestions":"4059"},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4060","line":32,"column":3,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4028","line":36,"column":13,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4044","line":105,"column":5,"nodeType":"3925","messageId":"3926","endLine":105,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4045","line":106,"column":5,"nodeType":"3925","messageId":"3926","endLine":106,"endColumn":10},{"ruleId":"3923","severity":1,"message":"4046","line":107,"column":5,"nodeType":"3925","messageId":"3926","endLine":107,"endColumn":28},{"ruleId":"3923","severity":1,"message":"3987","line":141,"column":26,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":141,"column":40,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3996","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4061","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4062","line":50,"column":7,"nodeType":"3925","messageId":"3926","endLine":50,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4063","line":223,"column":10,"nodeType":"3925","messageId":"3926","endLine":223,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4064","line":227,"column":11,"nodeType":"3925","messageId":"3926","endLine":227,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4065","line":253,"column":10,"nodeType":"3925","messageId":"3926","endLine":253,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4066","line":253,"column":25,"nodeType":"3925","messageId":"3926","endLine":253,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4067","line":255,"column":10,"nodeType":"3925","messageId":"3926","endLine":255,"endColumn":19},{"ruleId":"3923","severity":1,"message":"3987","line":310,"column":26,"nodeType":"3925","messageId":"3926","endLine":310,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":310,"column":40,"nodeType":"3925","messageId":"3926","endLine":310,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4068","line":313,"column":9,"nodeType":"3925","messageId":"3926","endLine":313,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4069","line":316,"column":11,"nodeType":"3925","messageId":"3926","endLine":316,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4070","line":317,"column":5,"nodeType":"3925","messageId":"3926","endLine":317,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3996","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4061","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4071","line":40,"column":3,"nodeType":"3925","messageId":"3926","endLine":40,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4062","line":53,"column":7,"nodeType":"3925","messageId":"3926","endLine":53,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4063","line":226,"column":10,"nodeType":"3925","messageId":"3926","endLine":226,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4065","line":255,"column":10,"nodeType":"3925","messageId":"3926","endLine":255,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4066","line":255,"column":25,"nodeType":"3925","messageId":"3926","endLine":255,"endColumn":41},{"ruleId":"3923","severity":1,"message":"3987","line":313,"column":26,"nodeType":"3925","messageId":"3926","endLine":313,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":313,"column":40,"nodeType":"3925","messageId":"3926","endLine":313,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4068","line":316,"column":9,"nodeType":"3925","messageId":"3926","endLine":316,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4069","line":319,"column":11,"nodeType":"3925","messageId":"3926","endLine":319,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4070","line":320,"column":5,"nodeType":"3925","messageId":"3926","endLine":320,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4072","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4073","line":19,"column":8,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4027","line":23,"column":8,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4016","line":19,"column":3,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":11},{"ruleId":"3954","severity":1,"message":"4039","line":113,"column":6,"nodeType":"3956","endLine":113,"endColumn":8,"suggestions":"4074"},{"ruleId":"3923","severity":1,"message":"4075","line":148,"column":5,"nodeType":"3925","messageId":"3926","endLine":148,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":149,"column":26,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":149,"column":40,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4076","line":11,"column":8,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4077","line":12,"column":8,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4078","line":15,"column":10,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4079","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":25},{"ruleId":"3954","severity":1,"message":"3998","line":82,"column":6,"nodeType":"3956","endLine":82,"endColumn":16,"suggestions":"4080"},{"ruleId":"3923","severity":1,"message":"4081","line":158,"column":31,"nodeType":"3925","messageId":"3926","endLine":158,"endColumn":53},{"ruleId":"3923","severity":1,"message":"3986","line":217,"column":5,"nodeType":"3925","messageId":"3926","endLine":217,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":221,"column":26,"nodeType":"3925","messageId":"3926","endLine":221,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":221,"column":40,"nodeType":"3925","messageId":"3926","endLine":221,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":221,"column":60,"nodeType":"3925","messageId":"3926","endLine":221,"endColumn":67},{"ruleId":"3923","severity":1,"message":"4082","line":224,"column":9,"nodeType":"3925","messageId":"3926","endLine":224,"endColumn":22},{"ruleId":"3954","severity":1,"message":"4083","line":250,"column":6,"nodeType":"3956","endLine":250,"endColumn":18,"suggestions":"4084"},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4016","line":19,"column":3,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4085","line":34,"column":3,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":23},{"ruleId":"3954","severity":1,"message":"4039","line":119,"column":6,"nodeType":"3956","endLine":119,"endColumn":34,"suggestions":"4086"},{"ruleId":"3923","severity":1,"message":"4075","line":148,"column":5,"nodeType":"3925","messageId":"3926","endLine":148,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":149,"column":26,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":149,"column":40,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3987","line":124,"column":26,"nodeType":"3925","messageId":"3926","endLine":124,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":124,"column":40,"nodeType":"3925","messageId":"3926","endLine":124,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4087","line":22,"column":8,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":26},{"ruleId":"3954","severity":1,"message":"4083","line":129,"column":6,"nodeType":"3956","endLine":129,"endColumn":8,"suggestions":"4088"},{"ruleId":"3954","severity":1,"message":"3998","line":138,"column":6,"nodeType":"3956","endLine":138,"endColumn":39,"suggestions":"4089"},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"3987","line":122,"column":26,"nodeType":"3925","messageId":"3926","endLine":122,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":122,"column":40,"nodeType":"3925","messageId":"3926","endLine":122,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3987","line":159,"column":26,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":159,"column":40,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4090","line":28,"column":8,"nodeType":"3925","messageId":"3926","endLine":28,"endColumn":15},{"ruleId":"3923","severity":1,"message":"3987","line":132,"column":26,"nodeType":"3925","messageId":"3926","endLine":132,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":132,"column":40,"nodeType":"3925","messageId":"3926","endLine":132,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4091","line":11,"column":8,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4092","line":12,"column":8,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4093","line":38,"column":3,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4081","line":159,"column":31,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":53},{"ruleId":"3923","severity":1,"message":"3986","line":220,"column":5,"nodeType":"3925","messageId":"3926","endLine":220,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":224,"column":26,"nodeType":"3925","messageId":"3926","endLine":224,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":224,"column":40,"nodeType":"3925","messageId":"3926","endLine":224,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":224,"column":60,"nodeType":"3925","messageId":"3926","endLine":224,"endColumn":67},{"ruleId":"3923","severity":1,"message":"4082","line":227,"column":9,"nodeType":"3925","messageId":"3926","endLine":227,"endColumn":22},{"ruleId":"3954","severity":1,"message":"4083","line":237,"column":6,"nodeType":"3956","endLine":237,"endColumn":18,"suggestions":"4094"},{"ruleId":"3923","severity":1,"message":"3987","line":137,"column":26,"nodeType":"3925","messageId":"3926","endLine":137,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":137,"column":40,"nodeType":"3925","messageId":"3926","endLine":137,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4095","line":5,"column":26,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":42},{"ruleId":"3923","severity":1,"message":"4096","line":21,"column":8,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4097","line":37,"column":8,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":10},{"ruleId":"3923","severity":1,"message":"4045","line":155,"column":22,"nodeType":"3925","messageId":"3926","endLine":155,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4098","line":159,"column":11,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":21},{"ruleId":"3923","severity":1,"message":"3987","line":197,"column":26,"nodeType":"3925","messageId":"3926","endLine":197,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":197,"column":40,"nodeType":"3925","messageId":"3926","endLine":197,"endColumn":58},{"ruleId":"3954","severity":1,"message":"4099","line":233,"column":6,"nodeType":"3956","endLine":233,"endColumn":16,"suggestions":"4100"},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4101","line":1,"column":38,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":44},{"ruleId":"3923","severity":1,"message":"4077","line":12,"column":8,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4102","line":14,"column":23,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":34},{"ruleId":"3923","severity":1,"message":"3996","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4061","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4071","line":40,"column":3,"nodeType":"3925","messageId":"3926","endLine":40,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4103","line":51,"column":10,"nodeType":"3925","messageId":"3926","endLine":51,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4062","line":55,"column":7,"nodeType":"3925","messageId":"3926","endLine":55,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4104","line":225,"column":11,"nodeType":"3925","messageId":"3926","endLine":225,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4105","line":231,"column":21,"nodeType":"3925","messageId":"3926","endLine":231,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4044","line":231,"column":39,"nodeType":"3925","messageId":"3926","endLine":231,"endColumn":48},{"ruleId":"3923","severity":1,"message":"4106","line":234,"column":11,"nodeType":"3925","messageId":"3926","endLine":234,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4067","line":258,"column":10,"nodeType":"3925","messageId":"3926","endLine":258,"endColumn":19},{"ruleId":"3923","severity":1,"message":"3987","line":320,"column":26,"nodeType":"3925","messageId":"3926","endLine":320,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":320,"column":40,"nodeType":"3925","messageId":"3926","endLine":320,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4069","line":328,"column":11,"nodeType":"3925","messageId":"3926","endLine":328,"endColumn":22},{"ruleId":"3954","severity":1,"message":"4099","line":425,"column":6,"nodeType":"3956","endLine":425,"endColumn":16,"suggestions":"4107"},{"ruleId":"3923","severity":1,"message":"3996","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4061","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4062","line":50,"column":7,"nodeType":"3925","messageId":"3926","endLine":50,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4064","line":227,"column":11,"nodeType":"3925","messageId":"3926","endLine":227,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3987","line":312,"column":26,"nodeType":"3925","messageId":"3926","endLine":312,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":312,"column":40,"nodeType":"3925","messageId":"3926","endLine":312,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4070","line":319,"column":5,"nodeType":"3925","messageId":"3926","endLine":319,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4062","line":40,"column":7,"nodeType":"3925","messageId":"3926","endLine":40,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3987","line":204,"column":26,"nodeType":"3925","messageId":"3926","endLine":204,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":204,"column":40,"nodeType":"3925","messageId":"3926","endLine":204,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4062","line":40,"column":7,"nodeType":"3925","messageId":"3926","endLine":40,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3987","line":179,"column":26,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":179,"column":40,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4102","line":13,"column":23,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4108","line":33,"column":7,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4109","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":16},{"ruleId":"3954","severity":1,"message":"4110","line":65,"column":6,"nodeType":"3956","endLine":65,"endColumn":16,"suggestions":"4111"},{"ruleId":"3923","severity":1,"message":"4112","line":15,"column":10,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4113","line":16,"column":8,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4114","line":83,"column":11,"nodeType":"3925","messageId":"3926","endLine":83,"endColumn":24},{"ruleId":"3954","severity":1,"message":"4110","line":140,"column":6,"nodeType":"3956","endLine":140,"endColumn":34,"suggestions":"4115"},{"ruleId":"3923","severity":1,"message":"4116","line":28,"column":3,"nodeType":"3925","messageId":"3926","endLine":28,"endColumn":30},{"ruleId":"3923","severity":1,"message":"4117","line":98,"column":5,"nodeType":"3925","messageId":"3926","endLine":98,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4118","line":99,"column":5,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4119","line":100,"column":5,"nodeType":"3925","messageId":"3926","endLine":100,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4120","line":101,"column":5,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4121","line":102,"column":5,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4122","line":103,"column":5,"nodeType":"3925","messageId":"3926","endLine":103,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4123","line":107,"column":7,"nodeType":"3925","messageId":"3926","endLine":107,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4124","line":143,"column":6,"nodeType":"3956","endLine":143,"endColumn":56,"suggestions":"4125"},{"ruleId":"3923","severity":1,"message":"4126","line":3,"column":23,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4127","line":42,"column":3,"nodeType":"3925","messageId":"3926","endLine":42,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4043","line":44,"column":10,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4128","line":47,"column":3,"nodeType":"3925","messageId":"3926","endLine":47,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4062","line":54,"column":7,"nodeType":"3925","messageId":"3926","endLine":54,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4129","line":193,"column":7,"nodeType":"3925","messageId":"3926","endLine":193,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4130","line":214,"column":34,"nodeType":"3925","messageId":"3926","endLine":214,"endColumn":44},{"ruleId":"3923","severity":1,"message":"4131","line":218,"column":38,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":52},{"ruleId":"3923","severity":1,"message":"4132","line":218,"column":54,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":77},{"ruleId":"3923","severity":1,"message":"3987","line":302,"column":26,"nodeType":"3925","messageId":"3926","endLine":302,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":302,"column":40,"nodeType":"3925","messageId":"3926","endLine":302,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4000","line":3,"column":10,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":21},{"ruleId":"3954","severity":1,"message":"4083","line":66,"column":6,"nodeType":"3956","endLine":66,"endColumn":8,"suggestions":"4133"},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":27,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4134","line":26,"column":7,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":25},{"ruleId":"3954","severity":1,"message":"4135","line":51,"column":6,"nodeType":"3956","endLine":51,"endColumn":16,"suggestions":"4136"},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":27,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4013","line":7,"column":46,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":52},{"ruleId":"3923","severity":1,"message":"4137","line":9,"column":8,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4138","line":12,"column":8,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4139","line":24,"column":10,"nodeType":"3925","messageId":"3926","endLine":24,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4140","line":25,"column":10,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4141","line":71,"column":11,"nodeType":"3925","messageId":"3926","endLine":71,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4062","line":47,"column":7,"nodeType":"3925","messageId":"3926","endLine":47,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4044","line":152,"column":11,"nodeType":"3925","messageId":"3926","endLine":152,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4045","line":152,"column":22,"nodeType":"3925","messageId":"3926","endLine":152,"endColumn":27},{"ruleId":"3923","severity":1,"message":"3987","line":193,"column":26,"nodeType":"3925","messageId":"3926","endLine":193,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":193,"column":40,"nodeType":"3925","messageId":"3926","endLine":193,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4102","line":38,"column":23,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4062","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3987","line":210,"column":26,"nodeType":"3925","messageId":"3926","endLine":210,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":210,"column":40,"nodeType":"3925","messageId":"3926","endLine":210,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4106","line":179,"column":11,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4105","line":200,"column":21,"nodeType":"3925","messageId":"3926","endLine":200,"endColumn":37},{"ruleId":"3923","severity":1,"message":"3987","line":246,"column":26,"nodeType":"3925","messageId":"3926","endLine":246,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":246,"column":40,"nodeType":"3925","messageId":"3926","endLine":246,"endColumn":58},{"ruleId":"3954","severity":1,"message":"4099","line":292,"column":6,"nodeType":"3956","endLine":292,"endColumn":16,"suggestions":"4142"},{"ruleId":"3923","severity":1,"message":"4108","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4028","line":19,"column":13,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4143","line":23,"column":10,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4144","line":72,"column":7,"nodeType":"3925","messageId":"3926","endLine":72,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4145","line":93,"column":7,"nodeType":"3925","messageId":"3926","endLine":93,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4146","line":149,"column":38,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":64},{"ruleId":"3923","severity":1,"message":"4037","line":25,"column":10,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4147","line":169,"column":5,"nodeType":"3925","messageId":"3926","endLine":169,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4148","line":179,"column":5,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4149","line":181,"column":5,"nodeType":"3925","messageId":"3926","endLine":181,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4150","line":182,"column":5,"nodeType":"3925","messageId":"3926","endLine":182,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4151","line":183,"column":5,"nodeType":"3925","messageId":"3926","endLine":183,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4152","line":184,"column":5,"nodeType":"3925","messageId":"3926","endLine":184,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4056","line":229,"column":10,"nodeType":"3925","messageId":"3926","endLine":229,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4057","line":229,"column":21,"nodeType":"3925","messageId":"3926","endLine":229,"endColumn":33},{"ruleId":"3954","severity":1,"message":"4039","line":332,"column":6,"nodeType":"3956","endLine":332,"endColumn":8,"suggestions":"4153"},{"ruleId":"3923","severity":1,"message":"4000","line":7,"column":30,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4062","line":42,"column":7,"nodeType":"3925","messageId":"3926","endLine":42,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4154","line":322,"column":18,"nodeType":"3925","messageId":"3926","endLine":322,"endColumn":24},{"ruleId":"3923","severity":1,"message":"3987","line":322,"column":26,"nodeType":"3925","messageId":"3926","endLine":322,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":322,"column":40,"nodeType":"3925","messageId":"3926","endLine":322,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":322,"column":60,"nodeType":"3925","messageId":"3926","endLine":322,"endColumn":67},{"ruleId":"3923","severity":1,"message":"4155","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4156","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4095","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":19},{"ruleId":"3923","severity":1,"message":"3972","line":34,"column":3,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4157","line":37,"column":8,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":15},{"ruleId":"3923","severity":1,"message":"3966","line":38,"column":10,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4158","line":78,"column":5,"nodeType":"3925","messageId":"3926","endLine":78,"endColumn":40},{"ruleId":"3923","severity":1,"message":"4159","line":79,"column":5,"nodeType":"3925","messageId":"3926","endLine":79,"endColumn":38},{"ruleId":"3923","severity":1,"message":"4160","line":80,"column":5,"nodeType":"3925","messageId":"3926","endLine":80,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4161","line":81,"column":5,"nodeType":"3925","messageId":"3926","endLine":81,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4162","line":82,"column":5,"nodeType":"3925","messageId":"3926","endLine":82,"endColumn":45},{"ruleId":"3923","severity":1,"message":"4163","line":83,"column":5,"nodeType":"3925","messageId":"3926","endLine":83,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4044","line":84,"column":5,"nodeType":"3925","messageId":"3926","endLine":84,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4164","line":103,"column":9,"nodeType":"3925","messageId":"3926","endLine":103,"endColumn":16},{"ruleId":"3954","severity":1,"message":"4165","line":153,"column":6,"nodeType":"3956","endLine":153,"endColumn":51,"suggestions":"4166"},{"ruleId":"3923","severity":1,"message":"4028","line":14,"column":13,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4167","line":19,"column":3,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":30},{"ruleId":"3923","severity":1,"message":"4143","line":20,"column":3,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4168","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4169","line":31,"column":3,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":30},{"ruleId":"3923","severity":1,"message":"4170","line":32,"column":3,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4171","line":33,"column":3,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4172","line":48,"column":7,"nodeType":"3925","messageId":"3926","endLine":48,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4044","line":77,"column":11,"nodeType":"3925","messageId":"3926","endLine":77,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4045","line":77,"column":22,"nodeType":"3925","messageId":"3926","endLine":77,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4173","line":77,"column":29,"nodeType":"3925","messageId":"3926","endLine":77,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4174","line":77,"column":43,"nodeType":"3925","messageId":"3926","endLine":77,"endColumn":56},{"ruleId":"3923","severity":1,"message":"4175","line":84,"column":9,"nodeType":"3925","messageId":"3926","endLine":84,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4000","line":3,"column":10,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":21},{"ruleId":"3954","severity":1,"message":"4083","line":66,"column":6,"nodeType":"3956","endLine":66,"endColumn":8,"suggestions":"4176"},{"ruleId":"3923","severity":1,"message":"4177","line":4,"column":3,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":7},{"ruleId":"3923","severity":1,"message":"4178","line":6,"column":3,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":10},{"ruleId":"3923","severity":1,"message":"4013","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4179","line":12,"column":8,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4180","line":13,"column":8,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4181","line":20,"column":8,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4028","line":26,"column":13,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4182","line":37,"column":7,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":27},{"ruleId":"3954","severity":1,"message":"4183","line":80,"column":6,"nodeType":"3956","endLine":80,"endColumn":16,"suggestions":"4184"},{"ruleId":"3923","severity":1,"message":"4090","line":36,"column":8,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4062","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4185","line":254,"column":5,"nodeType":"3925","messageId":"3926","endLine":254,"endColumn":10},{"ruleId":"3923","severity":1,"message":"3987","line":256,"column":26,"nodeType":"3925","messageId":"3926","endLine":256,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":256,"column":40,"nodeType":"3925","messageId":"3926","endLine":256,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4126","line":3,"column":23,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4062","line":43,"column":7,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4186","line":194,"column":11,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":16},{"ruleId":"3923","severity":1,"message":"3987","line":271,"column":26,"nodeType":"3925","messageId":"3926","endLine":271,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":271,"column":40,"nodeType":"3925","messageId":"3926","endLine":271,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4102","line":13,"column":23,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4072","line":2,"column":42,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":47},{"ruleId":"3923","severity":1,"message":"4187","line":196,"column":7,"nodeType":"3925","messageId":"3926","endLine":196,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4188","line":203,"column":7,"nodeType":"3925","messageId":"3926","endLine":203,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4189","line":210,"column":7,"nodeType":"3925","messageId":"3926","endLine":210,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4047","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4190","line":141,"column":7,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4191","line":153,"column":10,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4008","line":153,"column":24,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4106","line":163,"column":11,"nodeType":"3925","messageId":"3926","endLine":163,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4075","line":200,"column":5,"nodeType":"3925","messageId":"3926","endLine":200,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3987","line":201,"column":26,"nodeType":"3925","messageId":"3926","endLine":201,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":201,"column":40,"nodeType":"3925","messageId":"3926","endLine":201,"endColumn":58},{"ruleId":"3954","severity":1,"message":"4099","line":226,"column":6,"nodeType":"3956","endLine":226,"endColumn":16,"suggestions":"4192"},{"ruleId":"3923","severity":1,"message":"4037","line":27,"column":10,"nodeType":"3925","messageId":"3926","endLine":27,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4005","line":34,"column":10,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4049","line":47,"column":7,"nodeType":"3925","messageId":"3926","endLine":47,"endColumn":17},{"ruleId":"3923","severity":1,"message":"3986","line":178,"column":5,"nodeType":"3925","messageId":"3926","endLine":178,"endColumn":13},{"ruleId":"3923","severity":1,"message":"3988","line":180,"column":40,"nodeType":"3925","messageId":"3926","endLine":180,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4193","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4037","line":27,"column":10,"nodeType":"3925","messageId":"3926","endLine":27,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4194","line":86,"column":7,"nodeType":"3925","messageId":"3926","endLine":86,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4195","line":182,"column":7,"nodeType":"3925","messageId":"3926","endLine":182,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4196","line":190,"column":7,"nodeType":"3925","messageId":"3926","endLine":190,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4197","line":202,"column":7,"nodeType":"3925","messageId":"3926","endLine":202,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4198","line":229,"column":5,"nodeType":"3925","messageId":"3926","endLine":229,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4199","line":235,"column":5,"nodeType":"3925","messageId":"3926","endLine":235,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4200","line":236,"column":5,"nodeType":"3925","messageId":"3926","endLine":236,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4201","line":237,"column":5,"nodeType":"3925","messageId":"3926","endLine":237,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4202","line":238,"column":5,"nodeType":"3925","messageId":"3926","endLine":238,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4203","line":239,"column":5,"nodeType":"3925","messageId":"3926","endLine":239,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3985","line":319,"column":5,"nodeType":"3925","messageId":"3926","endLine":319,"endColumn":10},{"ruleId":"3923","severity":1,"message":"4154","line":324,"column":18,"nodeType":"3925","messageId":"3926","endLine":324,"endColumn":24},{"ruleId":"3954","severity":1,"message":"4039","line":359,"column":6,"nodeType":"3956","endLine":359,"endColumn":18,"suggestions":"4204"},{"ruleId":"4205","severity":2,"message":"4206","line":43,"column":23,"nodeType":"3925","endLine":43,"endColumn":36,"suppressions":"4207"},{"ruleId":"3954","severity":1,"message":"4208","line":33,"column":6,"nodeType":"3956","endLine":33,"endColumn":16,"suggestions":"4209","suppressions":"4210"},{"ruleId":"3954","severity":1,"message":"4208","line":33,"column":6,"nodeType":"3956","endLine":33,"endColumn":16,"suggestions":"4211","suppressions":"4212"},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4213","line":15,"column":14,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4214","line":11,"column":10,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4215","line":11,"column":18,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":23},{"ruleId":"3923","severity":1,"message":"3960","line":13,"column":8,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4216","line":14,"column":8,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4217","line":101,"column":9,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4218","line":102,"column":10,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4075","line":102,"column":17,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4219","line":39,"column":13,"nodeType":"3925","messageId":"3926","endLine":39,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4072","line":5,"column":28,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4220","line":43,"column":7,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4221","line":50,"column":7,"nodeType":"3925","messageId":"3926","endLine":50,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4102","line":7,"column":10,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4222","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4223","line":55,"column":7,"nodeType":"3925","messageId":"3926","endLine":55,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4224","line":60,"column":7,"nodeType":"3925","messageId":"3926","endLine":60,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4226","line":6,"column":3,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4095","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4227","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4228","line":32,"column":8,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":14},{"ruleId":"3923","severity":1,"message":"3961","line":38,"column":3,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4028","line":43,"column":13,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4045","line":136,"column":22,"nodeType":"3925","messageId":"3926","endLine":136,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4164","line":141,"column":9,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":159,"column":11,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":160,"column":9,"nodeType":"3925","messageId":"3926","endLine":160,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":163,"column":22,"nodeType":"3925","messageId":"3926","endLine":163,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":164,"column":22,"nodeType":"3925","messageId":"3926","endLine":164,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":165,"column":24,"nodeType":"3925","messageId":"3926","endLine":165,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":178,"column":9,"nodeType":"3925","messageId":"3926","endLine":178,"endColumn":19},{"ruleId":"3954","severity":1,"message":"3998","line":250,"column":6,"nodeType":"3956","endLine":250,"endColumn":44,"suggestions":"4235"},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4226","line":6,"column":3,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4095","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4236","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4237","line":32,"column":8,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4238","line":33,"column":8,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4228","line":34,"column":8,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4045","line":133,"column":5,"nodeType":"3925","messageId":"3926","endLine":133,"endColumn":10},{"ruleId":"3923","severity":1,"message":"4239","line":136,"column":5,"nodeType":"3925","messageId":"3926","endLine":136,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4240","line":137,"column":5,"nodeType":"3925","messageId":"3926","endLine":137,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4164","line":140,"column":9,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":161,"column":11,"nodeType":"3925","messageId":"3926","endLine":161,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":163,"column":9,"nodeType":"3925","messageId":"3926","endLine":163,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":169,"column":22,"nodeType":"3925","messageId":"3926","endLine":169,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":171,"column":22,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":173,"column":24,"nodeType":"3925","messageId":"3926","endLine":173,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":187,"column":9,"nodeType":"3925","messageId":"3926","endLine":187,"endColumn":19},{"ruleId":"3954","severity":1,"message":"3998","line":252,"column":6,"nodeType":"3956","endLine":252,"endColumn":50,"suggestions":"4241"},{"ruleId":"3923","severity":1,"message":"3992","line":7,"column":10,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4242","line":66,"column":11,"nodeType":"3925","messageId":"3926","endLine":66,"endColumn":38},{"ruleId":"3923","severity":1,"message":"4243","line":66,"column":40,"nodeType":"3925","messageId":"3926","endLine":66,"endColumn":69},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4226","line":6,"column":3,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4095","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4244","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4245","line":32,"column":8,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4238","line":33,"column":8,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4228","line":34,"column":8,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4045","line":135,"column":11,"nodeType":"3925","messageId":"3926","endLine":135,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4164","line":138,"column":9,"nodeType":"3925","messageId":"3926","endLine":138,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":156,"column":11,"nodeType":"3925","messageId":"3926","endLine":156,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":157,"column":9,"nodeType":"3925","messageId":"3926","endLine":157,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":160,"column":22,"nodeType":"3925","messageId":"3926","endLine":160,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":161,"column":22,"nodeType":"3925","messageId":"3926","endLine":161,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":162,"column":24,"nodeType":"3925","messageId":"3926","endLine":162,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":176,"column":9,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":19},{"ruleId":"3954","severity":1,"message":"3998","line":241,"column":6,"nodeType":"3956","endLine":241,"endColumn":50,"suggestions":"4246"},{"ruleId":"3923","severity":1,"message":"3987","line":185,"column":30,"nodeType":"3925","messageId":"3926","endLine":185,"endColumn":42},{"ruleId":"3923","severity":1,"message":"3988","line":185,"column":44,"nodeType":"3925","messageId":"3926","endLine":185,"endColumn":62},{"ruleId":"3923","severity":1,"message":"4164","line":103,"column":11,"nodeType":"3925","messageId":"3926","endLine":103,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4231","line":123,"column":24,"nodeType":"3925","messageId":"3926","endLine":123,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4232","line":124,"column":24,"nodeType":"3925","messageId":"3926","endLine":124,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4233","line":125,"column":26,"nodeType":"3925","messageId":"3926","endLine":125,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4234","line":138,"column":11,"nodeType":"3925","messageId":"3926","endLine":138,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4227","line":20,"column":10,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4228","line":36,"column":8,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4247","line":134,"column":29,"nodeType":"3925","messageId":"3926","endLine":134,"endColumn":54},{"ruleId":"3923","severity":1,"message":"4164","line":140,"column":9,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4231","line":160,"column":22,"nodeType":"3925","messageId":"3926","endLine":160,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":161,"column":22,"nodeType":"3925","messageId":"3926","endLine":161,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":162,"column":24,"nodeType":"3925","messageId":"3926","endLine":162,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":176,"column":9,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4248","line":242,"column":6,"nodeType":"3956","endLine":242,"endColumn":55,"suggestions":"4249"},{"ruleId":"3923","severity":1,"message":"4175","line":244,"column":9,"nodeType":"3925","messageId":"3926","endLine":244,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4250","line":35,"column":8,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4251","line":84,"column":7,"nodeType":"3925","messageId":"3926","endLine":84,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4252","line":101,"column":7,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4253","line":137,"column":9,"nodeType":"3925","messageId":"3926","endLine":137,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4164","line":141,"column":9,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":161,"column":11,"nodeType":"3925","messageId":"3926","endLine":161,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":163,"column":9,"nodeType":"3925","messageId":"3926","endLine":163,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4254","line":167,"column":10,"nodeType":"3925","messageId":"3926","endLine":167,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4231","line":169,"column":22,"nodeType":"3925","messageId":"3926","endLine":169,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":171,"column":22,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":173,"column":24,"nodeType":"3925","messageId":"3926","endLine":173,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":187,"column":9,"nodeType":"3925","messageId":"3926","endLine":187,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4255","line":198,"column":9,"nodeType":"3925","messageId":"3926","endLine":198,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4256","line":214,"column":9,"nodeType":"3925","messageId":"3926","endLine":214,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4175","line":242,"column":9,"nodeType":"3925","messageId":"3926","endLine":242,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4257","line":4,"column":10,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4095","line":9,"column":15,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4258","line":11,"column":8,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4028","line":12,"column":13,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4045","line":57,"column":28,"nodeType":"3925","messageId":"3926","endLine":57,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4095","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4250","line":35,"column":8,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4251","line":82,"column":7,"nodeType":"3925","messageId":"3926","endLine":82,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4252","line":99,"column":7,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4253","line":134,"column":9,"nodeType":"3925","messageId":"3926","endLine":134,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4164","line":152,"column":9,"nodeType":"3925","messageId":"3926","endLine":152,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":172,"column":11,"nodeType":"3925","messageId":"3926","endLine":172,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":174,"column":9,"nodeType":"3925","messageId":"3926","endLine":174,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4254","line":178,"column":10,"nodeType":"3925","messageId":"3926","endLine":178,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4231","line":180,"column":22,"nodeType":"3925","messageId":"3926","endLine":180,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":182,"column":22,"nodeType":"3925","messageId":"3926","endLine":182,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":184,"column":24,"nodeType":"3925","messageId":"3926","endLine":184,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":198,"column":9,"nodeType":"3925","messageId":"3926","endLine":198,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4255","line":209,"column":9,"nodeType":"3925","messageId":"3926","endLine":209,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4256","line":225,"column":9,"nodeType":"3925","messageId":"3926","endLine":225,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4225","line":5,"column":18,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4259","line":22,"column":10,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4238","line":36,"column":8,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4228","line":39,"column":8,"nodeType":"3925","messageId":"3926","endLine":39,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4260","line":139,"column":21,"nodeType":"3925","messageId":"3926","endLine":139,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4164","line":146,"column":9,"nodeType":"3925","messageId":"3926","endLine":146,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":164,"column":11,"nodeType":"3925","messageId":"3926","endLine":164,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":165,"column":9,"nodeType":"3925","messageId":"3926","endLine":165,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":168,"column":22,"nodeType":"3925","messageId":"3926","endLine":168,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":169,"column":22,"nodeType":"3925","messageId":"3926","endLine":169,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":170,"column":24,"nodeType":"3925","messageId":"3926","endLine":170,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":184,"column":9,"nodeType":"3925","messageId":"3926","endLine":184,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4248","line":249,"column":6,"nodeType":"3956","endLine":249,"endColumn":44,"suggestions":"4261"},{"ruleId":"3923","severity":1,"message":"4175","line":251,"column":9,"nodeType":"3925","messageId":"3926","endLine":251,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4226","line":4,"column":10,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4013","line":4,"column":15,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4262","line":4,"column":23,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4072","line":4,"column":35,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":40},{"ruleId":"3923","severity":1,"message":"4263","line":6,"column":8,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4264","line":10,"column":7,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4265","line":23,"column":7,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4219","line":32,"column":11,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4266","line":34,"column":10,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4267","line":34,"column":20,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4054","line":86,"column":11,"nodeType":"3925","messageId":"3926","endLine":86,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4045","line":89,"column":24,"nodeType":"3925","messageId":"3926","endLine":89,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4268","line":37,"column":7,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4268","line":35,"column":7,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4268","line":37,"column":7,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4044","line":241,"column":20,"nodeType":"3925","messageId":"3926","endLine":241,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4075","line":266,"column":5,"nodeType":"3925","messageId":"3926","endLine":266,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4154","line":268,"column":18,"nodeType":"3925","messageId":"3926","endLine":268,"endColumn":24},{"ruleId":"3923","severity":1,"message":"3987","line":268,"column":26,"nodeType":"3925","messageId":"3926","endLine":268,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":268,"column":40,"nodeType":"3925","messageId":"3926","endLine":268,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4269","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4064","line":192,"column":11,"nodeType":"3925","messageId":"3926","endLine":192,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4054","line":197,"column":9,"nodeType":"3925","messageId":"3926","endLine":197,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4154","line":218,"column":18,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":24},{"ruleId":"3923","severity":1,"message":"3987","line":218,"column":26,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":218,"column":40,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":218,"column":60,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":67},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4270","line":6,"column":8,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4271","line":61,"column":7,"nodeType":"3925","messageId":"3926","endLine":61,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4272","line":70,"column":7,"nodeType":"3925","messageId":"3926","endLine":70,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4253","line":89,"column":9,"nodeType":"3925","messageId":"3926","endLine":89,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4273","line":1,"column":8,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4028","line":21,"column":13,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4274","line":29,"column":7,"nodeType":"3925","messageId":"3926","endLine":29,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":35,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":44},{"ruleId":"3923","severity":1,"message":"4275","line":4,"column":42,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":51},{"ruleId":"3923","severity":1,"message":"4258","line":5,"column":8,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4276","line":30,"column":7,"nodeType":"3925","messageId":"3926","endLine":30,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3984","line":57,"column":7,"nodeType":"3925","messageId":"3926","endLine":57,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4048","line":62,"column":7,"nodeType":"3925","messageId":"3926","endLine":62,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4251","line":106,"column":7,"nodeType":"3925","messageId":"3926","endLine":106,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4277","line":133,"column":10,"nodeType":"3925","messageId":"3926","endLine":133,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4278","line":135,"column":10,"nodeType":"3925","messageId":"3926","endLine":135,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4279","line":135,"column":24,"nodeType":"3925","messageId":"3926","endLine":135,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4280","line":137,"column":10,"nodeType":"3925","messageId":"3926","endLine":137,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4281","line":144,"column":9,"nodeType":"3925","messageId":"3926","endLine":144,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4282","line":152,"column":9,"nodeType":"3925","messageId":"3926","endLine":152,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4283","line":61,"column":7,"nodeType":"3925","messageId":"3926","endLine":61,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4284","line":70,"column":7,"nodeType":"3925","messageId":"3926","endLine":70,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4047","line":5,"column":15,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4090","line":7,"column":8,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4269","line":12,"column":10,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4225","line":5,"column":18,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4095","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4275","line":18,"column":3,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4285","line":23,"column":10,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4250","line":38,"column":8,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":23},{"ruleId":"3923","severity":1,"message":"3960","line":43,"column":8,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4286","line":49,"column":10,"nodeType":"3925","messageId":"3926","endLine":49,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4287","line":51,"column":10,"nodeType":"3925","messageId":"3926","endLine":51,"endColumn":30},{"ruleId":"3923","severity":1,"message":"4253","line":174,"column":9,"nodeType":"3925","messageId":"3926","endLine":174,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4044","line":176,"column":11,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4045","line":176,"column":22,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4229","line":201,"column":11,"nodeType":"3925","messageId":"3926","endLine":201,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":203,"column":9,"nodeType":"3925","messageId":"3926","endLine":203,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":209,"column":22,"nodeType":"3925","messageId":"3926","endLine":209,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":211,"column":22,"nodeType":"3925","messageId":"3926","endLine":211,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":213,"column":24,"nodeType":"3925","messageId":"3926","endLine":213,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":227,"column":9,"nodeType":"3925","messageId":"3926","endLine":227,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4269","line":7,"column":10,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":18},{"ruleId":"3923","severity":1,"message":"3992","line":7,"column":20,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4288","line":9,"column":10,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4283","line":48,"column":7,"nodeType":"3925","messageId":"3926","endLine":48,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4014","line":6,"column":15,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4016","line":6,"column":34,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":42},{"ruleId":"3923","severity":1,"message":"4015","line":6,"column":44,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":50},{"ruleId":"3923","severity":1,"message":"4095","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4014","line":8,"column":3,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4016","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4155","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4156","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4015","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4157","line":23,"column":8,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4289","line":118,"column":7,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4290","line":141,"column":7,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4253","line":160,"column":9,"nodeType":"3925","messageId":"3926","endLine":160,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4164","line":171,"column":9,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4291","line":175,"column":10,"nodeType":"3925","messageId":"3926","endLine":175,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4292","line":175,"column":16,"nodeType":"3925","messageId":"3926","endLine":175,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4293","line":177,"column":10,"nodeType":"3925","messageId":"3926","endLine":177,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4294","line":177,"column":22,"nodeType":"3925","messageId":"3926","endLine":177,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4225","line":4,"column":18,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4095","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4226","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4219","line":102,"column":11,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4229","line":104,"column":11,"nodeType":"3925","messageId":"3926","endLine":104,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":106,"column":9,"nodeType":"3925","messageId":"3926","endLine":106,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":112,"column":22,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":114,"column":22,"nodeType":"3925","messageId":"3926","endLine":114,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":116,"column":24,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":130,"column":9,"nodeType":"3925","messageId":"3926","endLine":130,"endColumn":19},{"ruleId":"4295","severity":1,"message":"4296","line":77,"column":11,"nodeType":"3925","messageId":"4297","endLine":77,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4298","line":149,"column":9,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4225","line":5,"column":18,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4299","line":5,"column":30,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4300","line":23,"column":10,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4164","line":111,"column":11,"nodeType":"3925","messageId":"3926","endLine":111,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4231","line":131,"column":24,"nodeType":"3925","messageId":"3926","endLine":131,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4232","line":132,"column":24,"nodeType":"3925","messageId":"3926","endLine":132,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4233","line":133,"column":26,"nodeType":"3925","messageId":"3926","endLine":133,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4234","line":146,"column":11,"nodeType":"3925","messageId":"3926","endLine":146,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4225","line":5,"column":18,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4285","line":22,"column":10,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4250","line":37,"column":8,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4238","line":38,"column":8,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4301","line":48,"column":3,"nodeType":"3925","messageId":"3926","endLine":48,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4302","line":49,"column":3,"nodeType":"3925","messageId":"3926","endLine":49,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4303","line":119,"column":7,"nodeType":"3925","messageId":"3926","endLine":119,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4045","line":240,"column":22,"nodeType":"3925","messageId":"3926","endLine":240,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4229","line":265,"column":11,"nodeType":"3925","messageId":"3926","endLine":265,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":267,"column":9,"nodeType":"3925","messageId":"3926","endLine":267,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":273,"column":22,"nodeType":"3925","messageId":"3926","endLine":273,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":275,"column":22,"nodeType":"3925","messageId":"3926","endLine":275,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":277,"column":24,"nodeType":"3925","messageId":"3926","endLine":277,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":291,"column":9,"nodeType":"3925","messageId":"3926","endLine":291,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4304","line":354,"column":6,"nodeType":"3956","endLine":354,"endColumn":16,"suggestions":"4305"},{"ruleId":"3923","severity":1,"message":"4225","line":4,"column":18,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4072","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4306","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4095","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4226","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4238","line":36,"column":8,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4307","line":42,"column":10,"nodeType":"3925","messageId":"3926","endLine":42,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4308","line":43,"column":8,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4253","line":85,"column":9,"nodeType":"3925","messageId":"3926","endLine":85,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4045","line":87,"column":22,"nodeType":"3925","messageId":"3926","endLine":87,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4219","line":108,"column":11,"nodeType":"3925","messageId":"3926","endLine":108,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4229","line":110,"column":11,"nodeType":"3925","messageId":"3926","endLine":110,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":112,"column":9,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":118,"column":22,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":120,"column":22,"nodeType":"3925","messageId":"3926","endLine":120,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":122,"column":24,"nodeType":"3925","messageId":"3926","endLine":122,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":135,"column":9,"nodeType":"3925","messageId":"3926","endLine":135,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4027","line":6,"column":8,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4309","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4106","line":68,"column":11,"nodeType":"3925","messageId":"3926","endLine":68,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4310","line":122,"column":6,"nodeType":"3956","endLine":122,"endColumn":67,"suggestions":"4311"},{"ruleId":"3923","severity":1,"message":"4312","line":4,"column":8,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4095","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":19},{"ruleId":"3923","severity":1,"message":"3967","line":20,"column":10,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":38},{"ruleId":"3923","severity":1,"message":"4289","line":34,"column":7,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4313","line":51,"column":7,"nodeType":"3925","messageId":"3926","endLine":51,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4314","line":63,"column":7,"nodeType":"3925","messageId":"3926","endLine":63,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4315","line":90,"column":7,"nodeType":"3925","messageId":"3926","endLine":90,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4095","line":4,"column":40,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":56},{"ruleId":"3923","severity":1,"message":"4316","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4317","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4253","line":81,"column":9,"nodeType":"3925","messageId":"3926","endLine":81,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4106","line":83,"column":11,"nodeType":"3925","messageId":"3926","endLine":83,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4044","line":85,"column":11,"nodeType":"3925","messageId":"3926","endLine":85,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4130","line":88,"column":43,"nodeType":"3925","messageId":"3926","endLine":88,"endColumn":53},{"ruleId":"3923","severity":1,"message":"4318","line":102,"column":21,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":36},{"ruleId":"3954","severity":1,"message":"4319","line":128,"column":6,"nodeType":"3956","endLine":128,"endColumn":15,"suggestions":"4320"},{"ruleId":"3923","severity":1,"message":"4095","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4321","line":26,"column":10,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4322","line":107,"column":7,"nodeType":"3925","messageId":"3926","endLine":107,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4095","line":6,"column":15,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4226","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4285","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4250","line":31,"column":8,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4238","line":32,"column":8,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4303","line":104,"column":7,"nodeType":"3925","messageId":"3926","endLine":104,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4323","line":237,"column":11,"nodeType":"3925","messageId":"3926","endLine":237,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4045","line":237,"column":30,"nodeType":"3925","messageId":"3926","endLine":237,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4229","line":245,"column":11,"nodeType":"3925","messageId":"3926","endLine":245,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":247,"column":9,"nodeType":"3925","messageId":"3926","endLine":247,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":253,"column":22,"nodeType":"3925","messageId":"3926","endLine":253,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":255,"column":22,"nodeType":"3925","messageId":"3926","endLine":255,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":257,"column":24,"nodeType":"3925","messageId":"3926","endLine":257,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":271,"column":9,"nodeType":"3925","messageId":"3926","endLine":271,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4324","line":330,"column":6,"nodeType":"3956","endLine":330,"endColumn":16,"suggestions":"4325"},{"ruleId":"3923","severity":1,"message":"4090","line":8,"column":8,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4225","line":4,"column":18,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4326","line":21,"column":10,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4327","line":25,"column":8,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4238","line":38,"column":8,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4303","line":120,"column":7,"nodeType":"3925","messageId":"3926","endLine":120,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4229","line":262,"column":11,"nodeType":"3925","messageId":"3926","endLine":262,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":264,"column":9,"nodeType":"3925","messageId":"3926","endLine":264,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4254","line":268,"column":10,"nodeType":"3925","messageId":"3926","endLine":268,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4231","line":270,"column":22,"nodeType":"3925","messageId":"3926","endLine":270,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":272,"column":22,"nodeType":"3925","messageId":"3926","endLine":272,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":274,"column":24,"nodeType":"3925","messageId":"3926","endLine":274,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":288,"column":9,"nodeType":"3925","messageId":"3926","endLine":288,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4255","line":299,"column":9,"nodeType":"3925","messageId":"3926","endLine":299,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4256","line":315,"column":9,"nodeType":"3925","messageId":"3926","endLine":315,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4175","line":333,"column":9,"nodeType":"3925","messageId":"3926","endLine":333,"endColumn":16},{"ruleId":"3954","severity":1,"message":"4304","line":361,"column":6,"nodeType":"3956","endLine":361,"endColumn":16,"suggestions":"4328"},{"ruleId":"3923","severity":1,"message":"4043","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4095","line":6,"column":3,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4155","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4156","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4329","line":20,"column":10,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4157","line":26,"column":8,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4144","line":91,"column":7,"nodeType":"3925","messageId":"3926","endLine":91,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4145","line":112,"column":7,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4253","line":167,"column":9,"nodeType":"3925","messageId":"3926","endLine":167,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4158","line":170,"column":5,"nodeType":"3925","messageId":"3926","endLine":170,"endColumn":40},{"ruleId":"3923","severity":1,"message":"4330","line":171,"column":5,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4160","line":172,"column":5,"nodeType":"3925","messageId":"3926","endLine":172,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4331","line":173,"column":5,"nodeType":"3925","messageId":"3926","endLine":173,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4332","line":174,"column":5,"nodeType":"3925","messageId":"3926","endLine":174,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4333","line":176,"column":5,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4163","line":178,"column":5,"nodeType":"3925","messageId":"3926","endLine":178,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4044","line":179,"column":5,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4269","line":7,"column":10,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4334","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4335","line":113,"column":11,"nodeType":"3925","messageId":"3926","endLine":113,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4044","line":113,"column":20,"nodeType":"3925","messageId":"3926","endLine":113,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4014","line":8,"column":3,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4015","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4016","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4012","line":16,"column":8,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4290","line":59,"column":7,"nodeType":"3925","messageId":"3926","endLine":59,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4336","line":74,"column":7,"nodeType":"3925","messageId":"3926","endLine":74,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4337","line":101,"column":11,"nodeType":"3925","messageId":"3926","endLine":101,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4312","line":4,"column":8,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4095","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":19},{"ruleId":"3923","severity":1,"message":"3967","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4338","line":24,"column":3,"nodeType":"3925","messageId":"3926","endLine":24,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4171","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4339","line":26,"column":3,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4340","line":36,"column":10,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4341","line":484,"column":7,"nodeType":"3925","messageId":"3926","endLine":484,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4095","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4275","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4342","line":18,"column":10,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4343","line":21,"column":10,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4344","line":21,"column":28,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":45},{"ruleId":"3923","severity":1,"message":"4327","line":25,"column":8,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4250","line":42,"column":8,"nodeType":"3925","messageId":"3926","endLine":42,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4238","line":44,"column":8,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4345","line":50,"column":8,"nodeType":"3925","messageId":"3926","endLine":50,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4346","line":55,"column":8,"nodeType":"3925","messageId":"3926","endLine":55,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4347","line":116,"column":7,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4276","line":171,"column":7,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4348","line":201,"column":7,"nodeType":"3925","messageId":"3926","endLine":201,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4229","line":282,"column":11,"nodeType":"3925","messageId":"3926","endLine":282,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":284,"column":9,"nodeType":"3925","messageId":"3926","endLine":284,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":290,"column":22,"nodeType":"3925","messageId":"3926","endLine":290,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":292,"column":22,"nodeType":"3925","messageId":"3926","endLine":292,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":294,"column":24,"nodeType":"3925","messageId":"3926","endLine":294,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":308,"column":9,"nodeType":"3925","messageId":"3926","endLine":308,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4256","line":335,"column":9,"nodeType":"3925","messageId":"3926","endLine":335,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4349","line":358,"column":10,"nodeType":"3925","messageId":"3926","endLine":358,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4350","line":358,"column":26,"nodeType":"3925","messageId":"3926","endLine":358,"endColumn":43},{"ruleId":"3923","severity":1,"message":"4351","line":359,"column":10,"nodeType":"3925","messageId":"3926","endLine":359,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4352","line":359,"column":28,"nodeType":"3925","messageId":"3926","endLine":359,"endColumn":47},{"ruleId":"3954","severity":1,"message":"4304","line":374,"column":6,"nodeType":"3956","endLine":374,"endColumn":16,"suggestions":"4353"},{"ruleId":"3923","severity":1,"message":"4354","line":384,"column":9,"nodeType":"3925","messageId":"3926","endLine":384,"endColumn":30},{"ruleId":"3923","severity":1,"message":"4355","line":401,"column":9,"nodeType":"3925","messageId":"3926","endLine":401,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4226","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4095","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4327","line":21,"column":8,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4250","line":36,"column":8,"nodeType":"3925","messageId":"3926","endLine":36,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4045","line":121,"column":22,"nodeType":"3925","messageId":"3926","endLine":121,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4229","line":150,"column":11,"nodeType":"3925","messageId":"3926","endLine":150,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":152,"column":9,"nodeType":"3925","messageId":"3926","endLine":152,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":160,"column":22,"nodeType":"3925","messageId":"3926","endLine":160,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":162,"column":22,"nodeType":"3925","messageId":"3926","endLine":162,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":164,"column":24,"nodeType":"3925","messageId":"3926","endLine":164,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":179,"column":9,"nodeType":"3925","messageId":"3926","endLine":179,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4256","line":206,"column":9,"nodeType":"3925","messageId":"3926","endLine":206,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4356","line":31,"column":7,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":28,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4028","line":14,"column":13,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4262","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4072","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4343","line":16,"column":10,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4238","line":34,"column":8,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":33},{"ruleId":"3923","severity":1,"message":"4357","line":38,"column":10,"nodeType":"3925","messageId":"3926","endLine":38,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4045","line":110,"column":22,"nodeType":"3925","messageId":"3926","endLine":110,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4358","line":110,"column":39,"nodeType":"3925","messageId":"3926","endLine":110,"endColumn":48},{"ruleId":"3923","severity":1,"message":"4164","line":116,"column":9,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4229","line":138,"column":11,"nodeType":"3925","messageId":"3926","endLine":138,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":140,"column":9,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":146,"column":22,"nodeType":"3925","messageId":"3926","endLine":146,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":148,"column":22,"nodeType":"3925","messageId":"3926","endLine":148,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":150,"column":24,"nodeType":"3925","messageId":"3926","endLine":150,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":167,"column":9,"nodeType":"3925","messageId":"3926","endLine":167,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4359","line":18,"column":3,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4344","line":19,"column":3,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4156","line":26,"column":8,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4360","line":35,"column":3,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4155","line":37,"column":8,"nodeType":"3925","messageId":"3926","endLine":37,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4361","line":41,"column":8,"nodeType":"3925","messageId":"3926","endLine":41,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4250","line":44,"column":8,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4302","line":51,"column":3,"nodeType":"3925","messageId":"3926","endLine":51,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4362","line":219,"column":24,"nodeType":"3925","messageId":"3926","endLine":219,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4164","line":223,"column":9,"nodeType":"3925","messageId":"3926","endLine":223,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4363","line":238,"column":5,"nodeType":"3925","messageId":"3926","endLine":238,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4229","line":245,"column":11,"nodeType":"3925","messageId":"3926","endLine":245,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4230","line":247,"column":9,"nodeType":"3925","messageId":"3926","endLine":247,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4231","line":253,"column":22,"nodeType":"3925","messageId":"3926","endLine":253,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4232","line":255,"column":22,"nodeType":"3925","messageId":"3926","endLine":255,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4233","line":257,"column":24,"nodeType":"3925","messageId":"3926","endLine":257,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4234","line":274,"column":9,"nodeType":"3925","messageId":"3926","endLine":274,"endColumn":19},{"ruleId":"3954","severity":1,"message":"4304","line":322,"column":6,"nodeType":"3956","endLine":322,"endColumn":16,"suggestions":"4364"},{"ruleId":"3923","severity":1,"message":"4365","line":2,"column":10,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4365","line":2,"column":10,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4016","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4226","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4027","line":33,"column":8,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4366","line":34,"column":8,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4367","line":35,"column":10,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4368","line":56,"column":11,"nodeType":"3925","messageId":"3926","endLine":56,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4369","line":58,"column":10,"nodeType":"3925","messageId":"3926","endLine":58,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4370","line":62,"column":9,"nodeType":"3925","messageId":"3926","endLine":62,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4016","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4226","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4027","line":33,"column":8,"nodeType":"3925","messageId":"3926","endLine":33,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4366","line":34,"column":8,"nodeType":"3925","messageId":"3926","endLine":34,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4367","line":35,"column":10,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4368","line":63,"column":11,"nodeType":"3925","messageId":"3926","endLine":63,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4369","line":65,"column":10,"nodeType":"3925","messageId":"3926","endLine":65,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4370","line":67,"column":9,"nodeType":"3925","messageId":"3926","endLine":67,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4226","line":6,"column":10,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4371","line":22,"column":10,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4372","line":93,"column":7,"nodeType":"3925","messageId":"3926","endLine":93,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4373","line":99,"column":7,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4106","line":204,"column":11,"nodeType":"3925","messageId":"3926","endLine":204,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4374","line":208,"column":26,"nodeType":"3925","messageId":"3926","endLine":208,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":208,"column":50,"nodeType":"3925","messageId":"3926","endLine":208,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4376","line":216,"column":10,"nodeType":"3925","messageId":"3926","endLine":216,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4377","line":220,"column":10,"nodeType":"3925","messageId":"3926","endLine":220,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4378","line":220,"column":24,"nodeType":"3925","messageId":"3926","endLine":220,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4379","line":228,"column":9,"nodeType":"3925","messageId":"3926","endLine":228,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4226","line":6,"column":3,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4221","line":94,"column":7,"nodeType":"3925","messageId":"3926","endLine":94,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4290","line":129,"column":7,"nodeType":"3925","messageId":"3926","endLine":129,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4044","line":144,"column":11,"nodeType":"3925","messageId":"3926","endLine":144,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4045","line":144,"column":22,"nodeType":"3925","messageId":"3926","endLine":144,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4380","line":144,"column":29,"nodeType":"3925","messageId":"3926","endLine":144,"endColumn":49},{"ruleId":"3923","severity":1,"message":"4374","line":176,"column":26,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":176,"column":50,"nodeType":"3925","messageId":"3926","endLine":176,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4381","line":178,"column":52,"nodeType":"3925","messageId":"3926","endLine":178,"endColumn":58},{"ruleId":"3923","severity":1,"message":"4376","line":186,"column":10,"nodeType":"3925","messageId":"3926","endLine":186,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4377","line":190,"column":10,"nodeType":"3925","messageId":"3926","endLine":190,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4379","line":196,"column":9,"nodeType":"3925","messageId":"3926","endLine":196,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4382","line":204,"column":9,"nodeType":"3925","messageId":"3926","endLine":204,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4383","line":214,"column":9,"nodeType":"3925","messageId":"3926","endLine":214,"endColumn":28},{"ruleId":"3989","severity":1,"message":"4025","line":226,"column":21,"nodeType":"3991","messageId":"3858","endLine":226,"endColumn":23},{"ruleId":"3989","severity":1,"message":"4025","line":278,"column":27,"nodeType":"3991","messageId":"3858","endLine":278,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4384","line":29,"column":3,"nodeType":"3925","messageId":"3926","endLine":29,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4374","line":153,"column":26,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":153,"column":50,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4376","line":163,"column":10,"nodeType":"3925","messageId":"3926","endLine":163,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4377","line":167,"column":10,"nodeType":"3925","messageId":"3926","endLine":167,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4378","line":167,"column":24,"nodeType":"3925","messageId":"3926","endLine":167,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4379","line":173,"column":9,"nodeType":"3925","messageId":"3926","endLine":173,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4374","line":131,"column":26,"nodeType":"3925","messageId":"3926","endLine":131,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":131,"column":50,"nodeType":"3925","messageId":"3926","endLine":131,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4376","line":140,"column":10,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4377","line":144,"column":10,"nodeType":"3925","messageId":"3926","endLine":144,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4379","line":150,"column":9,"nodeType":"3925","messageId":"3926","endLine":150,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4382","line":158,"column":9,"nodeType":"3925","messageId":"3926","endLine":158,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4383","line":168,"column":9,"nodeType":"3925","messageId":"3926","endLine":168,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4226","line":9,"column":3,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4374","line":180,"column":26,"nodeType":"3925","messageId":"3926","endLine":180,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":180,"column":50,"nodeType":"3925","messageId":"3926","endLine":180,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4385","line":184,"column":11,"nodeType":"3925","messageId":"3926","endLine":184,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4247","line":184,"column":29,"nodeType":"3925","messageId":"3926","endLine":184,"endColumn":54},{"ruleId":"3923","severity":1,"message":"4376","line":190,"column":10,"nodeType":"3925","messageId":"3926","endLine":190,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4377","line":194,"column":10,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4378","line":194,"column":24,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4379","line":200,"column":9,"nodeType":"3925","messageId":"3926","endLine":200,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4386","line":216,"column":10,"nodeType":"3925","messageId":"3926","endLine":216,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4387","line":216,"column":16,"nodeType":"3925","messageId":"3926","endLine":216,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4009","line":218,"column":9,"nodeType":"3925","messageId":"3926","endLine":218,"endColumn":19},{"ruleId":"3989","severity":1,"message":"4025","line":231,"column":21,"nodeType":"3991","messageId":"3858","endLine":231,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4303","line":45,"column":7,"nodeType":"3925","messageId":"3926","endLine":45,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4078","line":22,"column":10,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":29},{"ruleId":"3923","severity":1,"message":"4388","line":4,"column":8,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4044","line":128,"column":11,"nodeType":"3925","messageId":"3926","endLine":128,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4374","line":130,"column":26,"nodeType":"3925","messageId":"3926","endLine":130,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":130,"column":50,"nodeType":"3925","messageId":"3926","endLine":130,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4377","line":142,"column":10,"nodeType":"3925","messageId":"3926","endLine":142,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4378","line":142,"column":24,"nodeType":"3925","messageId":"3926","endLine":142,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4388","line":4,"column":8,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4044","line":131,"column":11,"nodeType":"3925","messageId":"3926","endLine":131,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4374","line":133,"column":26,"nodeType":"3925","messageId":"3926","endLine":133,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":133,"column":50,"nodeType":"3925","messageId":"3926","endLine":133,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4377","line":145,"column":10,"nodeType":"3925","messageId":"3926","endLine":145,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4378","line":145,"column":24,"nodeType":"3925","messageId":"3926","endLine":145,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4389","line":93,"column":7,"nodeType":"3925","messageId":"3926","endLine":93,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4390","line":104,"column":7,"nodeType":"3925","messageId":"3926","endLine":104,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4374","line":153,"column":26,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":153,"column":50,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4391","line":159,"column":11,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4260","line":159,"column":21,"nodeType":"3925","messageId":"3926","endLine":159,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4376","line":167,"column":10,"nodeType":"3925","messageId":"3926","endLine":167,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4377","line":171,"column":10,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4378","line":171,"column":24,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":39},{"ruleId":"3923","severity":1,"message":"4379","line":177,"column":9,"nodeType":"3925","messageId":"3926","endLine":177,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4392","line":1,"column":20,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4393","line":9,"column":7,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4394","line":10,"column":7,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4230","line":87,"column":9,"nodeType":"3925","messageId":"3926","endLine":87,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4395","line":93,"column":10,"nodeType":"3925","messageId":"3926","endLine":93,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4396","line":93,"column":23,"nodeType":"3925","messageId":"3926","endLine":93,"endColumn":37},{"ruleId":"3954","severity":1,"message":"4397","line":100,"column":6,"nodeType":"3956","endLine":100,"endColumn":16,"suggestions":"4398","suppressions":"4399"},{"ruleId":"3923","severity":1,"message":"4400","line":4,"column":10,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4269","line":6,"column":10,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4043","line":8,"column":10,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4253","line":12,"column":9,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4401","line":13,"column":22,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4392","line":1,"column":20,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4299","line":2,"column":10,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4402","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4393","line":9,"column":7,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4394","line":10,"column":7,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4395","line":62,"column":10,"nodeType":"3925","messageId":"3926","endLine":62,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4396","line":62,"column":23,"nodeType":"3925","messageId":"3926","endLine":62,"endColumn":37},{"ruleId":"3954","severity":1,"message":"4397","line":69,"column":6,"nodeType":"3956","endLine":69,"endColumn":16,"suggestions":"4403","suppressions":"4404"},{"ruleId":"3923","severity":1,"message":"4043","line":2,"column":17,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3992","line":21,"column":10,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4102","line":21,"column":23,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4405","line":57,"column":7,"nodeType":"3925","messageId":"3926","endLine":57,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4374","line":84,"column":28,"nodeType":"3925","messageId":"3926","endLine":84,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4273","line":1,"column":8,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4028","line":21,"column":13,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4406","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4274","line":31,"column":7,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4407","line":91,"column":7,"nodeType":"3925","messageId":"3926","endLine":91,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4408","line":25,"column":3,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":24},{"ruleId":"3923","severity":1,"message":"4409","line":105,"column":7,"nodeType":"3925","messageId":"3926","endLine":105,"endColumn":15},{"ruleId":"4410","severity":1,"message":"4411","line":120,"column":5,"nodeType":"4412","messageId":"4413","endLine":127,"endColumn":6},{"ruleId":"4410","severity":1,"message":"4411","line":141,"column":5,"nodeType":"4412","messageId":"4413","endLine":148,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4273","line":1,"column":8,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4028","line":21,"column":13,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4274","line":31,"column":7,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4414","line":8,"column":3,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4014","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4015","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4016","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4012","line":18,"column":8,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4289","line":44,"column":7,"nodeType":"3925","messageId":"3926","endLine":44,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4290","line":67,"column":7,"nodeType":"3925","messageId":"3926","endLine":67,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4219","line":98,"column":11,"nodeType":"3925","messageId":"3926","endLine":98,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4291","line":100,"column":10,"nodeType":"3925","messageId":"3926","endLine":100,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4415","line":102,"column":9,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4416","line":7,"column":8,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4417","line":10,"column":10,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4418","line":10,"column":22,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":36},{"ruleId":"3923","severity":1,"message":"4214","line":11,"column":10,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4215","line":11,"column":18,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":23},{"ruleId":"3923","severity":1,"message":"3960","line":13,"column":8,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4216","line":14,"column":8,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4217","line":102,"column":11,"nodeType":"3925","messageId":"3926","endLine":102,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4218","line":103,"column":12,"nodeType":"3925","messageId":"3926","endLine":103,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4075","line":103,"column":19,"nodeType":"3925","messageId":"3926","endLine":103,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4219","line":104,"column":13,"nodeType":"3925","messageId":"3926","endLine":104,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4014","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4015","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4016","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4012","line":18,"column":8,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4289","line":43,"column":7,"nodeType":"3925","messageId":"3926","endLine":43,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4290","line":66,"column":7,"nodeType":"3925","messageId":"3926","endLine":66,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4219","line":95,"column":11,"nodeType":"3925","messageId":"3926","endLine":95,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4291","line":97,"column":10,"nodeType":"3925","messageId":"3926","endLine":97,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4415","line":99,"column":9,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4327","line":19,"column":8,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4405","line":58,"column":7,"nodeType":"3925","messageId":"3926","endLine":58,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4374","line":112,"column":26,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":112,"column":50,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4226","line":5,"column":10,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4095","line":5,"column":15,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4047","line":11,"column":3,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4090","line":17,"column":8,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4419","line":30,"column":7,"nodeType":"3925","messageId":"3926","endLine":30,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4374","line":99,"column":26,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":99,"column":50,"nodeType":"3925","messageId":"3926","endLine":99,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4370","line":124,"column":9,"nodeType":"3925","messageId":"3926","endLine":124,"endColumn":26},{"ruleId":"3923","severity":1,"message":"3960","line":35,"column":8,"nodeType":"3925","messageId":"3926","endLine":35,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4374","line":136,"column":26,"nodeType":"3925","messageId":"3926","endLine":136,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4420","line":141,"column":5,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4421","line":149,"column":5,"nodeType":"3925","messageId":"3926","endLine":149,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4013","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":9},{"ruleId":"3923","severity":1,"message":"4016","line":9,"column":3,"nodeType":"3925","messageId":"3926","endLine":9,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4226","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4422","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4414","line":17,"column":3,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4423","line":18,"column":3,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4366","line":23,"column":8,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4327","line":24,"column":8,"nodeType":"3925","messageId":"3926","endLine":24,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4027","line":26,"column":8,"nodeType":"3925","messageId":"3926","endLine":26,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4424","line":27,"column":8,"nodeType":"3925","messageId":"3926","endLine":27,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4425","line":28,"column":8,"nodeType":"3925","messageId":"3926","endLine":28,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4426","line":68,"column":7,"nodeType":"3925","messageId":"3926","endLine":68,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4374","line":95,"column":26,"nodeType":"3925","messageId":"3926","endLine":95,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":95,"column":50,"nodeType":"3925","messageId":"3926","endLine":95,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4254","line":114,"column":10,"nodeType":"3925","messageId":"3926","endLine":114,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4369","line":116,"column":10,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4427","line":118,"column":9,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4255","line":122,"column":9,"nodeType":"3925","messageId":"3926","endLine":122,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4370","line":126,"column":9,"nodeType":"3925","messageId":"3926","endLine":126,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4428","line":131,"column":9,"nodeType":"3925","messageId":"3926","endLine":131,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4299","line":7,"column":10,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4178","line":14,"column":5,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4016","line":17,"column":5,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4366","line":23,"column":8,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4429","line":25,"column":10,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4430","line":63,"column":7,"nodeType":"3925","messageId":"3926","endLine":63,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4431","line":71,"column":7,"nodeType":"3925","messageId":"3926","endLine":71,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4432","line":79,"column":7,"nodeType":"3925","messageId":"3926","endLine":79,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4374","line":151,"column":9,"nodeType":"3925","messageId":"3926","endLine":151,"endColumn":18},{"ruleId":"3923","severity":1,"message":"4375","line":153,"column":9,"nodeType":"3925","messageId":"3926","endLine":153,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4433","line":157,"column":9,"nodeType":"3925","messageId":"3926","endLine":157,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4434","line":161,"column":9,"nodeType":"3925","messageId":"3926","endLine":161,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4254","line":169,"column":12,"nodeType":"3925","messageId":"3926","endLine":169,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4427","line":173,"column":11,"nodeType":"3925","messageId":"3926","endLine":173,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4177","line":13,"column":3,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":7},{"ruleId":"3923","severity":1,"message":"4435","line":22,"column":10,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4225","line":31,"column":18,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":28},{"ruleId":"3923","severity":1,"message":"4000","line":31,"column":30,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":41},{"ruleId":"3923","severity":1,"message":"4299","line":31,"column":43,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":54},{"ruleId":"3923","severity":1,"message":"4436","line":32,"column":8,"nodeType":"3925","messageId":"3926","endLine":32,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4437","line":181,"column":7,"nodeType":"3925","messageId":"3926","endLine":181,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4438","line":197,"column":7,"nodeType":"3925","messageId":"3926","endLine":197,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4439","line":203,"column":7,"nodeType":"3925","messageId":"3926","endLine":203,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4044","line":254,"column":11,"nodeType":"3925","messageId":"3926","endLine":254,"endColumn":20},{"ruleId":"3923","severity":1,"message":"3987","line":339,"column":26,"nodeType":"3925","messageId":"3926","endLine":339,"endColumn":38},{"ruleId":"3923","severity":1,"message":"3988","line":339,"column":40,"nodeType":"3925","messageId":"3926","endLine":339,"endColumn":58},{"ruleId":"3923","severity":1,"message":"3994","line":339,"column":60,"nodeType":"3925","messageId":"3926","endLine":339,"endColumn":67},{"ruleId":"3923","severity":1,"message":"4016","line":10,"column":3,"nodeType":"3925","messageId":"3926","endLine":10,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4047","line":12,"column":3,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4090","line":18,"column":8,"nodeType":"3925","messageId":"3926","endLine":18,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4366","line":19,"column":8,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4327","line":20,"column":8,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4027","line":21,"column":8,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4374","line":112,"column":26,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":112,"column":50,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4440","line":122,"column":5,"nodeType":"3925","messageId":"3926","endLine":122,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4054","line":129,"column":9,"nodeType":"3925","messageId":"3926","endLine":129,"endColumn":14},{"ruleId":"3923","severity":1,"message":"4369","line":131,"column":10,"nodeType":"3925","messageId":"3926","endLine":131,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4427","line":133,"column":9,"nodeType":"3925","messageId":"3926","endLine":133,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4370","line":141,"column":9,"nodeType":"3925","messageId":"3926","endLine":141,"endColumn":26},{"ruleId":"3923","severity":1,"message":"4428","line":146,"column":9,"nodeType":"3925","messageId":"3926","endLine":146,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4356","line":31,"column":7,"nodeType":"3925","messageId":"3926","endLine":31,"endColumn":16},{"ruleId":"3923","severity":1,"message":"4016","line":6,"column":5,"nodeType":"3925","messageId":"3926","endLine":6,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4015","line":7,"column":5,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":11},{"ruleId":"3923","severity":1,"message":"4441","line":19,"column":12,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4442","line":21,"column":11,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":32},{"ruleId":"4443","severity":1,"message":"4444","line":98,"column":13,"nodeType":"4445","endLine":98,"endColumn":99},{"ruleId":"3923","severity":1,"message":"4226","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4327","line":20,"column":8,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4027","line":22,"column":8,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4044","line":112,"column":11,"nodeType":"3925","messageId":"3926","endLine":112,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4375","line":116,"column":50,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":61},{"ruleId":"4443","severity":1,"message":"4444","line":234,"column":11,"nodeType":"4445","endLine":234,"endColumn":52},{"ruleId":"4443","severity":1,"message":"4444","line":251,"column":11,"nodeType":"4445","endLine":251,"endColumn":56},{"ruleId":"3923","severity":1,"message":"4027","line":22,"column":8,"nodeType":"3925","messageId":"3926","endLine":22,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4374","line":118,"column":28,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4375","line":118,"column":52,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":63},{"ruleId":"3923","severity":1,"message":"4226","line":14,"column":3,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4327","line":19,"column":8,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4027","line":21,"column":8,"nodeType":"3925","messageId":"3926","endLine":21,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4374","line":116,"column":26,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":116,"column":50,"nodeType":"3925","messageId":"3926","endLine":116,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4446","line":118,"column":21,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4447","line":118,"column":41,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":44},{"ruleId":"3923","severity":1,"message":"4448","line":118,"column":46,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":49},{"ruleId":"3923","severity":1,"message":"4449","line":118,"column":51,"nodeType":"3925","messageId":"3926","endLine":118,"endColumn":67},{"ruleId":"4450","severity":1,"message":"4451","line":220,"column":11,"nodeType":"4452","messageId":"4453","endLine":220,"endColumn":40},{"ruleId":"3923","severity":1,"message":"4095","line":15,"column":3,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":19},{"ruleId":"3923","severity":1,"message":"4226","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":6},{"ruleId":"3923","severity":1,"message":"4027","line":23,"column":8,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4044","line":130,"column":11,"nodeType":"3925","messageId":"3926","endLine":130,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4454","line":130,"column":33,"nodeType":"3925","messageId":"3926","endLine":130,"endColumn":48},{"ruleId":"3923","severity":1,"message":"4374","line":140,"column":26,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":35},{"ruleId":"3923","severity":1,"message":"4375","line":140,"column":50,"nodeType":"3925","messageId":"3926","endLine":140,"endColumn":61},{"ruleId":"3923","severity":1,"message":"4455","line":13,"column":9,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":22},{"ruleId":"3923","severity":1,"message":"4456","line":15,"column":9,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4457","line":17,"column":9,"nodeType":"3925","messageId":"3926","endLine":17,"endColumn":21},{"ruleId":"4443","severity":1,"message":"4444","line":41,"column":6,"nodeType":"4445","endLine":41,"endColumn":13},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4458","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4459","line":40,"column":9,"nodeType":"3925","messageId":"3926","endLine":40,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4219","line":194,"column":11,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4090","line":7,"column":8,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4393","line":13,"column":7,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4394","line":14,"column":7,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4219","line":80,"column":11,"nodeType":"3925","messageId":"3926","endLine":80,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4230","line":81,"column":9,"nodeType":"3925","messageId":"3926","endLine":81,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4395","line":87,"column":10,"nodeType":"3925","messageId":"3926","endLine":87,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4396","line":87,"column":23,"nodeType":"3925","messageId":"3926","endLine":87,"endColumn":37},{"ruleId":"3954","severity":1,"message":"4397","line":94,"column":6,"nodeType":"3956","endLine":94,"endColumn":16,"suggestions":"4460","suppressions":"4461"},{"ruleId":"3923","severity":1,"message":"4072","line":7,"column":3,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":8},{"ruleId":"3923","severity":1,"message":"4458","line":16,"column":3,"nodeType":"3925","messageId":"3926","endLine":16,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4459","line":40,"column":9,"nodeType":"3925","messageId":"3926","endLine":40,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4219","line":194,"column":11,"nodeType":"3925","messageId":"3926","endLine":194,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4090","line":7,"column":8,"nodeType":"3925","messageId":"3926","endLine":7,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4393","line":13,"column":7,"nodeType":"3925","messageId":"3926","endLine":13,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4394","line":14,"column":7,"nodeType":"3925","messageId":"3926","endLine":14,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4219","line":80,"column":11,"nodeType":"3925","messageId":"3926","endLine":80,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4230","line":81,"column":9,"nodeType":"3925","messageId":"3926","endLine":81,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4395","line":87,"column":10,"nodeType":"3925","messageId":"3926","endLine":87,"endColumn":21},{"ruleId":"3923","severity":1,"message":"4396","line":87,"column":23,"nodeType":"3925","messageId":"3926","endLine":87,"endColumn":37},{"ruleId":"3954","severity":1,"message":"4397","line":94,"column":6,"nodeType":"3956","endLine":94,"endColumn":16,"suggestions":"4462","suppressions":"4463"},{"ruleId":"3923","severity":1,"message":"4464","line":5,"column":8,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4219","line":15,"column":11,"nodeType":"3925","messageId":"3926","endLine":15,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4414","line":8,"column":3,"nodeType":"3925","messageId":"3926","endLine":8,"endColumn":12},{"ruleId":"3923","severity":1,"message":"4095","line":2,"column":27,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":43},{"ruleId":"3923","severity":1,"message":"4102","line":5,"column":23,"nodeType":"3925","messageId":"3926","endLine":5,"endColumn":34},{"ruleId":"3923","severity":1,"message":"4219","line":60,"column":11,"nodeType":"3925","messageId":"3926","endLine":60,"endColumn":20},{"ruleId":"3923","severity":1,"message":"4465","line":62,"column":11,"nodeType":"3925","messageId":"3926","endLine":62,"endColumn":17},{"ruleId":"3923","severity":1,"message":"4225","line":3,"column":18,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":28},{"ruleId":"3923","severity":1,"message":"3987","line":213,"column":30,"nodeType":"3925","messageId":"3926","endLine":213,"endColumn":42},{"ruleId":"3923","severity":1,"message":"3988","line":213,"column":44,"nodeType":"3925","messageId":"3926","endLine":213,"endColumn":62},{"ruleId":"3923","severity":1,"message":"3994","line":213,"column":64,"nodeType":"3925","messageId":"3926","endLine":213,"endColumn":71},{"ruleId":"3923","severity":1,"message":"4045","line":88,"column":22,"nodeType":"3925","messageId":"3926","endLine":88,"endColumn":27},{"ruleId":"3954","severity":1,"message":"3998","line":107,"column":6,"nodeType":"3956","endLine":107,"endColumn":16,"suggestions":"4466"},{"ruleId":"3923","severity":1,"message":"3967","line":23,"column":3,"nodeType":"3925","messageId":"3926","endLine":23,"endColumn":31},{"ruleId":"3923","severity":1,"message":"4045","line":171,"column":22,"nodeType":"3925","messageId":"3926","endLine":171,"endColumn":27},{"ruleId":"3923","severity":1,"message":"4467","line":173,"column":11,"nodeType":"3925","messageId":"3926","endLine":173,"endColumn":32},{"ruleId":"3923","severity":1,"message":"4045","line":86,"column":22,"nodeType":"3925","messageId":"3926","endLine":86,"endColumn":27},{"ruleId":"3954","severity":1,"message":"3998","line":100,"column":6,"nodeType":"3956","endLine":100,"endColumn":16,"suggestions":"4468"},{"ruleId":"3923","severity":1,"message":"4016","line":4,"column":41,"nodeType":"3925","messageId":"3926","endLine":4,"endColumn":49},{"ruleId":"3923","severity":1,"message":"4469","line":25,"column":10,"nodeType":"3925","messageId":"3926","endLine":25,"endColumn":23},{"ruleId":"3923","severity":1,"message":"4034","line":1,"column":17,"nodeType":"3925","messageId":"3926","endLine":1,"endColumn":25},{"ruleId":"3923","severity":1,"message":"4045","line":11,"column":24,"nodeType":"3925","messageId":"3926","endLine":11,"endColumn":29},{"ruleId":"3954","severity":1,"message":"4397","line":32,"column":6,"nodeType":"3956","endLine":32,"endColumn":16,"suggestions":"4470","suppressions":"4471"},{"ruleId":"3923","severity":1,"message":"4402","line":2,"column":10,"nodeType":"3925","messageId":"3926","endLine":2,"endColumn":15},{"ruleId":"3923","severity":1,"message":"4472","line":3,"column":24,"nodeType":"3925","messageId":"3926","endLine":3,"endColumn":37},{"ruleId":"3923","severity":1,"message":"4473","line":12,"column":9,"nodeType":"3925","messageId":"3926","endLine":12,"endColumn":16},{"ruleId":"3954","severity":1,"message":"4397","line":32,"column":6,"nodeType":"3956","endLine":32,"endColumn":16,"suggestions":"4474","suppressions":"4475"},{"ruleId":"3923","severity":1,"message":"4476","line":20,"column":67,"nodeType":"3925","messageId":"3926","endLine":20,"endColumn":72},{"ruleId":"3923","severity":1,"message":"4476","line":19,"column":61,"nodeType":"3925","messageId":"3926","endLine":19,"endColumn":66},{"ruleId":"3923","severity":1,"message":"4477","line":83,"column":11,"nodeType":"3925","messageId":"3926","endLine":83,"endColumn":21},"no-dupe-keys","Duplicate key 'help'.","ObjectExpression","unexpected","Duplicate key 'description_en'.","Duplicate key 'description_ar'.","Duplicate key 'branch_tax_card'.","Duplicate key 'branch_manager'.","Duplicate key 'branch'.","Duplicate key 'employee'.","Duplicate key 'regional_manager'.","Duplicate key 'owner'.","Duplicate key 'chasher'.","Duplicate key 'employee_address'.","Duplicate key 'position_is_required'.","Duplicate key 'employee_position'.","Duplicate key 'employee_branch'.","Duplicate key 'add_employee'.","Duplicate key 'branch_is_required'.","Duplicate key 'employee_phone'.","Duplicate key 'delete_employee_information'.","Duplicate key 'edit_employee_information'.","Duplicate key 'confirm_edit'.","Duplicate key 'branch_name_en'.","Duplicate key 'branch_name_ar'.","Duplicate key 'preview'.","Duplicate key 'total_offers'.","Duplicate key 'add_new_category'.","Duplicate key 'arabic_category_name_is_required'.","Duplicate key 'category_name_is_required'.","Duplicate key 'Help'.","Duplicate key 'profile_picture_is_required'.","Duplicate key 'profile_picture'.","Duplicate key 'wallet_is_required'.","Duplicate key 'wallet'.","Duplicate key 'select_item'.","Duplicate key 'price_is_required'.","Duplicate key 'logout'.","Duplicate key 'yes'.","Duplicate key 'branch_type'.","Duplicate key 'edit_personal_information'.","Duplicate key 'edit_meal'.","Duplicate key 'branch_license'.","Duplicate key 'phoneNo1'.","Duplicate key 'phoneNo2'.","Duplicate key 'branch_description_en_is_required'.","Duplicate key 'branch_description_ar_is_required'.","Duplicate key 'branch_tax_card_is_required'.","Duplicate key 'phone_number1_is_required'.","Duplicate key 'phone_number2_is_required'.","Duplicate key 'total_balance'.","Duplicate key 'meal_name_ar_is_required'.","Duplicate key 'meal_name_en_is_required'.","Duplicate key 'description_en_is_required'.","Duplicate key 'description_ar_is_required'.","Duplicate key 'categories_is_required'.","Duplicate key 'calories_is_required'.","Duplicate key 'prepration_time_is_required'.","Duplicate key 'meal_photo_required'.","Duplicate key 'first_meal_name_is_required'.","Duplicate key 'second_meal_name_is_required'.","Duplicate key 'first_meal_name'.","Duplicate key 'second_meal_name'.","Duplicate key 'confirm_item'.","Duplicate key 'Edit_meal'.","Duplicate key 'order_id'.","Duplicate key 'delivery_name'.","Duplicate key 'invoice_statue'.","no-unused-vars","'AddNewItem' is defined but never used.","Identifier","unusedVar","'AddMarketItem' is defined but never used.","'AddMarketOffer' is defined but never used.","'AddNewMeal' is defined but never used.","'Finance' is defined but never used.","'Help' is defined but never used.","'HelpPage' is defined but never used.","'ProfilePageEmloyee' is defined but never used.","'PromoteNow' is defined but never used.","'ProfilePage' is defined but never used.","'OpportunityCenterPage' is defined but never used.","'OpportunityCenter' is defined but never used.","'Users' is defined but never used.","'ContactUsEmployee' is defined but never used.","'ContactUsAdmin' is defined but never used.","'EmployeesPage' is defined but never used.","'EditBranchPage' is defined but never used.","'EditEmployeeInfoPage' is defined but never used.","'PromotePage' is defined but never used.","'EditPersonalInfoPage' is defined but never used.","'PromoteNowPage' is defined but never used.","'EditProfileInfoPage' is defined but never used.","'EmployeeChangeEmailPage' is defined but never used.","'EmployeeChangePasswordPage' is defined but never used.","'EmployeeChangePhonePage' is defined but never used.","'EmployeeVerifyEmailPage' is defined but never used.","'ItemDetailsPage' is defined but never used.","'AuthGuard' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onChangeDirectionByLang'. Either include it or remove the dependency array.","ArrayExpression",["4478"],["4479"],"'ToastContainer' is defined but never used.","'moment' is defined but never used.","'getRestaurantCategories' is defined but never used.","'ROOTS_DASHBOARD' is assigned a value but never used.","Duplicate key 'finance'.","'adminHighestRatedBranch' is defined but never used.","'getAllRestaurantMonthlyEarnings' is defined but never used.","'getAnnualEarningsAnalysis' is defined but never used.","'getRestaurantMonthlyEarnings' is defined but never used.","'getMarketCustomersNumber' is defined but never used.","'addbranch' is defined but never used.","'getMostRestaurantSellingCities' is defined but never used.","'getRestaurantAnnualEarningsAnalysis' is defined but never used.","'getMarketHighestBranchesSales' is defined but never used.","'Navigate' is defined but never used.","'LoadingScreen' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'isInitialized' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'isContrastBold', 'outerTheme.customShadows.z4', and 'outerTheme.palette.grey'. Either include them or remove the dependency array.",["4480"],["4481"],"'React' is defined but never used.","'Yup' is defined but never used.","'yupResolver' is defined but never used.","'RHFTextField' is defined but never used.","'titleSx' is assigned a value but never used.","'reset' is assigned a value but never used.","'setError' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'isSubmitSuccessful' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'useDispatch' is defined but never used.","'menuRestaurent' is assigned a value but never used.","'isDirty' is assigned a value but never used.","'formData' is assigned a value but never used.","'useTheme' is defined but never used.","'ExpireDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'branchId'. Either include it or remove the dependency array.",["4482"],"'useLocation' is defined but never used.","'isLoadingAddProduct' is assigned a value but never used.","'setDisplayType' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'RestaurantProductId' and 'branchId'. Either include them or remove the dependency array.",["4483"],"'toast' is defined but never used.","'transform' is defined but never used.","'ImageUrl' is assigned a value but never used.","'setImageUrl' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'timeRegEx' is assigned a value but never used.",["4484"],"'ArrowDropDownIcon' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'deleteRestaurentProduct' is defined but never used.","'getRestaurantMenu' is defined but never used.","'notAvailableSelectSx' is assigned a value but never used.","'userNameStyle' is assigned a value but never used.","'orderStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchId' and 'mealId'. Either include them or remove the dependency array.",["4485"],"'onChangeStatusHandler' is assigned a value but never used.","Expected '===' and instead saw '=='.","'AddComboOfferMeal' is defined but never used.","'Image' is defined but never used.","'URLS' is defined but never used.","'isEditCombo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ComboId', 'branchId', 'comboOfferDetails', and 'state?.id'. Either include them or remove the dependency array.",["4486"],"'confirmPasswordCode' is defined but never used.","'resendPasswordCode' is defined but never used.","'useState' is defined but never used.","'json' is defined but never used.","'InputAdornment' is defined but never used.","'PATH_AUTH' is defined but never used.","'UserAddSuccessfully' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["4487"],"React Hook useEffect has a missing dependency: 'bankAccounts'. Either include it or remove the dependency array.",["4488"],"'useEffect' is defined but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'addCategorySuccessfully' is assigned a value but never used.","'IconButton' is defined but never used.","'transparentBorderTxtField' is assigned a value but never used.","'subTitleSx' is assigned a value but never used.","'highLightTextSx' is assigned a value but never used.","'selectItemHolderSx' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchId', 'dispatch', and 'productsForOffer'. Either include them or remove the dependency array.",["4489"],"'theme' is assigned a value but never used.","'setSelectedOfferType' is assigned a value but never used.","'mealItems' is assigned a value but never used.","'setMealItems' is assigned a value but never used.","'watchPic' is assigned a value but never used.",["4490"],"'addRestaurantCategory' is defined but never used.","'OutlinedInput' is defined but never used.","'containerSx' is assigned a value but never used.","'allBranches' is assigned a value but never used.","'isAdded' is assigned a value but never used.","'selectedNames' is assigned a value but never used.","'setSelectedNames' is assigned a value but never used.","'valueType' is assigned a value but never used.","'watchRole' is assigned a value but never used.","'FacilityIds' is assigned a value but never used.","'DateOfBirht' is assigned a value but never used.","'addFacilityAdmin' is defined but never used.","'Stack' is defined but never used.","'Switch' is defined but never used.",["4491"],"'setValue' is assigned a value but never used.","'UserList' is defined but never used.","'AddUserModal' is defined but never used.","'getRestaurantAdmins' is defined but never used.","'getMarketAdmins' is defined but never used.",["4492"],"'setMarketSubCategoryId' is assigned a value but never used.","'watchImageUrl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchId' and 'dispatch'. Either include them or remove the dependency array.",["4493"],"'addMarketSubCategory' is defined but never used.",["4494"],"'MarketCategoryList' is defined but never used.",["4495"],["4496"],"'Iconify' is defined but never used.","'MyQuestions' is defined but never used.","'MyMeeting' is defined but never used.","'addMarketProduct' is defined but never used.",["4497"],"'CircularProgress' is defined but never used.","'ProtectionSection' is defined but never used.","'tr' is defined but never used.","'myQuestion' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'AdminId'. Either include it or remove the dependency array.",["4498"],"'useRef' is defined but never used.","'useSelector' is defined but never used.","'setEmployeeData' is defined but never used.","'employeeData' is assigned a value but never used.","'postIsSuccessful' is assigned a value but never used.","'branchId' is assigned a value but never used.",["4499"],"'LineChartData' is assigned a value but never used.","'adminData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchId' and 'currentDate'. Either include them or remove the dependency array.",["4500"],"'getTotalOrdersNumInDetails' is defined but never used.","'CollapsibleTable' is defined but never used.","'ordersDetails' is assigned a value but never used.",["4501"],"'getResturantMonthlyEarnings' is defined but never used.","'pendingOrder' is assigned a value but never used.","'isLoadingPendingOrder' is assigned a value but never used.","'mostSelling' is assigned a value but never used.","'isLoadingmostSelling' is assigned a value but never used.","'resturantReview' is assigned a value but never used.","'isLoadingresturantReview' is assigned a value but never used.","'restaurantId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'MarketId', 'branchId', 'marketId', and 'resturantId'. Either include them or remove the dependency array.",["4502"],"'useParams' is defined but never used.","'getResturantInfo' is defined but never used.","'getMarketBasicInfo' is defined but never used.","'avatarStyle' is assigned a value but never used.","'marketInfo' is assigned a value but never used.","'restaurantInfo' is assigned a value but never used.","'isLoadingRestaurantInfo' is assigned a value but never used.",["4503"],"'mainConatinerStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchId', 'currentDate', and 'previoustDate'. Either include them or remove the dependency array.",["4504"],"'AdminCard' is defined but never used.","'LowestRate' is defined but never used.","'adminLowestRatedBranch' is defined but never used.","'getRestaurantChainReview' is defined but never used.","'lowestRateBransh' is assigned a value but never used.",["4505"],"'getResturantChainSales' is defined but never used.","'BorderLinearProgress2' is assigned a value but never used.","'BorderLinearProgress3' is assigned a value but never used.","'isLoadingMostSellingCities' is assigned a value but never used.","'FacilityTypes' is assigned a value but never used.","'FacilityType' is assigned a value but never used.","'PhotoName' is assigned a value but never used.","'CoverPhotoName' is assigned a value but never used.","'CommercialRegisterName' is assigned a value but never used.","'TaxLicenseName' is assigned a value but never used.",["4506"],"'errors' is assigned a value but never used.","'Pagination' is defined but never used.","'PaginationItem' is defined but never used.","'Spinner' is defined but never used.","'isLoadingHighestIncomeBranchesSales' is assigned a value but never used.","'isLoadingRestaurentsHighestIncome' is assigned a value but never used.","'restaurantBranchesIncome' is assigned a value but never used.","'highestRestaurentsBranchesSales' is assigned a value but never used.","'isLoadingHighestRestaurentsBranchesSales' is assigned a value but never used.","'HighestBranchesSales' is assigned a value but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialBranch?.id'. Either include it or remove the dependency array.",["4507"],"'getRestaurantBranchesIncome' is defined but never used.","'getMarketHighestIncome' is defined but never used.","'getRestaurantCustomerNumber' is defined but never used.","'getRestaurantMostSellingCities' is defined but never used.","'getRestaurantReviewNumber' is defined but never used.","'months' is assigned a value but never used.","'orderNumbers' is assigned a value but never used.","'reviewNumbers' is assigned a value but never used.","'Spinner' is assigned a value but never used.",["4508"],"'Grid' is defined but never used.","'Divider' is defined but never used.","'PendingBranchesList' is defined but never used.","'PendingBranchesList2' is defined but never used.","'AllBranchesSection' is defined but never used.","'BorderLinearProgress' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'dispatch'. Either exclude it or remove the dependency array. Outer scope values like 'dispatch' aren't valid dependencies because mutating them doesn't re-render the component.",["4509"],"'watch' is assigned a value but never used.","'state' is assigned a value but never used.","'blueStyle' is assigned a value but never used.","'greenStyle' is assigned a value but never used.","'yellowStyle' is assigned a value but never used.","'genderOptions' is assigned a value but never used.","'ProfilePhoto' is assigned a value but never used.",["4510"],"'Alert' is defined but never used.","'fileFieldBorderStyle' is assigned a value but never used.","'genderTextSx' is assigned a value but never used.","'genderHolderSx' is assigned a value but never used.","'labelSx' is assigned a value but never used.","'CountryCode' is assigned a value but never used.","'ProfilePicture' is assigned a value but never used.","'ProfilePictureName' is assigned a value but never used.","'AddressPhoneNumber' is assigned a value but never used.","'AddressName' is assigned a value but never used.","'isSubmitAdmin' is assigned a value but never used.",["4511"],"react-hooks/rules-of-hooks","React Hook \"useMediaQuery\" cannot be called inside a callback. React Hooks must be called in a React function component or a custom React Hook function.",["4512"],"React Hook useEffect has missing dependencies: 'onCloseNav' and 'openNav'. Either include them or remove the dependency array. If 'onCloseNav' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["4513"],["4514"],["4515"],["4516"],"'handleClick' is defined but never used.","'Dialog' is defined but never used.","'Modal' is defined but never used.","'dayjs' is defined but never used.","'today' is assigned a value but never used.","'value' is assigned a value but never used.","'translate' is assigned a value but never used.","'nameStyle' is assigned a value but never used.","'imgStyle' is assigned a value but never used.","'rateHolderSx' is assigned a value but never used.","'startIconSx' is assigned a value but never used.","'rateSx' is assigned a value but never used.","'RouterLink' is defined but never used.","'Box' is defined but never used.","'_MenuList' is defined but never used.","'Header' is defined but never used.","'themeStretch' is assigned a value but never used.","'navigate' is assigned a value but never used.","'setFilterName' is assigned a value but never used.","'setFilterRole' is assigned a value but never used.","'setFilterStatus' is assigned a value but never used.","'isFiltered' is assigned a value but never used.",["4517"],"'_MenuList2' is defined but never used.","'MenuTableRow2' is defined but never used.","'TablePaginationCustomized' is defined but never used.","'offersRestaurent' is assigned a value but never used.","'isLoadingOffers' is assigned a value but never used.",["4518"],"'marketHighestSellingProduct' is assigned a value but never used.","'isLoadingMarketHighestSelling' is assigned a value but never used.","'_MenuList3' is defined but never used.","'MenuTableRow3' is defined but never used.",["4519"],"'isLoadingmarketCategories' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'marketId'. Either include it or remove the dependency array.",["4520"],"'TableTopSection' is defined but never used.","'cancelBtnSx' is assigned a value but never used.","'confirmBtnSx' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'openConfirm' is assigned a value but never used.","'handleCloseConfirm' is assigned a value but never used.","'handleDeleteRows' is assigned a value but never used.","'useLocales' is defined but never used.","'axios' is defined but never used.","'_Products' is defined but never used.","'isLoadingProduct' is assigned a value but never used.",["4521"],"'Typography' is defined but never used.","'MeetingInfo' is defined but never used.","'BtnSx' is assigned a value but never used.","'secondTxtSx' is assigned a value but never used.","'bookMeet' is assigned a value but never used.","'setBookMeet' is assigned a value but never used.","'contentStyle' is assigned a value but never used.","'dispatch' is defined but never used.","'PaymentCard' is defined but never used.","'boldTextSx' is assigned a value but never used.","'paymentCards' is assigned a value but never used.","'PropTypes' is defined but never used.","'useStyles' is assigned a value but never used.","'TextField' is defined but never used.","'txtFieldBorderStyle' is assigned a value but never used.","'markers' is assigned a value but never used.","'currLocation' is assigned a value but never used.","'setCurrLocation' is assigned a value but never used.","'currLocationJs' is assigned a value but never used.","'onMarkerClick' is assigned a value but never used.","'onMapClick' is assigned a value but never used.","'persentTextSx' is assigned a value but never used.","'smallTextSx' is assigned a value but never used.","'_financeTable' is defined but never used.","'adminInvoices' is defined but never used.","'LocalizationProvider' is defined but never used.","'getFacilityWalletBalance' is defined but never used.","'selectSx' is assigned a value but never used.","'titleStyle' is assigned a value but never used.","'rows' is assigned a value but never used.","'setRows' is assigned a value but never used.","'reviewRows' is assigned a value but never used.","'setReviewRows' is assigned a value but never used.","no-redeclare","'totalValue' is already defined.","redeclared","'percentage' is assigned a value but never used.","'useNavigate' is defined but never used.","'useSettingsContext' is defined but never used.","'getPendingRestaurantBranches' is defined but never used.","'getPendingMarketBranches' is defined but never used.","'dateTextSx' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dates'. Either include it or remove the dependency array.",["4522"],"'TableRow' is defined but never used.","'getAllOrders' is defined but never used.","'BranchesSection' is defined but never used.","'locationHolder' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'marketWorkTimes' and 'restaurantWorkTimes'. Either include them or remove the dependency array.",["4523"],"'Chart' is defined but never used.","'miniTextSx' is assigned a value but never used.","'labelTextSx' is assigned a value but never used.","'changeTextSx' is assigned a value but never used.","'getRestaurantReview' is defined but never used.","'getMarketReview' is defined but never used.","'setWorkingTimes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'RestaurantsReviews' and 'marketReviews'. Either include them or remove the dependency array.",["4524"],"'monthsInQuarter' is defined but never used.","'monthsName' is assigned a value but never used.","'isLoadingEmployee' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchId' and 'dates'. Either include them or remove the dependency array.",["4525"],"'_rankingList' is defined but never used.","'ConfirmDialog' is defined but never used.",["4526"],"'makeStyles' is defined but never used.","'restaurantsMostSelling' is assigned a value but never used.","'MarketMostSelling' is assigned a value but never used.","'marketIncome' is assigned a value but never used.","'isLoadingMarketHighestIncome' is assigned a value but never used.","'getInquiriesBySubject' is defined but never used.","'inquiry' is assigned a value but never used.","'monthSelectSx' is assigned a value but never used.","'highestIncomeBranchesSales' is assigned a value but never used.","'getRestaurantOrderNumber' is defined but never used.","'getMarketOrdersNumber' is defined but never used.","'CoPresentOutlined' is defined but never used.","'customOption' is assigned a value but never used.","'DatePicker' is defined but never used.","'_newBranchesList' is defined but never used.","'_newBranchesList2' is defined but never used.","'CustomCalender' is defined but never used.","'SpecialDatePicker' is defined but never used.","'defaultPopperSx' is assigned a value but never used.","'defaulttxtFieldSx' is assigned a value but never used.","'openDatePicker' is assigned a value but never used.","'setOpenDatePicker' is assigned a value but never used.","'openSecondPicker' is assigned a value but never used.","'setOpenSecondPicker' is assigned a value but never used.",["4527"],"'handleFirstDatePicker' is assigned a value but never used.","'handleSecondtDatePicker' is assigned a value but never used.","'iconImgSx' is assigned a value but never used.","'getAllBranches' is defined but never used.","'isDeleted' is assigned a value but never used.","'_mybranchesList2' is defined but never used.","'TablePaginationCustom' is defined but never used.","'TableTopSection2' is defined but never used.","'allbranchesMarket' is assigned a value but never used.","'onChangeDense' is assigned a value but never used.",["4528"],"'PATH_DASHBOARD' is defined but never used.","'MenuPopover' is defined but never used.","'IconButtonAnimate' is defined but never used.","'allLangs' is assigned a value but never used.","'openPopover' is assigned a value but never used.","'handleOpenPopover' is assigned a value but never used.","'getMarketMenu' is defined but never used.","'innerBoxStyle' is assigned a value but never used.","'typoStyle2' is assigned a value but never used.","'onEditRow' is assigned a value but never used.","'onDeleteRow' is assigned a value but never used.","'openConfirm2' is assigned a value but never used.","'openPopover2' is assigned a value but never used.","'setOpenPopover2' is assigned a value but never used.","'handleOpenConfirm2' is assigned a value but never used.","'restaurantCategories' is assigned a value but never used.","'status' is assigned a value but never used.","'handleCloseConfirm2' is assigned a value but never used.","'handleClosePopover2' is assigned a value but never used.","'clear' is defined but never used.","'marketCategories' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'CustomConfirmDialog2' is defined but never used.","'smallBoxStyle' is assigned a value but never used.","'typoStyle4' is assigned a value but never used.","'products' is assigned a value but never used.","'memo' is defined but never used.","'APPBAR_MOBILE' is assigned a value but never used.","'APPBAR_DESKTOP' is assigned a value but never used.","'searchQuery' is assigned a value but never used.","'setSearchQuery' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'open'. Either include it or remove the dependency array.",["4529"],["4530"],"'getInquiry' is defined but never used.","'id' is assigned a value but never used.","'alpha' is defined but never used.",["4531"],["4532"],"'rateCellSx' is assigned a value but never used.","'getMarketReviews' is defined but never used.","'MarketId' is assigned a value but never used.","'getMarketPendingOrder' is defined but never used.","'marketId' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'TableHead' is defined but never used.","'handleChange' is assigned a value but never used.","'Calender' is defined but never used.","'Controller' is defined but never used.","'useFormContext' is defined but never used.","'rightCellBorderStyle' is assigned a value but never used.","'orderId' is assigned a value but never used.","'deliveredFromFacility' is assigned a value but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'OrdersListSection' is defined but never used.","'MenuList' is defined but never used.","'statusTextSx' is assigned a value but never used.","'handleOpenConfirm' is assigned a value but never used.","'handleClosePopover' is assigned a value but never used.","'position' is defined but never used.","'menuStyle' is assigned a value but never used.","'itemMenuStyle' is assigned a value but never used.","'borderStyle' is assigned a value but never used.","'photo' is assigned a value but never used.","'rate' is assigned a value but never used.","'RHFSwitch' is defined but never used.","'Link' is defined but never used.","'inActiveSwitchSx' is assigned a value but never used.","'disabledLinkSx' is assigned a value but never used.","'activeLinkSx' is assigned a value but never used.","'creationDate' is assigned a value but never used.","'fromDate' is assigned a value but never used.","'changeFromDataHandler' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'secondName' is assigned a value but never used.","'lat' is assigned a value but never used.","'lon' is assigned a value but never used.","'dataCompleteness' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'isDeletedMarket' is assigned a value but never used.","'PRIMARY_LIGHT' is assigned a value but never used.","'PRIMARY_MAIN' is assigned a value but never used.","'PRIMARY_DARK' is assigned a value but never used.","'ListItemText' is defined but never used.","'pathname' is assigned a value but never used.",["4533"],["4534"],["4535"],["4536"],"'EmptyContent' is defined but never used.","'subjet' is assigned a value but never used.",["4537"],"'isLoadingOrderNumbers' is assigned a value but never used.",["4538"],"'selectedIndex' is assigned a value but never used.",["4539"],["4540"],"'ListSubheader' is defined but never used.","'isLight' is assigned a value but never used.",["4541"],["4542"],"'roles' is assigned a value but never used.","'renderItem' is assigned a value but never used.",{"desc":"4543","fix":"4544"},{"kind":"4545","justification":"4546"},{"desc":"4547","fix":"4548"},{"kind":"4545","justification":"4546"},{"desc":"4549","fix":"4550"},{"desc":"4551","fix":"4552"},{"desc":"4549","fix":"4553"},{"desc":"4554","fix":"4555"},{"desc":"4556","fix":"4557"},{"desc":"4558","fix":"4559"},{"desc":"4560","fix":"4561"},{"desc":"4562","fix":"4563"},{"desc":"4564","fix":"4565"},{"desc":"4566","fix":"4567"},{"desc":"4549","fix":"4568"},{"desc":"4569","fix":"4570"},{"desc":"4571","fix":"4572"},{"desc":"4549","fix":"4573"},{"desc":"4574","fix":"4575"},{"desc":"4569","fix":"4576"},{"desc":"4577","fix":"4578"},{"desc":"4577","fix":"4579"},{"desc":"4580","fix":"4581"},{"desc":"4582","fix":"4583"},{"desc":"4584","fix":"4585"},{"desc":"4549","fix":"4586"},{"desc":"4587","fix":"4588"},{"desc":"4577","fix":"4589"},{"desc":"4566","fix":"4590"},{"desc":"4591","fix":"4592"},{"desc":"4549","fix":"4593"},{"desc":"4594","fix":"4595"},{"desc":"4577","fix":"4596"},{"desc":"4597","fix":"4598"},{"kind":"4545","justification":"4546"},{"desc":"4599","fix":"4600"},{"kind":"4545","justification":"4546"},{"desc":"4599","fix":"4601"},{"kind":"4545","justification":"4546"},{"desc":"4602","fix":"4603"},{"desc":"4604","fix":"4605"},{"desc":"4606","fix":"4607"},{"desc":"4608","fix":"4609"},{"desc":"4610","fix":"4611"},{"desc":"4612","fix":"4613"},{"desc":"4614","fix":"4615"},{"desc":"4616","fix":"4617"},{"desc":"4618","fix":"4619"},{"desc":"4612","fix":"4620"},{"desc":"4612","fix":"4621"},{"desc":"4612","fix":"4622"},{"desc":"4623","fix":"4624"},{"kind":"4545","justification":"4546"},{"desc":"4623","fix":"4625"},{"kind":"4545","justification":"4546"},{"desc":"4623","fix":"4626"},{"kind":"4545","justification":"4546"},{"desc":"4623","fix":"4627"},{"kind":"4545","justification":"4546"},{"desc":"4549","fix":"4628"},{"desc":"4549","fix":"4629"},{"desc":"4623","fix":"4630"},{"kind":"4545","justification":"4546"},{"desc":"4623","fix":"4631"},{"kind":"4545","justification":"4546"},"Update the dependencies array to be: [isArabic, onChangeDirectionByLang]",{"range":"4632","text":"4633"},"directive","","Update the dependencies array to be: [isContrastBold, isLight, outerTheme.customShadows.z4, outerTheme.palette.grey]",{"range":"4634","text":"4635"},"Update the dependencies array to be: [branchId, dispatch]",{"range":"4636","text":"4637"},"Update the dependencies array to be: [RestaurantProductId, branchId, dispatch]",{"range":"4638","text":"4639"},{"range":"4640","text":"4637"},"Update the dependencies array to be: [dispatch, availableChecked, mealStatusIsUpdated, menuRestaurent, mealId, branchId]",{"range":"4641","text":"4642"},"Update the dependencies array to be: [ComboId, branchId, comboOfferDetails, dispatch, state?.id]",{"range":"4643","text":"4644"},"Update the dependencies array to be: [dispatch, isSubmitAdmin, open]",{"range":"4645","text":"4646"},"Update the dependencies array to be: [bankAccounts]",{"range":"4647","text":"4648"},"Update the dependencies array to be: [branchId, dispatch, productsForOffer]",{"range":"4649","text":"4650"},"Update the dependencies array to be: [dispatch, mealStatusIsUpdated, catStatusIsUpdated, availableChecked, branchId]",{"range":"4651","text":"4652"},"Update the dependencies array to be: [dispatch]",{"range":"4653","text":"4654"},{"range":"4655","text":"4637"},"Update the dependencies array to be: [branchId, categoryId, dispatch]",{"range":"4656","text":"4657"},"Update the dependencies array to be: [dispatch, isLoadingUpdateSubCategory]",{"range":"4658","text":"4659"},{"range":"4660","text":"4637"},"Update the dependencies array to be: [branchId, dispatch, subCatStatusIsUpdated]",{"range":"4661","text":"4662"},{"range":"4663","text":"4657"},"Update the dependencies array to be: [AdminId, dispatch]",{"range":"4664","text":"4665"},{"range":"4666","text":"4665"},"Update the dependencies array to be: [branchId, currentDate, dispatch]",{"range":"4667","text":"4668"},"Update the dependencies array to be: [dispatch, availableChecked, branchId, currentDate]",{"range":"4669","text":"4670"},"Update the dependencies array to be: [dispatch, orderStatusIsUpdated, availableChecked, resturantId, branchId, marketId, MarketId]",{"range":"4671","text":"4672"},{"range":"4673","text":"4637"},"Update the dependencies array to be: [branchId, currentDate, dispatch, previoustDate]",{"range":"4674","text":"4675"},{"range":"4676","text":"4665"},{"range":"4677","text":"4654"},"Update the dependencies array to be: [dispatch, currentYearDate, previousYearDate, initialBranch?.id]",{"range":"4678","text":"4679"},{"range":"4680","text":"4637"},"Update the dependencies array to be: []",{"range":"4681","text":"4682"},{"range":"4683","text":"4665"},"Update the dependencies array to be: [dispatch, profilePic]",{"range":"4684","text":"4685"},"Update the dependencies array to be: [onCloseNav, openNav, pathname]",{"range":"4686","text":"4687"},{"range":"4688","text":"4687"},"Update the dependencies array to be: [dispatch, deleteCategorySuccessfully, branchId]",{"range":"4689","text":"4690"},"Update the dependencies array to be: [branchId, dispatch, isDeletedProduct, menuRestaurent]",{"range":"4691","text":"4692"},"Update the dependencies array to be: [branchId, dispatch, isDeletedOffer, offersRestaurent]",{"range":"4693","text":"4694"},"Update the dependencies array to be: [dispatch, isDeletedCategories, marketCategories, marketId]",{"range":"4695","text":"4696"},"Update the dependencies array to be: [dispatch, isDeletedProduct, marketId, products]",{"range":"4697","text":"4698"},"Update the dependencies array to be: [dates, dispatch]",{"range":"4699","text":"4700"},"Update the dependencies array to be: [dispatch, info, workTimes, restaurantDetails, marketDetails, restaurantWorkTimes, marketWorkTimes]",{"range":"4701","text":"4702"},"Update the dependencies array to be: [RestaurantsReviews, marketReviews, reviews]",{"range":"4703","text":"4704"},"Update the dependencies array to be: [branchId, dates, dispatch]",{"range":"4705","text":"4706"},{"range":"4707","text":"4700"},{"range":"4708","text":"4700"},{"range":"4709","text":"4700"},"Update the dependencies array to be: [open, pathname]",{"range":"4710","text":"4711"},{"range":"4712","text":"4711"},{"range":"4713","text":"4711"},{"range":"4714","text":"4711"},{"range":"4715","text":"4637"},{"range":"4716","text":"4637"},{"range":"4717","text":"4711"},{"range":"4718","text":"4711"},[1856,1866],"[isArabic, onChangeDirectionByLang]",[1283,1307],"[isContrastBold, isLight, outerTheme.customShadows.z4, outerTheme.palette.grey]",[10569,10579],"[branchId, dispatch]",[11911,11921],"[RestaurantProductId, branchId, dispatch]",[12663,12673],[7381,7446],"[dispatch, availableChecked, mealStatusIsUpdated, menuRestaurent, mealId, branchId]",[12253,12263],"[ComboId, branchId, comboOfferDetails, dispatch, state?.id]",[4986,5007],"[dispatch, isSubmitAdmin, open]",[5599,5601],"[bankAccounts]",[4375,4377],"[branchId, dispatch, productsForOffer]",[4434,4503],"[dispatch, mealStatusIsUpdated, catStatusIsUpdated, availableChecked, branchId]",[2907,2909],"[dispatch]",[2318,2328],[6677,6689],"[branchId, categoryId, dispatch]",[3140,3168],"[dispatch, isLoadingUpdateSubCategory]",[3261,3263],[3517,3550],"[branchId, dispatch, subCatStatusIsUpdated]",[6172,6184],[6253,6263],"[AdminId, dispatch]",[10975,10985],[2115,2125],"[branchId, currentDate, dispatch]",[4367,4395],"[dispatch, availableChecked, branchId, currentDate]",[4738,4788],"[dispatch, orderStatusIsUpdated, availableChecked, resturantId, branchId, marketId, MarketId]",[2538,2540],[1775,1785],"[branchId, currentDate, dispatch, previoustDate]",[7846,7856],[8318,8320],[4399,4444],"[dispatch, currentYearDate, previousYearDate, initialBranch?.id]",[2472,2474],[2998,3008],"[]",[5811,5821],[9120,9132],"[dispatch, profilePic]",[946,956],"[onCloseNav, openNav, pathname]",[914,924],[7246,7284],"[dispatch, deleteCategorySuccessfully, branchId]",[7172,7216],"[branchId, dispatch, isDeletedProduct, menuRestaurent]",[7201,7245],"[branchId, dispatch, isDeletedOffer, offersRestaurent]",[6759,6808],"[dispatch, isDeletedCategories, marketCategories, marketId]",[6972,7010],"[dispatch, isDeletedProduct, marketId, products]",[9290,9300],"[dates, dispatch]",[3154,3215],"[dispatch, info, workTimes, restaurantDetails, marketDetails, restaurantWorkTimes, marketWorkTimes]",[3038,3047],"[RestaurantsReviews, marketReviews, reviews]",[8714,8724],"[branchId, dates, dispatch]",[9493,9503],[10486,10496],[8591,8601],[2660,2670],"[open, pathname]",[2018,2028],[2479,2489],[2479,2489],[3146,3156],[2198,2208],[833,843],[833,843]]