{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n//services\nimport { getCitiesForCountry, getCountriesWithThierCities, getNationalities, getPlatforms, getStoreTypes } from \"../services/countries_service\";\n\n// ----------------------------------------------------------------------\n\nconst slice = createSlice({\n  name: \"countries\",\n  initialState: {\n    isLoadingCountries: false,\n    isLoadingCity: false,\n    isLoadingNationalities: [],\n    isLoadingStoreTypes: false,\n    error: null,\n    countries: [],\n    cities: [],\n    nationalities: [],\n    isLoadingPlatforms: [],\n    platforms: [],\n    storeTypes: []\n  },\n  reducers: {},\n  extraReducers: {\n    //get Countries With Thier Cities\n\n    [getCountriesWithThierCities.fulfilled]: (state, action) => {\n      state.isLoadingCountries = false;\n      console.log(action.payload.data);\n      state.countries = action.payload.data;\n    },\n    [getCountriesWithThierCities.rejected]: (state, action) => {\n      state.isLoadingCountries = false;\n    },\n    [getCountriesWithThierCities.pending]: state => {\n      state.isLoadingCountries = true;\n    },\n    //get Cities For Country\n    [getCitiesForCountry.fulfilled]: (state, action) => {\n      state.isLoadingCity = false;\n      state.cities = action.payload.data;\n    },\n    [getCitiesForCountry.rejected]: (state, action) => {\n      state.isLoadingCity = false;\n    },\n    [getCitiesForCountry.pending]: state => {\n      state.isLoadingCity = true;\n    },\n    //get Nationalities\n    [getNationalities.fulfilled]: (state, action) => {\n      state.isLoadingNationalities = false;\n      state.nationalities = action.payload.data;\n    },\n    [getNationalities.rejected]: (state, action) => {\n      state.isLoadingNationalities = false;\n    },\n    [getNationalities.pending]: state => {\n      state.isLoadingNationalities = true;\n    },\n    //get Nationalities\n    [getPlatforms.fulfilled]: (state, action) => {\n      state.isLoadingPlatforms = false;\n      state.platforms = action.payload.data;\n    },\n    [getPlatforms.rejected]: (state, action) => {\n      state.isLoadingPlatforms = false;\n    },\n    [getPlatforms.pending]: state => {\n      state.isLoadingPlatforms = true;\n    },\n    //get StoreTypes\n    [getStoreTypes.fulfilled]: (state, action) => {\n      state.isLoadingStoreTypes = false;\n      state.storeTypes = action.payload.data;\n    },\n    [getStoreTypes.rejected]: (state, action) => {\n      state.isLoadingStoreTypes = false;\n    },\n    [getStoreTypes.pending]: state => {\n      state.isLoadingStoreTypes = true;\n    }\n  }\n});\n\n// Reducer\nexport default slice.reducer;","map":{"version":3,"names":["createSlice","getCitiesForCountry","getCountriesWithThierCities","getNationalities","getPlatforms","getStoreTypes","slice","name","initialState","isLoadingCountries","isLoadingCity","isLoadingNationalities","isLoadingStoreTypes","error","countries","cities","nationalities","isLoadingPlatforms","platforms","storeTypes","reducers","extraReducers","fulfilled","state","action","console","log","payload","data","rejected","pending","reducer"],"sources":["C:/Users/PC/Desktop/food-new-admin/src/redux/slices/countries.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n//services\r\nimport {\r\n  getCitiesForCountry,\r\n  getCountriesWithThierCities,\r\n  getNationalities,\r\n  getPlatforms,\r\n  getStoreTypes,\r\n} from \"../services/countries_service\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst slice = createSlice({\r\n  name: \"countries\",\r\n  initialState: {\r\n    isLoadingCountries: false,\r\n    isLoadingCity: false,\r\n    isLoadingNationalities: [],\r\n    isLoadingStoreTypes: false,\r\n    error: null,\r\n    countries: [],\r\n    cities: [],\r\n    nationalities: [],\r\n    isLoadingPlatforms: [],\r\n    platforms: [],\r\n    storeTypes: [],\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    //get Countries With Thier Cities\r\n\r\n    [getCountriesWithThierCities.fulfilled]: (state, action) => {\r\n      state.isLoadingCountries = false;\r\n      console.log(action.payload.data);\r\n      state.countries = action.payload.data;\r\n    },\r\n    [getCountriesWithThierCities.rejected]: (state, action) => {\r\n      state.isLoadingCountries = false;\r\n    },\r\n    [getCountriesWithThierCities.pending]: (state) => {\r\n      state.isLoadingCountries = true;\r\n    },\r\n\r\n    //get Cities For Country\r\n    [getCitiesForCountry.fulfilled]: (state, action) => {\r\n      state.isLoadingCity = false;\r\n      state.cities = action.payload.data;\r\n    },\r\n    [getCitiesForCountry.rejected]: (state, action) => {\r\n      state.isLoadingCity = false;\r\n    },\r\n    [getCitiesForCountry.pending]: (state) => {\r\n      state.isLoadingCity = true;\r\n    },\r\n\r\n    //get Nationalities\r\n    [getNationalities.fulfilled]: (state, action) => {\r\n      state.isLoadingNationalities = false;\r\n      state.nationalities = action.payload.data;\r\n    },\r\n    [getNationalities.rejected]: (state, action) => {\r\n      state.isLoadingNationalities = false;\r\n    },\r\n    [getNationalities.pending]: (state) => {\r\n      state.isLoadingNationalities = true;\r\n    },\r\n\r\n    //get Nationalities\r\n    [getPlatforms.fulfilled]: (state, action) => {\r\n      state.isLoadingPlatforms = false;\r\n      state.platforms = action.payload.data;\r\n    },\r\n    [getPlatforms.rejected]: (state, action) => {\r\n      state.isLoadingPlatforms = false;\r\n    },\r\n    [getPlatforms.pending]: (state) => {\r\n      state.isLoadingPlatforms = true;\r\n    },\r\n\r\n    //get StoreTypes\r\n    [getStoreTypes.fulfilled]: (state, action) => {\r\n      state.isLoadingStoreTypes = false;\r\n      state.storeTypes = action.payload.data;\r\n    },\r\n    [getStoreTypes.rejected]: (state, action) => {\r\n      state.isLoadingStoreTypes = false;\r\n    },\r\n    [getStoreTypes.pending]: (state) => {\r\n      state.isLoadingStoreTypes = true;\r\n    },\r\n  },\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}